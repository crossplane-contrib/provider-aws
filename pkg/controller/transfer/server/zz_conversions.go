/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package server

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/transfer"

	svcapitypes "github.com/crossplane/provider-aws/apis/transfer/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeServerInput returns input for read
// operation.
func GenerateDescribeServerInput(cr *svcapitypes.Server) *svcsdk.DescribeServerInput {
	res := &svcsdk.DescribeServerInput{}

	if cr.Status.AtProvider.ServerID != nil {
		res.SetServerId(*cr.Status.AtProvider.ServerID)
	}

	return res
}

// GenerateServer returns the current state in the form of *svcapitypes.Server.
func GenerateServer(resp *svcsdk.DescribeServerOutput) *svcapitypes.Server {
	cr := &svcapitypes.Server{}

	if resp.Server.Certificate != nil {
		cr.Spec.ForProvider.Certificate = resp.Server.Certificate
	} else {
		cr.Spec.ForProvider.Certificate = nil
	}
	if resp.Server.Domain != nil {
		cr.Spec.ForProvider.Domain = resp.Server.Domain
	} else {
		cr.Spec.ForProvider.Domain = nil
	}
	if resp.Server.EndpointType != nil {
		cr.Spec.ForProvider.EndpointType = resp.Server.EndpointType
	} else {
		cr.Spec.ForProvider.EndpointType = nil
	}
	if resp.Server.IdentityProviderDetails != nil {
		f6 := &svcapitypes.IdentityProviderDetails{}
		if resp.Server.IdentityProviderDetails.InvocationRole != nil {
			f6.InvocationRole = resp.Server.IdentityProviderDetails.InvocationRole
		}
		if resp.Server.IdentityProviderDetails.Url != nil {
			f6.URL = resp.Server.IdentityProviderDetails.Url
		}
		cr.Spec.ForProvider.IdentityProviderDetails = f6
	} else {
		cr.Spec.ForProvider.IdentityProviderDetails = nil
	}
	if resp.Server.IdentityProviderType != nil {
		cr.Spec.ForProvider.IdentityProviderType = resp.Server.IdentityProviderType
	} else {
		cr.Spec.ForProvider.IdentityProviderType = nil
	}
	if resp.Server.LoggingRole != nil {
		cr.Spec.ForProvider.LoggingRole = resp.Server.LoggingRole
	} else {
		cr.Spec.ForProvider.LoggingRole = nil
	}
	if resp.Server.Protocols != nil {
		f9 := []*string{}
		for _, f9iter := range resp.Server.Protocols {
			var f9elem string
			f9elem = *f9iter
			f9 = append(f9, &f9elem)
		}
		cr.Spec.ForProvider.Protocols = f9
	} else {
		cr.Spec.ForProvider.Protocols = nil
	}
	if resp.Server.SecurityPolicyName != nil {
		cr.Spec.ForProvider.SecurityPolicyName = resp.Server.SecurityPolicyName
	} else {
		cr.Spec.ForProvider.SecurityPolicyName = nil
	}
	if resp.Server.ServerId != nil {
		cr.Status.AtProvider.ServerID = resp.Server.ServerId
	} else {
		cr.Status.AtProvider.ServerID = nil
	}
	if resp.Server.Tags != nil {
		f13 := []*svcapitypes.Tag{}
		for _, f13iter := range resp.Server.Tags {
			f13elem := &svcapitypes.Tag{}
			if f13iter.Key != nil {
				f13elem.Key = f13iter.Key
			}
			if f13iter.Value != nil {
				f13elem.Value = f13iter.Value
			}
			f13 = append(f13, f13elem)
		}
		cr.Spec.ForProvider.Tags = f13
	} else {
		cr.Spec.ForProvider.Tags = nil
	}

	return cr
}

// GenerateCreateServerInput returns a create input.
func GenerateCreateServerInput(cr *svcapitypes.Server) *svcsdk.CreateServerInput {
	res := &svcsdk.CreateServerInput{}

	if cr.Spec.ForProvider.Certificate != nil {
		res.SetCertificate(*cr.Spec.ForProvider.Certificate)
	}
	if cr.Spec.ForProvider.Domain != nil {
		res.SetDomain(*cr.Spec.ForProvider.Domain)
	}
	if cr.Spec.ForProvider.EndpointType != nil {
		res.SetEndpointType(*cr.Spec.ForProvider.EndpointType)
	}
	if cr.Spec.ForProvider.HostKey != nil {
		res.SetHostKey(*cr.Spec.ForProvider.HostKey)
	}
	if cr.Spec.ForProvider.IdentityProviderDetails != nil {
		f4 := &svcsdk.IdentityProviderDetails{}
		if cr.Spec.ForProvider.IdentityProviderDetails.InvocationRole != nil {
			f4.SetInvocationRole(*cr.Spec.ForProvider.IdentityProviderDetails.InvocationRole)
		}
		if cr.Spec.ForProvider.IdentityProviderDetails.URL != nil {
			f4.SetUrl(*cr.Spec.ForProvider.IdentityProviderDetails.URL)
		}
		res.SetIdentityProviderDetails(f4)
	}
	if cr.Spec.ForProvider.IdentityProviderType != nil {
		res.SetIdentityProviderType(*cr.Spec.ForProvider.IdentityProviderType)
	}
	if cr.Spec.ForProvider.LoggingRole != nil {
		res.SetLoggingRole(*cr.Spec.ForProvider.LoggingRole)
	}
	if cr.Spec.ForProvider.Protocols != nil {
		f7 := []*string{}
		for _, f7iter := range cr.Spec.ForProvider.Protocols {
			var f7elem string
			f7elem = *f7iter
			f7 = append(f7, &f7elem)
		}
		res.SetProtocols(f7)
	}
	if cr.Spec.ForProvider.SecurityPolicyName != nil {
		res.SetSecurityPolicyName(*cr.Spec.ForProvider.SecurityPolicyName)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f9 := []*svcsdk.Tag{}
		for _, f9iter := range cr.Spec.ForProvider.Tags {
			f9elem := &svcsdk.Tag{}
			if f9iter.Key != nil {
				f9elem.SetKey(*f9iter.Key)
			}
			if f9iter.Value != nil {
				f9elem.SetValue(*f9iter.Value)
			}
			f9 = append(f9, f9elem)
		}
		res.SetTags(f9)
	}

	return res
}

// GenerateUpdateServerInput returns an update input.
func GenerateUpdateServerInput(cr *svcapitypes.Server) *svcsdk.UpdateServerInput {
	res := &svcsdk.UpdateServerInput{}

	if cr.Spec.ForProvider.Certificate != nil {
		res.SetCertificate(*cr.Spec.ForProvider.Certificate)
	}
	if cr.Spec.ForProvider.EndpointType != nil {
		res.SetEndpointType(*cr.Spec.ForProvider.EndpointType)
	}
	if cr.Spec.ForProvider.HostKey != nil {
		res.SetHostKey(*cr.Spec.ForProvider.HostKey)
	}
	if cr.Spec.ForProvider.IdentityProviderDetails != nil {
		f4 := &svcsdk.IdentityProviderDetails{}
		if cr.Spec.ForProvider.IdentityProviderDetails.InvocationRole != nil {
			f4.SetInvocationRole(*cr.Spec.ForProvider.IdentityProviderDetails.InvocationRole)
		}
		if cr.Spec.ForProvider.IdentityProviderDetails.URL != nil {
			f4.SetUrl(*cr.Spec.ForProvider.IdentityProviderDetails.URL)
		}
		res.SetIdentityProviderDetails(f4)
	}
	if cr.Spec.ForProvider.LoggingRole != nil {
		res.SetLoggingRole(*cr.Spec.ForProvider.LoggingRole)
	}
	if cr.Spec.ForProvider.Protocols != nil {
		f6 := []*string{}
		for _, f6iter := range cr.Spec.ForProvider.Protocols {
			var f6elem string
			f6elem = *f6iter
			f6 = append(f6, &f6elem)
		}
		res.SetProtocols(f6)
	}
	if cr.Spec.ForProvider.SecurityPolicyName != nil {
		res.SetSecurityPolicyName(*cr.Spec.ForProvider.SecurityPolicyName)
	}
	if cr.Status.AtProvider.ServerID != nil {
		res.SetServerId(*cr.Status.AtProvider.ServerID)
	}

	return res
}

// GenerateDeleteServerInput returns a deletion input.
func GenerateDeleteServerInput(cr *svcapitypes.Server) *svcsdk.DeleteServerInput {
	res := &svcsdk.DeleteServerInput{}

	if cr.Status.AtProvider.ServerID != nil {
		res.SetServerId(*cr.Status.AtProvider.ServerID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
