/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package userpool

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/cognitoidentityprovider/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeUserPoolInput returns input for read
// operation.
func GenerateDescribeUserPoolInput(cr *svcapitypes.UserPool) *svcsdk.DescribeUserPoolInput {
	res := &svcsdk.DescribeUserPoolInput{}

	return res
}

// GenerateUserPool returns the current state in the form of *svcapitypes.UserPool.
func GenerateUserPool(resp *svcsdk.DescribeUserPoolOutput) *svcapitypes.UserPool {
	cr := &svcapitypes.UserPool{}

	if resp.UserPool.AccountRecoverySetting != nil {
		f0 := &svcapitypes.AccountRecoverySettingType{}
		if resp.UserPool.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []*svcapitypes.RecoveryOptionType{}
			for _, f0f0iter := range resp.UserPool.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcapitypes.RecoveryOptionType{}
				if f0f0iter.Name != nil {
					f0f0elem.Name = f0f0iter.Name
				}
				if f0f0iter.Priority != nil {
					f0f0elem.Priority = f0f0iter.Priority
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.RecoveryMechanisms = f0f0
		}
		cr.Spec.ForProvider.AccountRecoverySetting = f0
	} else {
		cr.Spec.ForProvider.AccountRecoverySetting = nil
	}
	if resp.UserPool.AdminCreateUserConfig != nil {
		f1 := &svcapitypes.AdminCreateUserConfigType{}
		if resp.UserPool.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil {
			f1.AllowAdminCreateUserOnly = resp.UserPool.AdminCreateUserConfig.AllowAdminCreateUserOnly
		}
		if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcapitypes.MessageTemplateType{}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.EmailMessage = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage
			}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.EmailSubject = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject
			}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SMSMessage = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage
			}
			f1.InviteMessageTemplate = f1f1
		}
		if resp.UserPool.AdminCreateUserConfig.UnusedAccountValidityDays != nil {
			f1.UnusedAccountValidityDays = resp.UserPool.AdminCreateUserConfig.UnusedAccountValidityDays
		}
		cr.Spec.ForProvider.AdminCreateUserConfig = f1
	} else {
		cr.Spec.ForProvider.AdminCreateUserConfig = nil
	}
	if resp.UserPool.AliasAttributes != nil {
		f2 := []*string{}
		for _, f2iter := range resp.UserPool.AliasAttributes {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		cr.Spec.ForProvider.AliasAttributes = f2
	} else {
		cr.Spec.ForProvider.AliasAttributes = nil
	}
	if resp.UserPool.Arn != nil {
		cr.Status.AtProvider.ARN = resp.UserPool.Arn
	} else {
		cr.Status.AtProvider.ARN = nil
	}
	if resp.UserPool.AutoVerifiedAttributes != nil {
		f4 := []*string{}
		for _, f4iter := range resp.UserPool.AutoVerifiedAttributes {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		cr.Spec.ForProvider.AutoVerifiedAttributes = f4
	} else {
		cr.Spec.ForProvider.AutoVerifiedAttributes = nil
	}
	if resp.UserPool.CreationDate != nil {
		cr.Status.AtProvider.CreationDate = &metav1.Time{*resp.UserPool.CreationDate}
	} else {
		cr.Status.AtProvider.CreationDate = nil
	}
	if resp.UserPool.CustomDomain != nil {
		cr.Status.AtProvider.CustomDomain = resp.UserPool.CustomDomain
	} else {
		cr.Status.AtProvider.CustomDomain = nil
	}
	if resp.UserPool.DeviceConfiguration != nil {
		f7 := &svcapitypes.DeviceConfigurationType{}
		if resp.UserPool.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil {
			f7.ChallengeRequiredOnNewDevice = resp.UserPool.DeviceConfiguration.ChallengeRequiredOnNewDevice
		}
		if resp.UserPool.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil {
			f7.DeviceOnlyRememberedOnUserPrompt = resp.UserPool.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt
		}
		cr.Spec.ForProvider.DeviceConfiguration = f7
	} else {
		cr.Spec.ForProvider.DeviceConfiguration = nil
	}
	if resp.UserPool.Domain != nil {
		cr.Status.AtProvider.Domain = resp.UserPool.Domain
	} else {
		cr.Status.AtProvider.Domain = nil
	}
	if resp.UserPool.EmailConfiguration != nil {
		f9 := &svcapitypes.EmailConfigurationType{}
		if resp.UserPool.EmailConfiguration.ConfigurationSet != nil {
			f9.ConfigurationSet = resp.UserPool.EmailConfiguration.ConfigurationSet
		}
		if resp.UserPool.EmailConfiguration.EmailSendingAccount != nil {
			f9.EmailSendingAccount = resp.UserPool.EmailConfiguration.EmailSendingAccount
		}
		if resp.UserPool.EmailConfiguration.From != nil {
			f9.From = resp.UserPool.EmailConfiguration.From
		}
		if resp.UserPool.EmailConfiguration.ReplyToEmailAddress != nil {
			f9.ReplyToEmailAddress = resp.UserPool.EmailConfiguration.ReplyToEmailAddress
		}
		if resp.UserPool.EmailConfiguration.SourceArn != nil {
			f9.SourceARN = resp.UserPool.EmailConfiguration.SourceArn
		}
		cr.Spec.ForProvider.EmailConfiguration = f9
	} else {
		cr.Spec.ForProvider.EmailConfiguration = nil
	}
	if resp.UserPool.EmailConfigurationFailure != nil {
		cr.Status.AtProvider.EmailConfigurationFailure = resp.UserPool.EmailConfigurationFailure
	} else {
		cr.Status.AtProvider.EmailConfigurationFailure = nil
	}
	if resp.UserPool.EmailVerificationMessage != nil {
		cr.Spec.ForProvider.EmailVerificationMessage = resp.UserPool.EmailVerificationMessage
	} else {
		cr.Spec.ForProvider.EmailVerificationMessage = nil
	}
	if resp.UserPool.EmailVerificationSubject != nil {
		cr.Spec.ForProvider.EmailVerificationSubject = resp.UserPool.EmailVerificationSubject
	} else {
		cr.Spec.ForProvider.EmailVerificationSubject = nil
	}
	if resp.UserPool.EstimatedNumberOfUsers != nil {
		cr.Status.AtProvider.EstimatedNumberOfUsers = resp.UserPool.EstimatedNumberOfUsers
	} else {
		cr.Status.AtProvider.EstimatedNumberOfUsers = nil
	}
	if resp.UserPool.Id != nil {
		cr.Status.AtProvider.ID = resp.UserPool.Id
	} else {
		cr.Status.AtProvider.ID = nil
	}
	if resp.UserPool.LambdaConfig != nil {
		f15 := &svcapitypes.LambdaConfigType{}
		if resp.UserPool.LambdaConfig.CreateAuthChallenge != nil {
			f15.CreateAuthChallenge = resp.UserPool.LambdaConfig.CreateAuthChallenge
		}
		if resp.UserPool.LambdaConfig.CustomEmailSender != nil {
			f15f1 := &svcapitypes.CustomEmailLambdaVersionConfigType{}
			if resp.UserPool.LambdaConfig.CustomEmailSender.LambdaArn != nil {
				f15f1.LambdaARN = resp.UserPool.LambdaConfig.CustomEmailSender.LambdaArn
			}
			if resp.UserPool.LambdaConfig.CustomEmailSender.LambdaVersion != nil {
				f15f1.LambdaVersion = resp.UserPool.LambdaConfig.CustomEmailSender.LambdaVersion
			}
			f15.CustomEmailSender = f15f1
		}
		if resp.UserPool.LambdaConfig.CustomMessage != nil {
			f15.CustomMessage = resp.UserPool.LambdaConfig.CustomMessage
		}
		if resp.UserPool.LambdaConfig.CustomSMSSender != nil {
			f15f3 := &svcapitypes.CustomSMSLambdaVersionConfigType{}
			if resp.UserPool.LambdaConfig.CustomSMSSender.LambdaArn != nil {
				f15f3.LambdaARN = resp.UserPool.LambdaConfig.CustomSMSSender.LambdaArn
			}
			if resp.UserPool.LambdaConfig.CustomSMSSender.LambdaVersion != nil {
				f15f3.LambdaVersion = resp.UserPool.LambdaConfig.CustomSMSSender.LambdaVersion
			}
			f15.CustomSMSSender = f15f3
		}
		if resp.UserPool.LambdaConfig.DefineAuthChallenge != nil {
			f15.DefineAuthChallenge = resp.UserPool.LambdaConfig.DefineAuthChallenge
		}
		if resp.UserPool.LambdaConfig.KMSKeyID != nil {
			f15.KMSKeyID = resp.UserPool.LambdaConfig.KMSKeyID
		}
		if resp.UserPool.LambdaConfig.PostAuthentication != nil {
			f15.PostAuthentication = resp.UserPool.LambdaConfig.PostAuthentication
		}
		if resp.UserPool.LambdaConfig.PostConfirmation != nil {
			f15.PostConfirmation = resp.UserPool.LambdaConfig.PostConfirmation
		}
		if resp.UserPool.LambdaConfig.PreAuthentication != nil {
			f15.PreAuthentication = resp.UserPool.LambdaConfig.PreAuthentication
		}
		if resp.UserPool.LambdaConfig.PreSignUp != nil {
			f15.PreSignUp = resp.UserPool.LambdaConfig.PreSignUp
		}
		if resp.UserPool.LambdaConfig.PreTokenGeneration != nil {
			f15.PreTokenGeneration = resp.UserPool.LambdaConfig.PreTokenGeneration
		}
		if resp.UserPool.LambdaConfig.UserMigration != nil {
			f15.UserMigration = resp.UserPool.LambdaConfig.UserMigration
		}
		if resp.UserPool.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f15.VerifyAuthChallengeResponse = resp.UserPool.LambdaConfig.VerifyAuthChallengeResponse
		}
		cr.Spec.ForProvider.LambdaConfig = f15
	} else {
		cr.Spec.ForProvider.LambdaConfig = nil
	}
	if resp.UserPool.LastModifiedDate != nil {
		cr.Status.AtProvider.LastModifiedDate = &metav1.Time{*resp.UserPool.LastModifiedDate}
	} else {
		cr.Status.AtProvider.LastModifiedDate = nil
	}
	if resp.UserPool.MfaConfiguration != nil {
		cr.Spec.ForProvider.MFAConfiguration = resp.UserPool.MfaConfiguration
	} else {
		cr.Spec.ForProvider.MFAConfiguration = nil
	}
	if resp.UserPool.Name != nil {
		cr.Status.AtProvider.Name = resp.UserPool.Name
	} else {
		cr.Status.AtProvider.Name = nil
	}
	if resp.UserPool.Policies != nil {
		f19 := &svcapitypes.UserPoolPolicyType{}
		if resp.UserPool.Policies.PasswordPolicy != nil {
			f19f0 := &svcapitypes.PasswordPolicyType{}
			if resp.UserPool.Policies.PasswordPolicy.MinimumLength != nil {
				f19f0.MinimumLength = resp.UserPool.Policies.PasswordPolicy.MinimumLength
			}
			if resp.UserPool.Policies.PasswordPolicy.RequireLowercase != nil {
				f19f0.RequireLowercase = resp.UserPool.Policies.PasswordPolicy.RequireLowercase
			}
			if resp.UserPool.Policies.PasswordPolicy.RequireNumbers != nil {
				f19f0.RequireNumbers = resp.UserPool.Policies.PasswordPolicy.RequireNumbers
			}
			if resp.UserPool.Policies.PasswordPolicy.RequireSymbols != nil {
				f19f0.RequireSymbols = resp.UserPool.Policies.PasswordPolicy.RequireSymbols
			}
			if resp.UserPool.Policies.PasswordPolicy.RequireUppercase != nil {
				f19f0.RequireUppercase = resp.UserPool.Policies.PasswordPolicy.RequireUppercase
			}
			if resp.UserPool.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil {
				f19f0.TemporaryPasswordValidityDays = resp.UserPool.Policies.PasswordPolicy.TemporaryPasswordValidityDays
			}
			f19.PasswordPolicy = f19f0
		}
		cr.Spec.ForProvider.Policies = f19
	} else {
		cr.Spec.ForProvider.Policies = nil
	}
	if resp.UserPool.SchemaAttributes != nil {
		f20 := []*svcapitypes.SchemaAttributeType{}
		for _, f20iter := range resp.UserPool.SchemaAttributes {
			f20elem := &svcapitypes.SchemaAttributeType{}
			if f20iter.AttributeDataType != nil {
				f20elem.AttributeDataType = f20iter.AttributeDataType
			}
			if f20iter.DeveloperOnlyAttribute != nil {
				f20elem.DeveloperOnlyAttribute = f20iter.DeveloperOnlyAttribute
			}
			if f20iter.Mutable != nil {
				f20elem.Mutable = f20iter.Mutable
			}
			if f20iter.Name != nil {
				f20elem.Name = f20iter.Name
			}
			if f20iter.NumberAttributeConstraints != nil {
				f20elemf4 := &svcapitypes.NumberAttributeConstraintsType{}
				if f20iter.NumberAttributeConstraints.MaxValue != nil {
					f20elemf4.MaxValue = f20iter.NumberAttributeConstraints.MaxValue
				}
				if f20iter.NumberAttributeConstraints.MinValue != nil {
					f20elemf4.MinValue = f20iter.NumberAttributeConstraints.MinValue
				}
				f20elem.NumberAttributeConstraints = f20elemf4
			}
			if f20iter.Required != nil {
				f20elem.Required = f20iter.Required
			}
			if f20iter.StringAttributeConstraints != nil {
				f20elemf6 := &svcapitypes.StringAttributeConstraintsType{}
				if f20iter.StringAttributeConstraints.MaxLength != nil {
					f20elemf6.MaxLength = f20iter.StringAttributeConstraints.MaxLength
				}
				if f20iter.StringAttributeConstraints.MinLength != nil {
					f20elemf6.MinLength = f20iter.StringAttributeConstraints.MinLength
				}
				f20elem.StringAttributeConstraints = f20elemf6
			}
			f20 = append(f20, f20elem)
		}
		cr.Status.AtProvider.SchemaAttributes = f20
	} else {
		cr.Status.AtProvider.SchemaAttributes = nil
	}
	if resp.UserPool.SmsAuthenticationMessage != nil {
		cr.Spec.ForProvider.SmsAuthenticationMessage = resp.UserPool.SmsAuthenticationMessage
	} else {
		cr.Spec.ForProvider.SmsAuthenticationMessage = nil
	}
	if resp.UserPool.SmsConfiguration != nil {
		f22 := &svcapitypes.SmsConfigurationType{}
		if resp.UserPool.SmsConfiguration.ExternalId != nil {
			f22.ExternalID = resp.UserPool.SmsConfiguration.ExternalId
		}
		if resp.UserPool.SmsConfiguration.SnsCallerArn != nil {
			f22.SNSCallerARN = resp.UserPool.SmsConfiguration.SnsCallerArn
		}
		cr.Spec.ForProvider.SmsConfiguration = f22
	} else {
		cr.Spec.ForProvider.SmsConfiguration = nil
	}
	if resp.UserPool.SmsConfigurationFailure != nil {
		cr.Status.AtProvider.SmsConfigurationFailure = resp.UserPool.SmsConfigurationFailure
	} else {
		cr.Status.AtProvider.SmsConfigurationFailure = nil
	}
	if resp.UserPool.SmsVerificationMessage != nil {
		cr.Spec.ForProvider.SmsVerificationMessage = resp.UserPool.SmsVerificationMessage
	} else {
		cr.Spec.ForProvider.SmsVerificationMessage = nil
	}
	if resp.UserPool.Status != nil {
		cr.Status.AtProvider.Status = resp.UserPool.Status
	} else {
		cr.Status.AtProvider.Status = nil
	}
	if resp.UserPool.UserPoolAddOns != nil {
		f26 := &svcapitypes.UserPoolAddOnsType{}
		if resp.UserPool.UserPoolAddOns.AdvancedSecurityMode != nil {
			f26.AdvancedSecurityMode = resp.UserPool.UserPoolAddOns.AdvancedSecurityMode
		}
		cr.Spec.ForProvider.UserPoolAddOns = f26
	} else {
		cr.Spec.ForProvider.UserPoolAddOns = nil
	}
	if resp.UserPool.UserPoolTags != nil {
		f27 := map[string]*string{}
		for f27key, f27valiter := range resp.UserPool.UserPoolTags {
			var f27val string
			f27val = *f27valiter
			f27[f27key] = &f27val
		}
		cr.Spec.ForProvider.UserPoolTags = f27
	} else {
		cr.Spec.ForProvider.UserPoolTags = nil
	}
	if resp.UserPool.UsernameAttributes != nil {
		f28 := []*string{}
		for _, f28iter := range resp.UserPool.UsernameAttributes {
			var f28elem string
			f28elem = *f28iter
			f28 = append(f28, &f28elem)
		}
		cr.Spec.ForProvider.UsernameAttributes = f28
	} else {
		cr.Spec.ForProvider.UsernameAttributes = nil
	}
	if resp.UserPool.UsernameConfiguration != nil {
		f29 := &svcapitypes.UsernameConfigurationType{}
		if resp.UserPool.UsernameConfiguration.CaseSensitive != nil {
			f29.CaseSensitive = resp.UserPool.UsernameConfiguration.CaseSensitive
		}
		cr.Spec.ForProvider.UsernameConfiguration = f29
	} else {
		cr.Spec.ForProvider.UsernameConfiguration = nil
	}
	if resp.UserPool.VerificationMessageTemplate != nil {
		f30 := &svcapitypes.VerificationMessageTemplateType{}
		if resp.UserPool.VerificationMessageTemplate.DefaultEmailOption != nil {
			f30.DefaultEmailOption = resp.UserPool.VerificationMessageTemplate.DefaultEmailOption
		}
		if resp.UserPool.VerificationMessageTemplate.EmailMessage != nil {
			f30.EmailMessage = resp.UserPool.VerificationMessageTemplate.EmailMessage
		}
		if resp.UserPool.VerificationMessageTemplate.EmailMessageByLink != nil {
			f30.EmailMessageByLink = resp.UserPool.VerificationMessageTemplate.EmailMessageByLink
		}
		if resp.UserPool.VerificationMessageTemplate.EmailSubject != nil {
			f30.EmailSubject = resp.UserPool.VerificationMessageTemplate.EmailSubject
		}
		if resp.UserPool.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f30.EmailSubjectByLink = resp.UserPool.VerificationMessageTemplate.EmailSubjectByLink
		}
		if resp.UserPool.VerificationMessageTemplate.SmsMessage != nil {
			f30.SmsMessage = resp.UserPool.VerificationMessageTemplate.SmsMessage
		}
		cr.Spec.ForProvider.VerificationMessageTemplate = f30
	} else {
		cr.Spec.ForProvider.VerificationMessageTemplate = nil
	}

	return cr
}

// GenerateCreateUserPoolInput returns a create input.
func GenerateCreateUserPoolInput(cr *svcapitypes.UserPool) *svcsdk.CreateUserPoolInput {
	res := &svcsdk.CreateUserPoolInput{}

	if cr.Spec.ForProvider.AccountRecoverySetting != nil {
		f0 := &svcsdk.AccountRecoverySettingType{}
		if cr.Spec.ForProvider.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []*svcsdk.RecoveryOptionType{}
			for _, f0f0iter := range cr.Spec.ForProvider.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcsdk.RecoveryOptionType{}
				if f0f0iter.Name != nil {
					f0f0elem.SetName(*f0f0iter.Name)
				}
				if f0f0iter.Priority != nil {
					f0f0elem.SetPriority(*f0f0iter.Priority)
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.SetRecoveryMechanisms(f0f0)
		}
		res.SetAccountRecoverySetting(f0)
	}
	if cr.Spec.ForProvider.AdminCreateUserConfig != nil {
		f1 := &svcsdk.AdminCreateUserConfigType{}
		if cr.Spec.ForProvider.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil {
			f1.SetAllowAdminCreateUserOnly(*cr.Spec.ForProvider.AdminCreateUserConfig.AllowAdminCreateUserOnly)
		}
		if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcsdk.MessageTemplateType{}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.SetEmailMessage(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage)
			}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.SetEmailSubject(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject)
			}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SetSMSMessage(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage)
			}
			f1.SetInviteMessageTemplate(f1f1)
		}
		if cr.Spec.ForProvider.AdminCreateUserConfig.UnusedAccountValidityDays != nil {
			f1.SetUnusedAccountValidityDays(*cr.Spec.ForProvider.AdminCreateUserConfig.UnusedAccountValidityDays)
		}
		res.SetAdminCreateUserConfig(f1)
	}
	if cr.Spec.ForProvider.AliasAttributes != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.AliasAttributes {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetAliasAttributes(f2)
	}
	if cr.Spec.ForProvider.AutoVerifiedAttributes != nil {
		f3 := []*string{}
		for _, f3iter := range cr.Spec.ForProvider.AutoVerifiedAttributes {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		res.SetAutoVerifiedAttributes(f3)
	}
	if cr.Spec.ForProvider.DeviceConfiguration != nil {
		f4 := &svcsdk.DeviceConfigurationType{}
		if cr.Spec.ForProvider.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil {
			f4.SetChallengeRequiredOnNewDevice(*cr.Spec.ForProvider.DeviceConfiguration.ChallengeRequiredOnNewDevice)
		}
		if cr.Spec.ForProvider.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil {
			f4.SetDeviceOnlyRememberedOnUserPrompt(*cr.Spec.ForProvider.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt)
		}
		res.SetDeviceConfiguration(f4)
	}
	if cr.Spec.ForProvider.EmailConfiguration != nil {
		f5 := &svcsdk.EmailConfigurationType{}
		if cr.Spec.ForProvider.EmailConfiguration.ConfigurationSet != nil {
			f5.SetConfigurationSet(*cr.Spec.ForProvider.EmailConfiguration.ConfigurationSet)
		}
		if cr.Spec.ForProvider.EmailConfiguration.EmailSendingAccount != nil {
			f5.SetEmailSendingAccount(*cr.Spec.ForProvider.EmailConfiguration.EmailSendingAccount)
		}
		if cr.Spec.ForProvider.EmailConfiguration.From != nil {
			f5.SetFrom(*cr.Spec.ForProvider.EmailConfiguration.From)
		}
		if cr.Spec.ForProvider.EmailConfiguration.ReplyToEmailAddress != nil {
			f5.SetReplyToEmailAddress(*cr.Spec.ForProvider.EmailConfiguration.ReplyToEmailAddress)
		}
		if cr.Spec.ForProvider.EmailConfiguration.SourceARN != nil {
			f5.SetSourceArn(*cr.Spec.ForProvider.EmailConfiguration.SourceARN)
		}
		res.SetEmailConfiguration(f5)
	}
	if cr.Spec.ForProvider.EmailVerificationMessage != nil {
		res.SetEmailVerificationMessage(*cr.Spec.ForProvider.EmailVerificationMessage)
	}
	if cr.Spec.ForProvider.EmailVerificationSubject != nil {
		res.SetEmailVerificationSubject(*cr.Spec.ForProvider.EmailVerificationSubject)
	}
	if cr.Spec.ForProvider.LambdaConfig != nil {
		f8 := &svcsdk.LambdaConfigType{}
		if cr.Spec.ForProvider.LambdaConfig.CreateAuthChallenge != nil {
			f8.SetCreateAuthChallenge(*cr.Spec.ForProvider.LambdaConfig.CreateAuthChallenge)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender != nil {
			f8f1 := &svcsdk.CustomEmailLambdaVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaARN != nil {
				f8f1.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaVersion != nil {
				f8f1.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaVersion)
			}
			f8.SetCustomEmailSender(f8f1)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomMessage != nil {
			f8.SetCustomMessage(*cr.Spec.ForProvider.LambdaConfig.CustomMessage)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender != nil {
			f8f3 := &svcsdk.CustomSMSLambdaVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaARN != nil {
				f8f3.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaVersion != nil {
				f8f3.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaVersion)
			}
			f8.SetCustomSMSSender(f8f3)
		}
		if cr.Spec.ForProvider.LambdaConfig.DefineAuthChallenge != nil {
			f8.SetDefineAuthChallenge(*cr.Spec.ForProvider.LambdaConfig.DefineAuthChallenge)
		}
		if cr.Spec.ForProvider.LambdaConfig.KMSKeyID != nil {
			f8.SetKMSKeyID(*cr.Spec.ForProvider.LambdaConfig.KMSKeyID)
		}
		if cr.Spec.ForProvider.LambdaConfig.PostAuthentication != nil {
			f8.SetPostAuthentication(*cr.Spec.ForProvider.LambdaConfig.PostAuthentication)
		}
		if cr.Spec.ForProvider.LambdaConfig.PostConfirmation != nil {
			f8.SetPostConfirmation(*cr.Spec.ForProvider.LambdaConfig.PostConfirmation)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreAuthentication != nil {
			f8.SetPreAuthentication(*cr.Spec.ForProvider.LambdaConfig.PreAuthentication)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreSignUp != nil {
			f8.SetPreSignUp(*cr.Spec.ForProvider.LambdaConfig.PreSignUp)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreTokenGeneration != nil {
			f8.SetPreTokenGeneration(*cr.Spec.ForProvider.LambdaConfig.PreTokenGeneration)
		}
		if cr.Spec.ForProvider.LambdaConfig.UserMigration != nil {
			f8.SetUserMigration(*cr.Spec.ForProvider.LambdaConfig.UserMigration)
		}
		if cr.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f8.SetVerifyAuthChallengeResponse(*cr.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse)
		}
		res.SetLambdaConfig(f8)
	}
	if cr.Spec.ForProvider.MFAConfiguration != nil {
		res.SetMfaConfiguration(*cr.Spec.ForProvider.MFAConfiguration)
	}
	if cr.Spec.ForProvider.Policies != nil {
		f10 := &svcsdk.UserPoolPolicyType{}
		if cr.Spec.ForProvider.Policies.PasswordPolicy != nil {
			f10f0 := &svcsdk.PasswordPolicyType{}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.MinimumLength != nil {
				f10f0.SetMinimumLength(*cr.Spec.ForProvider.Policies.PasswordPolicy.MinimumLength)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireLowercase != nil {
				f10f0.SetRequireLowercase(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireLowercase)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireNumbers != nil {
				f10f0.SetRequireNumbers(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireNumbers)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireSymbols != nil {
				f10f0.SetRequireSymbols(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireSymbols)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireUppercase != nil {
				f10f0.SetRequireUppercase(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireUppercase)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil {
				f10f0.SetTemporaryPasswordValidityDays(*cr.Spec.ForProvider.Policies.PasswordPolicy.TemporaryPasswordValidityDays)
			}
			f10.SetPasswordPolicy(f10f0)
		}
		res.SetPolicies(f10)
	}
	if cr.Spec.ForProvider.PoolName != nil {
		res.SetPoolName(*cr.Spec.ForProvider.PoolName)
	}
	if cr.Spec.ForProvider.Schema != nil {
		f12 := []*svcsdk.SchemaAttributeType{}
		for _, f12iter := range cr.Spec.ForProvider.Schema {
			f12elem := &svcsdk.SchemaAttributeType{}
			if f12iter.AttributeDataType != nil {
				f12elem.SetAttributeDataType(*f12iter.AttributeDataType)
			}
			if f12iter.DeveloperOnlyAttribute != nil {
				f12elem.SetDeveloperOnlyAttribute(*f12iter.DeveloperOnlyAttribute)
			}
			if f12iter.Mutable != nil {
				f12elem.SetMutable(*f12iter.Mutable)
			}
			if f12iter.Name != nil {
				f12elem.SetName(*f12iter.Name)
			}
			if f12iter.NumberAttributeConstraints != nil {
				f12elemf4 := &svcsdk.NumberAttributeConstraintsType{}
				if f12iter.NumberAttributeConstraints.MaxValue != nil {
					f12elemf4.SetMaxValue(*f12iter.NumberAttributeConstraints.MaxValue)
				}
				if f12iter.NumberAttributeConstraints.MinValue != nil {
					f12elemf4.SetMinValue(*f12iter.NumberAttributeConstraints.MinValue)
				}
				f12elem.SetNumberAttributeConstraints(f12elemf4)
			}
			if f12iter.Required != nil {
				f12elem.SetRequired(*f12iter.Required)
			}
			if f12iter.StringAttributeConstraints != nil {
				f12elemf6 := &svcsdk.StringAttributeConstraintsType{}
				if f12iter.StringAttributeConstraints.MaxLength != nil {
					f12elemf6.SetMaxLength(*f12iter.StringAttributeConstraints.MaxLength)
				}
				if f12iter.StringAttributeConstraints.MinLength != nil {
					f12elemf6.SetMinLength(*f12iter.StringAttributeConstraints.MinLength)
				}
				f12elem.SetStringAttributeConstraints(f12elemf6)
			}
			f12 = append(f12, f12elem)
		}
		res.SetSchema(f12)
	}
	if cr.Spec.ForProvider.SmsAuthenticationMessage != nil {
		res.SetSmsAuthenticationMessage(*cr.Spec.ForProvider.SmsAuthenticationMessage)
	}
	if cr.Spec.ForProvider.SmsConfiguration != nil {
		f14 := &svcsdk.SmsConfigurationType{}
		if cr.Spec.ForProvider.SmsConfiguration.ExternalID != nil {
			f14.SetExternalId(*cr.Spec.ForProvider.SmsConfiguration.ExternalID)
		}
		if cr.Spec.ForProvider.SmsConfiguration.SNSCallerARN != nil {
			f14.SetSnsCallerArn(*cr.Spec.ForProvider.SmsConfiguration.SNSCallerARN)
		}
		res.SetSmsConfiguration(f14)
	}
	if cr.Spec.ForProvider.SmsVerificationMessage != nil {
		res.SetSmsVerificationMessage(*cr.Spec.ForProvider.SmsVerificationMessage)
	}
	if cr.Spec.ForProvider.UserPoolAddOns != nil {
		f16 := &svcsdk.UserPoolAddOnsType{}
		if cr.Spec.ForProvider.UserPoolAddOns.AdvancedSecurityMode != nil {
			f16.SetAdvancedSecurityMode(*cr.Spec.ForProvider.UserPoolAddOns.AdvancedSecurityMode)
		}
		res.SetUserPoolAddOns(f16)
	}
	if cr.Spec.ForProvider.UserPoolTags != nil {
		f17 := map[string]*string{}
		for f17key, f17valiter := range cr.Spec.ForProvider.UserPoolTags {
			var f17val string
			f17val = *f17valiter
			f17[f17key] = &f17val
		}
		res.SetUserPoolTags(f17)
	}
	if cr.Spec.ForProvider.UsernameAttributes != nil {
		f18 := []*string{}
		for _, f18iter := range cr.Spec.ForProvider.UsernameAttributes {
			var f18elem string
			f18elem = *f18iter
			f18 = append(f18, &f18elem)
		}
		res.SetUsernameAttributes(f18)
	}
	if cr.Spec.ForProvider.UsernameConfiguration != nil {
		f19 := &svcsdk.UsernameConfigurationType{}
		if cr.Spec.ForProvider.UsernameConfiguration.CaseSensitive != nil {
			f19.SetCaseSensitive(*cr.Spec.ForProvider.UsernameConfiguration.CaseSensitive)
		}
		res.SetUsernameConfiguration(f19)
	}
	if cr.Spec.ForProvider.VerificationMessageTemplate != nil {
		f20 := &svcsdk.VerificationMessageTemplateType{}
		if cr.Spec.ForProvider.VerificationMessageTemplate.DefaultEmailOption != nil {
			f20.SetDefaultEmailOption(*cr.Spec.ForProvider.VerificationMessageTemplate.DefaultEmailOption)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessage != nil {
			f20.SetEmailMessage(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessage)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessageByLink != nil {
			f20.SetEmailMessageByLink(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessageByLink)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubject != nil {
			f20.SetEmailSubject(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubject)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f20.SetEmailSubjectByLink(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubjectByLink)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.SmsMessage != nil {
			f20.SetSmsMessage(*cr.Spec.ForProvider.VerificationMessageTemplate.SmsMessage)
		}
		res.SetVerificationMessageTemplate(f20)
	}

	return res
}

// GenerateUpdateUserPoolInput returns an update input.
func GenerateUpdateUserPoolInput(cr *svcapitypes.UserPool) *svcsdk.UpdateUserPoolInput {
	res := &svcsdk.UpdateUserPoolInput{}

	if cr.Spec.ForProvider.AccountRecoverySetting != nil {
		f0 := &svcsdk.AccountRecoverySettingType{}
		if cr.Spec.ForProvider.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []*svcsdk.RecoveryOptionType{}
			for _, f0f0iter := range cr.Spec.ForProvider.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcsdk.RecoveryOptionType{}
				if f0f0iter.Name != nil {
					f0f0elem.SetName(*f0f0iter.Name)
				}
				if f0f0iter.Priority != nil {
					f0f0elem.SetPriority(*f0f0iter.Priority)
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.SetRecoveryMechanisms(f0f0)
		}
		res.SetAccountRecoverySetting(f0)
	}
	if cr.Spec.ForProvider.AdminCreateUserConfig != nil {
		f1 := &svcsdk.AdminCreateUserConfigType{}
		if cr.Spec.ForProvider.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil {
			f1.SetAllowAdminCreateUserOnly(*cr.Spec.ForProvider.AdminCreateUserConfig.AllowAdminCreateUserOnly)
		}
		if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcsdk.MessageTemplateType{}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.SetEmailMessage(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage)
			}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.SetEmailSubject(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject)
			}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SetSMSMessage(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage)
			}
			f1.SetInviteMessageTemplate(f1f1)
		}
		if cr.Spec.ForProvider.AdminCreateUserConfig.UnusedAccountValidityDays != nil {
			f1.SetUnusedAccountValidityDays(*cr.Spec.ForProvider.AdminCreateUserConfig.UnusedAccountValidityDays)
		}
		res.SetAdminCreateUserConfig(f1)
	}
	if cr.Spec.ForProvider.AutoVerifiedAttributes != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.AutoVerifiedAttributes {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetAutoVerifiedAttributes(f2)
	}
	if cr.Spec.ForProvider.DeviceConfiguration != nil {
		f3 := &svcsdk.DeviceConfigurationType{}
		if cr.Spec.ForProvider.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil {
			f3.SetChallengeRequiredOnNewDevice(*cr.Spec.ForProvider.DeviceConfiguration.ChallengeRequiredOnNewDevice)
		}
		if cr.Spec.ForProvider.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil {
			f3.SetDeviceOnlyRememberedOnUserPrompt(*cr.Spec.ForProvider.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt)
		}
		res.SetDeviceConfiguration(f3)
	}
	if cr.Spec.ForProvider.EmailConfiguration != nil {
		f4 := &svcsdk.EmailConfigurationType{}
		if cr.Spec.ForProvider.EmailConfiguration.ConfigurationSet != nil {
			f4.SetConfigurationSet(*cr.Spec.ForProvider.EmailConfiguration.ConfigurationSet)
		}
		if cr.Spec.ForProvider.EmailConfiguration.EmailSendingAccount != nil {
			f4.SetEmailSendingAccount(*cr.Spec.ForProvider.EmailConfiguration.EmailSendingAccount)
		}
		if cr.Spec.ForProvider.EmailConfiguration.From != nil {
			f4.SetFrom(*cr.Spec.ForProvider.EmailConfiguration.From)
		}
		if cr.Spec.ForProvider.EmailConfiguration.ReplyToEmailAddress != nil {
			f4.SetReplyToEmailAddress(*cr.Spec.ForProvider.EmailConfiguration.ReplyToEmailAddress)
		}
		if cr.Spec.ForProvider.EmailConfiguration.SourceARN != nil {
			f4.SetSourceArn(*cr.Spec.ForProvider.EmailConfiguration.SourceARN)
		}
		res.SetEmailConfiguration(f4)
	}
	if cr.Spec.ForProvider.EmailVerificationMessage != nil {
		res.SetEmailVerificationMessage(*cr.Spec.ForProvider.EmailVerificationMessage)
	}
	if cr.Spec.ForProvider.EmailVerificationSubject != nil {
		res.SetEmailVerificationSubject(*cr.Spec.ForProvider.EmailVerificationSubject)
	}
	if cr.Spec.ForProvider.LambdaConfig != nil {
		f7 := &svcsdk.LambdaConfigType{}
		if cr.Spec.ForProvider.LambdaConfig.CreateAuthChallenge != nil {
			f7.SetCreateAuthChallenge(*cr.Spec.ForProvider.LambdaConfig.CreateAuthChallenge)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender != nil {
			f7f1 := &svcsdk.CustomEmailLambdaVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaARN != nil {
				f7f1.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaVersion != nil {
				f7f1.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaVersion)
			}
			f7.SetCustomEmailSender(f7f1)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomMessage != nil {
			f7.SetCustomMessage(*cr.Spec.ForProvider.LambdaConfig.CustomMessage)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender != nil {
			f7f3 := &svcsdk.CustomSMSLambdaVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaARN != nil {
				f7f3.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaVersion != nil {
				f7f3.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaVersion)
			}
			f7.SetCustomSMSSender(f7f3)
		}
		if cr.Spec.ForProvider.LambdaConfig.DefineAuthChallenge != nil {
			f7.SetDefineAuthChallenge(*cr.Spec.ForProvider.LambdaConfig.DefineAuthChallenge)
		}
		if cr.Spec.ForProvider.LambdaConfig.KMSKeyID != nil {
			f7.SetKMSKeyID(*cr.Spec.ForProvider.LambdaConfig.KMSKeyID)
		}
		if cr.Spec.ForProvider.LambdaConfig.PostAuthentication != nil {
			f7.SetPostAuthentication(*cr.Spec.ForProvider.LambdaConfig.PostAuthentication)
		}
		if cr.Spec.ForProvider.LambdaConfig.PostConfirmation != nil {
			f7.SetPostConfirmation(*cr.Spec.ForProvider.LambdaConfig.PostConfirmation)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreAuthentication != nil {
			f7.SetPreAuthentication(*cr.Spec.ForProvider.LambdaConfig.PreAuthentication)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreSignUp != nil {
			f7.SetPreSignUp(*cr.Spec.ForProvider.LambdaConfig.PreSignUp)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreTokenGeneration != nil {
			f7.SetPreTokenGeneration(*cr.Spec.ForProvider.LambdaConfig.PreTokenGeneration)
		}
		if cr.Spec.ForProvider.LambdaConfig.UserMigration != nil {
			f7.SetUserMigration(*cr.Spec.ForProvider.LambdaConfig.UserMigration)
		}
		if cr.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f7.SetVerifyAuthChallengeResponse(*cr.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse)
		}
		res.SetLambdaConfig(f7)
	}
	if cr.Spec.ForProvider.MFAConfiguration != nil {
		res.SetMfaConfiguration(*cr.Spec.ForProvider.MFAConfiguration)
	}
	if cr.Spec.ForProvider.Policies != nil {
		f9 := &svcsdk.UserPoolPolicyType{}
		if cr.Spec.ForProvider.Policies.PasswordPolicy != nil {
			f9f0 := &svcsdk.PasswordPolicyType{}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.MinimumLength != nil {
				f9f0.SetMinimumLength(*cr.Spec.ForProvider.Policies.PasswordPolicy.MinimumLength)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireLowercase != nil {
				f9f0.SetRequireLowercase(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireLowercase)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireNumbers != nil {
				f9f0.SetRequireNumbers(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireNumbers)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireSymbols != nil {
				f9f0.SetRequireSymbols(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireSymbols)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireUppercase != nil {
				f9f0.SetRequireUppercase(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireUppercase)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil {
				f9f0.SetTemporaryPasswordValidityDays(*cr.Spec.ForProvider.Policies.PasswordPolicy.TemporaryPasswordValidityDays)
			}
			f9.SetPasswordPolicy(f9f0)
		}
		res.SetPolicies(f9)
	}
	if cr.Spec.ForProvider.SmsAuthenticationMessage != nil {
		res.SetSmsAuthenticationMessage(*cr.Spec.ForProvider.SmsAuthenticationMessage)
	}
	if cr.Spec.ForProvider.SmsConfiguration != nil {
		f11 := &svcsdk.SmsConfigurationType{}
		if cr.Spec.ForProvider.SmsConfiguration.ExternalID != nil {
			f11.SetExternalId(*cr.Spec.ForProvider.SmsConfiguration.ExternalID)
		}
		if cr.Spec.ForProvider.SmsConfiguration.SNSCallerARN != nil {
			f11.SetSnsCallerArn(*cr.Spec.ForProvider.SmsConfiguration.SNSCallerARN)
		}
		res.SetSmsConfiguration(f11)
	}
	if cr.Spec.ForProvider.SmsVerificationMessage != nil {
		res.SetSmsVerificationMessage(*cr.Spec.ForProvider.SmsVerificationMessage)
	}
	if cr.Spec.ForProvider.UserPoolAddOns != nil {
		f13 := &svcsdk.UserPoolAddOnsType{}
		if cr.Spec.ForProvider.UserPoolAddOns.AdvancedSecurityMode != nil {
			f13.SetAdvancedSecurityMode(*cr.Spec.ForProvider.UserPoolAddOns.AdvancedSecurityMode)
		}
		res.SetUserPoolAddOns(f13)
	}
	if cr.Spec.ForProvider.UserPoolTags != nil {
		f15 := map[string]*string{}
		for f15key, f15valiter := range cr.Spec.ForProvider.UserPoolTags {
			var f15val string
			f15val = *f15valiter
			f15[f15key] = &f15val
		}
		res.SetUserPoolTags(f15)
	}
	if cr.Spec.ForProvider.VerificationMessageTemplate != nil {
		f16 := &svcsdk.VerificationMessageTemplateType{}
		if cr.Spec.ForProvider.VerificationMessageTemplate.DefaultEmailOption != nil {
			f16.SetDefaultEmailOption(*cr.Spec.ForProvider.VerificationMessageTemplate.DefaultEmailOption)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessage != nil {
			f16.SetEmailMessage(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessage)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessageByLink != nil {
			f16.SetEmailMessageByLink(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessageByLink)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubject != nil {
			f16.SetEmailSubject(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubject)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f16.SetEmailSubjectByLink(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubjectByLink)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.SmsMessage != nil {
			f16.SetSmsMessage(*cr.Spec.ForProvider.VerificationMessageTemplate.SmsMessage)
		}
		res.SetVerificationMessageTemplate(f16)
	}

	return res
}

// GenerateDeleteUserPoolInput returns a deletion input.
func GenerateDeleteUserPoolInput(cr *svcapitypes.UserPool) *svcsdk.DeleteUserPoolInput {
	res := &svcsdk.DeleteUserPoolInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
