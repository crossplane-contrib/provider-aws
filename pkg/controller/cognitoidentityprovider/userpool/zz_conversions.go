/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package userpool

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/cognitoidentityprovider"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/cognitoidentityprovider/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeUserPoolInput returns input for read
// operation.
func GenerateDescribeUserPoolInput(cr *svcapitypes.UserPool) *svcsdk.DescribeUserPoolInput {
	res := &svcsdk.DescribeUserPoolInput{}

	return res
}

// GenerateUserPool returns the current state in the form of *svcapitypes.UserPool.
func GenerateUserPool(resp *svcsdk.DescribeUserPoolOutput) *svcapitypes.UserPool {
	cr := &svcapitypes.UserPool{}

	if resp.UserPool.AccountRecoverySetting != nil {
		f0 := &svcapitypes.AccountRecoverySettingType{}
		if resp.UserPool.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []*svcapitypes.RecoveryOptionType{}
			for _, f0f0iter := range resp.UserPool.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcapitypes.RecoveryOptionType{}
				if f0f0iter.Name != nil {
					f0f0elem.Name = f0f0iter.Name
				}
				if f0f0iter.Priority != nil {
					f0f0elem.Priority = f0f0iter.Priority
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.RecoveryMechanisms = f0f0
		}
		cr.Spec.ForProvider.AccountRecoverySetting = f0
	} else {
		cr.Spec.ForProvider.AccountRecoverySetting = nil
	}
	if resp.UserPool.AdminCreateUserConfig != nil {
		f1 := &svcapitypes.AdminCreateUserConfigType{}
		if resp.UserPool.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil {
			f1.AllowAdminCreateUserOnly = resp.UserPool.AdminCreateUserConfig.AllowAdminCreateUserOnly
		}
		if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcapitypes.MessageTemplateType{}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.EmailMessage = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage
			}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.EmailSubject = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject
			}
			if resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SMSMessage = resp.UserPool.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage
			}
			f1.InviteMessageTemplate = f1f1
		}
		cr.Spec.ForProvider.AdminCreateUserConfig = f1
	} else {
		cr.Spec.ForProvider.AdminCreateUserConfig = nil
	}
	if resp.UserPool.AliasAttributes != nil {
		f2 := []*string{}
		for _, f2iter := range resp.UserPool.AliasAttributes {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		cr.Spec.ForProvider.AliasAttributes = f2
	} else {
		cr.Spec.ForProvider.AliasAttributes = nil
	}
	if resp.UserPool.Arn != nil {
		cr.Status.AtProvider.ARN = resp.UserPool.Arn
	} else {
		cr.Status.AtProvider.ARN = nil
	}
	if resp.UserPool.AutoVerifiedAttributes != nil {
		f4 := []*string{}
		for _, f4iter := range resp.UserPool.AutoVerifiedAttributes {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		cr.Spec.ForProvider.AutoVerifiedAttributes = f4
	} else {
		cr.Spec.ForProvider.AutoVerifiedAttributes = nil
	}
	if resp.UserPool.CreationDate != nil {
		cr.Status.AtProvider.CreationDate = &metav1.Time{*resp.UserPool.CreationDate}
	} else {
		cr.Status.AtProvider.CreationDate = nil
	}
	if resp.UserPool.CustomDomain != nil {
		cr.Status.AtProvider.CustomDomain = resp.UserPool.CustomDomain
	} else {
		cr.Status.AtProvider.CustomDomain = nil
	}
	if resp.UserPool.DeletionProtection != nil {
		cr.Spec.ForProvider.DeletionProtection = resp.UserPool.DeletionProtection
	} else {
		cr.Spec.ForProvider.DeletionProtection = nil
	}
	if resp.UserPool.DeviceConfiguration != nil {
		f8 := &svcapitypes.DeviceConfigurationType{}
		if resp.UserPool.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil {
			f8.ChallengeRequiredOnNewDevice = resp.UserPool.DeviceConfiguration.ChallengeRequiredOnNewDevice
		}
		if resp.UserPool.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil {
			f8.DeviceOnlyRememberedOnUserPrompt = resp.UserPool.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt
		}
		cr.Spec.ForProvider.DeviceConfiguration = f8
	} else {
		cr.Spec.ForProvider.DeviceConfiguration = nil
	}
	if resp.UserPool.Domain != nil {
		cr.Status.AtProvider.Domain = resp.UserPool.Domain
	} else {
		cr.Status.AtProvider.Domain = nil
	}
	if resp.UserPool.EmailConfiguration != nil {
		f10 := &svcapitypes.EmailConfigurationType{}
		if resp.UserPool.EmailConfiguration.ConfigurationSet != nil {
			f10.ConfigurationSet = resp.UserPool.EmailConfiguration.ConfigurationSet
		}
		if resp.UserPool.EmailConfiguration.EmailSendingAccount != nil {
			f10.EmailSendingAccount = resp.UserPool.EmailConfiguration.EmailSendingAccount
		}
		if resp.UserPool.EmailConfiguration.From != nil {
			f10.From = resp.UserPool.EmailConfiguration.From
		}
		if resp.UserPool.EmailConfiguration.ReplyToEmailAddress != nil {
			f10.ReplyToEmailAddress = resp.UserPool.EmailConfiguration.ReplyToEmailAddress
		}
		if resp.UserPool.EmailConfiguration.SourceArn != nil {
			f10.SourceARN = resp.UserPool.EmailConfiguration.SourceArn
		}
		cr.Spec.ForProvider.EmailConfiguration = f10
	} else {
		cr.Spec.ForProvider.EmailConfiguration = nil
	}
	if resp.UserPool.EmailConfigurationFailure != nil {
		cr.Status.AtProvider.EmailConfigurationFailure = resp.UserPool.EmailConfigurationFailure
	} else {
		cr.Status.AtProvider.EmailConfigurationFailure = nil
	}
	if resp.UserPool.EmailVerificationMessage != nil {
		cr.Spec.ForProvider.EmailVerificationMessage = resp.UserPool.EmailVerificationMessage
	} else {
		cr.Spec.ForProvider.EmailVerificationMessage = nil
	}
	if resp.UserPool.EmailVerificationSubject != nil {
		cr.Spec.ForProvider.EmailVerificationSubject = resp.UserPool.EmailVerificationSubject
	} else {
		cr.Spec.ForProvider.EmailVerificationSubject = nil
	}
	if resp.UserPool.EstimatedNumberOfUsers != nil {
		cr.Status.AtProvider.EstimatedNumberOfUsers = resp.UserPool.EstimatedNumberOfUsers
	} else {
		cr.Status.AtProvider.EstimatedNumberOfUsers = nil
	}
	if resp.UserPool.Id != nil {
		cr.Status.AtProvider.ID = resp.UserPool.Id
	} else {
		cr.Status.AtProvider.ID = nil
	}
	if resp.UserPool.LambdaConfig != nil {
		f16 := &svcapitypes.LambdaConfigType{}
		if resp.UserPool.LambdaConfig.CreateAuthChallenge != nil {
			f16.CreateAuthChallenge = resp.UserPool.LambdaConfig.CreateAuthChallenge
		}
		if resp.UserPool.LambdaConfig.CustomEmailSender != nil {
			f16f1 := &svcapitypes.CustomEmailLambdaVersionConfigType{}
			if resp.UserPool.LambdaConfig.CustomEmailSender.LambdaArn != nil {
				f16f1.LambdaARN = resp.UserPool.LambdaConfig.CustomEmailSender.LambdaArn
			}
			if resp.UserPool.LambdaConfig.CustomEmailSender.LambdaVersion != nil {
				f16f1.LambdaVersion = resp.UserPool.LambdaConfig.CustomEmailSender.LambdaVersion
			}
			f16.CustomEmailSender = f16f1
		}
		if resp.UserPool.LambdaConfig.CustomMessage != nil {
			f16.CustomMessage = resp.UserPool.LambdaConfig.CustomMessage
		}
		if resp.UserPool.LambdaConfig.CustomSMSSender != nil {
			f16f3 := &svcapitypes.CustomSMSLambdaVersionConfigType{}
			if resp.UserPool.LambdaConfig.CustomSMSSender.LambdaArn != nil {
				f16f3.LambdaARN = resp.UserPool.LambdaConfig.CustomSMSSender.LambdaArn
			}
			if resp.UserPool.LambdaConfig.CustomSMSSender.LambdaVersion != nil {
				f16f3.LambdaVersion = resp.UserPool.LambdaConfig.CustomSMSSender.LambdaVersion
			}
			f16.CustomSMSSender = f16f3
		}
		if resp.UserPool.LambdaConfig.DefineAuthChallenge != nil {
			f16.DefineAuthChallenge = resp.UserPool.LambdaConfig.DefineAuthChallenge
		}
		if resp.UserPool.LambdaConfig.KMSKeyID != nil {
			f16.KMSKeyID = resp.UserPool.LambdaConfig.KMSKeyID
		}
		if resp.UserPool.LambdaConfig.PostAuthentication != nil {
			f16.PostAuthentication = resp.UserPool.LambdaConfig.PostAuthentication
		}
		if resp.UserPool.LambdaConfig.PostConfirmation != nil {
			f16.PostConfirmation = resp.UserPool.LambdaConfig.PostConfirmation
		}
		if resp.UserPool.LambdaConfig.PreAuthentication != nil {
			f16.PreAuthentication = resp.UserPool.LambdaConfig.PreAuthentication
		}
		if resp.UserPool.LambdaConfig.PreSignUp != nil {
			f16.PreSignUp = resp.UserPool.LambdaConfig.PreSignUp
		}
		if resp.UserPool.LambdaConfig.PreTokenGeneration != nil {
			f16.PreTokenGeneration = resp.UserPool.LambdaConfig.PreTokenGeneration
		}
		if resp.UserPool.LambdaConfig.PreTokenGenerationConfig != nil {
			f16f11 := &svcapitypes.PreTokenGenerationVersionConfigType{}
			if resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaArn != nil {
				f16f11.LambdaARN = resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaArn
			}
			if resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != nil {
				f16f11.LambdaVersion = resp.UserPool.LambdaConfig.PreTokenGenerationConfig.LambdaVersion
			}
			f16.PreTokenGenerationConfig = f16f11
		}
		if resp.UserPool.LambdaConfig.UserMigration != nil {
			f16.UserMigration = resp.UserPool.LambdaConfig.UserMigration
		}
		if resp.UserPool.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f16.VerifyAuthChallengeResponse = resp.UserPool.LambdaConfig.VerifyAuthChallengeResponse
		}
		cr.Spec.ForProvider.LambdaConfig = f16
	} else {
		cr.Spec.ForProvider.LambdaConfig = nil
	}
	if resp.UserPool.LastModifiedDate != nil {
		cr.Status.AtProvider.LastModifiedDate = &metav1.Time{*resp.UserPool.LastModifiedDate}
	} else {
		cr.Status.AtProvider.LastModifiedDate = nil
	}
	if resp.UserPool.MfaConfiguration != nil {
		cr.Spec.ForProvider.MFAConfiguration = resp.UserPool.MfaConfiguration
	} else {
		cr.Spec.ForProvider.MFAConfiguration = nil
	}
	if resp.UserPool.Name != nil {
		cr.Status.AtProvider.Name = resp.UserPool.Name
	} else {
		cr.Status.AtProvider.Name = nil
	}
	if resp.UserPool.Policies != nil {
		f20 := &svcapitypes.UserPoolPolicyType{}
		if resp.UserPool.Policies.PasswordPolicy != nil {
			f20f0 := &svcapitypes.PasswordPolicyType{}
			if resp.UserPool.Policies.PasswordPolicy.MinimumLength != nil {
				f20f0.MinimumLength = resp.UserPool.Policies.PasswordPolicy.MinimumLength
			}
			if resp.UserPool.Policies.PasswordPolicy.RequireLowercase != nil {
				f20f0.RequireLowercase = resp.UserPool.Policies.PasswordPolicy.RequireLowercase
			}
			if resp.UserPool.Policies.PasswordPolicy.RequireNumbers != nil {
				f20f0.RequireNumbers = resp.UserPool.Policies.PasswordPolicy.RequireNumbers
			}
			if resp.UserPool.Policies.PasswordPolicy.RequireSymbols != nil {
				f20f0.RequireSymbols = resp.UserPool.Policies.PasswordPolicy.RequireSymbols
			}
			if resp.UserPool.Policies.PasswordPolicy.RequireUppercase != nil {
				f20f0.RequireUppercase = resp.UserPool.Policies.PasswordPolicy.RequireUppercase
			}
			if resp.UserPool.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil {
				f20f0.TemporaryPasswordValidityDays = resp.UserPool.Policies.PasswordPolicy.TemporaryPasswordValidityDays
			}
			f20.PasswordPolicy = f20f0
		}
		cr.Spec.ForProvider.Policies = f20
	} else {
		cr.Spec.ForProvider.Policies = nil
	}
	if resp.UserPool.SchemaAttributes != nil {
		f21 := []*svcapitypes.SchemaAttributeType{}
		for _, f21iter := range resp.UserPool.SchemaAttributes {
			f21elem := &svcapitypes.SchemaAttributeType{}
			if f21iter.AttributeDataType != nil {
				f21elem.AttributeDataType = f21iter.AttributeDataType
			}
			if f21iter.DeveloperOnlyAttribute != nil {
				f21elem.DeveloperOnlyAttribute = f21iter.DeveloperOnlyAttribute
			}
			if f21iter.Mutable != nil {
				f21elem.Mutable = f21iter.Mutable
			}
			if f21iter.Name != nil {
				f21elem.Name = f21iter.Name
			}
			if f21iter.NumberAttributeConstraints != nil {
				f21elemf4 := &svcapitypes.NumberAttributeConstraintsType{}
				if f21iter.NumberAttributeConstraints.MaxValue != nil {
					f21elemf4.MaxValue = f21iter.NumberAttributeConstraints.MaxValue
				}
				if f21iter.NumberAttributeConstraints.MinValue != nil {
					f21elemf4.MinValue = f21iter.NumberAttributeConstraints.MinValue
				}
				f21elem.NumberAttributeConstraints = f21elemf4
			}
			if f21iter.Required != nil {
				f21elem.Required = f21iter.Required
			}
			if f21iter.StringAttributeConstraints != nil {
				f21elemf6 := &svcapitypes.StringAttributeConstraintsType{}
				if f21iter.StringAttributeConstraints.MaxLength != nil {
					f21elemf6.MaxLength = f21iter.StringAttributeConstraints.MaxLength
				}
				if f21iter.StringAttributeConstraints.MinLength != nil {
					f21elemf6.MinLength = f21iter.StringAttributeConstraints.MinLength
				}
				f21elem.StringAttributeConstraints = f21elemf6
			}
			f21 = append(f21, f21elem)
		}
		cr.Status.AtProvider.SchemaAttributes = f21
	} else {
		cr.Status.AtProvider.SchemaAttributes = nil
	}
	if resp.UserPool.SmsAuthenticationMessage != nil {
		cr.Spec.ForProvider.SmsAuthenticationMessage = resp.UserPool.SmsAuthenticationMessage
	} else {
		cr.Spec.ForProvider.SmsAuthenticationMessage = nil
	}
	if resp.UserPool.SmsConfiguration != nil {
		f23 := &svcapitypes.SmsConfigurationType{}
		if resp.UserPool.SmsConfiguration.ExternalId != nil {
			f23.ExternalID = resp.UserPool.SmsConfiguration.ExternalId
		}
		if resp.UserPool.SmsConfiguration.SnsCallerArn != nil {
			f23.SNSCallerARN = resp.UserPool.SmsConfiguration.SnsCallerArn
		}
		if resp.UserPool.SmsConfiguration.SnsRegion != nil {
			f23.SNSRegion = resp.UserPool.SmsConfiguration.SnsRegion
		}
		cr.Spec.ForProvider.SmsConfiguration = f23
	} else {
		cr.Spec.ForProvider.SmsConfiguration = nil
	}
	if resp.UserPool.SmsConfigurationFailure != nil {
		cr.Status.AtProvider.SmsConfigurationFailure = resp.UserPool.SmsConfigurationFailure
	} else {
		cr.Status.AtProvider.SmsConfigurationFailure = nil
	}
	if resp.UserPool.SmsVerificationMessage != nil {
		cr.Spec.ForProvider.SmsVerificationMessage = resp.UserPool.SmsVerificationMessage
	} else {
		cr.Spec.ForProvider.SmsVerificationMessage = nil
	}
	if resp.UserPool.Status != nil {
		cr.Status.AtProvider.Status = resp.UserPool.Status
	} else {
		cr.Status.AtProvider.Status = nil
	}
	if resp.UserPool.UserAttributeUpdateSettings != nil {
		f27 := &svcapitypes.UserAttributeUpdateSettingsType{}
		if resp.UserPool.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate != nil {
			f27f0 := []*string{}
			for _, f27f0iter := range resp.UserPool.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate {
				var f27f0elem string
				f27f0elem = *f27f0iter
				f27f0 = append(f27f0, &f27f0elem)
			}
			f27.AttributesRequireVerificationBeforeUpdate = f27f0
		}
		cr.Spec.ForProvider.UserAttributeUpdateSettings = f27
	} else {
		cr.Spec.ForProvider.UserAttributeUpdateSettings = nil
	}
	if resp.UserPool.UserPoolAddOns != nil {
		f28 := &svcapitypes.UserPoolAddOnsType{}
		if resp.UserPool.UserPoolAddOns.AdvancedSecurityMode != nil {
			f28.AdvancedSecurityMode = resp.UserPool.UserPoolAddOns.AdvancedSecurityMode
		}
		cr.Spec.ForProvider.UserPoolAddOns = f28
	} else {
		cr.Spec.ForProvider.UserPoolAddOns = nil
	}
	if resp.UserPool.UserPoolTags != nil {
		f29 := map[string]*string{}
		for f29key, f29valiter := range resp.UserPool.UserPoolTags {
			var f29val string
			f29val = *f29valiter
			f29[f29key] = &f29val
		}
		cr.Spec.ForProvider.UserPoolTags = f29
	} else {
		cr.Spec.ForProvider.UserPoolTags = nil
	}
	if resp.UserPool.UsernameAttributes != nil {
		f30 := []*string{}
		for _, f30iter := range resp.UserPool.UsernameAttributes {
			var f30elem string
			f30elem = *f30iter
			f30 = append(f30, &f30elem)
		}
		cr.Spec.ForProvider.UsernameAttributes = f30
	} else {
		cr.Spec.ForProvider.UsernameAttributes = nil
	}
	if resp.UserPool.UsernameConfiguration != nil {
		f31 := &svcapitypes.UsernameConfigurationType{}
		if resp.UserPool.UsernameConfiguration.CaseSensitive != nil {
			f31.CaseSensitive = resp.UserPool.UsernameConfiguration.CaseSensitive
		}
		cr.Spec.ForProvider.UsernameConfiguration = f31
	} else {
		cr.Spec.ForProvider.UsernameConfiguration = nil
	}
	if resp.UserPool.VerificationMessageTemplate != nil {
		f32 := &svcapitypes.VerificationMessageTemplateType{}
		if resp.UserPool.VerificationMessageTemplate.DefaultEmailOption != nil {
			f32.DefaultEmailOption = resp.UserPool.VerificationMessageTemplate.DefaultEmailOption
		}
		if resp.UserPool.VerificationMessageTemplate.EmailMessage != nil {
			f32.EmailMessage = resp.UserPool.VerificationMessageTemplate.EmailMessage
		}
		if resp.UserPool.VerificationMessageTemplate.EmailMessageByLink != nil {
			f32.EmailMessageByLink = resp.UserPool.VerificationMessageTemplate.EmailMessageByLink
		}
		if resp.UserPool.VerificationMessageTemplate.EmailSubject != nil {
			f32.EmailSubject = resp.UserPool.VerificationMessageTemplate.EmailSubject
		}
		if resp.UserPool.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f32.EmailSubjectByLink = resp.UserPool.VerificationMessageTemplate.EmailSubjectByLink
		}
		if resp.UserPool.VerificationMessageTemplate.SmsMessage != nil {
			f32.SmsMessage = resp.UserPool.VerificationMessageTemplate.SmsMessage
		}
		cr.Spec.ForProvider.VerificationMessageTemplate = f32
	} else {
		cr.Spec.ForProvider.VerificationMessageTemplate = nil
	}

	return cr
}

// GenerateCreateUserPoolInput returns a create input.
func GenerateCreateUserPoolInput(cr *svcapitypes.UserPool) *svcsdk.CreateUserPoolInput {
	res := &svcsdk.CreateUserPoolInput{}

	if cr.Spec.ForProvider.AccountRecoverySetting != nil {
		f0 := &svcsdk.AccountRecoverySettingType{}
		if cr.Spec.ForProvider.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []*svcsdk.RecoveryOptionType{}
			for _, f0f0iter := range cr.Spec.ForProvider.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcsdk.RecoveryOptionType{}
				if f0f0iter.Name != nil {
					f0f0elem.SetName(*f0f0iter.Name)
				}
				if f0f0iter.Priority != nil {
					f0f0elem.SetPriority(*f0f0iter.Priority)
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.SetRecoveryMechanisms(f0f0)
		}
		res.SetAccountRecoverySetting(f0)
	}
	if cr.Spec.ForProvider.AdminCreateUserConfig != nil {
		f1 := &svcsdk.AdminCreateUserConfigType{}
		if cr.Spec.ForProvider.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil {
			f1.SetAllowAdminCreateUserOnly(*cr.Spec.ForProvider.AdminCreateUserConfig.AllowAdminCreateUserOnly)
		}
		if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcsdk.MessageTemplateType{}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.SetEmailMessage(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage)
			}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.SetEmailSubject(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject)
			}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SetSMSMessage(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage)
			}
			f1.SetInviteMessageTemplate(f1f1)
		}
		res.SetAdminCreateUserConfig(f1)
	}
	if cr.Spec.ForProvider.AliasAttributes != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.AliasAttributes {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetAliasAttributes(f2)
	}
	if cr.Spec.ForProvider.AutoVerifiedAttributes != nil {
		f3 := []*string{}
		for _, f3iter := range cr.Spec.ForProvider.AutoVerifiedAttributes {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		res.SetAutoVerifiedAttributes(f3)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.DeviceConfiguration != nil {
		f5 := &svcsdk.DeviceConfigurationType{}
		if cr.Spec.ForProvider.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil {
			f5.SetChallengeRequiredOnNewDevice(*cr.Spec.ForProvider.DeviceConfiguration.ChallengeRequiredOnNewDevice)
		}
		if cr.Spec.ForProvider.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil {
			f5.SetDeviceOnlyRememberedOnUserPrompt(*cr.Spec.ForProvider.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt)
		}
		res.SetDeviceConfiguration(f5)
	}
	if cr.Spec.ForProvider.EmailConfiguration != nil {
		f6 := &svcsdk.EmailConfigurationType{}
		if cr.Spec.ForProvider.EmailConfiguration.ConfigurationSet != nil {
			f6.SetConfigurationSet(*cr.Spec.ForProvider.EmailConfiguration.ConfigurationSet)
		}
		if cr.Spec.ForProvider.EmailConfiguration.EmailSendingAccount != nil {
			f6.SetEmailSendingAccount(*cr.Spec.ForProvider.EmailConfiguration.EmailSendingAccount)
		}
		if cr.Spec.ForProvider.EmailConfiguration.From != nil {
			f6.SetFrom(*cr.Spec.ForProvider.EmailConfiguration.From)
		}
		if cr.Spec.ForProvider.EmailConfiguration.ReplyToEmailAddress != nil {
			f6.SetReplyToEmailAddress(*cr.Spec.ForProvider.EmailConfiguration.ReplyToEmailAddress)
		}
		if cr.Spec.ForProvider.EmailConfiguration.SourceARN != nil {
			f6.SetSourceArn(*cr.Spec.ForProvider.EmailConfiguration.SourceARN)
		}
		res.SetEmailConfiguration(f6)
	}
	if cr.Spec.ForProvider.EmailVerificationMessage != nil {
		res.SetEmailVerificationMessage(*cr.Spec.ForProvider.EmailVerificationMessage)
	}
	if cr.Spec.ForProvider.EmailVerificationSubject != nil {
		res.SetEmailVerificationSubject(*cr.Spec.ForProvider.EmailVerificationSubject)
	}
	if cr.Spec.ForProvider.LambdaConfig != nil {
		f9 := &svcsdk.LambdaConfigType{}
		if cr.Spec.ForProvider.LambdaConfig.CreateAuthChallenge != nil {
			f9.SetCreateAuthChallenge(*cr.Spec.ForProvider.LambdaConfig.CreateAuthChallenge)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender != nil {
			f9f1 := &svcsdk.CustomEmailLambdaVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaARN != nil {
				f9f1.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaVersion != nil {
				f9f1.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaVersion)
			}
			f9.SetCustomEmailSender(f9f1)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomMessage != nil {
			f9.SetCustomMessage(*cr.Spec.ForProvider.LambdaConfig.CustomMessage)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender != nil {
			f9f3 := &svcsdk.CustomSMSLambdaVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaARN != nil {
				f9f3.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaVersion != nil {
				f9f3.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaVersion)
			}
			f9.SetCustomSMSSender(f9f3)
		}
		if cr.Spec.ForProvider.LambdaConfig.DefineAuthChallenge != nil {
			f9.SetDefineAuthChallenge(*cr.Spec.ForProvider.LambdaConfig.DefineAuthChallenge)
		}
		if cr.Spec.ForProvider.LambdaConfig.KMSKeyID != nil {
			f9.SetKMSKeyID(*cr.Spec.ForProvider.LambdaConfig.KMSKeyID)
		}
		if cr.Spec.ForProvider.LambdaConfig.PostAuthentication != nil {
			f9.SetPostAuthentication(*cr.Spec.ForProvider.LambdaConfig.PostAuthentication)
		}
		if cr.Spec.ForProvider.LambdaConfig.PostConfirmation != nil {
			f9.SetPostConfirmation(*cr.Spec.ForProvider.LambdaConfig.PostConfirmation)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreAuthentication != nil {
			f9.SetPreAuthentication(*cr.Spec.ForProvider.LambdaConfig.PreAuthentication)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreSignUp != nil {
			f9.SetPreSignUp(*cr.Spec.ForProvider.LambdaConfig.PreSignUp)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreTokenGeneration != nil {
			f9.SetPreTokenGeneration(*cr.Spec.ForProvider.LambdaConfig.PreTokenGeneration)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig != nil {
			f9f11 := &svcsdk.PreTokenGenerationVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig.LambdaARN != nil {
				f9f11.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != nil {
				f9f11.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig.LambdaVersion)
			}
			f9.SetPreTokenGenerationConfig(f9f11)
		}
		if cr.Spec.ForProvider.LambdaConfig.UserMigration != nil {
			f9.SetUserMigration(*cr.Spec.ForProvider.LambdaConfig.UserMigration)
		}
		if cr.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f9.SetVerifyAuthChallengeResponse(*cr.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse)
		}
		res.SetLambdaConfig(f9)
	}
	if cr.Spec.ForProvider.MFAConfiguration != nil {
		res.SetMfaConfiguration(*cr.Spec.ForProvider.MFAConfiguration)
	}
	if cr.Spec.ForProvider.Policies != nil {
		f11 := &svcsdk.UserPoolPolicyType{}
		if cr.Spec.ForProvider.Policies.PasswordPolicy != nil {
			f11f0 := &svcsdk.PasswordPolicyType{}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.MinimumLength != nil {
				f11f0.SetMinimumLength(*cr.Spec.ForProvider.Policies.PasswordPolicy.MinimumLength)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireLowercase != nil {
				f11f0.SetRequireLowercase(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireLowercase)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireNumbers != nil {
				f11f0.SetRequireNumbers(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireNumbers)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireSymbols != nil {
				f11f0.SetRequireSymbols(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireSymbols)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireUppercase != nil {
				f11f0.SetRequireUppercase(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireUppercase)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil {
				f11f0.SetTemporaryPasswordValidityDays(*cr.Spec.ForProvider.Policies.PasswordPolicy.TemporaryPasswordValidityDays)
			}
			f11.SetPasswordPolicy(f11f0)
		}
		res.SetPolicies(f11)
	}
	if cr.Spec.ForProvider.PoolName != nil {
		res.SetPoolName(*cr.Spec.ForProvider.PoolName)
	}
	if cr.Spec.ForProvider.Schema != nil {
		f13 := []*svcsdk.SchemaAttributeType{}
		for _, f13iter := range cr.Spec.ForProvider.Schema {
			f13elem := &svcsdk.SchemaAttributeType{}
			if f13iter.AttributeDataType != nil {
				f13elem.SetAttributeDataType(*f13iter.AttributeDataType)
			}
			if f13iter.DeveloperOnlyAttribute != nil {
				f13elem.SetDeveloperOnlyAttribute(*f13iter.DeveloperOnlyAttribute)
			}
			if f13iter.Mutable != nil {
				f13elem.SetMutable(*f13iter.Mutable)
			}
			if f13iter.Name != nil {
				f13elem.SetName(*f13iter.Name)
			}
			if f13iter.NumberAttributeConstraints != nil {
				f13elemf4 := &svcsdk.NumberAttributeConstraintsType{}
				if f13iter.NumberAttributeConstraints.MaxValue != nil {
					f13elemf4.SetMaxValue(*f13iter.NumberAttributeConstraints.MaxValue)
				}
				if f13iter.NumberAttributeConstraints.MinValue != nil {
					f13elemf4.SetMinValue(*f13iter.NumberAttributeConstraints.MinValue)
				}
				f13elem.SetNumberAttributeConstraints(f13elemf4)
			}
			if f13iter.Required != nil {
				f13elem.SetRequired(*f13iter.Required)
			}
			if f13iter.StringAttributeConstraints != nil {
				f13elemf6 := &svcsdk.StringAttributeConstraintsType{}
				if f13iter.StringAttributeConstraints.MaxLength != nil {
					f13elemf6.SetMaxLength(*f13iter.StringAttributeConstraints.MaxLength)
				}
				if f13iter.StringAttributeConstraints.MinLength != nil {
					f13elemf6.SetMinLength(*f13iter.StringAttributeConstraints.MinLength)
				}
				f13elem.SetStringAttributeConstraints(f13elemf6)
			}
			f13 = append(f13, f13elem)
		}
		res.SetSchema(f13)
	}
	if cr.Spec.ForProvider.SmsAuthenticationMessage != nil {
		res.SetSmsAuthenticationMessage(*cr.Spec.ForProvider.SmsAuthenticationMessage)
	}
	if cr.Spec.ForProvider.SmsConfiguration != nil {
		f15 := &svcsdk.SmsConfigurationType{}
		if cr.Spec.ForProvider.SmsConfiguration.ExternalID != nil {
			f15.SetExternalId(*cr.Spec.ForProvider.SmsConfiguration.ExternalID)
		}
		if cr.Spec.ForProvider.SmsConfiguration.SNSCallerARN != nil {
			f15.SetSnsCallerArn(*cr.Spec.ForProvider.SmsConfiguration.SNSCallerARN)
		}
		if cr.Spec.ForProvider.SmsConfiguration.SNSRegion != nil {
			f15.SetSnsRegion(*cr.Spec.ForProvider.SmsConfiguration.SNSRegion)
		}
		res.SetSmsConfiguration(f15)
	}
	if cr.Spec.ForProvider.SmsVerificationMessage != nil {
		res.SetSmsVerificationMessage(*cr.Spec.ForProvider.SmsVerificationMessage)
	}
	if cr.Spec.ForProvider.UserAttributeUpdateSettings != nil {
		f17 := &svcsdk.UserAttributeUpdateSettingsType{}
		if cr.Spec.ForProvider.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate != nil {
			f17f0 := []*string{}
			for _, f17f0iter := range cr.Spec.ForProvider.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate {
				var f17f0elem string
				f17f0elem = *f17f0iter
				f17f0 = append(f17f0, &f17f0elem)
			}
			f17.SetAttributesRequireVerificationBeforeUpdate(f17f0)
		}
		res.SetUserAttributeUpdateSettings(f17)
	}
	if cr.Spec.ForProvider.UserPoolAddOns != nil {
		f18 := &svcsdk.UserPoolAddOnsType{}
		if cr.Spec.ForProvider.UserPoolAddOns.AdvancedSecurityMode != nil {
			f18.SetAdvancedSecurityMode(*cr.Spec.ForProvider.UserPoolAddOns.AdvancedSecurityMode)
		}
		res.SetUserPoolAddOns(f18)
	}
	if cr.Spec.ForProvider.UserPoolTags != nil {
		f19 := map[string]*string{}
		for f19key, f19valiter := range cr.Spec.ForProvider.UserPoolTags {
			var f19val string
			f19val = *f19valiter
			f19[f19key] = &f19val
		}
		res.SetUserPoolTags(f19)
	}
	if cr.Spec.ForProvider.UsernameAttributes != nil {
		f20 := []*string{}
		for _, f20iter := range cr.Spec.ForProvider.UsernameAttributes {
			var f20elem string
			f20elem = *f20iter
			f20 = append(f20, &f20elem)
		}
		res.SetUsernameAttributes(f20)
	}
	if cr.Spec.ForProvider.UsernameConfiguration != nil {
		f21 := &svcsdk.UsernameConfigurationType{}
		if cr.Spec.ForProvider.UsernameConfiguration.CaseSensitive != nil {
			f21.SetCaseSensitive(*cr.Spec.ForProvider.UsernameConfiguration.CaseSensitive)
		}
		res.SetUsernameConfiguration(f21)
	}
	if cr.Spec.ForProvider.VerificationMessageTemplate != nil {
		f22 := &svcsdk.VerificationMessageTemplateType{}
		if cr.Spec.ForProvider.VerificationMessageTemplate.DefaultEmailOption != nil {
			f22.SetDefaultEmailOption(*cr.Spec.ForProvider.VerificationMessageTemplate.DefaultEmailOption)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessage != nil {
			f22.SetEmailMessage(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessage)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessageByLink != nil {
			f22.SetEmailMessageByLink(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessageByLink)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubject != nil {
			f22.SetEmailSubject(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubject)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f22.SetEmailSubjectByLink(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubjectByLink)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.SmsMessage != nil {
			f22.SetSmsMessage(*cr.Spec.ForProvider.VerificationMessageTemplate.SmsMessage)
		}
		res.SetVerificationMessageTemplate(f22)
	}

	return res
}

// GenerateUpdateUserPoolInput returns an update input.
func GenerateUpdateUserPoolInput(cr *svcapitypes.UserPool) *svcsdk.UpdateUserPoolInput {
	res := &svcsdk.UpdateUserPoolInput{}

	if cr.Spec.ForProvider.AccountRecoverySetting != nil {
		f0 := &svcsdk.AccountRecoverySettingType{}
		if cr.Spec.ForProvider.AccountRecoverySetting.RecoveryMechanisms != nil {
			f0f0 := []*svcsdk.RecoveryOptionType{}
			for _, f0f0iter := range cr.Spec.ForProvider.AccountRecoverySetting.RecoveryMechanisms {
				f0f0elem := &svcsdk.RecoveryOptionType{}
				if f0f0iter.Name != nil {
					f0f0elem.SetName(*f0f0iter.Name)
				}
				if f0f0iter.Priority != nil {
					f0f0elem.SetPriority(*f0f0iter.Priority)
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.SetRecoveryMechanisms(f0f0)
		}
		res.SetAccountRecoverySetting(f0)
	}
	if cr.Spec.ForProvider.AdminCreateUserConfig != nil {
		f1 := &svcsdk.AdminCreateUserConfigType{}
		if cr.Spec.ForProvider.AdminCreateUserConfig.AllowAdminCreateUserOnly != nil {
			f1.SetAllowAdminCreateUserOnly(*cr.Spec.ForProvider.AdminCreateUserConfig.AllowAdminCreateUserOnly)
		}
		if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate != nil {
			f1f1 := &svcsdk.MessageTemplateType{}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage != nil {
				f1f1.SetEmailMessage(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailMessage)
			}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject != nil {
				f1f1.SetEmailSubject(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.EmailSubject)
			}
			if cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage != nil {
				f1f1.SetSMSMessage(*cr.Spec.ForProvider.AdminCreateUserConfig.InviteMessageTemplate.SMSMessage)
			}
			f1.SetInviteMessageTemplate(f1f1)
		}
		res.SetAdminCreateUserConfig(f1)
	}
	if cr.Spec.ForProvider.AutoVerifiedAttributes != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.AutoVerifiedAttributes {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetAutoVerifiedAttributes(f2)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.DeviceConfiguration != nil {
		f4 := &svcsdk.DeviceConfigurationType{}
		if cr.Spec.ForProvider.DeviceConfiguration.ChallengeRequiredOnNewDevice != nil {
			f4.SetChallengeRequiredOnNewDevice(*cr.Spec.ForProvider.DeviceConfiguration.ChallengeRequiredOnNewDevice)
		}
		if cr.Spec.ForProvider.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt != nil {
			f4.SetDeviceOnlyRememberedOnUserPrompt(*cr.Spec.ForProvider.DeviceConfiguration.DeviceOnlyRememberedOnUserPrompt)
		}
		res.SetDeviceConfiguration(f4)
	}
	if cr.Spec.ForProvider.EmailConfiguration != nil {
		f5 := &svcsdk.EmailConfigurationType{}
		if cr.Spec.ForProvider.EmailConfiguration.ConfigurationSet != nil {
			f5.SetConfigurationSet(*cr.Spec.ForProvider.EmailConfiguration.ConfigurationSet)
		}
		if cr.Spec.ForProvider.EmailConfiguration.EmailSendingAccount != nil {
			f5.SetEmailSendingAccount(*cr.Spec.ForProvider.EmailConfiguration.EmailSendingAccount)
		}
		if cr.Spec.ForProvider.EmailConfiguration.From != nil {
			f5.SetFrom(*cr.Spec.ForProvider.EmailConfiguration.From)
		}
		if cr.Spec.ForProvider.EmailConfiguration.ReplyToEmailAddress != nil {
			f5.SetReplyToEmailAddress(*cr.Spec.ForProvider.EmailConfiguration.ReplyToEmailAddress)
		}
		if cr.Spec.ForProvider.EmailConfiguration.SourceARN != nil {
			f5.SetSourceArn(*cr.Spec.ForProvider.EmailConfiguration.SourceARN)
		}
		res.SetEmailConfiguration(f5)
	}
	if cr.Spec.ForProvider.EmailVerificationMessage != nil {
		res.SetEmailVerificationMessage(*cr.Spec.ForProvider.EmailVerificationMessage)
	}
	if cr.Spec.ForProvider.EmailVerificationSubject != nil {
		res.SetEmailVerificationSubject(*cr.Spec.ForProvider.EmailVerificationSubject)
	}
	if cr.Spec.ForProvider.LambdaConfig != nil {
		f8 := &svcsdk.LambdaConfigType{}
		if cr.Spec.ForProvider.LambdaConfig.CreateAuthChallenge != nil {
			f8.SetCreateAuthChallenge(*cr.Spec.ForProvider.LambdaConfig.CreateAuthChallenge)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender != nil {
			f8f1 := &svcsdk.CustomEmailLambdaVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaARN != nil {
				f8f1.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaVersion != nil {
				f8f1.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.CustomEmailSender.LambdaVersion)
			}
			f8.SetCustomEmailSender(f8f1)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomMessage != nil {
			f8.SetCustomMessage(*cr.Spec.ForProvider.LambdaConfig.CustomMessage)
		}
		if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender != nil {
			f8f3 := &svcsdk.CustomSMSLambdaVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaARN != nil {
				f8f3.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaVersion != nil {
				f8f3.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.CustomSMSSender.LambdaVersion)
			}
			f8.SetCustomSMSSender(f8f3)
		}
		if cr.Spec.ForProvider.LambdaConfig.DefineAuthChallenge != nil {
			f8.SetDefineAuthChallenge(*cr.Spec.ForProvider.LambdaConfig.DefineAuthChallenge)
		}
		if cr.Spec.ForProvider.LambdaConfig.KMSKeyID != nil {
			f8.SetKMSKeyID(*cr.Spec.ForProvider.LambdaConfig.KMSKeyID)
		}
		if cr.Spec.ForProvider.LambdaConfig.PostAuthentication != nil {
			f8.SetPostAuthentication(*cr.Spec.ForProvider.LambdaConfig.PostAuthentication)
		}
		if cr.Spec.ForProvider.LambdaConfig.PostConfirmation != nil {
			f8.SetPostConfirmation(*cr.Spec.ForProvider.LambdaConfig.PostConfirmation)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreAuthentication != nil {
			f8.SetPreAuthentication(*cr.Spec.ForProvider.LambdaConfig.PreAuthentication)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreSignUp != nil {
			f8.SetPreSignUp(*cr.Spec.ForProvider.LambdaConfig.PreSignUp)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreTokenGeneration != nil {
			f8.SetPreTokenGeneration(*cr.Spec.ForProvider.LambdaConfig.PreTokenGeneration)
		}
		if cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig != nil {
			f8f11 := &svcsdk.PreTokenGenerationVersionConfigType{}
			if cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig.LambdaARN != nil {
				f8f11.SetLambdaArn(*cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig.LambdaARN)
			}
			if cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig.LambdaVersion != nil {
				f8f11.SetLambdaVersion(*cr.Spec.ForProvider.LambdaConfig.PreTokenGenerationConfig.LambdaVersion)
			}
			f8.SetPreTokenGenerationConfig(f8f11)
		}
		if cr.Spec.ForProvider.LambdaConfig.UserMigration != nil {
			f8.SetUserMigration(*cr.Spec.ForProvider.LambdaConfig.UserMigration)
		}
		if cr.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse != nil {
			f8.SetVerifyAuthChallengeResponse(*cr.Spec.ForProvider.LambdaConfig.VerifyAuthChallengeResponse)
		}
		res.SetLambdaConfig(f8)
	}
	if cr.Spec.ForProvider.MFAConfiguration != nil {
		res.SetMfaConfiguration(*cr.Spec.ForProvider.MFAConfiguration)
	}
	if cr.Spec.ForProvider.Policies != nil {
		f10 := &svcsdk.UserPoolPolicyType{}
		if cr.Spec.ForProvider.Policies.PasswordPolicy != nil {
			f10f0 := &svcsdk.PasswordPolicyType{}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.MinimumLength != nil {
				f10f0.SetMinimumLength(*cr.Spec.ForProvider.Policies.PasswordPolicy.MinimumLength)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireLowercase != nil {
				f10f0.SetRequireLowercase(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireLowercase)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireNumbers != nil {
				f10f0.SetRequireNumbers(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireNumbers)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireSymbols != nil {
				f10f0.SetRequireSymbols(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireSymbols)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.RequireUppercase != nil {
				f10f0.SetRequireUppercase(*cr.Spec.ForProvider.Policies.PasswordPolicy.RequireUppercase)
			}
			if cr.Spec.ForProvider.Policies.PasswordPolicy.TemporaryPasswordValidityDays != nil {
				f10f0.SetTemporaryPasswordValidityDays(*cr.Spec.ForProvider.Policies.PasswordPolicy.TemporaryPasswordValidityDays)
			}
			f10.SetPasswordPolicy(f10f0)
		}
		res.SetPolicies(f10)
	}
	if cr.Spec.ForProvider.SmsAuthenticationMessage != nil {
		res.SetSmsAuthenticationMessage(*cr.Spec.ForProvider.SmsAuthenticationMessage)
	}
	if cr.Spec.ForProvider.SmsConfiguration != nil {
		f12 := &svcsdk.SmsConfigurationType{}
		if cr.Spec.ForProvider.SmsConfiguration.ExternalID != nil {
			f12.SetExternalId(*cr.Spec.ForProvider.SmsConfiguration.ExternalID)
		}
		if cr.Spec.ForProvider.SmsConfiguration.SNSCallerARN != nil {
			f12.SetSnsCallerArn(*cr.Spec.ForProvider.SmsConfiguration.SNSCallerARN)
		}
		if cr.Spec.ForProvider.SmsConfiguration.SNSRegion != nil {
			f12.SetSnsRegion(*cr.Spec.ForProvider.SmsConfiguration.SNSRegion)
		}
		res.SetSmsConfiguration(f12)
	}
	if cr.Spec.ForProvider.SmsVerificationMessage != nil {
		res.SetSmsVerificationMessage(*cr.Spec.ForProvider.SmsVerificationMessage)
	}
	if cr.Spec.ForProvider.UserAttributeUpdateSettings != nil {
		f14 := &svcsdk.UserAttributeUpdateSettingsType{}
		if cr.Spec.ForProvider.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate != nil {
			f14f0 := []*string{}
			for _, f14f0iter := range cr.Spec.ForProvider.UserAttributeUpdateSettings.AttributesRequireVerificationBeforeUpdate {
				var f14f0elem string
				f14f0elem = *f14f0iter
				f14f0 = append(f14f0, &f14f0elem)
			}
			f14.SetAttributesRequireVerificationBeforeUpdate(f14f0)
		}
		res.SetUserAttributeUpdateSettings(f14)
	}
	if cr.Spec.ForProvider.UserPoolAddOns != nil {
		f15 := &svcsdk.UserPoolAddOnsType{}
		if cr.Spec.ForProvider.UserPoolAddOns.AdvancedSecurityMode != nil {
			f15.SetAdvancedSecurityMode(*cr.Spec.ForProvider.UserPoolAddOns.AdvancedSecurityMode)
		}
		res.SetUserPoolAddOns(f15)
	}
	if cr.Spec.ForProvider.UserPoolTags != nil {
		f17 := map[string]*string{}
		for f17key, f17valiter := range cr.Spec.ForProvider.UserPoolTags {
			var f17val string
			f17val = *f17valiter
			f17[f17key] = &f17val
		}
		res.SetUserPoolTags(f17)
	}
	if cr.Spec.ForProvider.VerificationMessageTemplate != nil {
		f18 := &svcsdk.VerificationMessageTemplateType{}
		if cr.Spec.ForProvider.VerificationMessageTemplate.DefaultEmailOption != nil {
			f18.SetDefaultEmailOption(*cr.Spec.ForProvider.VerificationMessageTemplate.DefaultEmailOption)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessage != nil {
			f18.SetEmailMessage(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessage)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessageByLink != nil {
			f18.SetEmailMessageByLink(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailMessageByLink)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubject != nil {
			f18.SetEmailSubject(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubject)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubjectByLink != nil {
			f18.SetEmailSubjectByLink(*cr.Spec.ForProvider.VerificationMessageTemplate.EmailSubjectByLink)
		}
		if cr.Spec.ForProvider.VerificationMessageTemplate.SmsMessage != nil {
			f18.SetSmsMessage(*cr.Spec.ForProvider.VerificationMessageTemplate.SmsMessage)
		}
		res.SetVerificationMessageTemplate(f18)
	}

	return res
}

// GenerateDeleteUserPoolInput returns a deletion input.
func GenerateDeleteUserPoolInput(cr *svcapitypes.UserPool) *svcsdk.DeleteUserPoolInput {
	res := &svcsdk.DeleteUserPoolInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
