/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package dbinstance

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/docdb"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/docdb/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeDBInstancesInput returns input for read
// operation.
func GenerateDescribeDBInstancesInput(cr *svcapitypes.DBInstance) *svcsdk.DescribeDBInstancesInput {
	res := &svcsdk.DescribeDBInstancesInput{}

	if cr.Status.AtProvider.DBInstanceIdentifier != nil {
		res.SetDBInstanceIdentifier(*cr.Status.AtProvider.DBInstanceIdentifier)
	}

	return res
}

// GenerateDBInstance returns the current state in the form of *svcapitypes.DBInstance.
func GenerateDBInstance(resp *svcsdk.DescribeDBInstancesOutput) *svcapitypes.DBInstance {
	cr := &svcapitypes.DBInstance{}

	found := false
	for _, elem := range resp.DBInstances {
		if elem.AutoMinorVersionUpgrade != nil {
			cr.Spec.ForProvider.AutoMinorVersionUpgrade = elem.AutoMinorVersionUpgrade
		} else {
			cr.Spec.ForProvider.AutoMinorVersionUpgrade = nil
		}
		if elem.AvailabilityZone != nil {
			cr.Spec.ForProvider.AvailabilityZone = elem.AvailabilityZone
		} else {
			cr.Spec.ForProvider.AvailabilityZone = nil
		}
		if elem.BackupRetentionPeriod != nil {
			cr.Status.AtProvider.BackupRetentionPeriod = elem.BackupRetentionPeriod
		} else {
			cr.Status.AtProvider.BackupRetentionPeriod = nil
		}
		if elem.CACertificateIdentifier != nil {
			cr.Spec.ForProvider.CACertificateIdentifier = elem.CACertificateIdentifier
		} else {
			cr.Spec.ForProvider.CACertificateIdentifier = nil
		}
		if elem.CertificateDetails != nil {
			f4 := &svcapitypes.CertificateDetails{}
			if elem.CertificateDetails.CAIdentifier != nil {
				f4.CAIdentifier = elem.CertificateDetails.CAIdentifier
			}
			if elem.CertificateDetails.ValidTill != nil {
				f4.ValidTill = &metav1.Time{*elem.CertificateDetails.ValidTill}
			}
			cr.Status.AtProvider.CertificateDetails = f4
		} else {
			cr.Status.AtProvider.CertificateDetails = nil
		}
		if elem.CopyTagsToSnapshot != nil {
			cr.Spec.ForProvider.CopyTagsToSnapshot = elem.CopyTagsToSnapshot
		} else {
			cr.Spec.ForProvider.CopyTagsToSnapshot = nil
		}
		if elem.DBClusterIdentifier != nil {
			cr.Status.AtProvider.DBClusterIdentifier = elem.DBClusterIdentifier
		} else {
			cr.Status.AtProvider.DBClusterIdentifier = nil
		}
		if elem.DBInstanceArn != nil {
			cr.Status.AtProvider.DBInstanceARN = elem.DBInstanceArn
		} else {
			cr.Status.AtProvider.DBInstanceARN = nil
		}
		if elem.DBInstanceClass != nil {
			cr.Spec.ForProvider.DBInstanceClass = elem.DBInstanceClass
		} else {
			cr.Spec.ForProvider.DBInstanceClass = nil
		}
		if elem.DBInstanceIdentifier != nil {
			cr.Status.AtProvider.DBInstanceIdentifier = elem.DBInstanceIdentifier
		} else {
			cr.Status.AtProvider.DBInstanceIdentifier = nil
		}
		if elem.DBInstanceStatus != nil {
			cr.Status.AtProvider.DBInstanceStatus = elem.DBInstanceStatus
		} else {
			cr.Status.AtProvider.DBInstanceStatus = nil
		}
		if elem.DBSubnetGroup != nil {
			f11 := &svcapitypes.DBSubnetGroup_SDK{}
			if elem.DBSubnetGroup.DBSubnetGroupArn != nil {
				f11.DBSubnetGroupARN = elem.DBSubnetGroup.DBSubnetGroupArn
			}
			if elem.DBSubnetGroup.DBSubnetGroupDescription != nil {
				f11.DBSubnetGroupDescription = elem.DBSubnetGroup.DBSubnetGroupDescription
			}
			if elem.DBSubnetGroup.DBSubnetGroupName != nil {
				f11.DBSubnetGroupName = elem.DBSubnetGroup.DBSubnetGroupName
			}
			if elem.DBSubnetGroup.SubnetGroupStatus != nil {
				f11.SubnetGroupStatus = elem.DBSubnetGroup.SubnetGroupStatus
			}
			if elem.DBSubnetGroup.Subnets != nil {
				f11f4 := []*svcapitypes.Subnet{}
				for _, f11f4iter := range elem.DBSubnetGroup.Subnets {
					f11f4elem := &svcapitypes.Subnet{}
					if f11f4iter.SubnetAvailabilityZone != nil {
						f11f4elemf0 := &svcapitypes.AvailabilityZone{}
						if f11f4iter.SubnetAvailabilityZone.Name != nil {
							f11f4elemf0.Name = f11f4iter.SubnetAvailabilityZone.Name
						}
						f11f4elem.SubnetAvailabilityZone = f11f4elemf0
					}
					if f11f4iter.SubnetIdentifier != nil {
						f11f4elem.SubnetIdentifier = f11f4iter.SubnetIdentifier
					}
					if f11f4iter.SubnetStatus != nil {
						f11f4elem.SubnetStatus = f11f4iter.SubnetStatus
					}
					f11f4 = append(f11f4, f11f4elem)
				}
				f11.Subnets = f11f4
			}
			if elem.DBSubnetGroup.VpcId != nil {
				f11.VPCID = elem.DBSubnetGroup.VpcId
			}
			cr.Status.AtProvider.DBSubnetGroup = f11
		} else {
			cr.Status.AtProvider.DBSubnetGroup = nil
		}
		if elem.DbiResourceId != nil {
			cr.Status.AtProvider.DBIResourceID = elem.DbiResourceId
		} else {
			cr.Status.AtProvider.DBIResourceID = nil
		}
		if elem.EnabledCloudwatchLogsExports != nil {
			f13 := []*string{}
			for _, f13iter := range elem.EnabledCloudwatchLogsExports {
				var f13elem string
				f13elem = *f13iter
				f13 = append(f13, &f13elem)
			}
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = f13
		} else {
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = nil
		}
		if elem.Endpoint != nil {
			f14 := &svcapitypes.Endpoint{}
			if elem.Endpoint.Address != nil {
				f14.Address = elem.Endpoint.Address
			}
			if elem.Endpoint.HostedZoneId != nil {
				f14.HostedZoneID = elem.Endpoint.HostedZoneId
			}
			if elem.Endpoint.Port != nil {
				f14.Port = elem.Endpoint.Port
			}
			cr.Status.AtProvider.Endpoint = f14
		} else {
			cr.Status.AtProvider.Endpoint = nil
		}
		if elem.Engine != nil {
			cr.Spec.ForProvider.Engine = elem.Engine
		} else {
			cr.Spec.ForProvider.Engine = nil
		}
		if elem.EngineVersion != nil {
			cr.Status.AtProvider.EngineVersion = elem.EngineVersion
		} else {
			cr.Status.AtProvider.EngineVersion = nil
		}
		if elem.InstanceCreateTime != nil {
			cr.Status.AtProvider.InstanceCreateTime = &metav1.Time{*elem.InstanceCreateTime}
		} else {
			cr.Status.AtProvider.InstanceCreateTime = nil
		}
		if elem.KmsKeyId != nil {
			cr.Status.AtProvider.KMSKeyID = elem.KmsKeyId
		} else {
			cr.Status.AtProvider.KMSKeyID = nil
		}
		if elem.LatestRestorableTime != nil {
			cr.Status.AtProvider.LatestRestorableTime = &metav1.Time{*elem.LatestRestorableTime}
		} else {
			cr.Status.AtProvider.LatestRestorableTime = nil
		}
		if elem.PendingModifiedValues != nil {
			f20 := &svcapitypes.PendingModifiedValues{}
			if elem.PendingModifiedValues.AllocatedStorage != nil {
				f20.AllocatedStorage = elem.PendingModifiedValues.AllocatedStorage
			}
			if elem.PendingModifiedValues.BackupRetentionPeriod != nil {
				f20.BackupRetentionPeriod = elem.PendingModifiedValues.BackupRetentionPeriod
			}
			if elem.PendingModifiedValues.CACertificateIdentifier != nil {
				f20.CACertificateIdentifier = elem.PendingModifiedValues.CACertificateIdentifier
			}
			if elem.PendingModifiedValues.DBInstanceClass != nil {
				f20.DBInstanceClass = elem.PendingModifiedValues.DBInstanceClass
			}
			if elem.PendingModifiedValues.DBInstanceIdentifier != nil {
				f20.DBInstanceIdentifier = elem.PendingModifiedValues.DBInstanceIdentifier
			}
			if elem.PendingModifiedValues.DBSubnetGroupName != nil {
				f20.DBSubnetGroupName = elem.PendingModifiedValues.DBSubnetGroupName
			}
			if elem.PendingModifiedValues.EngineVersion != nil {
				f20.EngineVersion = elem.PendingModifiedValues.EngineVersion
			}
			if elem.PendingModifiedValues.Iops != nil {
				f20.IOPS = elem.PendingModifiedValues.Iops
			}
			if elem.PendingModifiedValues.LicenseModel != nil {
				f20.LicenseModel = elem.PendingModifiedValues.LicenseModel
			}
			if elem.PendingModifiedValues.MasterUserPassword != nil {
				f20.MasterUserPassword = elem.PendingModifiedValues.MasterUserPassword
			}
			if elem.PendingModifiedValues.MultiAZ != nil {
				f20.MultiAZ = elem.PendingModifiedValues.MultiAZ
			}
			if elem.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
				f20f11 := &svcapitypes.PendingCloudwatchLogsExports{}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
					f20f11f0 := []*string{}
					for _, f20f11f0iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
						var f20f11f0elem string
						f20f11f0elem = *f20f11f0iter
						f20f11f0 = append(f20f11f0, &f20f11f0elem)
					}
					f20f11.LogTypesToDisable = f20f11f0
				}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
					f20f11f1 := []*string{}
					for _, f20f11f1iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
						var f20f11f1elem string
						f20f11f1elem = *f20f11f1iter
						f20f11f1 = append(f20f11f1, &f20f11f1elem)
					}
					f20f11.LogTypesToEnable = f20f11f1
				}
				f20.PendingCloudwatchLogsExports = f20f11
			}
			if elem.PendingModifiedValues.Port != nil {
				f20.Port = elem.PendingModifiedValues.Port
			}
			if elem.PendingModifiedValues.StorageType != nil {
				f20.StorageType = elem.PendingModifiedValues.StorageType
			}
			cr.Status.AtProvider.PendingModifiedValues = f20
		} else {
			cr.Status.AtProvider.PendingModifiedValues = nil
		}
		if elem.PerformanceInsightsEnabled != nil {
			cr.Status.AtProvider.PerformanceInsightsEnabled = elem.PerformanceInsightsEnabled
		} else {
			cr.Status.AtProvider.PerformanceInsightsEnabled = nil
		}
		if elem.PerformanceInsightsKMSKeyId != nil {
			cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = elem.PerformanceInsightsKMSKeyId
		} else {
			cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = nil
		}
		if elem.PreferredBackupWindow != nil {
			cr.Status.AtProvider.PreferredBackupWindow = elem.PreferredBackupWindow
		} else {
			cr.Status.AtProvider.PreferredBackupWindow = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = nil
		}
		if elem.PromotionTier != nil {
			cr.Spec.ForProvider.PromotionTier = elem.PromotionTier
		} else {
			cr.Spec.ForProvider.PromotionTier = nil
		}
		if elem.PubliclyAccessible != nil {
			cr.Status.AtProvider.PubliclyAccessible = elem.PubliclyAccessible
		} else {
			cr.Status.AtProvider.PubliclyAccessible = nil
		}
		if elem.StatusInfos != nil {
			f27 := []*svcapitypes.DBInstanceStatusInfo{}
			for _, f27iter := range elem.StatusInfos {
				f27elem := &svcapitypes.DBInstanceStatusInfo{}
				if f27iter.Message != nil {
					f27elem.Message = f27iter.Message
				}
				if f27iter.Normal != nil {
					f27elem.Normal = f27iter.Normal
				}
				if f27iter.Status != nil {
					f27elem.Status = f27iter.Status
				}
				if f27iter.StatusType != nil {
					f27elem.StatusType = f27iter.StatusType
				}
				f27 = append(f27, f27elem)
			}
			cr.Status.AtProvider.StatusInfos = f27
		} else {
			cr.Status.AtProvider.StatusInfos = nil
		}
		if elem.StorageEncrypted != nil {
			cr.Status.AtProvider.StorageEncrypted = elem.StorageEncrypted
		} else {
			cr.Status.AtProvider.StorageEncrypted = nil
		}
		if elem.VpcSecurityGroups != nil {
			f29 := []*svcapitypes.VPCSecurityGroupMembership{}
			for _, f29iter := range elem.VpcSecurityGroups {
				f29elem := &svcapitypes.VPCSecurityGroupMembership{}
				if f29iter.Status != nil {
					f29elem.Status = f29iter.Status
				}
				if f29iter.VpcSecurityGroupId != nil {
					f29elem.VPCSecurityGroupID = f29iter.VpcSecurityGroupId
				}
				f29 = append(f29, f29elem)
			}
			cr.Status.AtProvider.VPCSecurityGroups = f29
		} else {
			cr.Status.AtProvider.VPCSecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateDBInstanceInput returns a create input.
func GenerateCreateDBInstanceInput(cr *svcapitypes.DBInstance) *svcsdk.CreateDBInstanceInput {
	res := &svcsdk.CreateDBInstanceInput{}

	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Spec.ForProvider.AvailabilityZone != nil {
		res.SetAvailabilityZone(*cr.Spec.ForProvider.AvailabilityZone)
	}
	if cr.Spec.ForProvider.CACertificateIdentifier != nil {
		res.SetCACertificateIdentifier(*cr.Spec.ForProvider.CACertificateIdentifier)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBInstanceClass != nil {
		res.SetDBInstanceClass(*cr.Spec.ForProvider.DBInstanceClass)
	}
	if cr.Spec.ForProvider.EnablePerformanceInsights != nil {
		res.SetEnablePerformanceInsights(*cr.Spec.ForProvider.EnablePerformanceInsights)
	}
	if cr.Spec.ForProvider.Engine != nil {
		res.SetEngine(*cr.Spec.ForProvider.Engine)
	}
	if cr.Spec.ForProvider.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*cr.Spec.ForProvider.PerformanceInsightsKMSKeyID)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.PromotionTier != nil {
		res.SetPromotionTier(*cr.Spec.ForProvider.PromotionTier)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f10 := []*svcsdk.Tag{}
		for _, f10iter := range cr.Spec.ForProvider.Tags {
			f10elem := &svcsdk.Tag{}
			if f10iter.Key != nil {
				f10elem.SetKey(*f10iter.Key)
			}
			if f10iter.Value != nil {
				f10elem.SetValue(*f10iter.Value)
			}
			f10 = append(f10, f10elem)
		}
		res.SetTags(f10)
	}

	return res
}

// GenerateModifyDBInstanceInput returns an update input.
func GenerateModifyDBInstanceInput(cr *svcapitypes.DBInstance) *svcsdk.ModifyDBInstanceInput {
	res := &svcsdk.ModifyDBInstanceInput{}

	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Spec.ForProvider.CACertificateIdentifier != nil {
		res.SetCACertificateIdentifier(*cr.Spec.ForProvider.CACertificateIdentifier)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBInstanceClass != nil {
		res.SetDBInstanceClass(*cr.Spec.ForProvider.DBInstanceClass)
	}
	if cr.Spec.ForProvider.EnablePerformanceInsights != nil {
		res.SetEnablePerformanceInsights(*cr.Spec.ForProvider.EnablePerformanceInsights)
	}
	if cr.Spec.ForProvider.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*cr.Spec.ForProvider.PerformanceInsightsKMSKeyID)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.PromotionTier != nil {
		res.SetPromotionTier(*cr.Spec.ForProvider.PromotionTier)
	}

	return res
}

// GenerateDeleteDBInstanceInput returns a deletion input.
func GenerateDeleteDBInstanceInput(cr *svcapitypes.DBInstance) *svcsdk.DeleteDBInstanceInput {
	res := &svcsdk.DeleteDBInstanceInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "DBInstanceNotFound"
}
