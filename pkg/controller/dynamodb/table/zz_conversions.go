/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package table

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/dynamodb"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/dynamodb/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeTableInput returns input for read
// operation.
func GenerateDescribeTableInput(cr *svcapitypes.Table) *svcsdk.DescribeTableInput {
	res := &svcsdk.DescribeTableInput{}

	if cr.Status.AtProvider.TableName != nil {
		res.SetTableName(*cr.Status.AtProvider.TableName)
	}

	return res
}

// GenerateTable returns the current state in the form of *svcapitypes.Table.
func GenerateTable(resp *svcsdk.DescribeTableOutput) *svcapitypes.Table {
	cr := &svcapitypes.Table{}

	if resp.Table.ArchivalSummary != nil {
		f0 := &svcapitypes.ArchivalSummary{}
		if resp.Table.ArchivalSummary.ArchivalBackupArn != nil {
			f0.ArchivalBackupARN = resp.Table.ArchivalSummary.ArchivalBackupArn
		}
		if resp.Table.ArchivalSummary.ArchivalDateTime != nil {
			f0.ArchivalDateTime = &metav1.Time{*resp.Table.ArchivalSummary.ArchivalDateTime}
		}
		if resp.Table.ArchivalSummary.ArchivalReason != nil {
			f0.ArchivalReason = resp.Table.ArchivalSummary.ArchivalReason
		}
		cr.Status.AtProvider.ArchivalSummary = f0
	} else {
		cr.Status.AtProvider.ArchivalSummary = nil
	}
	if resp.Table.AttributeDefinitions != nil {
		f1 := []*svcapitypes.AttributeDefinition{}
		for _, f1iter := range resp.Table.AttributeDefinitions {
			f1elem := &svcapitypes.AttributeDefinition{}
			if f1iter.AttributeName != nil {
				f1elem.AttributeName = f1iter.AttributeName
			}
			if f1iter.AttributeType != nil {
				f1elem.AttributeType = f1iter.AttributeType
			}
			f1 = append(f1, f1elem)
		}
		cr.Spec.ForProvider.AttributeDefinitions = f1
	} else {
		cr.Spec.ForProvider.AttributeDefinitions = nil
	}
	if resp.Table.BillingModeSummary != nil {
		f2 := &svcapitypes.BillingModeSummary{}
		if resp.Table.BillingModeSummary.BillingMode != nil {
			f2.BillingMode = resp.Table.BillingModeSummary.BillingMode
		}
		if resp.Table.BillingModeSummary.LastUpdateToPayPerRequestDateTime != nil {
			f2.LastUpdateToPayPerRequestDateTime = &metav1.Time{*resp.Table.BillingModeSummary.LastUpdateToPayPerRequestDateTime}
		}
		cr.Status.AtProvider.BillingModeSummary = f2
	} else {
		cr.Status.AtProvider.BillingModeSummary = nil
	}
	if resp.Table.CreationDateTime != nil {
		cr.Status.AtProvider.CreationDateTime = &metav1.Time{*resp.Table.CreationDateTime}
	} else {
		cr.Status.AtProvider.CreationDateTime = nil
	}
	if resp.Table.DeletionProtectionEnabled != nil {
		cr.Spec.ForProvider.DeletionProtectionEnabled = resp.Table.DeletionProtectionEnabled
	} else {
		cr.Spec.ForProvider.DeletionProtectionEnabled = nil
	}
	if resp.Table.GlobalSecondaryIndexes != nil {
		f5 := []*svcapitypes.GlobalSecondaryIndex{}
		for _, f5iter := range resp.Table.GlobalSecondaryIndexes {
			f5elem := &svcapitypes.GlobalSecondaryIndex{}
			if f5iter.IndexName != nil {
				f5elem.IndexName = f5iter.IndexName
			}
			if f5iter.KeySchema != nil {
				f5elemf6 := []*svcapitypes.KeySchemaElement{}
				for _, f5elemf6iter := range f5iter.KeySchema {
					f5elemf6elem := &svcapitypes.KeySchemaElement{}
					if f5elemf6iter.AttributeName != nil {
						f5elemf6elem.AttributeName = f5elemf6iter.AttributeName
					}
					if f5elemf6iter.KeyType != nil {
						f5elemf6elem.KeyType = f5elemf6iter.KeyType
					}
					f5elemf6 = append(f5elemf6, f5elemf6elem)
				}
				f5elem.KeySchema = f5elemf6
			}
			if f5iter.Projection != nil {
				f5elemf7 := &svcapitypes.Projection{}
				if f5iter.Projection.NonKeyAttributes != nil {
					f5elemf7f0 := []*string{}
					for _, f5elemf7f0iter := range f5iter.Projection.NonKeyAttributes {
						var f5elemf7f0elem string
						f5elemf7f0elem = *f5elemf7f0iter
						f5elemf7f0 = append(f5elemf7f0, &f5elemf7f0elem)
					}
					f5elemf7.NonKeyAttributes = f5elemf7f0
				}
				if f5iter.Projection.ProjectionType != nil {
					f5elemf7.ProjectionType = f5iter.Projection.ProjectionType
				}
				f5elem.Projection = f5elemf7
			}
			if f5iter.ProvisionedThroughput != nil {
				f5elemf8 := &svcapitypes.ProvisionedThroughput{}
				if f5iter.ProvisionedThroughput.ReadCapacityUnits != nil {
					f5elemf8.ReadCapacityUnits = f5iter.ProvisionedThroughput.ReadCapacityUnits
				}
				if f5iter.ProvisionedThroughput.WriteCapacityUnits != nil {
					f5elemf8.WriteCapacityUnits = f5iter.ProvisionedThroughput.WriteCapacityUnits
				}
				f5elem.ProvisionedThroughput = f5elemf8
			}
			f5 = append(f5, f5elem)
		}
		cr.Spec.ForProvider.GlobalSecondaryIndexes = f5
	} else {
		cr.Spec.ForProvider.GlobalSecondaryIndexes = nil
	}
	if resp.Table.GlobalTableVersion != nil {
		cr.Status.AtProvider.GlobalTableVersion = resp.Table.GlobalTableVersion
	} else {
		cr.Status.AtProvider.GlobalTableVersion = nil
	}
	if resp.Table.ItemCount != nil {
		cr.Status.AtProvider.ItemCount = resp.Table.ItemCount
	} else {
		cr.Status.AtProvider.ItemCount = nil
	}
	if resp.Table.KeySchema != nil {
		f8 := []*svcapitypes.KeySchemaElement{}
		for _, f8iter := range resp.Table.KeySchema {
			f8elem := &svcapitypes.KeySchemaElement{}
			if f8iter.AttributeName != nil {
				f8elem.AttributeName = f8iter.AttributeName
			}
			if f8iter.KeyType != nil {
				f8elem.KeyType = f8iter.KeyType
			}
			f8 = append(f8, f8elem)
		}
		cr.Spec.ForProvider.KeySchema = f8
	} else {
		cr.Spec.ForProvider.KeySchema = nil
	}
	if resp.Table.LatestStreamArn != nil {
		cr.Status.AtProvider.LatestStreamARN = resp.Table.LatestStreamArn
	} else {
		cr.Status.AtProvider.LatestStreamARN = nil
	}
	if resp.Table.LatestStreamLabel != nil {
		cr.Status.AtProvider.LatestStreamLabel = resp.Table.LatestStreamLabel
	} else {
		cr.Status.AtProvider.LatestStreamLabel = nil
	}
	if resp.Table.LocalSecondaryIndexes != nil {
		f11 := []*svcapitypes.LocalSecondaryIndex{}
		for _, f11iter := range resp.Table.LocalSecondaryIndexes {
			f11elem := &svcapitypes.LocalSecondaryIndex{}
			if f11iter.IndexName != nil {
				f11elem.IndexName = f11iter.IndexName
			}
			if f11iter.KeySchema != nil {
				f11elemf4 := []*svcapitypes.KeySchemaElement{}
				for _, f11elemf4iter := range f11iter.KeySchema {
					f11elemf4elem := &svcapitypes.KeySchemaElement{}
					if f11elemf4iter.AttributeName != nil {
						f11elemf4elem.AttributeName = f11elemf4iter.AttributeName
					}
					if f11elemf4iter.KeyType != nil {
						f11elemf4elem.KeyType = f11elemf4iter.KeyType
					}
					f11elemf4 = append(f11elemf4, f11elemf4elem)
				}
				f11elem.KeySchema = f11elemf4
			}
			if f11iter.Projection != nil {
				f11elemf5 := &svcapitypes.Projection{}
				if f11iter.Projection.NonKeyAttributes != nil {
					f11elemf5f0 := []*string{}
					for _, f11elemf5f0iter := range f11iter.Projection.NonKeyAttributes {
						var f11elemf5f0elem string
						f11elemf5f0elem = *f11elemf5f0iter
						f11elemf5f0 = append(f11elemf5f0, &f11elemf5f0elem)
					}
					f11elemf5.NonKeyAttributes = f11elemf5f0
				}
				if f11iter.Projection.ProjectionType != nil {
					f11elemf5.ProjectionType = f11iter.Projection.ProjectionType
				}
				f11elem.Projection = f11elemf5
			}
			f11 = append(f11, f11elem)
		}
		cr.Spec.ForProvider.LocalSecondaryIndexes = f11
	} else {
		cr.Spec.ForProvider.LocalSecondaryIndexes = nil
	}
	if resp.Table.ProvisionedThroughput != nil {
		f12 := &svcapitypes.ProvisionedThroughput{}
		if resp.Table.ProvisionedThroughput.ReadCapacityUnits != nil {
			f12.ReadCapacityUnits = resp.Table.ProvisionedThroughput.ReadCapacityUnits
		}
		if resp.Table.ProvisionedThroughput.WriteCapacityUnits != nil {
			f12.WriteCapacityUnits = resp.Table.ProvisionedThroughput.WriteCapacityUnits
		}
		cr.Spec.ForProvider.ProvisionedThroughput = f12
	} else {
		cr.Spec.ForProvider.ProvisionedThroughput = nil
	}
	if resp.Table.Replicas != nil {
		f13 := []*svcapitypes.ReplicaDescription{}
		for _, f13iter := range resp.Table.Replicas {
			f13elem := &svcapitypes.ReplicaDescription{}
			if f13iter.GlobalSecondaryIndexes != nil {
				f13elemf0 := []*svcapitypes.ReplicaGlobalSecondaryIndexDescription{}
				for _, f13elemf0iter := range f13iter.GlobalSecondaryIndexes {
					f13elemf0elem := &svcapitypes.ReplicaGlobalSecondaryIndexDescription{}
					if f13elemf0iter.IndexName != nil {
						f13elemf0elem.IndexName = f13elemf0iter.IndexName
					}
					if f13elemf0iter.ProvisionedThroughputOverride != nil {
						f13elemf0elemf1 := &svcapitypes.ProvisionedThroughputOverride{}
						if f13elemf0iter.ProvisionedThroughputOverride.ReadCapacityUnits != nil {
							f13elemf0elemf1.ReadCapacityUnits = f13elemf0iter.ProvisionedThroughputOverride.ReadCapacityUnits
						}
						f13elemf0elem.ProvisionedThroughputOverride = f13elemf0elemf1
					}
					f13elemf0 = append(f13elemf0, f13elemf0elem)
				}
				f13elem.GlobalSecondaryIndexes = f13elemf0
			}
			if f13iter.KMSMasterKeyId != nil {
				f13elem.KMSMasterKeyID = f13iter.KMSMasterKeyId
			}
			if f13iter.ProvisionedThroughputOverride != nil {
				f13elemf2 := &svcapitypes.ProvisionedThroughputOverride{}
				if f13iter.ProvisionedThroughputOverride.ReadCapacityUnits != nil {
					f13elemf2.ReadCapacityUnits = f13iter.ProvisionedThroughputOverride.ReadCapacityUnits
				}
				f13elem.ProvisionedThroughputOverride = f13elemf2
			}
			if f13iter.RegionName != nil {
				f13elem.RegionName = f13iter.RegionName
			}
			if f13iter.ReplicaInaccessibleDateTime != nil {
				f13elem.ReplicaInaccessibleDateTime = &metav1.Time{*f13iter.ReplicaInaccessibleDateTime}
			}
			if f13iter.ReplicaStatus != nil {
				f13elem.ReplicaStatus = f13iter.ReplicaStatus
			}
			if f13iter.ReplicaStatusDescription != nil {
				f13elem.ReplicaStatusDescription = f13iter.ReplicaStatusDescription
			}
			if f13iter.ReplicaStatusPercentProgress != nil {
				f13elem.ReplicaStatusPercentProgress = f13iter.ReplicaStatusPercentProgress
			}
			if f13iter.ReplicaTableClassSummary != nil {
				f13elemf8 := &svcapitypes.TableClassSummary{}
				if f13iter.ReplicaTableClassSummary.LastUpdateDateTime != nil {
					f13elemf8.LastUpdateDateTime = &metav1.Time{*f13iter.ReplicaTableClassSummary.LastUpdateDateTime}
				}
				if f13iter.ReplicaTableClassSummary.TableClass != nil {
					f13elemf8.TableClass = f13iter.ReplicaTableClassSummary.TableClass
				}
				f13elem.ReplicaTableClassSummary = f13elemf8
			}
			f13 = append(f13, f13elem)
		}
		cr.Status.AtProvider.Replicas = f13
	} else {
		cr.Status.AtProvider.Replicas = nil
	}
	if resp.Table.RestoreSummary != nil {
		f14 := &svcapitypes.RestoreSummary{}
		if resp.Table.RestoreSummary.RestoreDateTime != nil {
			f14.RestoreDateTime = &metav1.Time{*resp.Table.RestoreSummary.RestoreDateTime}
		}
		if resp.Table.RestoreSummary.RestoreInProgress != nil {
			f14.RestoreInProgress = resp.Table.RestoreSummary.RestoreInProgress
		}
		if resp.Table.RestoreSummary.SourceBackupArn != nil {
			f14.SourceBackupARN = resp.Table.RestoreSummary.SourceBackupArn
		}
		if resp.Table.RestoreSummary.SourceTableArn != nil {
			f14.SourceTableARN = resp.Table.RestoreSummary.SourceTableArn
		}
		cr.Status.AtProvider.RestoreSummary = f14
	} else {
		cr.Status.AtProvider.RestoreSummary = nil
	}
	if resp.Table.SSEDescription != nil {
		f15 := &svcapitypes.SSEDescription{}
		if resp.Table.SSEDescription.InaccessibleEncryptionDateTime != nil {
			f15.InaccessibleEncryptionDateTime = &metav1.Time{*resp.Table.SSEDescription.InaccessibleEncryptionDateTime}
		}
		if resp.Table.SSEDescription.KMSMasterKeyArn != nil {
			f15.KMSMasterKeyARN = resp.Table.SSEDescription.KMSMasterKeyArn
		}
		if resp.Table.SSEDescription.SSEType != nil {
			f15.SSEType = resp.Table.SSEDescription.SSEType
		}
		if resp.Table.SSEDescription.Status != nil {
			f15.Status = resp.Table.SSEDescription.Status
		}
		cr.Status.AtProvider.SSEDescription = f15
	} else {
		cr.Status.AtProvider.SSEDescription = nil
	}
	if resp.Table.StreamSpecification != nil {
		f16 := &svcapitypes.StreamSpecification{}
		if resp.Table.StreamSpecification.StreamEnabled != nil {
			f16.StreamEnabled = resp.Table.StreamSpecification.StreamEnabled
		}
		if resp.Table.StreamSpecification.StreamViewType != nil {
			f16.StreamViewType = resp.Table.StreamSpecification.StreamViewType
		}
		cr.Spec.ForProvider.StreamSpecification = f16
	} else {
		cr.Spec.ForProvider.StreamSpecification = nil
	}
	if resp.Table.TableArn != nil {
		cr.Status.AtProvider.TableARN = resp.Table.TableArn
	} else {
		cr.Status.AtProvider.TableARN = nil
	}
	if resp.Table.TableClassSummary != nil {
		f18 := &svcapitypes.TableClassSummary{}
		if resp.Table.TableClassSummary.LastUpdateDateTime != nil {
			f18.LastUpdateDateTime = &metav1.Time{*resp.Table.TableClassSummary.LastUpdateDateTime}
		}
		if resp.Table.TableClassSummary.TableClass != nil {
			f18.TableClass = resp.Table.TableClassSummary.TableClass
		}
		cr.Status.AtProvider.TableClassSummary = f18
	} else {
		cr.Status.AtProvider.TableClassSummary = nil
	}
	if resp.Table.TableId != nil {
		cr.Status.AtProvider.TableID = resp.Table.TableId
	} else {
		cr.Status.AtProvider.TableID = nil
	}
	if resp.Table.TableName != nil {
		cr.Status.AtProvider.TableName = resp.Table.TableName
	} else {
		cr.Status.AtProvider.TableName = nil
	}
	if resp.Table.TableSizeBytes != nil {
		cr.Status.AtProvider.TableSizeBytes = resp.Table.TableSizeBytes
	} else {
		cr.Status.AtProvider.TableSizeBytes = nil
	}
	if resp.Table.TableStatus != nil {
		cr.Status.AtProvider.TableStatus = resp.Table.TableStatus
	} else {
		cr.Status.AtProvider.TableStatus = nil
	}

	return cr
}

// GenerateCreateTableInput returns a create input.
func GenerateCreateTableInput(cr *svcapitypes.Table) *svcsdk.CreateTableInput {
	res := &svcsdk.CreateTableInput{}

	if cr.Spec.ForProvider.AttributeDefinitions != nil {
		f0 := []*svcsdk.AttributeDefinition{}
		for _, f0iter := range cr.Spec.ForProvider.AttributeDefinitions {
			f0elem := &svcsdk.AttributeDefinition{}
			if f0iter.AttributeName != nil {
				f0elem.SetAttributeName(*f0iter.AttributeName)
			}
			if f0iter.AttributeType != nil {
				f0elem.SetAttributeType(*f0iter.AttributeType)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAttributeDefinitions(f0)
	}
	if cr.Spec.ForProvider.BillingMode != nil {
		res.SetBillingMode(*cr.Spec.ForProvider.BillingMode)
	}
	if cr.Spec.ForProvider.DeletionProtectionEnabled != nil {
		res.SetDeletionProtectionEnabled(*cr.Spec.ForProvider.DeletionProtectionEnabled)
	}
	if cr.Spec.ForProvider.GlobalSecondaryIndexes != nil {
		f3 := []*svcsdk.GlobalSecondaryIndex{}
		for _, f3iter := range cr.Spec.ForProvider.GlobalSecondaryIndexes {
			f3elem := &svcsdk.GlobalSecondaryIndex{}
			if f3iter.IndexName != nil {
				f3elem.SetIndexName(*f3iter.IndexName)
			}
			if f3iter.KeySchema != nil {
				f3elemf1 := []*svcsdk.KeySchemaElement{}
				for _, f3elemf1iter := range f3iter.KeySchema {
					f3elemf1elem := &svcsdk.KeySchemaElement{}
					if f3elemf1iter.AttributeName != nil {
						f3elemf1elem.SetAttributeName(*f3elemf1iter.AttributeName)
					}
					if f3elemf1iter.KeyType != nil {
						f3elemf1elem.SetKeyType(*f3elemf1iter.KeyType)
					}
					f3elemf1 = append(f3elemf1, f3elemf1elem)
				}
				f3elem.SetKeySchema(f3elemf1)
			}
			if f3iter.Projection != nil {
				f3elemf2 := &svcsdk.Projection{}
				if f3iter.Projection.NonKeyAttributes != nil {
					f3elemf2f0 := []*string{}
					for _, f3elemf2f0iter := range f3iter.Projection.NonKeyAttributes {
						var f3elemf2f0elem string
						f3elemf2f0elem = *f3elemf2f0iter
						f3elemf2f0 = append(f3elemf2f0, &f3elemf2f0elem)
					}
					f3elemf2.SetNonKeyAttributes(f3elemf2f0)
				}
				if f3iter.Projection.ProjectionType != nil {
					f3elemf2.SetProjectionType(*f3iter.Projection.ProjectionType)
				}
				f3elem.SetProjection(f3elemf2)
			}
			if f3iter.ProvisionedThroughput != nil {
				f3elemf3 := &svcsdk.ProvisionedThroughput{}
				if f3iter.ProvisionedThroughput.ReadCapacityUnits != nil {
					f3elemf3.SetReadCapacityUnits(*f3iter.ProvisionedThroughput.ReadCapacityUnits)
				}
				if f3iter.ProvisionedThroughput.WriteCapacityUnits != nil {
					f3elemf3.SetWriteCapacityUnits(*f3iter.ProvisionedThroughput.WriteCapacityUnits)
				}
				f3elem.SetProvisionedThroughput(f3elemf3)
			}
			f3 = append(f3, f3elem)
		}
		res.SetGlobalSecondaryIndexes(f3)
	}
	if cr.Spec.ForProvider.KeySchema != nil {
		f4 := []*svcsdk.KeySchemaElement{}
		for _, f4iter := range cr.Spec.ForProvider.KeySchema {
			f4elem := &svcsdk.KeySchemaElement{}
			if f4iter.AttributeName != nil {
				f4elem.SetAttributeName(*f4iter.AttributeName)
			}
			if f4iter.KeyType != nil {
				f4elem.SetKeyType(*f4iter.KeyType)
			}
			f4 = append(f4, f4elem)
		}
		res.SetKeySchema(f4)
	}
	if cr.Spec.ForProvider.LocalSecondaryIndexes != nil {
		f5 := []*svcsdk.LocalSecondaryIndex{}
		for _, f5iter := range cr.Spec.ForProvider.LocalSecondaryIndexes {
			f5elem := &svcsdk.LocalSecondaryIndex{}
			if f5iter.IndexName != nil {
				f5elem.SetIndexName(*f5iter.IndexName)
			}
			if f5iter.KeySchema != nil {
				f5elemf1 := []*svcsdk.KeySchemaElement{}
				for _, f5elemf1iter := range f5iter.KeySchema {
					f5elemf1elem := &svcsdk.KeySchemaElement{}
					if f5elemf1iter.AttributeName != nil {
						f5elemf1elem.SetAttributeName(*f5elemf1iter.AttributeName)
					}
					if f5elemf1iter.KeyType != nil {
						f5elemf1elem.SetKeyType(*f5elemf1iter.KeyType)
					}
					f5elemf1 = append(f5elemf1, f5elemf1elem)
				}
				f5elem.SetKeySchema(f5elemf1)
			}
			if f5iter.Projection != nil {
				f5elemf2 := &svcsdk.Projection{}
				if f5iter.Projection.NonKeyAttributes != nil {
					f5elemf2f0 := []*string{}
					for _, f5elemf2f0iter := range f5iter.Projection.NonKeyAttributes {
						var f5elemf2f0elem string
						f5elemf2f0elem = *f5elemf2f0iter
						f5elemf2f0 = append(f5elemf2f0, &f5elemf2f0elem)
					}
					f5elemf2.SetNonKeyAttributes(f5elemf2f0)
				}
				if f5iter.Projection.ProjectionType != nil {
					f5elemf2.SetProjectionType(*f5iter.Projection.ProjectionType)
				}
				f5elem.SetProjection(f5elemf2)
			}
			f5 = append(f5, f5elem)
		}
		res.SetLocalSecondaryIndexes(f5)
	}
	if cr.Spec.ForProvider.ProvisionedThroughput != nil {
		f6 := &svcsdk.ProvisionedThroughput{}
		if cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits != nil {
			f6.SetReadCapacityUnits(*cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits)
		}
		if cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits != nil {
			f6.SetWriteCapacityUnits(*cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits)
		}
		res.SetProvisionedThroughput(f6)
	}
	if cr.Spec.ForProvider.SSESpecification != nil {
		f7 := &svcsdk.SSESpecification{}
		if cr.Spec.ForProvider.SSESpecification.Enabled != nil {
			f7.SetEnabled(*cr.Spec.ForProvider.SSESpecification.Enabled)
		}
		if cr.Spec.ForProvider.SSESpecification.KMSMasterKeyID != nil {
			f7.SetKMSMasterKeyId(*cr.Spec.ForProvider.SSESpecification.KMSMasterKeyID)
		}
		if cr.Spec.ForProvider.SSESpecification.SSEType != nil {
			f7.SetSSEType(*cr.Spec.ForProvider.SSESpecification.SSEType)
		}
		res.SetSSESpecification(f7)
	}
	if cr.Spec.ForProvider.StreamSpecification != nil {
		f8 := &svcsdk.StreamSpecification{}
		if cr.Spec.ForProvider.StreamSpecification.StreamEnabled != nil {
			f8.SetStreamEnabled(*cr.Spec.ForProvider.StreamSpecification.StreamEnabled)
		}
		if cr.Spec.ForProvider.StreamSpecification.StreamViewType != nil {
			f8.SetStreamViewType(*cr.Spec.ForProvider.StreamSpecification.StreamViewType)
		}
		res.SetStreamSpecification(f8)
	}
	if cr.Spec.ForProvider.TableClass != nil {
		res.SetTableClass(*cr.Spec.ForProvider.TableClass)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f10 := []*svcsdk.Tag{}
		for _, f10iter := range cr.Spec.ForProvider.Tags {
			f10elem := &svcsdk.Tag{}
			if f10iter.Key != nil {
				f10elem.SetKey(*f10iter.Key)
			}
			if f10iter.Value != nil {
				f10elem.SetValue(*f10iter.Value)
			}
			f10 = append(f10, f10elem)
		}
		res.SetTags(f10)
	}

	return res
}

// GenerateUpdateTableInput returns an update input.
func GenerateUpdateTableInput(cr *svcapitypes.Table) *svcsdk.UpdateTableInput {
	res := &svcsdk.UpdateTableInput{}

	if cr.Spec.ForProvider.AttributeDefinitions != nil {
		f0 := []*svcsdk.AttributeDefinition{}
		for _, f0iter := range cr.Spec.ForProvider.AttributeDefinitions {
			f0elem := &svcsdk.AttributeDefinition{}
			if f0iter.AttributeName != nil {
				f0elem.SetAttributeName(*f0iter.AttributeName)
			}
			if f0iter.AttributeType != nil {
				f0elem.SetAttributeType(*f0iter.AttributeType)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAttributeDefinitions(f0)
	}
	if cr.Spec.ForProvider.BillingMode != nil {
		res.SetBillingMode(*cr.Spec.ForProvider.BillingMode)
	}
	if cr.Spec.ForProvider.DeletionProtectionEnabled != nil {
		res.SetDeletionProtectionEnabled(*cr.Spec.ForProvider.DeletionProtectionEnabled)
	}
	if cr.Spec.ForProvider.ProvisionedThroughput != nil {
		f4 := &svcsdk.ProvisionedThroughput{}
		if cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits != nil {
			f4.SetReadCapacityUnits(*cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits)
		}
		if cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits != nil {
			f4.SetWriteCapacityUnits(*cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits)
		}
		res.SetProvisionedThroughput(f4)
	}
	if cr.Spec.ForProvider.SSESpecification != nil {
		f6 := &svcsdk.SSESpecification{}
		if cr.Spec.ForProvider.SSESpecification.Enabled != nil {
			f6.SetEnabled(*cr.Spec.ForProvider.SSESpecification.Enabled)
		}
		if cr.Spec.ForProvider.SSESpecification.KMSMasterKeyID != nil {
			f6.SetKMSMasterKeyId(*cr.Spec.ForProvider.SSESpecification.KMSMasterKeyID)
		}
		if cr.Spec.ForProvider.SSESpecification.SSEType != nil {
			f6.SetSSEType(*cr.Spec.ForProvider.SSESpecification.SSEType)
		}
		res.SetSSESpecification(f6)
	}
	if cr.Spec.ForProvider.StreamSpecification != nil {
		f7 := &svcsdk.StreamSpecification{}
		if cr.Spec.ForProvider.StreamSpecification.StreamEnabled != nil {
			f7.SetStreamEnabled(*cr.Spec.ForProvider.StreamSpecification.StreamEnabled)
		}
		if cr.Spec.ForProvider.StreamSpecification.StreamViewType != nil {
			f7.SetStreamViewType(*cr.Spec.ForProvider.StreamSpecification.StreamViewType)
		}
		res.SetStreamSpecification(f7)
	}
	if cr.Spec.ForProvider.TableClass != nil {
		res.SetTableClass(*cr.Spec.ForProvider.TableClass)
	}
	if cr.Status.AtProvider.TableName != nil {
		res.SetTableName(*cr.Status.AtProvider.TableName)
	}

	return res
}

// GenerateDeleteTableInput returns a deletion input.
func GenerateDeleteTableInput(cr *svcapitypes.Table) *svcsdk.DeleteTableInput {
	res := &svcsdk.DeleteTableInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
