/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package table

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/dynamodb"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane/provider-aws/apis/dynamodb/v1alpha1"
	awsclients "github.com/crossplane/provider-aws/pkg/clients"
)

// GenerateDescribeTableInput returns input for read
// operation.
func GenerateDescribeTableInput(cr *svcapitypes.Table) *svcsdk.DescribeTableInput {
	res := &svcsdk.DescribeTableInput{}

	if cr.Status.AtProvider.TableName != nil {
		res.SetTableName(*cr.Status.AtProvider.TableName)
	}

	return res
}

// GenerateTable returns the current state in the form of *svcapitypes.Table.
func GenerateTable(resp *svcsdk.DescribeTableOutput) *svcapitypes.Table {
	cr := &svcapitypes.Table{}

	if resp.Table.ArchivalSummary != nil {
		f0 := &svcapitypes.ArchivalSummary{}
		if resp.Table.ArchivalSummary.ArchivalBackupArn != nil {
			f0.ArchivalBackupARN = resp.Table.ArchivalSummary.ArchivalBackupArn
		}
		if resp.Table.ArchivalSummary.ArchivalDateTime != nil {
			f0.ArchivalDateTime = &metav1.Time{*resp.Table.ArchivalSummary.ArchivalDateTime}
		}
		if resp.Table.ArchivalSummary.ArchivalReason != nil {
			f0.ArchivalReason = resp.Table.ArchivalSummary.ArchivalReason
		}
		cr.Status.AtProvider.ArchivalSummary = f0
	}
	if resp.Table.BillingModeSummary != nil {
		f2 := &svcapitypes.BillingModeSummary{}
		if resp.Table.BillingModeSummary.BillingMode != nil {
			f2.BillingMode = resp.Table.BillingModeSummary.BillingMode
		}
		if resp.Table.BillingModeSummary.LastUpdateToPayPerRequestDateTime != nil {
			f2.LastUpdateToPayPerRequestDateTime = &metav1.Time{*resp.Table.BillingModeSummary.LastUpdateToPayPerRequestDateTime}
		}
		cr.Status.AtProvider.BillingModeSummary = f2
	}
	if resp.Table.CreationDateTime != nil {
		cr.Status.AtProvider.CreationDateTime = &metav1.Time{*resp.Table.CreationDateTime}
	}
	if resp.Table.GlobalTableVersion != nil {
		cr.Status.AtProvider.GlobalTableVersion = resp.Table.GlobalTableVersion
	}
	if resp.Table.ItemCount != nil {
		cr.Status.AtProvider.ItemCount = resp.Table.ItemCount
	}
	if resp.Table.LatestStreamArn != nil {
		cr.Status.AtProvider.LatestStreamARN = resp.Table.LatestStreamArn
	}
	if resp.Table.LatestStreamLabel != nil {
		cr.Status.AtProvider.LatestStreamLabel = resp.Table.LatestStreamLabel
	}
	if resp.Table.Replicas != nil {
		f12 := []*svcapitypes.ReplicaDescription{}
		for _, f12iter := range resp.Table.Replicas {
			f12elem := &svcapitypes.ReplicaDescription{}
			if f12iter.GlobalSecondaryIndexes != nil {
				f12elemf0 := []*svcapitypes.ReplicaGlobalSecondaryIndexDescription{}
				for _, f12elemf0iter := range f12iter.GlobalSecondaryIndexes {
					f12elemf0elem := &svcapitypes.ReplicaGlobalSecondaryIndexDescription{}
					if f12elemf0iter.IndexName != nil {
						f12elemf0elem.IndexName = f12elemf0iter.IndexName
					}
					if f12elemf0iter.ProvisionedThroughputOverride != nil {
						f12elemf0elemf1 := &svcapitypes.ProvisionedThroughputOverride{}
						if f12elemf0iter.ProvisionedThroughputOverride.ReadCapacityUnits != nil {
							f12elemf0elemf1.ReadCapacityUnits = f12elemf0iter.ProvisionedThroughputOverride.ReadCapacityUnits
						}
						f12elemf0elem.ProvisionedThroughputOverride = f12elemf0elemf1
					}
					f12elemf0 = append(f12elemf0, f12elemf0elem)
				}
				f12elem.GlobalSecondaryIndexes = f12elemf0
			}
			if f12iter.KMSMasterKeyId != nil {
				f12elem.KMSMasterKeyID = f12iter.KMSMasterKeyId
			}
			if f12iter.ProvisionedThroughputOverride != nil {
				f12elemf2 := &svcapitypes.ProvisionedThroughputOverride{}
				if f12iter.ProvisionedThroughputOverride.ReadCapacityUnits != nil {
					f12elemf2.ReadCapacityUnits = f12iter.ProvisionedThroughputOverride.ReadCapacityUnits
				}
				f12elem.ProvisionedThroughputOverride = f12elemf2
			}
			if f12iter.RegionName != nil {
				f12elem.RegionName = f12iter.RegionName
			}
			if f12iter.ReplicaInaccessibleDateTime != nil {
				f12elem.ReplicaInaccessibleDateTime = &metav1.Time{*f12iter.ReplicaInaccessibleDateTime}
			}
			if f12iter.ReplicaStatus != nil {
				f12elem.ReplicaStatus = f12iter.ReplicaStatus
			}
			if f12iter.ReplicaStatusDescription != nil {
				f12elem.ReplicaStatusDescription = f12iter.ReplicaStatusDescription
			}
			if f12iter.ReplicaStatusPercentProgress != nil {
				f12elem.ReplicaStatusPercentProgress = f12iter.ReplicaStatusPercentProgress
			}
			f12 = append(f12, f12elem)
		}
		cr.Status.AtProvider.Replicas = f12
	}
	if resp.Table.RestoreSummary != nil {
		f13 := &svcapitypes.RestoreSummary{}
		if resp.Table.RestoreSummary.RestoreDateTime != nil {
			f13.RestoreDateTime = &metav1.Time{*resp.Table.RestoreSummary.RestoreDateTime}
		}
		if resp.Table.RestoreSummary.RestoreInProgress != nil {
			f13.RestoreInProgress = resp.Table.RestoreSummary.RestoreInProgress
		}
		if resp.Table.RestoreSummary.SourceBackupArn != nil {
			f13.SourceBackupARN = resp.Table.RestoreSummary.SourceBackupArn
		}
		if resp.Table.RestoreSummary.SourceTableArn != nil {
			f13.SourceTableARN = resp.Table.RestoreSummary.SourceTableArn
		}
		cr.Status.AtProvider.RestoreSummary = f13
	}
	if resp.Table.SSEDescription != nil {
		f14 := &svcapitypes.SSEDescription{}
		if resp.Table.SSEDescription.InaccessibleEncryptionDateTime != nil {
			f14.InaccessibleEncryptionDateTime = &metav1.Time{*resp.Table.SSEDescription.InaccessibleEncryptionDateTime}
		}
		if resp.Table.SSEDescription.KMSMasterKeyArn != nil {
			f14.KMSMasterKeyARN = resp.Table.SSEDescription.KMSMasterKeyArn
		}
		if resp.Table.SSEDescription.SSEType != nil {
			f14.SSEType = resp.Table.SSEDescription.SSEType
		}
		if resp.Table.SSEDescription.Status != nil {
			f14.Status = resp.Table.SSEDescription.Status
		}
		cr.Status.AtProvider.SSEDescription = f14
	}
	if resp.Table.TableArn != nil {
		cr.Status.AtProvider.TableARN = resp.Table.TableArn
	}
	if resp.Table.TableId != nil {
		cr.Status.AtProvider.TableID = resp.Table.TableId
	}
	if resp.Table.TableName != nil {
		cr.Status.AtProvider.TableName = resp.Table.TableName
	}
	if resp.Table.TableSizeBytes != nil {
		cr.Status.AtProvider.TableSizeBytes = resp.Table.TableSizeBytes
	}
	if resp.Table.TableStatus != nil {
		cr.Status.AtProvider.TableStatus = resp.Table.TableStatus
	}

	return cr
}

func lateInitialize(cr *svcapitypes.Table, resp *svcsdk.DescribeTableOutput) error {
	if len(resp.Table.AttributeDefinitions) != 0 && len(cr.Spec.ForProvider.AttributeDefinitions) == 0 {
		cr.Spec.ForProvider.AttributeDefinitions = make([]*svcapitypes.AttributeDefinition, len(resp.Table.AttributeDefinitions))
		for i0 := range resp.Table.AttributeDefinitions {
			if resp.Table.AttributeDefinitions[i0] != nil {
				if cr.Spec.ForProvider.AttributeDefinitions[i0] == nil {
					cr.Spec.ForProvider.AttributeDefinitions[i0] = &svcapitypes.AttributeDefinition{}
				}
				cr.Spec.ForProvider.AttributeDefinitions[i0].AttributeName = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.AttributeDefinitions[i0].AttributeName, resp.Table.AttributeDefinitions[i0].AttributeName)
				cr.Spec.ForProvider.AttributeDefinitions[i0].AttributeType = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.AttributeDefinitions[i0].AttributeType, resp.Table.AttributeDefinitions[i0].AttributeType)
			}
		}
	}
	if len(resp.Table.GlobalSecondaryIndexes) != 0 && len(cr.Spec.ForProvider.GlobalSecondaryIndexes) == 0 {
		cr.Spec.ForProvider.GlobalSecondaryIndexes = make([]*svcapitypes.GlobalSecondaryIndex, len(resp.Table.GlobalSecondaryIndexes))
		for i0 := range resp.Table.GlobalSecondaryIndexes {
			if resp.Table.GlobalSecondaryIndexes[i0] != nil {
				if cr.Spec.ForProvider.GlobalSecondaryIndexes[i0] == nil {
					cr.Spec.ForProvider.GlobalSecondaryIndexes[i0] = &svcapitypes.GlobalSecondaryIndex{}
				}
				cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].IndexName = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].IndexName, resp.Table.GlobalSecondaryIndexes[i0].IndexName)
				if len(resp.Table.GlobalSecondaryIndexes[i0].KeySchema) != 0 && len(cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].KeySchema) == 0 {
					cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].KeySchema = make([]*svcapitypes.KeySchemaElement, len(resp.Table.GlobalSecondaryIndexes[i0].KeySchema))
					for i2 := range resp.Table.GlobalSecondaryIndexes[i0].KeySchema {
						if resp.Table.GlobalSecondaryIndexes[i0].KeySchema[i2] != nil {
							if cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].KeySchema[i2] == nil {
								cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].KeySchema[i2] = &svcapitypes.KeySchemaElement{}
							}
							cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].KeySchema[i2].AttributeName = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].KeySchema[i2].AttributeName, resp.Table.GlobalSecondaryIndexes[i0].KeySchema[i2].AttributeName)
							cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].KeySchema[i2].KeyType = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].KeySchema[i2].KeyType, resp.Table.GlobalSecondaryIndexes[i0].KeySchema[i2].KeyType)
						}
					}
				}
				if resp.Table.GlobalSecondaryIndexes[i0].Projection != nil {
					if cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].Projection == nil {
						cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].Projection = &svcapitypes.Projection{}
					}
					if len(resp.Table.GlobalSecondaryIndexes[i0].Projection.NonKeyAttributes) != 0 && len(cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].Projection.NonKeyAttributes) == 0 {
						cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].Projection.NonKeyAttributes = make([]*string, len(resp.Table.GlobalSecondaryIndexes[i0].Projection.NonKeyAttributes))
						for i3 := range resp.Table.GlobalSecondaryIndexes[i0].Projection.NonKeyAttributes {
							cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].Projection.NonKeyAttributes[i3] = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].Projection.NonKeyAttributes[i3], resp.Table.GlobalSecondaryIndexes[i0].Projection.NonKeyAttributes[i3])
						}
					}
					cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].Projection.ProjectionType = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].Projection.ProjectionType, resp.Table.GlobalSecondaryIndexes[i0].Projection.ProjectionType)
				}
				if resp.Table.GlobalSecondaryIndexes[i0].ProvisionedThroughput != nil {
					if cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].ProvisionedThroughput == nil {
						cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].ProvisionedThroughput = &svcapitypes.ProvisionedThroughput{}
					}
					cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].ProvisionedThroughput.ReadCapacityUnits = awsclients.LateInitializeInt64Ptr(cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].ProvisionedThroughput.ReadCapacityUnits, resp.Table.GlobalSecondaryIndexes[i0].ProvisionedThroughput.ReadCapacityUnits)
					cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].ProvisionedThroughput.WriteCapacityUnits = awsclients.LateInitializeInt64Ptr(cr.Spec.ForProvider.GlobalSecondaryIndexes[i0].ProvisionedThroughput.WriteCapacityUnits, resp.Table.GlobalSecondaryIndexes[i0].ProvisionedThroughput.WriteCapacityUnits)
				}
			}
		}
	}
	if len(resp.Table.KeySchema) != 0 && len(cr.Spec.ForProvider.KeySchema) == 0 {
		cr.Spec.ForProvider.KeySchema = make([]*svcapitypes.KeySchemaElement, len(resp.Table.KeySchema))
		for i0 := range resp.Table.KeySchema {
			if resp.Table.KeySchema[i0] != nil {
				if cr.Spec.ForProvider.KeySchema[i0] == nil {
					cr.Spec.ForProvider.KeySchema[i0] = &svcapitypes.KeySchemaElement{}
				}
				cr.Spec.ForProvider.KeySchema[i0].AttributeName = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.KeySchema[i0].AttributeName, resp.Table.KeySchema[i0].AttributeName)
				cr.Spec.ForProvider.KeySchema[i0].KeyType = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.KeySchema[i0].KeyType, resp.Table.KeySchema[i0].KeyType)
			}
		}
	}
	if len(resp.Table.LocalSecondaryIndexes) != 0 && len(cr.Spec.ForProvider.LocalSecondaryIndexes) == 0 {
		cr.Spec.ForProvider.LocalSecondaryIndexes = make([]*svcapitypes.LocalSecondaryIndex, len(resp.Table.LocalSecondaryIndexes))
		for i0 := range resp.Table.LocalSecondaryIndexes {
			if resp.Table.LocalSecondaryIndexes[i0] != nil {
				if cr.Spec.ForProvider.LocalSecondaryIndexes[i0] == nil {
					cr.Spec.ForProvider.LocalSecondaryIndexes[i0] = &svcapitypes.LocalSecondaryIndex{}
				}
				cr.Spec.ForProvider.LocalSecondaryIndexes[i0].IndexName = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.LocalSecondaryIndexes[i0].IndexName, resp.Table.LocalSecondaryIndexes[i0].IndexName)
				if len(resp.Table.LocalSecondaryIndexes[i0].KeySchema) != 0 && len(cr.Spec.ForProvider.LocalSecondaryIndexes[i0].KeySchema) == 0 {
					cr.Spec.ForProvider.LocalSecondaryIndexes[i0].KeySchema = make([]*svcapitypes.KeySchemaElement, len(resp.Table.LocalSecondaryIndexes[i0].KeySchema))
					for i2 := range resp.Table.LocalSecondaryIndexes[i0].KeySchema {
						if resp.Table.LocalSecondaryIndexes[i0].KeySchema[i2] != nil {
							if cr.Spec.ForProvider.LocalSecondaryIndexes[i0].KeySchema[i2] == nil {
								cr.Spec.ForProvider.LocalSecondaryIndexes[i0].KeySchema[i2] = &svcapitypes.KeySchemaElement{}
							}
							cr.Spec.ForProvider.LocalSecondaryIndexes[i0].KeySchema[i2].AttributeName = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.LocalSecondaryIndexes[i0].KeySchema[i2].AttributeName, resp.Table.LocalSecondaryIndexes[i0].KeySchema[i2].AttributeName)
							cr.Spec.ForProvider.LocalSecondaryIndexes[i0].KeySchema[i2].KeyType = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.LocalSecondaryIndexes[i0].KeySchema[i2].KeyType, resp.Table.LocalSecondaryIndexes[i0].KeySchema[i2].KeyType)
						}
					}
				}
				if resp.Table.LocalSecondaryIndexes[i0].Projection != nil {
					if cr.Spec.ForProvider.LocalSecondaryIndexes[i0].Projection == nil {
						cr.Spec.ForProvider.LocalSecondaryIndexes[i0].Projection = &svcapitypes.Projection{}
					}
					if len(resp.Table.LocalSecondaryIndexes[i0].Projection.NonKeyAttributes) != 0 && len(cr.Spec.ForProvider.LocalSecondaryIndexes[i0].Projection.NonKeyAttributes) == 0 {
						cr.Spec.ForProvider.LocalSecondaryIndexes[i0].Projection.NonKeyAttributes = make([]*string, len(resp.Table.LocalSecondaryIndexes[i0].Projection.NonKeyAttributes))
						for i3 := range resp.Table.LocalSecondaryIndexes[i0].Projection.NonKeyAttributes {
							cr.Spec.ForProvider.LocalSecondaryIndexes[i0].Projection.NonKeyAttributes[i3] = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.LocalSecondaryIndexes[i0].Projection.NonKeyAttributes[i3], resp.Table.LocalSecondaryIndexes[i0].Projection.NonKeyAttributes[i3])
						}
					}
					cr.Spec.ForProvider.LocalSecondaryIndexes[i0].Projection.ProjectionType = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.LocalSecondaryIndexes[i0].Projection.ProjectionType, resp.Table.LocalSecondaryIndexes[i0].Projection.ProjectionType)
				}
			}
		}
	}
	if resp.Table.ProvisionedThroughput != nil {
		if cr.Spec.ForProvider.ProvisionedThroughput == nil {
			cr.Spec.ForProvider.ProvisionedThroughput = &svcapitypes.ProvisionedThroughput{}
		}
		cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits = awsclients.LateInitializeInt64Ptr(cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits, resp.Table.ProvisionedThroughput.ReadCapacityUnits)
		cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits = awsclients.LateInitializeInt64Ptr(cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits, resp.Table.ProvisionedThroughput.WriteCapacityUnits)
	}
	if resp.Table.StreamSpecification != nil {
		if cr.Spec.ForProvider.StreamSpecification == nil {
			cr.Spec.ForProvider.StreamSpecification = &svcapitypes.StreamSpecification{}
		}
		cr.Spec.ForProvider.StreamSpecification.StreamEnabled = awsclients.LateInitializeBoolPtr(cr.Spec.ForProvider.StreamSpecification.StreamEnabled, resp.Table.StreamSpecification.StreamEnabled)
		cr.Spec.ForProvider.StreamSpecification.StreamViewType = awsclients.LateInitializeStringPtr(cr.Spec.ForProvider.StreamSpecification.StreamViewType, resp.Table.StreamSpecification.StreamViewType)
	}
	return nil
}

func basicUpToDateCheck(cr *svcapitypes.Table, resp *svcsdk.DescribeTableOutput) bool {
	if len(resp.Table.AttributeDefinitions) != len(cr.Spec.ForProvider.AttributeDefinitions) {
		return false
	}
	for i0 := range resp.Table.AttributeDefinitions {
		if (resp.Table.AttributeDefinitions[i0] != nil && cr.Spec.ForProvider.AttributeDefinitions[i0] == nil) || (resp.Table.AttributeDefinitions[i0] == nil && cr.Spec.ForProvider.AttributeDefinitions[i0] != nil) {
			return false
		}
		if resp.Table.AttributeDefinitions[i0] != nil && cr.Spec.ForProvider.AttributeDefinitions[i0] != nil {
			if awsclients.StringValue(cr.Spec.ForProvider.AttributeDefinitions[i0].AttributeName) != awsclients.StringValue(resp.Table.AttributeDefinitions[i0].AttributeName) {
				return false
			}
			if awsclients.StringValue(cr.Spec.ForProvider.AttributeDefinitions[i0].AttributeType) != awsclients.StringValue(resp.Table.AttributeDefinitions[i0].AttributeType) {
				return false
			}
		}
	}
	// Please handle cr.Spec.ForProvider.BillingMode manually.
	if (resp.Table.ProvisionedThroughput != nil && cr.Spec.ForProvider.ProvisionedThroughput == nil) || (resp.Table.ProvisionedThroughput == nil && cr.Spec.ForProvider.ProvisionedThroughput != nil) {
		return false
	}
	if resp.Table.ProvisionedThroughput != nil && cr.Spec.ForProvider.ProvisionedThroughput != nil {
		if awsclients.Int64Value(cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits) != awsclients.Int64Value(resp.Table.ProvisionedThroughput.ReadCapacityUnits) {
			return false
		}
		if awsclients.Int64Value(cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits) != awsclients.Int64Value(resp.Table.ProvisionedThroughput.WriteCapacityUnits) {
			return false
		}
	}
	// Please handle cr.Spec.ForProvider.SSESpecification manually.
	if (resp.Table.StreamSpecification != nil && cr.Spec.ForProvider.StreamSpecification == nil) || (resp.Table.StreamSpecification == nil && cr.Spec.ForProvider.StreamSpecification != nil) {
		return false
	}
	if resp.Table.StreamSpecification != nil && cr.Spec.ForProvider.StreamSpecification != nil {
		if awsclients.BoolValue(cr.Spec.ForProvider.StreamSpecification.StreamEnabled) != awsclients.BoolValue(resp.Table.StreamSpecification.StreamEnabled) {
			return false
		}
		if awsclients.StringValue(cr.Spec.ForProvider.StreamSpecification.StreamViewType) != awsclients.StringValue(resp.Table.StreamSpecification.StreamViewType) {
			return false
		}
	}
	return true
}

// GenerateCreateTableInput returns a create input.
func GenerateCreateTableInput(cr *svcapitypes.Table) *svcsdk.CreateTableInput {
	res := &svcsdk.CreateTableInput{}

	if cr.Spec.ForProvider.AttributeDefinitions != nil {
		f0 := []*svcsdk.AttributeDefinition{}
		for _, f0iter := range cr.Spec.ForProvider.AttributeDefinitions {
			f0elem := &svcsdk.AttributeDefinition{}
			if f0iter.AttributeName != nil {
				f0elem.SetAttributeName(*f0iter.AttributeName)
			}
			if f0iter.AttributeType != nil {
				f0elem.SetAttributeType(*f0iter.AttributeType)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAttributeDefinitions(f0)
	}
	if cr.Spec.ForProvider.BillingMode != nil {
		res.SetBillingMode(*cr.Spec.ForProvider.BillingMode)
	}
	if cr.Spec.ForProvider.GlobalSecondaryIndexes != nil {
		f2 := []*svcsdk.GlobalSecondaryIndex{}
		for _, f2iter := range cr.Spec.ForProvider.GlobalSecondaryIndexes {
			f2elem := &svcsdk.GlobalSecondaryIndex{}
			if f2iter.IndexName != nil {
				f2elem.SetIndexName(*f2iter.IndexName)
			}
			if f2iter.KeySchema != nil {
				f2elemf1 := []*svcsdk.KeySchemaElement{}
				for _, f2elemf1iter := range f2iter.KeySchema {
					f2elemf1elem := &svcsdk.KeySchemaElement{}
					if f2elemf1iter.AttributeName != nil {
						f2elemf1elem.SetAttributeName(*f2elemf1iter.AttributeName)
					}
					if f2elemf1iter.KeyType != nil {
						f2elemf1elem.SetKeyType(*f2elemf1iter.KeyType)
					}
					f2elemf1 = append(f2elemf1, f2elemf1elem)
				}
				f2elem.SetKeySchema(f2elemf1)
			}
			if f2iter.Projection != nil {
				f2elemf2 := &svcsdk.Projection{}
				if f2iter.Projection.NonKeyAttributes != nil {
					f2elemf2f0 := []*string{}
					for _, f2elemf2f0iter := range f2iter.Projection.NonKeyAttributes {
						var f2elemf2f0elem string
						f2elemf2f0elem = *f2elemf2f0iter
						f2elemf2f0 = append(f2elemf2f0, &f2elemf2f0elem)
					}
					f2elemf2.SetNonKeyAttributes(f2elemf2f0)
				}
				if f2iter.Projection.ProjectionType != nil {
					f2elemf2.SetProjectionType(*f2iter.Projection.ProjectionType)
				}
				f2elem.SetProjection(f2elemf2)
			}
			if f2iter.ProvisionedThroughput != nil {
				f2elemf3 := &svcsdk.ProvisionedThroughput{}
				if f2iter.ProvisionedThroughput.ReadCapacityUnits != nil {
					f2elemf3.SetReadCapacityUnits(*f2iter.ProvisionedThroughput.ReadCapacityUnits)
				}
				if f2iter.ProvisionedThroughput.WriteCapacityUnits != nil {
					f2elemf3.SetWriteCapacityUnits(*f2iter.ProvisionedThroughput.WriteCapacityUnits)
				}
				f2elem.SetProvisionedThroughput(f2elemf3)
			}
			f2 = append(f2, f2elem)
		}
		res.SetGlobalSecondaryIndexes(f2)
	}
	if cr.Spec.ForProvider.KeySchema != nil {
		f3 := []*svcsdk.KeySchemaElement{}
		for _, f3iter := range cr.Spec.ForProvider.KeySchema {
			f3elem := &svcsdk.KeySchemaElement{}
			if f3iter.AttributeName != nil {
				f3elem.SetAttributeName(*f3iter.AttributeName)
			}
			if f3iter.KeyType != nil {
				f3elem.SetKeyType(*f3iter.KeyType)
			}
			f3 = append(f3, f3elem)
		}
		res.SetKeySchema(f3)
	}
	if cr.Spec.ForProvider.LocalSecondaryIndexes != nil {
		f4 := []*svcsdk.LocalSecondaryIndex{}
		for _, f4iter := range cr.Spec.ForProvider.LocalSecondaryIndexes {
			f4elem := &svcsdk.LocalSecondaryIndex{}
			if f4iter.IndexName != nil {
				f4elem.SetIndexName(*f4iter.IndexName)
			}
			if f4iter.KeySchema != nil {
				f4elemf1 := []*svcsdk.KeySchemaElement{}
				for _, f4elemf1iter := range f4iter.KeySchema {
					f4elemf1elem := &svcsdk.KeySchemaElement{}
					if f4elemf1iter.AttributeName != nil {
						f4elemf1elem.SetAttributeName(*f4elemf1iter.AttributeName)
					}
					if f4elemf1iter.KeyType != nil {
						f4elemf1elem.SetKeyType(*f4elemf1iter.KeyType)
					}
					f4elemf1 = append(f4elemf1, f4elemf1elem)
				}
				f4elem.SetKeySchema(f4elemf1)
			}
			if f4iter.Projection != nil {
				f4elemf2 := &svcsdk.Projection{}
				if f4iter.Projection.NonKeyAttributes != nil {
					f4elemf2f0 := []*string{}
					for _, f4elemf2f0iter := range f4iter.Projection.NonKeyAttributes {
						var f4elemf2f0elem string
						f4elemf2f0elem = *f4elemf2f0iter
						f4elemf2f0 = append(f4elemf2f0, &f4elemf2f0elem)
					}
					f4elemf2.SetNonKeyAttributes(f4elemf2f0)
				}
				if f4iter.Projection.ProjectionType != nil {
					f4elemf2.SetProjectionType(*f4iter.Projection.ProjectionType)
				}
				f4elem.SetProjection(f4elemf2)
			}
			f4 = append(f4, f4elem)
		}
		res.SetLocalSecondaryIndexes(f4)
	}
	if cr.Spec.ForProvider.ProvisionedThroughput != nil {
		f5 := &svcsdk.ProvisionedThroughput{}
		if cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits != nil {
			f5.SetReadCapacityUnits(*cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits)
		}
		if cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits != nil {
			f5.SetWriteCapacityUnits(*cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits)
		}
		res.SetProvisionedThroughput(f5)
	}
	if cr.Spec.ForProvider.SSESpecification != nil {
		f6 := &svcsdk.SSESpecification{}
		if cr.Spec.ForProvider.SSESpecification.Enabled != nil {
			f6.SetEnabled(*cr.Spec.ForProvider.SSESpecification.Enabled)
		}
		if cr.Spec.ForProvider.SSESpecification.KMSMasterKeyID != nil {
			f6.SetKMSMasterKeyId(*cr.Spec.ForProvider.SSESpecification.KMSMasterKeyID)
		}
		if cr.Spec.ForProvider.SSESpecification.SSEType != nil {
			f6.SetSSEType(*cr.Spec.ForProvider.SSESpecification.SSEType)
		}
		res.SetSSESpecification(f6)
	}
	if cr.Spec.ForProvider.StreamSpecification != nil {
		f7 := &svcsdk.StreamSpecification{}
		if cr.Spec.ForProvider.StreamSpecification.StreamEnabled != nil {
			f7.SetStreamEnabled(*cr.Spec.ForProvider.StreamSpecification.StreamEnabled)
		}
		if cr.Spec.ForProvider.StreamSpecification.StreamViewType != nil {
			f7.SetStreamViewType(*cr.Spec.ForProvider.StreamSpecification.StreamViewType)
		}
		res.SetStreamSpecification(f7)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f8 := []*svcsdk.Tag{}
		for _, f8iter := range cr.Spec.ForProvider.Tags {
			f8elem := &svcsdk.Tag{}
			if f8iter.Key != nil {
				f8elem.SetKey(*f8iter.Key)
			}
			if f8iter.Value != nil {
				f8elem.SetValue(*f8iter.Value)
			}
			f8 = append(f8, f8elem)
		}
		res.SetTags(f8)
	}

	return res
}

// GenerateUpdateTableInput returns an update input.
func GenerateUpdateTableInput(cr *svcapitypes.Table) *svcsdk.UpdateTableInput {
	res := &svcsdk.UpdateTableInput{}

	if cr.Spec.ForProvider.AttributeDefinitions != nil {
		f0 := []*svcsdk.AttributeDefinition{}
		for _, f0iter := range cr.Spec.ForProvider.AttributeDefinitions {
			f0elem := &svcsdk.AttributeDefinition{}
			if f0iter.AttributeName != nil {
				f0elem.SetAttributeName(*f0iter.AttributeName)
			}
			if f0iter.AttributeType != nil {
				f0elem.SetAttributeType(*f0iter.AttributeType)
			}
			f0 = append(f0, f0elem)
		}
		res.SetAttributeDefinitions(f0)
	}
	if cr.Spec.ForProvider.BillingMode != nil {
		res.SetBillingMode(*cr.Spec.ForProvider.BillingMode)
	}
	if cr.Spec.ForProvider.ProvisionedThroughput != nil {
		f3 := &svcsdk.ProvisionedThroughput{}
		if cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits != nil {
			f3.SetReadCapacityUnits(*cr.Spec.ForProvider.ProvisionedThroughput.ReadCapacityUnits)
		}
		if cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits != nil {
			f3.SetWriteCapacityUnits(*cr.Spec.ForProvider.ProvisionedThroughput.WriteCapacityUnits)
		}
		res.SetProvisionedThroughput(f3)
	}
	if cr.Spec.ForProvider.SSESpecification != nil {
		f5 := &svcsdk.SSESpecification{}
		if cr.Spec.ForProvider.SSESpecification.Enabled != nil {
			f5.SetEnabled(*cr.Spec.ForProvider.SSESpecification.Enabled)
		}
		if cr.Spec.ForProvider.SSESpecification.KMSMasterKeyID != nil {
			f5.SetKMSMasterKeyId(*cr.Spec.ForProvider.SSESpecification.KMSMasterKeyID)
		}
		if cr.Spec.ForProvider.SSESpecification.SSEType != nil {
			f5.SetSSEType(*cr.Spec.ForProvider.SSESpecification.SSEType)
		}
		res.SetSSESpecification(f5)
	}
	if cr.Spec.ForProvider.StreamSpecification != nil {
		f6 := &svcsdk.StreamSpecification{}
		if cr.Spec.ForProvider.StreamSpecification.StreamEnabled != nil {
			f6.SetStreamEnabled(*cr.Spec.ForProvider.StreamSpecification.StreamEnabled)
		}
		if cr.Spec.ForProvider.StreamSpecification.StreamViewType != nil {
			f6.SetStreamViewType(*cr.Spec.ForProvider.StreamSpecification.StreamViewType)
		}
		res.SetStreamSpecification(f6)
	}
	if cr.Status.AtProvider.TableName != nil {
		res.SetTableName(*cr.Status.AtProvider.TableName)
	}

	return res
}

// GenerateDeleteTableInput returns a deletion input.
func GenerateDeleteTableInput(cr *svcapitypes.Table) *svcsdk.DeleteTableInput {
	res := &svcsdk.DeleteTableInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
