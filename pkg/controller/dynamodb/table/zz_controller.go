/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package table

import (
	"context"

	svcapi "github.com/aws/aws-sdk-go/service/dynamodb"
	svcsdk "github.com/aws/aws-sdk-go/service/dynamodb"
	svcsdkapi "github.com/aws/aws-sdk-go/service/dynamodb/dynamodbiface"
	"github.com/google/go-cmp/cmp"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/meta"
	"github.com/crossplane/crossplane-runtime/pkg/reconciler/managed"
	cpresource "github.com/crossplane/crossplane-runtime/pkg/resource"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/dynamodb/v1alpha1"
	awsclient "github.com/crossplane-contrib/provider-aws/pkg/clients"
)

const (
	errUnexpectedObject = "managed resource is not an Table resource"

	errCreateSession = "cannot create a new session"
	errCreate        = "cannot create Table in AWS"
	errUpdate        = "cannot update Table in AWS"
	errDescribe      = "failed to describe Table"
	errDelete        = "failed to delete Table"
)

type connector struct {
	kube client.Client
	opts []option
}

func (c *connector) Connect(ctx context.Context, mg cpresource.Managed) (managed.ExternalClient, error) {
	cr, ok := mg.(*svcapitypes.Table)
	if !ok {
		return nil, errors.New(errUnexpectedObject)
	}
	sess, err := awsclient.GetConfigV1(ctx, c.kube, mg, cr.Spec.ForProvider.Region)
	if err != nil {
		return nil, errors.Wrap(err, errCreateSession)
	}
	return newExternal(c.kube, svcapi.New(sess), c.opts), nil
}

func (e *external) Observe(ctx context.Context, mg cpresource.Managed) (managed.ExternalObservation, error) {
	cr, ok := mg.(*svcapitypes.Table)
	if !ok {
		return managed.ExternalObservation{}, errors.New(errUnexpectedObject)
	}
	if meta.GetExternalName(cr) == "" {
		return managed.ExternalObservation{
			ResourceExists: false,
		}, nil
	}
	input := GenerateDescribeTableInput(cr)
	if err := e.preObserve(ctx, cr, input); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "pre-observe failed")
	}
	resp, err := e.client.DescribeTableWithContext(ctx, input)
	if err != nil {
		return managed.ExternalObservation{ResourceExists: false}, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDescribe)
	}
	currentSpec := cr.Spec.ForProvider.DeepCopy()
	if err := e.lateInitialize(&cr.Spec.ForProvider, resp); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "late-init failed")
	}
	GenerateTable(resp).Status.AtProvider.DeepCopyInto(&cr.Status.AtProvider)

	upToDate, diff, err := e.isUpToDate(ctx, cr, resp)
	if err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "isUpToDate check failed")
	}
	return e.postObserve(ctx, cr, resp, managed.ExternalObservation{
		ResourceExists:          true,
		ResourceUpToDate:        upToDate,
		Diff:                    diff,
		ResourceLateInitialized: !cmp.Equal(&cr.Spec.ForProvider, currentSpec),
	}, nil)
}

func (e *external) Create(ctx context.Context, mg cpresource.Managed) (managed.ExternalCreation, error) {
	cr, ok := mg.(*svcapitypes.Table)
	if !ok {
		return managed.ExternalCreation{}, errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Creating())
	input := GenerateCreateTableInput(cr)
	if err := e.preCreate(ctx, cr, input); err != nil {
		return managed.ExternalCreation{}, errors.Wrap(err, "pre-create failed")
	}
	resp, err := e.client.CreateTableWithContext(ctx, input)
	if err != nil {
		return managed.ExternalCreation{}, awsclient.Wrap(err, errCreate)
	}

	if resp.TableDescription.ArchivalSummary != nil {
		f0 := &svcapitypes.ArchivalSummary{}
		if resp.TableDescription.ArchivalSummary.ArchivalBackupArn != nil {
			f0.ArchivalBackupARN = resp.TableDescription.ArchivalSummary.ArchivalBackupArn
		}
		if resp.TableDescription.ArchivalSummary.ArchivalDateTime != nil {
			f0.ArchivalDateTime = &metav1.Time{*resp.TableDescription.ArchivalSummary.ArchivalDateTime}
		}
		if resp.TableDescription.ArchivalSummary.ArchivalReason != nil {
			f0.ArchivalReason = resp.TableDescription.ArchivalSummary.ArchivalReason
		}
		cr.Status.AtProvider.ArchivalSummary = f0
	} else {
		cr.Status.AtProvider.ArchivalSummary = nil
	}
	if resp.TableDescription.AttributeDefinitions != nil {
		f1 := []*svcapitypes.AttributeDefinition{}
		for _, f1iter := range resp.TableDescription.AttributeDefinitions {
			f1elem := &svcapitypes.AttributeDefinition{}
			if f1iter.AttributeName != nil {
				f1elem.AttributeName = f1iter.AttributeName
			}
			if f1iter.AttributeType != nil {
				f1elem.AttributeType = f1iter.AttributeType
			}
			f1 = append(f1, f1elem)
		}
		cr.Spec.ForProvider.AttributeDefinitions = f1
	} else {
		cr.Spec.ForProvider.AttributeDefinitions = nil
	}
	if resp.TableDescription.BillingModeSummary != nil {
		f2 := &svcapitypes.BillingModeSummary{}
		if resp.TableDescription.BillingModeSummary.BillingMode != nil {
			f2.BillingMode = resp.TableDescription.BillingModeSummary.BillingMode
		}
		if resp.TableDescription.BillingModeSummary.LastUpdateToPayPerRequestDateTime != nil {
			f2.LastUpdateToPayPerRequestDateTime = &metav1.Time{*resp.TableDescription.BillingModeSummary.LastUpdateToPayPerRequestDateTime}
		}
		cr.Status.AtProvider.BillingModeSummary = f2
	} else {
		cr.Status.AtProvider.BillingModeSummary = nil
	}
	if resp.TableDescription.CreationDateTime != nil {
		cr.Status.AtProvider.CreationDateTime = &metav1.Time{*resp.TableDescription.CreationDateTime}
	} else {
		cr.Status.AtProvider.CreationDateTime = nil
	}
	if resp.TableDescription.DeletionProtectionEnabled != nil {
		cr.Spec.ForProvider.DeletionProtectionEnabled = resp.TableDescription.DeletionProtectionEnabled
	} else {
		cr.Spec.ForProvider.DeletionProtectionEnabled = nil
	}
	if resp.TableDescription.GlobalSecondaryIndexes != nil {
		f5 := []*svcapitypes.GlobalSecondaryIndex{}
		for _, f5iter := range resp.TableDescription.GlobalSecondaryIndexes {
			f5elem := &svcapitypes.GlobalSecondaryIndex{}
			if f5iter.IndexName != nil {
				f5elem.IndexName = f5iter.IndexName
			}
			if f5iter.KeySchema != nil {
				f5elemf6 := []*svcapitypes.KeySchemaElement{}
				for _, f5elemf6iter := range f5iter.KeySchema {
					f5elemf6elem := &svcapitypes.KeySchemaElement{}
					if f5elemf6iter.AttributeName != nil {
						f5elemf6elem.AttributeName = f5elemf6iter.AttributeName
					}
					if f5elemf6iter.KeyType != nil {
						f5elemf6elem.KeyType = f5elemf6iter.KeyType
					}
					f5elemf6 = append(f5elemf6, f5elemf6elem)
				}
				f5elem.KeySchema = f5elemf6
			}
			if f5iter.Projection != nil {
				f5elemf7 := &svcapitypes.Projection{}
				if f5iter.Projection.NonKeyAttributes != nil {
					f5elemf7f0 := []*string{}
					for _, f5elemf7f0iter := range f5iter.Projection.NonKeyAttributes {
						var f5elemf7f0elem string
						f5elemf7f0elem = *f5elemf7f0iter
						f5elemf7f0 = append(f5elemf7f0, &f5elemf7f0elem)
					}
					f5elemf7.NonKeyAttributes = f5elemf7f0
				}
				if f5iter.Projection.ProjectionType != nil {
					f5elemf7.ProjectionType = f5iter.Projection.ProjectionType
				}
				f5elem.Projection = f5elemf7
			}
			if f5iter.ProvisionedThroughput != nil {
				f5elemf8 := &svcapitypes.ProvisionedThroughput{}
				if f5iter.ProvisionedThroughput.ReadCapacityUnits != nil {
					f5elemf8.ReadCapacityUnits = f5iter.ProvisionedThroughput.ReadCapacityUnits
				}
				if f5iter.ProvisionedThroughput.WriteCapacityUnits != nil {
					f5elemf8.WriteCapacityUnits = f5iter.ProvisionedThroughput.WriteCapacityUnits
				}
				f5elem.ProvisionedThroughput = f5elemf8
			}
			f5 = append(f5, f5elem)
		}
		cr.Spec.ForProvider.GlobalSecondaryIndexes = f5
	} else {
		cr.Spec.ForProvider.GlobalSecondaryIndexes = nil
	}
	if resp.TableDescription.GlobalTableVersion != nil {
		cr.Status.AtProvider.GlobalTableVersion = resp.TableDescription.GlobalTableVersion
	} else {
		cr.Status.AtProvider.GlobalTableVersion = nil
	}
	if resp.TableDescription.ItemCount != nil {
		cr.Status.AtProvider.ItemCount = resp.TableDescription.ItemCount
	} else {
		cr.Status.AtProvider.ItemCount = nil
	}
	if resp.TableDescription.KeySchema != nil {
		f8 := []*svcapitypes.KeySchemaElement{}
		for _, f8iter := range resp.TableDescription.KeySchema {
			f8elem := &svcapitypes.KeySchemaElement{}
			if f8iter.AttributeName != nil {
				f8elem.AttributeName = f8iter.AttributeName
			}
			if f8iter.KeyType != nil {
				f8elem.KeyType = f8iter.KeyType
			}
			f8 = append(f8, f8elem)
		}
		cr.Spec.ForProvider.KeySchema = f8
	} else {
		cr.Spec.ForProvider.KeySchema = nil
	}
	if resp.TableDescription.LatestStreamArn != nil {
		cr.Status.AtProvider.LatestStreamARN = resp.TableDescription.LatestStreamArn
	} else {
		cr.Status.AtProvider.LatestStreamARN = nil
	}
	if resp.TableDescription.LatestStreamLabel != nil {
		cr.Status.AtProvider.LatestStreamLabel = resp.TableDescription.LatestStreamLabel
	} else {
		cr.Status.AtProvider.LatestStreamLabel = nil
	}
	if resp.TableDescription.LocalSecondaryIndexes != nil {
		f11 := []*svcapitypes.LocalSecondaryIndex{}
		for _, f11iter := range resp.TableDescription.LocalSecondaryIndexes {
			f11elem := &svcapitypes.LocalSecondaryIndex{}
			if f11iter.IndexName != nil {
				f11elem.IndexName = f11iter.IndexName
			}
			if f11iter.KeySchema != nil {
				f11elemf4 := []*svcapitypes.KeySchemaElement{}
				for _, f11elemf4iter := range f11iter.KeySchema {
					f11elemf4elem := &svcapitypes.KeySchemaElement{}
					if f11elemf4iter.AttributeName != nil {
						f11elemf4elem.AttributeName = f11elemf4iter.AttributeName
					}
					if f11elemf4iter.KeyType != nil {
						f11elemf4elem.KeyType = f11elemf4iter.KeyType
					}
					f11elemf4 = append(f11elemf4, f11elemf4elem)
				}
				f11elem.KeySchema = f11elemf4
			}
			if f11iter.Projection != nil {
				f11elemf5 := &svcapitypes.Projection{}
				if f11iter.Projection.NonKeyAttributes != nil {
					f11elemf5f0 := []*string{}
					for _, f11elemf5f0iter := range f11iter.Projection.NonKeyAttributes {
						var f11elemf5f0elem string
						f11elemf5f0elem = *f11elemf5f0iter
						f11elemf5f0 = append(f11elemf5f0, &f11elemf5f0elem)
					}
					f11elemf5.NonKeyAttributes = f11elemf5f0
				}
				if f11iter.Projection.ProjectionType != nil {
					f11elemf5.ProjectionType = f11iter.Projection.ProjectionType
				}
				f11elem.Projection = f11elemf5
			}
			f11 = append(f11, f11elem)
		}
		cr.Spec.ForProvider.LocalSecondaryIndexes = f11
	} else {
		cr.Spec.ForProvider.LocalSecondaryIndexes = nil
	}
	if resp.TableDescription.ProvisionedThroughput != nil {
		f12 := &svcapitypes.ProvisionedThroughput{}
		if resp.TableDescription.ProvisionedThroughput.ReadCapacityUnits != nil {
			f12.ReadCapacityUnits = resp.TableDescription.ProvisionedThroughput.ReadCapacityUnits
		}
		if resp.TableDescription.ProvisionedThroughput.WriteCapacityUnits != nil {
			f12.WriteCapacityUnits = resp.TableDescription.ProvisionedThroughput.WriteCapacityUnits
		}
		cr.Spec.ForProvider.ProvisionedThroughput = f12
	} else {
		cr.Spec.ForProvider.ProvisionedThroughput = nil
	}
	if resp.TableDescription.Replicas != nil {
		f13 := []*svcapitypes.ReplicaDescription{}
		for _, f13iter := range resp.TableDescription.Replicas {
			f13elem := &svcapitypes.ReplicaDescription{}
			if f13iter.GlobalSecondaryIndexes != nil {
				f13elemf0 := []*svcapitypes.ReplicaGlobalSecondaryIndexDescription{}
				for _, f13elemf0iter := range f13iter.GlobalSecondaryIndexes {
					f13elemf0elem := &svcapitypes.ReplicaGlobalSecondaryIndexDescription{}
					if f13elemf0iter.IndexName != nil {
						f13elemf0elem.IndexName = f13elemf0iter.IndexName
					}
					if f13elemf0iter.ProvisionedThroughputOverride != nil {
						f13elemf0elemf1 := &svcapitypes.ProvisionedThroughputOverride{}
						if f13elemf0iter.ProvisionedThroughputOverride.ReadCapacityUnits != nil {
							f13elemf0elemf1.ReadCapacityUnits = f13elemf0iter.ProvisionedThroughputOverride.ReadCapacityUnits
						}
						f13elemf0elem.ProvisionedThroughputOverride = f13elemf0elemf1
					}
					f13elemf0 = append(f13elemf0, f13elemf0elem)
				}
				f13elem.GlobalSecondaryIndexes = f13elemf0
			}
			if f13iter.KMSMasterKeyId != nil {
				f13elem.KMSMasterKeyID = f13iter.KMSMasterKeyId
			}
			if f13iter.ProvisionedThroughputOverride != nil {
				f13elemf2 := &svcapitypes.ProvisionedThroughputOverride{}
				if f13iter.ProvisionedThroughputOverride.ReadCapacityUnits != nil {
					f13elemf2.ReadCapacityUnits = f13iter.ProvisionedThroughputOverride.ReadCapacityUnits
				}
				f13elem.ProvisionedThroughputOverride = f13elemf2
			}
			if f13iter.RegionName != nil {
				f13elem.RegionName = f13iter.RegionName
			}
			if f13iter.ReplicaInaccessibleDateTime != nil {
				f13elem.ReplicaInaccessibleDateTime = &metav1.Time{*f13iter.ReplicaInaccessibleDateTime}
			}
			if f13iter.ReplicaStatus != nil {
				f13elem.ReplicaStatus = f13iter.ReplicaStatus
			}
			if f13iter.ReplicaStatusDescription != nil {
				f13elem.ReplicaStatusDescription = f13iter.ReplicaStatusDescription
			}
			if f13iter.ReplicaStatusPercentProgress != nil {
				f13elem.ReplicaStatusPercentProgress = f13iter.ReplicaStatusPercentProgress
			}
			if f13iter.ReplicaTableClassSummary != nil {
				f13elemf8 := &svcapitypes.TableClassSummary{}
				if f13iter.ReplicaTableClassSummary.LastUpdateDateTime != nil {
					f13elemf8.LastUpdateDateTime = &metav1.Time{*f13iter.ReplicaTableClassSummary.LastUpdateDateTime}
				}
				if f13iter.ReplicaTableClassSummary.TableClass != nil {
					f13elemf8.TableClass = f13iter.ReplicaTableClassSummary.TableClass
				}
				f13elem.ReplicaTableClassSummary = f13elemf8
			}
			f13 = append(f13, f13elem)
		}
		cr.Status.AtProvider.Replicas = f13
	} else {
		cr.Status.AtProvider.Replicas = nil
	}
	if resp.TableDescription.RestoreSummary != nil {
		f14 := &svcapitypes.RestoreSummary{}
		if resp.TableDescription.RestoreSummary.RestoreDateTime != nil {
			f14.RestoreDateTime = &metav1.Time{*resp.TableDescription.RestoreSummary.RestoreDateTime}
		}
		if resp.TableDescription.RestoreSummary.RestoreInProgress != nil {
			f14.RestoreInProgress = resp.TableDescription.RestoreSummary.RestoreInProgress
		}
		if resp.TableDescription.RestoreSummary.SourceBackupArn != nil {
			f14.SourceBackupARN = resp.TableDescription.RestoreSummary.SourceBackupArn
		}
		if resp.TableDescription.RestoreSummary.SourceTableArn != nil {
			f14.SourceTableARN = resp.TableDescription.RestoreSummary.SourceTableArn
		}
		cr.Status.AtProvider.RestoreSummary = f14
	} else {
		cr.Status.AtProvider.RestoreSummary = nil
	}
	if resp.TableDescription.SSEDescription != nil {
		f15 := &svcapitypes.SSEDescription{}
		if resp.TableDescription.SSEDescription.InaccessibleEncryptionDateTime != nil {
			f15.InaccessibleEncryptionDateTime = &metav1.Time{*resp.TableDescription.SSEDescription.InaccessibleEncryptionDateTime}
		}
		if resp.TableDescription.SSEDescription.KMSMasterKeyArn != nil {
			f15.KMSMasterKeyARN = resp.TableDescription.SSEDescription.KMSMasterKeyArn
		}
		if resp.TableDescription.SSEDescription.SSEType != nil {
			f15.SSEType = resp.TableDescription.SSEDescription.SSEType
		}
		if resp.TableDescription.SSEDescription.Status != nil {
			f15.Status = resp.TableDescription.SSEDescription.Status
		}
		cr.Status.AtProvider.SSEDescription = f15
	} else {
		cr.Status.AtProvider.SSEDescription = nil
	}
	if resp.TableDescription.StreamSpecification != nil {
		f16 := &svcapitypes.StreamSpecification{}
		if resp.TableDescription.StreamSpecification.StreamEnabled != nil {
			f16.StreamEnabled = resp.TableDescription.StreamSpecification.StreamEnabled
		}
		if resp.TableDescription.StreamSpecification.StreamViewType != nil {
			f16.StreamViewType = resp.TableDescription.StreamSpecification.StreamViewType
		}
		cr.Spec.ForProvider.StreamSpecification = f16
	} else {
		cr.Spec.ForProvider.StreamSpecification = nil
	}
	if resp.TableDescription.TableArn != nil {
		cr.Status.AtProvider.TableARN = resp.TableDescription.TableArn
	} else {
		cr.Status.AtProvider.TableARN = nil
	}
	if resp.TableDescription.TableClassSummary != nil {
		f18 := &svcapitypes.TableClassSummary{}
		if resp.TableDescription.TableClassSummary.LastUpdateDateTime != nil {
			f18.LastUpdateDateTime = &metav1.Time{*resp.TableDescription.TableClassSummary.LastUpdateDateTime}
		}
		if resp.TableDescription.TableClassSummary.TableClass != nil {
			f18.TableClass = resp.TableDescription.TableClassSummary.TableClass
		}
		cr.Status.AtProvider.TableClassSummary = f18
	} else {
		cr.Status.AtProvider.TableClassSummary = nil
	}
	if resp.TableDescription.TableId != nil {
		cr.Status.AtProvider.TableID = resp.TableDescription.TableId
	} else {
		cr.Status.AtProvider.TableID = nil
	}
	if resp.TableDescription.TableName != nil {
		cr.Status.AtProvider.TableName = resp.TableDescription.TableName
	} else {
		cr.Status.AtProvider.TableName = nil
	}
	if resp.TableDescription.TableSizeBytes != nil {
		cr.Status.AtProvider.TableSizeBytes = resp.TableDescription.TableSizeBytes
	} else {
		cr.Status.AtProvider.TableSizeBytes = nil
	}
	if resp.TableDescription.TableStatus != nil {
		cr.Status.AtProvider.TableStatus = resp.TableDescription.TableStatus
	} else {
		cr.Status.AtProvider.TableStatus = nil
	}

	return e.postCreate(ctx, cr, resp, managed.ExternalCreation{}, err)
}

func (e *external) Update(ctx context.Context, mg cpresource.Managed) (managed.ExternalUpdate, error) {
	cr, ok := mg.(*svcapitypes.Table)
	if !ok {
		return managed.ExternalUpdate{}, errors.New(errUnexpectedObject)
	}
	input := GenerateUpdateTableInput(cr)
	if err := e.preUpdate(ctx, cr, input); err != nil {
		return managed.ExternalUpdate{}, errors.Wrap(err, "pre-update failed")
	}
	resp, err := e.client.UpdateTableWithContext(ctx, input)
	return e.postUpdate(ctx, cr, resp, managed.ExternalUpdate{}, awsclient.Wrap(err, errUpdate))
}

func (e *external) Delete(ctx context.Context, mg cpresource.Managed) error {
	cr, ok := mg.(*svcapitypes.Table)
	if !ok {
		return errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Deleting())
	input := GenerateDeleteTableInput(cr)
	ignore, err := e.preDelete(ctx, cr, input)
	if err != nil {
		return errors.Wrap(err, "pre-delete failed")
	}
	if ignore {
		return nil
	}
	resp, err := e.client.DeleteTableWithContext(ctx, input)
	return e.postDelete(ctx, cr, resp, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDelete))
}

type option func(*external)

func newExternal(kube client.Client, client svcsdkapi.DynamoDBAPI, opts []option) *external {
	e := &external{
		kube:           kube,
		client:         client,
		preObserve:     nopPreObserve,
		postObserve:    nopPostObserve,
		lateInitialize: nopLateInitialize,
		isUpToDate:     alwaysUpToDate,
		preCreate:      nopPreCreate,
		postCreate:     nopPostCreate,
		preDelete:      nopPreDelete,
		postDelete:     nopPostDelete,
		preUpdate:      nopPreUpdate,
		postUpdate:     nopPostUpdate,
	}
	for _, f := range opts {
		f(e)
	}
	return e
}

type external struct {
	kube           client.Client
	client         svcsdkapi.DynamoDBAPI
	preObserve     func(context.Context, *svcapitypes.Table, *svcsdk.DescribeTableInput) error
	postObserve    func(context.Context, *svcapitypes.Table, *svcsdk.DescribeTableOutput, managed.ExternalObservation, error) (managed.ExternalObservation, error)
	lateInitialize func(*svcapitypes.TableParameters, *svcsdk.DescribeTableOutput) error
	isUpToDate     func(context.Context, *svcapitypes.Table, *svcsdk.DescribeTableOutput) (bool, string, error)
	preCreate      func(context.Context, *svcapitypes.Table, *svcsdk.CreateTableInput) error
	postCreate     func(context.Context, *svcapitypes.Table, *svcsdk.CreateTableOutput, managed.ExternalCreation, error) (managed.ExternalCreation, error)
	preDelete      func(context.Context, *svcapitypes.Table, *svcsdk.DeleteTableInput) (bool, error)
	postDelete     func(context.Context, *svcapitypes.Table, *svcsdk.DeleteTableOutput, error) error
	preUpdate      func(context.Context, *svcapitypes.Table, *svcsdk.UpdateTableInput) error
	postUpdate     func(context.Context, *svcapitypes.Table, *svcsdk.UpdateTableOutput, managed.ExternalUpdate, error) (managed.ExternalUpdate, error)
}

func nopPreObserve(context.Context, *svcapitypes.Table, *svcsdk.DescribeTableInput) error {
	return nil
}

func nopPostObserve(_ context.Context, _ *svcapitypes.Table, _ *svcsdk.DescribeTableOutput, obs managed.ExternalObservation, err error) (managed.ExternalObservation, error) {
	return obs, err
}
func nopLateInitialize(*svcapitypes.TableParameters, *svcsdk.DescribeTableOutput) error {
	return nil
}
func alwaysUpToDate(context.Context, *svcapitypes.Table, *svcsdk.DescribeTableOutput) (bool, string, error) {
	return true, "", nil
}

func nopPreCreate(context.Context, *svcapitypes.Table, *svcsdk.CreateTableInput) error {
	return nil
}
func nopPostCreate(_ context.Context, _ *svcapitypes.Table, _ *svcsdk.CreateTableOutput, cre managed.ExternalCreation, err error) (managed.ExternalCreation, error) {
	return cre, err
}
func nopPreDelete(context.Context, *svcapitypes.Table, *svcsdk.DeleteTableInput) (bool, error) {
	return false, nil
}
func nopPostDelete(_ context.Context, _ *svcapitypes.Table, _ *svcsdk.DeleteTableOutput, err error) error {
	return err
}
func nopPreUpdate(context.Context, *svcapitypes.Table, *svcsdk.UpdateTableInput) error {
	return nil
}
func nopPostUpdate(_ context.Context, _ *svcapitypes.Table, _ *svcsdk.UpdateTableOutput, upd managed.ExternalUpdate, err error) (managed.ExternalUpdate, error) {
	return upd, err
}
