/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package serverlesscache

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/elasticache"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/elasticache/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateCreateServerlessCacheInput returns a create input.
func GenerateCreateServerlessCacheInput(cr *svcapitypes.ServerlessCache) *svcsdk.CreateServerlessCacheInput {
	res := &svcsdk.CreateServerlessCacheInput{}

	if cr.Spec.ForProvider.CacheUsageLimits != nil {
		f0 := &svcsdk.CacheUsageLimits{}
		if cr.Spec.ForProvider.CacheUsageLimits.DataStorage != nil {
			f0f0 := &svcsdk.DataStorage{}
			if cr.Spec.ForProvider.CacheUsageLimits.DataStorage.Maximum != nil {
				f0f0.SetMaximum(*cr.Spec.ForProvider.CacheUsageLimits.DataStorage.Maximum)
			}
			if cr.Spec.ForProvider.CacheUsageLimits.DataStorage.Unit != nil {
				f0f0.SetUnit(*cr.Spec.ForProvider.CacheUsageLimits.DataStorage.Unit)
			}
			f0.SetDataStorage(f0f0)
		}
		if cr.Spec.ForProvider.CacheUsageLimits.ECPUPerSecond != nil {
			f0f1 := &svcsdk.ECPUPerSecond{}
			if cr.Spec.ForProvider.CacheUsageLimits.ECPUPerSecond.Maximum != nil {
				f0f1.SetMaximum(*cr.Spec.ForProvider.CacheUsageLimits.ECPUPerSecond.Maximum)
			}
			f0.SetECPUPerSecond(f0f1)
		}
		res.SetCacheUsageLimits(f0)
	}
	if cr.Spec.ForProvider.DailySnapshotTime != nil {
		res.SetDailySnapshotTime(*cr.Spec.ForProvider.DailySnapshotTime)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.Engine != nil {
		res.SetEngine(*cr.Spec.ForProvider.Engine)
	}
	if cr.Spec.ForProvider.KMSKeyID != nil {
		res.SetKmsKeyId(*cr.Spec.ForProvider.KMSKeyID)
	}
	if cr.Spec.ForProvider.MajorEngineVersion != nil {
		res.SetMajorEngineVersion(*cr.Spec.ForProvider.MajorEngineVersion)
	}
	if cr.Spec.ForProvider.SecurityGroupIDs != nil {
		f6 := []*string{}
		for _, f6iter := range cr.Spec.ForProvider.SecurityGroupIDs {
			var f6elem string
			f6elem = *f6iter
			f6 = append(f6, &f6elem)
		}
		res.SetSecurityGroupIds(f6)
	}
	if cr.Spec.ForProvider.ServerlessCacheName != nil {
		res.SetServerlessCacheName(*cr.Spec.ForProvider.ServerlessCacheName)
	}
	if cr.Spec.ForProvider.SnapshotARNsToRestore != nil {
		f8 := []*string{}
		for _, f8iter := range cr.Spec.ForProvider.SnapshotARNsToRestore {
			var f8elem string
			f8elem = *f8iter
			f8 = append(f8, &f8elem)
		}
		res.SetSnapshotArnsToRestore(f8)
	}
	if cr.Spec.ForProvider.SnapshotRetentionLimit != nil {
		res.SetSnapshotRetentionLimit(*cr.Spec.ForProvider.SnapshotRetentionLimit)
	}
	if cr.Spec.ForProvider.SubnetIDs != nil {
		f10 := []*string{}
		for _, f10iter := range cr.Spec.ForProvider.SubnetIDs {
			var f10elem string
			f10elem = *f10iter
			f10 = append(f10, &f10elem)
		}
		res.SetSubnetIds(f10)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f11 := []*svcsdk.Tag{}
		for _, f11iter := range cr.Spec.ForProvider.Tags {
			f11elem := &svcsdk.Tag{}
			if f11iter.Key != nil {
				f11elem.SetKey(*f11iter.Key)
			}
			if f11iter.Value != nil {
				f11elem.SetValue(*f11iter.Value)
			}
			f11 = append(f11, f11elem)
		}
		res.SetTags(f11)
	}
	if cr.Spec.ForProvider.UserGroupID != nil {
		res.SetUserGroupId(*cr.Spec.ForProvider.UserGroupID)
	}

	return res
}

// GenerateModifyServerlessCacheInput returns an update input.
func GenerateModifyServerlessCacheInput(cr *svcapitypes.ServerlessCache) *svcsdk.ModifyServerlessCacheInput {
	res := &svcsdk.ModifyServerlessCacheInput{}

	if cr.Spec.ForProvider.CacheUsageLimits != nil {
		f0 := &svcsdk.CacheUsageLimits{}
		if cr.Spec.ForProvider.CacheUsageLimits.DataStorage != nil {
			f0f0 := &svcsdk.DataStorage{}
			if cr.Spec.ForProvider.CacheUsageLimits.DataStorage.Maximum != nil {
				f0f0.SetMaximum(*cr.Spec.ForProvider.CacheUsageLimits.DataStorage.Maximum)
			}
			if cr.Spec.ForProvider.CacheUsageLimits.DataStorage.Unit != nil {
				f0f0.SetUnit(*cr.Spec.ForProvider.CacheUsageLimits.DataStorage.Unit)
			}
			f0.SetDataStorage(f0f0)
		}
		if cr.Spec.ForProvider.CacheUsageLimits.ECPUPerSecond != nil {
			f0f1 := &svcsdk.ECPUPerSecond{}
			if cr.Spec.ForProvider.CacheUsageLimits.ECPUPerSecond.Maximum != nil {
				f0f1.SetMaximum(*cr.Spec.ForProvider.CacheUsageLimits.ECPUPerSecond.Maximum)
			}
			f0.SetECPUPerSecond(f0f1)
		}
		res.SetCacheUsageLimits(f0)
	}
	if cr.Spec.ForProvider.DailySnapshotTime != nil {
		res.SetDailySnapshotTime(*cr.Spec.ForProvider.DailySnapshotTime)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.SecurityGroupIDs != nil {
		f4 := []*string{}
		for _, f4iter := range cr.Spec.ForProvider.SecurityGroupIDs {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		res.SetSecurityGroupIds(f4)
	}
	if cr.Spec.ForProvider.ServerlessCacheName != nil {
		res.SetServerlessCacheName(*cr.Spec.ForProvider.ServerlessCacheName)
	}
	if cr.Spec.ForProvider.SnapshotRetentionLimit != nil {
		res.SetSnapshotRetentionLimit(*cr.Spec.ForProvider.SnapshotRetentionLimit)
	}
	if cr.Spec.ForProvider.UserGroupID != nil {
		res.SetUserGroupId(*cr.Spec.ForProvider.UserGroupID)
	}

	return res
}

// GenerateDeleteServerlessCacheInput returns a deletion input.
func GenerateDeleteServerlessCacheInput(cr *svcapitypes.ServerlessCache) *svcsdk.DeleteServerlessCacheInput {
	res := &svcsdk.DeleteServerlessCacheInput{}

	if cr.Spec.ForProvider.ServerlessCacheName != nil {
		res.SetServerlessCacheName(*cr.Spec.ForProvider.ServerlessCacheName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
