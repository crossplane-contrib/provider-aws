/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package cluster

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/kafka"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/kafka/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeClusterInput returns input for read
// operation.
func GenerateDescribeClusterInput(cr *svcapitypes.Cluster) *svcsdk.DescribeClusterInput {
	res := &svcsdk.DescribeClusterInput{}

	if cr.Status.AtProvider.ClusterARN != nil {
		res.SetClusterArn(*cr.Status.AtProvider.ClusterARN)
	}

	return res
}

// GenerateCluster returns the current state in the form of *svcapitypes.Cluster.
func GenerateCluster(resp *svcsdk.DescribeClusterOutput) *svcapitypes.Cluster {
	cr := &svcapitypes.Cluster{}

	if resp.ClusterInfo.BrokerNodeGroupInfo != nil {
		f1 := &svcapitypes.BrokerNodeGroupInfo{}
		if resp.ClusterInfo.BrokerNodeGroupInfo.BrokerAZDistribution != nil {
			f1.BrokerAZDistribution = resp.ClusterInfo.BrokerNodeGroupInfo.BrokerAZDistribution
		}
		if resp.ClusterInfo.BrokerNodeGroupInfo.ClientSubnets != nil {
			f1f1 := []*string{}
			for _, f1f1iter := range resp.ClusterInfo.BrokerNodeGroupInfo.ClientSubnets {
				var f1f1elem string
				f1f1elem = *f1f1iter
				f1f1 = append(f1f1, &f1f1elem)
			}
			f1.ClientSubnets = f1f1
		}
		if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo != nil {
			f1f2 := &svcapitypes.ConnectivityInfo{}
			if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess != nil {
				f1f2f0 := &svcapitypes.PublicAccess{}
				if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type != nil {
					f1f2f0.Type = resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.PublicAccess.Type
				}
				f1f2.PublicAccess = f1f2f0
			}
			if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity != nil {
				f1f2f1 := &svcapitypes.VPCConnectivity{}
				if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication != nil {
					f1f2f1f0 := &svcapitypes.VPCConnectivityClientAuthentication{}
					if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Sasl != nil {
						f1f2f1f0f0 := &svcapitypes.VPCConnectivitySASL{}
						if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Sasl.Iam != nil {
							f1f2f1f0f0f0 := &svcapitypes.VPCConnectivityIAM{}
							if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Sasl.Iam.Enabled != nil {
								f1f2f1f0f0f0.Enabled = resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Sasl.Iam.Enabled
							}
							f1f2f1f0f0.IAM = f1f2f1f0f0f0
						}
						if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Sasl.Scram != nil {
							f1f2f1f0f0f1 := &svcapitypes.VPCConnectivitySCRAM{}
							if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Sasl.Scram.Enabled != nil {
								f1f2f1f0f0f1.Enabled = resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Sasl.Scram.Enabled
							}
							f1f2f1f0f0.SCRAM = f1f2f1f0f0f1
						}
						f1f2f1f0.SASL = f1f2f1f0f0
					}
					if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Tls != nil {
						f1f2f1f0f1 := &svcapitypes.VPCConnectivityTLS{}
						if resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Tls.Enabled != nil {
							f1f2f1f0f1.Enabled = resp.ClusterInfo.BrokerNodeGroupInfo.ConnectivityInfo.VpcConnectivity.ClientAuthentication.Tls.Enabled
						}
						f1f2f1f0.TLS = f1f2f1f0f1
					}
					f1f2f1.ClientAuthentication = f1f2f1f0
				}
				f1f2.VPCConnectivity = f1f2f1
			}
			f1.ConnectivityInfo = f1f2
		}
		if resp.ClusterInfo.BrokerNodeGroupInfo.InstanceType != nil {
			f1.InstanceType = resp.ClusterInfo.BrokerNodeGroupInfo.InstanceType
		}
		if resp.ClusterInfo.BrokerNodeGroupInfo.SecurityGroups != nil {
			f1f4 := []*string{}
			for _, f1f4iter := range resp.ClusterInfo.BrokerNodeGroupInfo.SecurityGroups {
				var f1f4elem string
				f1f4elem = *f1f4iter
				f1f4 = append(f1f4, &f1f4elem)
			}
			f1.SecurityGroups = f1f4
		}
		if resp.ClusterInfo.BrokerNodeGroupInfo.StorageInfo != nil {
			f1f5 := &svcapitypes.StorageInfo{}
			if resp.ClusterInfo.BrokerNodeGroupInfo.StorageInfo.EbsStorageInfo != nil {
				f1f5f0 := &svcapitypes.EBSStorageInfo{}
				if resp.ClusterInfo.BrokerNodeGroupInfo.StorageInfo.EbsStorageInfo.ProvisionedThroughput != nil {
					f1f5f0f0 := &svcapitypes.ProvisionedThroughput{}
					if resp.ClusterInfo.BrokerNodeGroupInfo.StorageInfo.EbsStorageInfo.ProvisionedThroughput.Enabled != nil {
						f1f5f0f0.Enabled = resp.ClusterInfo.BrokerNodeGroupInfo.StorageInfo.EbsStorageInfo.ProvisionedThroughput.Enabled
					}
					if resp.ClusterInfo.BrokerNodeGroupInfo.StorageInfo.EbsStorageInfo.ProvisionedThroughput.VolumeThroughput != nil {
						f1f5f0f0.VolumeThroughput = resp.ClusterInfo.BrokerNodeGroupInfo.StorageInfo.EbsStorageInfo.ProvisionedThroughput.VolumeThroughput
					}
					f1f5f0.ProvisionedThroughput = f1f5f0f0
				}
				if resp.ClusterInfo.BrokerNodeGroupInfo.StorageInfo.EbsStorageInfo.VolumeSize != nil {
					f1f5f0.VolumeSize = resp.ClusterInfo.BrokerNodeGroupInfo.StorageInfo.EbsStorageInfo.VolumeSize
				}
				f1f5.EBSStorageInfo = f1f5f0
			}
			f1.StorageInfo = f1f5
		}
		if resp.ClusterInfo.BrokerNodeGroupInfo.ZoneIds != nil {
			f1f6 := []*string{}
			for _, f1f6iter := range resp.ClusterInfo.BrokerNodeGroupInfo.ZoneIds {
				var f1f6elem string
				f1f6elem = *f1f6iter
				f1f6 = append(f1f6, &f1f6elem)
			}
			f1.ZoneIDs = f1f6
		}
		cr.Status.AtProvider.BrokerNodeGroupInfo = f1
	} else {
		cr.Status.AtProvider.BrokerNodeGroupInfo = nil
	}
	if resp.ClusterInfo.ClientAuthentication != nil {
		f2 := &svcapitypes.ClientAuthentication{}
		if resp.ClusterInfo.ClientAuthentication.Sasl != nil {
			f2f0 := &svcapitypes.SASL{}
			if resp.ClusterInfo.ClientAuthentication.Sasl.Iam != nil {
				f2f0f0 := &svcapitypes.IAM{}
				if resp.ClusterInfo.ClientAuthentication.Sasl.Iam.Enabled != nil {
					f2f0f0.Enabled = resp.ClusterInfo.ClientAuthentication.Sasl.Iam.Enabled
				}
				f2f0.IAM = f2f0f0
			}
			if resp.ClusterInfo.ClientAuthentication.Sasl.Scram != nil {
				f2f0f1 := &svcapitypes.SCRAM{}
				if resp.ClusterInfo.ClientAuthentication.Sasl.Scram.Enabled != nil {
					f2f0f1.Enabled = resp.ClusterInfo.ClientAuthentication.Sasl.Scram.Enabled
				}
				f2f0.SCRAM = f2f0f1
			}
			f2.SASL = f2f0
		}
		if resp.ClusterInfo.ClientAuthentication.Tls != nil {
			f2f1 := &svcapitypes.TLS{}
			if resp.ClusterInfo.ClientAuthentication.Tls.CertificateAuthorityArnList != nil {
				f2f1f0 := []*string{}
				for _, f2f1f0iter := range resp.ClusterInfo.ClientAuthentication.Tls.CertificateAuthorityArnList {
					var f2f1f0elem string
					f2f1f0elem = *f2f1f0iter
					f2f1f0 = append(f2f1f0, &f2f1f0elem)
				}
				f2f1.CertificateAuthorityARNList = f2f1f0
			}
			if resp.ClusterInfo.ClientAuthentication.Tls.Enabled != nil {
				f2f1.Enabled = resp.ClusterInfo.ClientAuthentication.Tls.Enabled
			}
			f2.TLS = f2f1
		}
		if resp.ClusterInfo.ClientAuthentication.Unauthenticated != nil {
			f2f2 := &svcapitypes.Unauthenticated{}
			if resp.ClusterInfo.ClientAuthentication.Unauthenticated.Enabled != nil {
				f2f2.Enabled = resp.ClusterInfo.ClientAuthentication.Unauthenticated.Enabled
			}
			f2.Unauthenticated = f2f2
		}
		cr.Spec.ForProvider.ClientAuthentication = f2
	} else {
		cr.Spec.ForProvider.ClientAuthentication = nil
	}
	if resp.ClusterInfo.ClusterArn != nil {
		cr.Status.AtProvider.ClusterARN = resp.ClusterInfo.ClusterArn
	} else {
		cr.Status.AtProvider.ClusterARN = nil
	}
	if resp.ClusterInfo.ClusterName != nil {
		cr.Spec.ForProvider.ClusterName = resp.ClusterInfo.ClusterName
	} else {
		cr.Spec.ForProvider.ClusterName = nil
	}
	if resp.ClusterInfo.EncryptionInfo != nil {
		f9 := &svcapitypes.EncryptionInfo{}
		if resp.ClusterInfo.EncryptionInfo.EncryptionAtRest != nil {
			f9f0 := &svcapitypes.EncryptionAtRest{}
			if resp.ClusterInfo.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyId != nil {
				f9f0.DataVolumeKMSKeyID = resp.ClusterInfo.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyId
			}
			f9.EncryptionAtRest = f9f0
		}
		if resp.ClusterInfo.EncryptionInfo.EncryptionInTransit != nil {
			f9f1 := &svcapitypes.EncryptionInTransit{}
			if resp.ClusterInfo.EncryptionInfo.EncryptionInTransit.ClientBroker != nil {
				f9f1.ClientBroker = resp.ClusterInfo.EncryptionInfo.EncryptionInTransit.ClientBroker
			}
			if resp.ClusterInfo.EncryptionInfo.EncryptionInTransit.InCluster != nil {
				f9f1.InCluster = resp.ClusterInfo.EncryptionInfo.EncryptionInTransit.InCluster
			}
			f9.EncryptionInTransit = f9f1
		}
		cr.Spec.ForProvider.EncryptionInfo = f9
	} else {
		cr.Spec.ForProvider.EncryptionInfo = nil
	}
	if resp.ClusterInfo.EnhancedMonitoring != nil {
		cr.Spec.ForProvider.EnhancedMonitoring = resp.ClusterInfo.EnhancedMonitoring
	} else {
		cr.Spec.ForProvider.EnhancedMonitoring = nil
	}
	if resp.ClusterInfo.LoggingInfo != nil {
		f11 := &svcapitypes.LoggingInfo{}
		if resp.ClusterInfo.LoggingInfo.BrokerLogs != nil {
			f11f0 := &svcapitypes.BrokerLogs{}
			if resp.ClusterInfo.LoggingInfo.BrokerLogs.CloudWatchLogs != nil {
				f11f0f0 := &svcapitypes.CloudWatchLogs{}
				if resp.ClusterInfo.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled != nil {
					f11f0f0.Enabled = resp.ClusterInfo.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled
				}
				if resp.ClusterInfo.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup != nil {
					f11f0f0.LogGroup = resp.ClusterInfo.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup
				}
				f11f0.CloudWatchLogs = f11f0f0
			}
			if resp.ClusterInfo.LoggingInfo.BrokerLogs.Firehose != nil {
				f11f0f1 := &svcapitypes.Firehose{}
				if resp.ClusterInfo.LoggingInfo.BrokerLogs.Firehose.DeliveryStream != nil {
					f11f0f1.DeliveryStream = resp.ClusterInfo.LoggingInfo.BrokerLogs.Firehose.DeliveryStream
				}
				if resp.ClusterInfo.LoggingInfo.BrokerLogs.Firehose.Enabled != nil {
					f11f0f1.Enabled = resp.ClusterInfo.LoggingInfo.BrokerLogs.Firehose.Enabled
				}
				f11f0.Firehose = f11f0f1
			}
			if resp.ClusterInfo.LoggingInfo.BrokerLogs.S3 != nil {
				f11f0f2 := &svcapitypes.S3{}
				if resp.ClusterInfo.LoggingInfo.BrokerLogs.S3.Bucket != nil {
					f11f0f2.Bucket = resp.ClusterInfo.LoggingInfo.BrokerLogs.S3.Bucket
				}
				if resp.ClusterInfo.LoggingInfo.BrokerLogs.S3.Enabled != nil {
					f11f0f2.Enabled = resp.ClusterInfo.LoggingInfo.BrokerLogs.S3.Enabled
				}
				if resp.ClusterInfo.LoggingInfo.BrokerLogs.S3.Prefix != nil {
					f11f0f2.Prefix = resp.ClusterInfo.LoggingInfo.BrokerLogs.S3.Prefix
				}
				f11f0.S3 = f11f0f2
			}
			f11.BrokerLogs = f11f0
		}
		cr.Spec.ForProvider.LoggingInfo = f11
	} else {
		cr.Spec.ForProvider.LoggingInfo = nil
	}
	if resp.ClusterInfo.NumberOfBrokerNodes != nil {
		cr.Spec.ForProvider.NumberOfBrokerNodes = resp.ClusterInfo.NumberOfBrokerNodes
	} else {
		cr.Spec.ForProvider.NumberOfBrokerNodes = nil
	}
	if resp.ClusterInfo.OpenMonitoring != nil {
		f13 := &svcapitypes.OpenMonitoringInfo{}
		if resp.ClusterInfo.OpenMonitoring.Prometheus != nil {
			f13f0 := &svcapitypes.PrometheusInfo{}
			if resp.ClusterInfo.OpenMonitoring.Prometheus.JmxExporter != nil {
				f13f0f0 := &svcapitypes.JmxExporterInfo{}
				if resp.ClusterInfo.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker != nil {
					f13f0f0.EnabledInBroker = resp.ClusterInfo.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker
				}
				f13f0.JmxExporter = f13f0f0
			}
			if resp.ClusterInfo.OpenMonitoring.Prometheus.NodeExporter != nil {
				f13f0f1 := &svcapitypes.NodeExporterInfo{}
				if resp.ClusterInfo.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker != nil {
					f13f0f1.EnabledInBroker = resp.ClusterInfo.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker
				}
				f13f0.NodeExporter = f13f0f1
			}
			f13.Prometheus = f13f0
		}
		cr.Spec.ForProvider.OpenMonitoring = f13
	} else {
		cr.Spec.ForProvider.OpenMonitoring = nil
	}
	if resp.ClusterInfo.State != nil {
		cr.Status.AtProvider.State = resp.ClusterInfo.State
	} else {
		cr.Status.AtProvider.State = nil
	}
	if resp.ClusterInfo.StorageMode != nil {
		cr.Spec.ForProvider.StorageMode = resp.ClusterInfo.StorageMode
	} else {
		cr.Spec.ForProvider.StorageMode = nil
	}
	if resp.ClusterInfo.Tags != nil {
		f17 := map[string]*string{}
		for f17key, f17valiter := range resp.ClusterInfo.Tags {
			var f17val string
			f17val = *f17valiter
			f17[f17key] = &f17val
		}
		cr.Spec.ForProvider.Tags = f17
	} else {
		cr.Spec.ForProvider.Tags = nil
	}

	return cr
}

// GenerateCreateClusterInput returns a create input.
func GenerateCreateClusterInput(cr *svcapitypes.Cluster) *svcsdk.CreateClusterInput {
	res := &svcsdk.CreateClusterInput{}

	if cr.Spec.ForProvider.ClientAuthentication != nil {
		f0 := &svcsdk.ClientAuthentication{}
		if cr.Spec.ForProvider.ClientAuthentication.SASL != nil {
			f0f0 := &svcsdk.Sasl{}
			if cr.Spec.ForProvider.ClientAuthentication.SASL.IAM != nil {
				f0f0f0 := &svcsdk.Iam{}
				if cr.Spec.ForProvider.ClientAuthentication.SASL.IAM.Enabled != nil {
					f0f0f0.SetEnabled(*cr.Spec.ForProvider.ClientAuthentication.SASL.IAM.Enabled)
				}
				f0f0.SetIam(f0f0f0)
			}
			if cr.Spec.ForProvider.ClientAuthentication.SASL.SCRAM != nil {
				f0f0f1 := &svcsdk.Scram{}
				if cr.Spec.ForProvider.ClientAuthentication.SASL.SCRAM.Enabled != nil {
					f0f0f1.SetEnabled(*cr.Spec.ForProvider.ClientAuthentication.SASL.SCRAM.Enabled)
				}
				f0f0.SetScram(f0f0f1)
			}
			f0.SetSasl(f0f0)
		}
		if cr.Spec.ForProvider.ClientAuthentication.TLS != nil {
			f0f1 := &svcsdk.Tls{}
			if cr.Spec.ForProvider.ClientAuthentication.TLS.CertificateAuthorityARNList != nil {
				f0f1f0 := []*string{}
				for _, f0f1f0iter := range cr.Spec.ForProvider.ClientAuthentication.TLS.CertificateAuthorityARNList {
					var f0f1f0elem string
					f0f1f0elem = *f0f1f0iter
					f0f1f0 = append(f0f1f0, &f0f1f0elem)
				}
				f0f1.SetCertificateAuthorityArnList(f0f1f0)
			}
			if cr.Spec.ForProvider.ClientAuthentication.TLS.Enabled != nil {
				f0f1.SetEnabled(*cr.Spec.ForProvider.ClientAuthentication.TLS.Enabled)
			}
			f0.SetTls(f0f1)
		}
		if cr.Spec.ForProvider.ClientAuthentication.Unauthenticated != nil {
			f0f2 := &svcsdk.Unauthenticated{}
			if cr.Spec.ForProvider.ClientAuthentication.Unauthenticated.Enabled != nil {
				f0f2.SetEnabled(*cr.Spec.ForProvider.ClientAuthentication.Unauthenticated.Enabled)
			}
			f0.SetUnauthenticated(f0f2)
		}
		res.SetClientAuthentication(f0)
	}
	if cr.Spec.ForProvider.ClusterName != nil {
		res.SetClusterName(*cr.Spec.ForProvider.ClusterName)
	}
	if cr.Spec.ForProvider.EncryptionInfo != nil {
		f2 := &svcsdk.EncryptionInfo{}
		if cr.Spec.ForProvider.EncryptionInfo.EncryptionAtRest != nil {
			f2f0 := &svcsdk.EncryptionAtRest{}
			if cr.Spec.ForProvider.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID != nil {
				f2f0.SetDataVolumeKMSKeyId(*cr.Spec.ForProvider.EncryptionInfo.EncryptionAtRest.DataVolumeKMSKeyID)
			}
			f2.SetEncryptionAtRest(f2f0)
		}
		if cr.Spec.ForProvider.EncryptionInfo.EncryptionInTransit != nil {
			f2f1 := &svcsdk.EncryptionInTransit{}
			if cr.Spec.ForProvider.EncryptionInfo.EncryptionInTransit.ClientBroker != nil {
				f2f1.SetClientBroker(*cr.Spec.ForProvider.EncryptionInfo.EncryptionInTransit.ClientBroker)
			}
			if cr.Spec.ForProvider.EncryptionInfo.EncryptionInTransit.InCluster != nil {
				f2f1.SetInCluster(*cr.Spec.ForProvider.EncryptionInfo.EncryptionInTransit.InCluster)
			}
			f2.SetEncryptionInTransit(f2f1)
		}
		res.SetEncryptionInfo(f2)
	}
	if cr.Spec.ForProvider.EnhancedMonitoring != nil {
		res.SetEnhancedMonitoring(*cr.Spec.ForProvider.EnhancedMonitoring)
	}
	if cr.Spec.ForProvider.KafkaVersion != nil {
		res.SetKafkaVersion(*cr.Spec.ForProvider.KafkaVersion)
	}
	if cr.Spec.ForProvider.LoggingInfo != nil {
		f5 := &svcsdk.LoggingInfo{}
		if cr.Spec.ForProvider.LoggingInfo.BrokerLogs != nil {
			f5f0 := &svcsdk.BrokerLogs{}
			if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudWatchLogs != nil {
				f5f0f0 := &svcsdk.CloudWatchLogs{}
				if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled != nil {
					f5f0f0.SetEnabled(*cr.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudWatchLogs.Enabled)
				}
				if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup != nil {
					f5f0f0.SetLogGroup(*cr.Spec.ForProvider.LoggingInfo.BrokerLogs.CloudWatchLogs.LogGroup)
				}
				f5f0.SetCloudWatchLogs(f5f0f0)
			}
			if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose != nil {
				f5f0f1 := &svcsdk.Firehose{}
				if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStream != nil {
					f5f0f1.SetDeliveryStream(*cr.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.DeliveryStream)
				}
				if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.Enabled != nil {
					f5f0f1.SetEnabled(*cr.Spec.ForProvider.LoggingInfo.BrokerLogs.Firehose.Enabled)
				}
				f5f0.SetFirehose(f5f0f1)
			}
			if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.S3 != nil {
				f5f0f2 := &svcsdk.S3{}
				if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.Bucket != nil {
					f5f0f2.SetBucket(*cr.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.Bucket)
				}
				if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.Enabled != nil {
					f5f0f2.SetEnabled(*cr.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.Enabled)
				}
				if cr.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.Prefix != nil {
					f5f0f2.SetPrefix(*cr.Spec.ForProvider.LoggingInfo.BrokerLogs.S3.Prefix)
				}
				f5f0.SetS3(f5f0f2)
			}
			f5.SetBrokerLogs(f5f0)
		}
		res.SetLoggingInfo(f5)
	}
	if cr.Spec.ForProvider.NumberOfBrokerNodes != nil {
		res.SetNumberOfBrokerNodes(*cr.Spec.ForProvider.NumberOfBrokerNodes)
	}
	if cr.Spec.ForProvider.OpenMonitoring != nil {
		f7 := &svcsdk.OpenMonitoringInfo{}
		if cr.Spec.ForProvider.OpenMonitoring.Prometheus != nil {
			f7f0 := &svcsdk.PrometheusInfo{}
			if cr.Spec.ForProvider.OpenMonitoring.Prometheus.JmxExporter != nil {
				f7f0f0 := &svcsdk.JmxExporterInfo{}
				if cr.Spec.ForProvider.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker != nil {
					f7f0f0.SetEnabledInBroker(*cr.Spec.ForProvider.OpenMonitoring.Prometheus.JmxExporter.EnabledInBroker)
				}
				f7f0.SetJmxExporter(f7f0f0)
			}
			if cr.Spec.ForProvider.OpenMonitoring.Prometheus.NodeExporter != nil {
				f7f0f1 := &svcsdk.NodeExporterInfo{}
				if cr.Spec.ForProvider.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker != nil {
					f7f0f1.SetEnabledInBroker(*cr.Spec.ForProvider.OpenMonitoring.Prometheus.NodeExporter.EnabledInBroker)
				}
				f7f0.SetNodeExporter(f7f0f1)
			}
			f7.SetPrometheus(f7f0)
		}
		res.SetOpenMonitoring(f7)
	}
	if cr.Spec.ForProvider.StorageMode != nil {
		res.SetStorageMode(*cr.Spec.ForProvider.StorageMode)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f9 := map[string]*string{}
		for f9key, f9valiter := range cr.Spec.ForProvider.Tags {
			var f9val string
			f9val = *f9valiter
			f9[f9key] = &f9val
		}
		res.SetTags(f9)
	}

	return res
}

// GenerateDeleteClusterInput returns a deletion input.
func GenerateDeleteClusterInput(cr *svcapitypes.Cluster) *svcsdk.DeleteClusterInput {
	res := &svcsdk.DeleteClusterInput{}

	if cr.Status.AtProvider.ClusterARN != nil {
		res.SetClusterArn(*cr.Status.AtProvider.ClusterARN)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
