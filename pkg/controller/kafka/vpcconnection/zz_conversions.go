/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package vpcconnection

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/kafka"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/kafka/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeVpcConnectionInput returns input for read
// operation.
func GenerateDescribeVpcConnectionInput(cr *svcapitypes.VPCConnection) *svcsdk.DescribeVpcConnectionInput {
	res := &svcsdk.DescribeVpcConnectionInput{}

	return res
}

// GenerateVPCConnection returns the current state in the form of *svcapitypes.VPCConnection.
func GenerateVPCConnection(resp *svcsdk.DescribeVpcConnectionOutput) *svcapitypes.VPCConnection {
	cr := &svcapitypes.VPCConnection{}

	if resp.Authentication != nil {
		cr.Spec.ForProvider.Authentication = resp.Authentication
	} else {
		cr.Spec.ForProvider.Authentication = nil
	}
	if resp.CreationTime != nil {
		cr.Status.AtProvider.CreationTime = &metav1.Time{*resp.CreationTime}
	} else {
		cr.Status.AtProvider.CreationTime = nil
	}
	if resp.SecurityGroups != nil {
		f2 := []*string{}
		for _, f2iter := range resp.SecurityGroups {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		cr.Spec.ForProvider.SecurityGroups = f2
	} else {
		cr.Spec.ForProvider.SecurityGroups = nil
	}
	if resp.State != nil {
		cr.Status.AtProvider.State = resp.State
	} else {
		cr.Status.AtProvider.State = nil
	}
	if resp.Tags != nil {
		f5 := map[string]*string{}
		for f5key, f5valiter := range resp.Tags {
			var f5val string
			f5val = *f5valiter
			f5[f5key] = &f5val
		}
		cr.Spec.ForProvider.Tags = f5
	} else {
		cr.Spec.ForProvider.Tags = nil
	}
	if resp.TargetClusterArn != nil {
		cr.Spec.ForProvider.TargetClusterARN = resp.TargetClusterArn
	} else {
		cr.Spec.ForProvider.TargetClusterARN = nil
	}
	if resp.VpcConnectionArn != nil {
		cr.Status.AtProvider.VPCConnectionARN = resp.VpcConnectionArn
	} else {
		cr.Status.AtProvider.VPCConnectionARN = nil
	}
	if resp.VpcId != nil {
		cr.Spec.ForProvider.VPCID = resp.VpcId
	} else {
		cr.Spec.ForProvider.VPCID = nil
	}

	return cr
}

// GenerateCreateVpcConnectionInput returns a create input.
func GenerateCreateVpcConnectionInput(cr *svcapitypes.VPCConnection) *svcsdk.CreateVpcConnectionInput {
	res := &svcsdk.CreateVpcConnectionInput{}

	if cr.Spec.ForProvider.Authentication != nil {
		res.SetAuthentication(*cr.Spec.ForProvider.Authentication)
	}
	if cr.Spec.ForProvider.ClientSubnets != nil {
		f1 := []*string{}
		for _, f1iter := range cr.Spec.ForProvider.ClientSubnets {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetClientSubnets(f1)
	}
	if cr.Spec.ForProvider.SecurityGroups != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.SecurityGroups {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetSecurityGroups(f2)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range cr.Spec.ForProvider.Tags {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		res.SetTags(f3)
	}
	if cr.Spec.ForProvider.TargetClusterARN != nil {
		res.SetTargetClusterArn(*cr.Spec.ForProvider.TargetClusterARN)
	}
	if cr.Spec.ForProvider.VPCID != nil {
		res.SetVpcId(*cr.Spec.ForProvider.VPCID)
	}

	return res
}

// GenerateDeleteVpcConnectionInput returns a deletion input.
func GenerateDeleteVpcConnectionInput(cr *svcapitypes.VPCConnection) *svcsdk.DeleteVpcConnectionInput {
	res := &svcsdk.DeleteVpcConnectionInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
