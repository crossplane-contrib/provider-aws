/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package taskdefinition

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/ecs"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/ecs/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeTaskDefinitionInput returns input for read
// operation.
func GenerateDescribeTaskDefinitionInput(cr *svcapitypes.TaskDefinition) *svcsdk.DescribeTaskDefinitionInput {
	res := &svcsdk.DescribeTaskDefinitionInput{}

	return res
}

// GenerateTaskDefinition returns the current state in the form of *svcapitypes.TaskDefinition.
func GenerateTaskDefinition(resp *svcsdk.DescribeTaskDefinitionOutput) *svcapitypes.TaskDefinition {
	cr := &svcapitypes.TaskDefinition{}

	if resp.Tags != nil {
		f0 := []*svcapitypes.Tag{}
		for _, f0iter := range resp.Tags {
			f0elem := &svcapitypes.Tag{}
			if f0iter.Key != nil {
				f0elem.Key = f0iter.Key
			}
			if f0iter.Value != nil {
				f0elem.Value = f0iter.Value
			}
			f0 = append(f0, f0elem)
		}
		cr.Spec.ForProvider.Tags = f0
	} else {
		cr.Spec.ForProvider.Tags = nil
	}
	if resp.TaskDefinition != nil {
		f1 := &svcapitypes.TaskDefinition_SDK{}
		if resp.TaskDefinition.Compatibilities != nil {
			f1f0 := []*string{}
			for _, f1f0iter := range resp.TaskDefinition.Compatibilities {
				var f1f0elem string
				f1f0elem = *f1f0iter
				f1f0 = append(f1f0, &f1f0elem)
			}
			f1.Compatibilities = f1f0
		}
		if resp.TaskDefinition.ContainerDefinitions != nil {
			f1f1 := []*svcapitypes.ContainerDefinition{}
			for _, f1f1iter := range resp.TaskDefinition.ContainerDefinitions {
				f1f1elem := &svcapitypes.ContainerDefinition{}
				if f1f1iter.Command != nil {
					f1f1elemf0 := []*string{}
					for _, f1f1elemf0iter := range f1f1iter.Command {
						var f1f1elemf0elem string
						f1f1elemf0elem = *f1f1elemf0iter
						f1f1elemf0 = append(f1f1elemf0, &f1f1elemf0elem)
					}
					f1f1elem.Command = f1f1elemf0
				}
				if f1f1iter.Cpu != nil {
					f1f1elem.CPU = f1f1iter.Cpu
				}
				if f1f1iter.CredentialSpecs != nil {
					f1f1elemf2 := []*string{}
					for _, f1f1elemf2iter := range f1f1iter.CredentialSpecs {
						var f1f1elemf2elem string
						f1f1elemf2elem = *f1f1elemf2iter
						f1f1elemf2 = append(f1f1elemf2, &f1f1elemf2elem)
					}
					f1f1elem.CredentialSpecs = f1f1elemf2
				}
				if f1f1iter.DependsOn != nil {
					f1f1elemf3 := []*svcapitypes.ContainerDependency{}
					for _, f1f1elemf3iter := range f1f1iter.DependsOn {
						f1f1elemf3elem := &svcapitypes.ContainerDependency{}
						if f1f1elemf3iter.Condition != nil {
							f1f1elemf3elem.Condition = f1f1elemf3iter.Condition
						}
						if f1f1elemf3iter.ContainerName != nil {
							f1f1elemf3elem.ContainerName = f1f1elemf3iter.ContainerName
						}
						f1f1elemf3 = append(f1f1elemf3, f1f1elemf3elem)
					}
					f1f1elem.DependsOn = f1f1elemf3
				}
				if f1f1iter.DisableNetworking != nil {
					f1f1elem.DisableNetworking = f1f1iter.DisableNetworking
				}
				if f1f1iter.DnsSearchDomains != nil {
					f1f1elemf5 := []*string{}
					for _, f1f1elemf5iter := range f1f1iter.DnsSearchDomains {
						var f1f1elemf5elem string
						f1f1elemf5elem = *f1f1elemf5iter
						f1f1elemf5 = append(f1f1elemf5, &f1f1elemf5elem)
					}
					f1f1elem.DNSSearchDomains = f1f1elemf5
				}
				if f1f1iter.DnsServers != nil {
					f1f1elemf6 := []*string{}
					for _, f1f1elemf6iter := range f1f1iter.DnsServers {
						var f1f1elemf6elem string
						f1f1elemf6elem = *f1f1elemf6iter
						f1f1elemf6 = append(f1f1elemf6, &f1f1elemf6elem)
					}
					f1f1elem.DNSServers = f1f1elemf6
				}
				if f1f1iter.DockerLabels != nil {
					f1f1elemf7 := map[string]*string{}
					for f1f1elemf7key, f1f1elemf7valiter := range f1f1iter.DockerLabels {
						var f1f1elemf7val string
						f1f1elemf7val = *f1f1elemf7valiter
						f1f1elemf7[f1f1elemf7key] = &f1f1elemf7val
					}
					f1f1elem.DockerLabels = f1f1elemf7
				}
				if f1f1iter.DockerSecurityOptions != nil {
					f1f1elemf8 := []*string{}
					for _, f1f1elemf8iter := range f1f1iter.DockerSecurityOptions {
						var f1f1elemf8elem string
						f1f1elemf8elem = *f1f1elemf8iter
						f1f1elemf8 = append(f1f1elemf8, &f1f1elemf8elem)
					}
					f1f1elem.DockerSecurityOptions = f1f1elemf8
				}
				if f1f1iter.EntryPoint != nil {
					f1f1elemf9 := []*string{}
					for _, f1f1elemf9iter := range f1f1iter.EntryPoint {
						var f1f1elemf9elem string
						f1f1elemf9elem = *f1f1elemf9iter
						f1f1elemf9 = append(f1f1elemf9, &f1f1elemf9elem)
					}
					f1f1elem.EntryPoint = f1f1elemf9
				}
				if f1f1iter.Environment != nil {
					f1f1elemf10 := []*svcapitypes.KeyValuePair{}
					for _, f1f1elemf10iter := range f1f1iter.Environment {
						f1f1elemf10elem := &svcapitypes.KeyValuePair{}
						if f1f1elemf10iter.Name != nil {
							f1f1elemf10elem.Name = f1f1elemf10iter.Name
						}
						if f1f1elemf10iter.Value != nil {
							f1f1elemf10elem.Value = f1f1elemf10iter.Value
						}
						f1f1elemf10 = append(f1f1elemf10, f1f1elemf10elem)
					}
					f1f1elem.Environment = f1f1elemf10
				}
				if f1f1iter.EnvironmentFiles != nil {
					f1f1elemf11 := []*svcapitypes.EnvironmentFile{}
					for _, f1f1elemf11iter := range f1f1iter.EnvironmentFiles {
						f1f1elemf11elem := &svcapitypes.EnvironmentFile{}
						if f1f1elemf11iter.Type != nil {
							f1f1elemf11elem.Type = f1f1elemf11iter.Type
						}
						if f1f1elemf11iter.Value != nil {
							f1f1elemf11elem.Value = f1f1elemf11iter.Value
						}
						f1f1elemf11 = append(f1f1elemf11, f1f1elemf11elem)
					}
					f1f1elem.EnvironmentFiles = f1f1elemf11
				}
				if f1f1iter.Essential != nil {
					f1f1elem.Essential = f1f1iter.Essential
				}
				if f1f1iter.ExtraHosts != nil {
					f1f1elemf13 := []*svcapitypes.HostEntry{}
					for _, f1f1elemf13iter := range f1f1iter.ExtraHosts {
						f1f1elemf13elem := &svcapitypes.HostEntry{}
						if f1f1elemf13iter.Hostname != nil {
							f1f1elemf13elem.Hostname = f1f1elemf13iter.Hostname
						}
						if f1f1elemf13iter.IpAddress != nil {
							f1f1elemf13elem.IPAddress = f1f1elemf13iter.IpAddress
						}
						f1f1elemf13 = append(f1f1elemf13, f1f1elemf13elem)
					}
					f1f1elem.ExtraHosts = f1f1elemf13
				}
				if f1f1iter.FirelensConfiguration != nil {
					f1f1elemf14 := &svcapitypes.FirelensConfiguration{}
					if f1f1iter.FirelensConfiguration.Options != nil {
						f1f1elemf14f0 := map[string]*string{}
						for f1f1elemf14f0key, f1f1elemf14f0valiter := range f1f1iter.FirelensConfiguration.Options {
							var f1f1elemf14f0val string
							f1f1elemf14f0val = *f1f1elemf14f0valiter
							f1f1elemf14f0[f1f1elemf14f0key] = &f1f1elemf14f0val
						}
						f1f1elemf14.Options = f1f1elemf14f0
					}
					if f1f1iter.FirelensConfiguration.Type != nil {
						f1f1elemf14.Type = f1f1iter.FirelensConfiguration.Type
					}
					f1f1elem.FirelensConfiguration = f1f1elemf14
				}
				if f1f1iter.HealthCheck != nil {
					f1f1elemf15 := &svcapitypes.HealthCheck{}
					if f1f1iter.HealthCheck.Command != nil {
						f1f1elemf15f0 := []*string{}
						for _, f1f1elemf15f0iter := range f1f1iter.HealthCheck.Command {
							var f1f1elemf15f0elem string
							f1f1elemf15f0elem = *f1f1elemf15f0iter
							f1f1elemf15f0 = append(f1f1elemf15f0, &f1f1elemf15f0elem)
						}
						f1f1elemf15.Command = f1f1elemf15f0
					}
					if f1f1iter.HealthCheck.Interval != nil {
						f1f1elemf15.Interval = f1f1iter.HealthCheck.Interval
					}
					if f1f1iter.HealthCheck.Retries != nil {
						f1f1elemf15.Retries = f1f1iter.HealthCheck.Retries
					}
					if f1f1iter.HealthCheck.StartPeriod != nil {
						f1f1elemf15.StartPeriod = f1f1iter.HealthCheck.StartPeriod
					}
					if f1f1iter.HealthCheck.Timeout != nil {
						f1f1elemf15.Timeout = f1f1iter.HealthCheck.Timeout
					}
					f1f1elem.HealthCheck = f1f1elemf15
				}
				if f1f1iter.Hostname != nil {
					f1f1elem.Hostname = f1f1iter.Hostname
				}
				if f1f1iter.Image != nil {
					f1f1elem.Image = f1f1iter.Image
				}
				if f1f1iter.Interactive != nil {
					f1f1elem.Interactive = f1f1iter.Interactive
				}
				if f1f1iter.Links != nil {
					f1f1elemf19 := []*string{}
					for _, f1f1elemf19iter := range f1f1iter.Links {
						var f1f1elemf19elem string
						f1f1elemf19elem = *f1f1elemf19iter
						f1f1elemf19 = append(f1f1elemf19, &f1f1elemf19elem)
					}
					f1f1elem.Links = f1f1elemf19
				}
				if f1f1iter.LinuxParameters != nil {
					f1f1elemf20 := &svcapitypes.LinuxParameters{}
					if f1f1iter.LinuxParameters.Capabilities != nil {
						f1f1elemf20f0 := &svcapitypes.KernelCapabilities{}
						if f1f1iter.LinuxParameters.Capabilities.Add != nil {
							f1f1elemf20f0f0 := []*string{}
							for _, f1f1elemf20f0f0iter := range f1f1iter.LinuxParameters.Capabilities.Add {
								var f1f1elemf20f0f0elem string
								f1f1elemf20f0f0elem = *f1f1elemf20f0f0iter
								f1f1elemf20f0f0 = append(f1f1elemf20f0f0, &f1f1elemf20f0f0elem)
							}
							f1f1elemf20f0.Add = f1f1elemf20f0f0
						}
						if f1f1iter.LinuxParameters.Capabilities.Drop != nil {
							f1f1elemf20f0f1 := []*string{}
							for _, f1f1elemf20f0f1iter := range f1f1iter.LinuxParameters.Capabilities.Drop {
								var f1f1elemf20f0f1elem string
								f1f1elemf20f0f1elem = *f1f1elemf20f0f1iter
								f1f1elemf20f0f1 = append(f1f1elemf20f0f1, &f1f1elemf20f0f1elem)
							}
							f1f1elemf20f0.Drop = f1f1elemf20f0f1
						}
						f1f1elemf20.Capabilities = f1f1elemf20f0
					}
					if f1f1iter.LinuxParameters.Devices != nil {
						f1f1elemf20f1 := []*svcapitypes.Device{}
						for _, f1f1elemf20f1iter := range f1f1iter.LinuxParameters.Devices {
							f1f1elemf20f1elem := &svcapitypes.Device{}
							if f1f1elemf20f1iter.ContainerPath != nil {
								f1f1elemf20f1elem.ContainerPath = f1f1elemf20f1iter.ContainerPath
							}
							if f1f1elemf20f1iter.HostPath != nil {
								f1f1elemf20f1elem.HostPath = f1f1elemf20f1iter.HostPath
							}
							if f1f1elemf20f1iter.Permissions != nil {
								f1f1elemf20f1elemf2 := []*string{}
								for _, f1f1elemf20f1elemf2iter := range f1f1elemf20f1iter.Permissions {
									var f1f1elemf20f1elemf2elem string
									f1f1elemf20f1elemf2elem = *f1f1elemf20f1elemf2iter
									f1f1elemf20f1elemf2 = append(f1f1elemf20f1elemf2, &f1f1elemf20f1elemf2elem)
								}
								f1f1elemf20f1elem.Permissions = f1f1elemf20f1elemf2
							}
							f1f1elemf20f1 = append(f1f1elemf20f1, f1f1elemf20f1elem)
						}
						f1f1elemf20.Devices = f1f1elemf20f1
					}
					if f1f1iter.LinuxParameters.InitProcessEnabled != nil {
						f1f1elemf20.InitProcessEnabled = f1f1iter.LinuxParameters.InitProcessEnabled
					}
					if f1f1iter.LinuxParameters.MaxSwap != nil {
						f1f1elemf20.MaxSwap = f1f1iter.LinuxParameters.MaxSwap
					}
					if f1f1iter.LinuxParameters.SharedMemorySize != nil {
						f1f1elemf20.SharedMemorySize = f1f1iter.LinuxParameters.SharedMemorySize
					}
					if f1f1iter.LinuxParameters.Swappiness != nil {
						f1f1elemf20.Swappiness = f1f1iter.LinuxParameters.Swappiness
					}
					if f1f1iter.LinuxParameters.Tmpfs != nil {
						f1f1elemf20f6 := []*svcapitypes.Tmpfs{}
						for _, f1f1elemf20f6iter := range f1f1iter.LinuxParameters.Tmpfs {
							f1f1elemf20f6elem := &svcapitypes.Tmpfs{}
							if f1f1elemf20f6iter.ContainerPath != nil {
								f1f1elemf20f6elem.ContainerPath = f1f1elemf20f6iter.ContainerPath
							}
							if f1f1elemf20f6iter.MountOptions != nil {
								f1f1elemf20f6elemf1 := []*string{}
								for _, f1f1elemf20f6elemf1iter := range f1f1elemf20f6iter.MountOptions {
									var f1f1elemf20f6elemf1elem string
									f1f1elemf20f6elemf1elem = *f1f1elemf20f6elemf1iter
									f1f1elemf20f6elemf1 = append(f1f1elemf20f6elemf1, &f1f1elemf20f6elemf1elem)
								}
								f1f1elemf20f6elem.MountOptions = f1f1elemf20f6elemf1
							}
							if f1f1elemf20f6iter.Size != nil {
								f1f1elemf20f6elem.Size = f1f1elemf20f6iter.Size
							}
							f1f1elemf20f6 = append(f1f1elemf20f6, f1f1elemf20f6elem)
						}
						f1f1elemf20.Tmpfs = f1f1elemf20f6
					}
					f1f1elem.LinuxParameters = f1f1elemf20
				}
				if f1f1iter.LogConfiguration != nil {
					f1f1elemf21 := &svcapitypes.LogConfiguration{}
					if f1f1iter.LogConfiguration.LogDriver != nil {
						f1f1elemf21.LogDriver = f1f1iter.LogConfiguration.LogDriver
					}
					if f1f1iter.LogConfiguration.Options != nil {
						f1f1elemf21f1 := map[string]*string{}
						for f1f1elemf21f1key, f1f1elemf21f1valiter := range f1f1iter.LogConfiguration.Options {
							var f1f1elemf21f1val string
							f1f1elemf21f1val = *f1f1elemf21f1valiter
							f1f1elemf21f1[f1f1elemf21f1key] = &f1f1elemf21f1val
						}
						f1f1elemf21.Options = f1f1elemf21f1
					}
					if f1f1iter.LogConfiguration.SecretOptions != nil {
						f1f1elemf21f2 := []*svcapitypes.Secret{}
						for _, f1f1elemf21f2iter := range f1f1iter.LogConfiguration.SecretOptions {
							f1f1elemf21f2elem := &svcapitypes.Secret{}
							if f1f1elemf21f2iter.Name != nil {
								f1f1elemf21f2elem.Name = f1f1elemf21f2iter.Name
							}
							if f1f1elemf21f2iter.ValueFrom != nil {
								f1f1elemf21f2elem.ValueFrom = f1f1elemf21f2iter.ValueFrom
							}
							f1f1elemf21f2 = append(f1f1elemf21f2, f1f1elemf21f2elem)
						}
						f1f1elemf21.SecretOptions = f1f1elemf21f2
					}
					f1f1elem.LogConfiguration = f1f1elemf21
				}
				if f1f1iter.Memory != nil {
					f1f1elem.Memory = f1f1iter.Memory
				}
				if f1f1iter.MemoryReservation != nil {
					f1f1elem.MemoryReservation = f1f1iter.MemoryReservation
				}
				if f1f1iter.MountPoints != nil {
					f1f1elemf24 := []*svcapitypes.MountPoint{}
					for _, f1f1elemf24iter := range f1f1iter.MountPoints {
						f1f1elemf24elem := &svcapitypes.MountPoint{}
						if f1f1elemf24iter.ContainerPath != nil {
							f1f1elemf24elem.ContainerPath = f1f1elemf24iter.ContainerPath
						}
						if f1f1elemf24iter.ReadOnly != nil {
							f1f1elemf24elem.ReadOnly = f1f1elemf24iter.ReadOnly
						}
						if f1f1elemf24iter.SourceVolume != nil {
							f1f1elemf24elem.SourceVolume = f1f1elemf24iter.SourceVolume
						}
						f1f1elemf24 = append(f1f1elemf24, f1f1elemf24elem)
					}
					f1f1elem.MountPoints = f1f1elemf24
				}
				if f1f1iter.Name != nil {
					f1f1elem.Name = f1f1iter.Name
				}
				if f1f1iter.PortMappings != nil {
					f1f1elemf26 := []*svcapitypes.PortMapping{}
					for _, f1f1elemf26iter := range f1f1iter.PortMappings {
						f1f1elemf26elem := &svcapitypes.PortMapping{}
						if f1f1elemf26iter.AppProtocol != nil {
							f1f1elemf26elem.AppProtocol = f1f1elemf26iter.AppProtocol
						}
						if f1f1elemf26iter.ContainerPort != nil {
							f1f1elemf26elem.ContainerPort = f1f1elemf26iter.ContainerPort
						}
						if f1f1elemf26iter.ContainerPortRange != nil {
							f1f1elemf26elem.ContainerPortRange = f1f1elemf26iter.ContainerPortRange
						}
						if f1f1elemf26iter.HostPort != nil {
							f1f1elemf26elem.HostPort = f1f1elemf26iter.HostPort
						}
						if f1f1elemf26iter.Name != nil {
							f1f1elemf26elem.Name = f1f1elemf26iter.Name
						}
						if f1f1elemf26iter.Protocol != nil {
							f1f1elemf26elem.Protocol = f1f1elemf26iter.Protocol
						}
						f1f1elemf26 = append(f1f1elemf26, f1f1elemf26elem)
					}
					f1f1elem.PortMappings = f1f1elemf26
				}
				if f1f1iter.Privileged != nil {
					f1f1elem.Privileged = f1f1iter.Privileged
				}
				if f1f1iter.PseudoTerminal != nil {
					f1f1elem.PseudoTerminal = f1f1iter.PseudoTerminal
				}
				if f1f1iter.ReadonlyRootFilesystem != nil {
					f1f1elem.ReadonlyRootFilesystem = f1f1iter.ReadonlyRootFilesystem
				}
				if f1f1iter.RepositoryCredentials != nil {
					f1f1elemf30 := &svcapitypes.RepositoryCredentials{}
					if f1f1iter.RepositoryCredentials.CredentialsParameter != nil {
						f1f1elemf30.CredentialsParameter = f1f1iter.RepositoryCredentials.CredentialsParameter
					}
					f1f1elem.RepositoryCredentials = f1f1elemf30
				}
				if f1f1iter.ResourceRequirements != nil {
					f1f1elemf31 := []*svcapitypes.ResourceRequirement{}
					for _, f1f1elemf31iter := range f1f1iter.ResourceRequirements {
						f1f1elemf31elem := &svcapitypes.ResourceRequirement{}
						if f1f1elemf31iter.Type != nil {
							f1f1elemf31elem.Type = f1f1elemf31iter.Type
						}
						if f1f1elemf31iter.Value != nil {
							f1f1elemf31elem.Value = f1f1elemf31iter.Value
						}
						f1f1elemf31 = append(f1f1elemf31, f1f1elemf31elem)
					}
					f1f1elem.ResourceRequirements = f1f1elemf31
				}
				if f1f1iter.Secrets != nil {
					f1f1elemf32 := []*svcapitypes.Secret{}
					for _, f1f1elemf32iter := range f1f1iter.Secrets {
						f1f1elemf32elem := &svcapitypes.Secret{}
						if f1f1elemf32iter.Name != nil {
							f1f1elemf32elem.Name = f1f1elemf32iter.Name
						}
						if f1f1elemf32iter.ValueFrom != nil {
							f1f1elemf32elem.ValueFrom = f1f1elemf32iter.ValueFrom
						}
						f1f1elemf32 = append(f1f1elemf32, f1f1elemf32elem)
					}
					f1f1elem.Secrets = f1f1elemf32
				}
				if f1f1iter.StartTimeout != nil {
					f1f1elem.StartTimeout = f1f1iter.StartTimeout
				}
				if f1f1iter.StopTimeout != nil {
					f1f1elem.StopTimeout = f1f1iter.StopTimeout
				}
				if f1f1iter.SystemControls != nil {
					f1f1elemf35 := []*svcapitypes.SystemControl{}
					for _, f1f1elemf35iter := range f1f1iter.SystemControls {
						f1f1elemf35elem := &svcapitypes.SystemControl{}
						if f1f1elemf35iter.Namespace != nil {
							f1f1elemf35elem.Namespace = f1f1elemf35iter.Namespace
						}
						if f1f1elemf35iter.Value != nil {
							f1f1elemf35elem.Value = f1f1elemf35iter.Value
						}
						f1f1elemf35 = append(f1f1elemf35, f1f1elemf35elem)
					}
					f1f1elem.SystemControls = f1f1elemf35
				}
				if f1f1iter.Ulimits != nil {
					f1f1elemf36 := []*svcapitypes.Ulimit{}
					for _, f1f1elemf36iter := range f1f1iter.Ulimits {
						f1f1elemf36elem := &svcapitypes.Ulimit{}
						if f1f1elemf36iter.HardLimit != nil {
							f1f1elemf36elem.HardLimit = f1f1elemf36iter.HardLimit
						}
						if f1f1elemf36iter.Name != nil {
							f1f1elemf36elem.Name = f1f1elemf36iter.Name
						}
						if f1f1elemf36iter.SoftLimit != nil {
							f1f1elemf36elem.SoftLimit = f1f1elemf36iter.SoftLimit
						}
						f1f1elemf36 = append(f1f1elemf36, f1f1elemf36elem)
					}
					f1f1elem.Ulimits = f1f1elemf36
				}
				if f1f1iter.User != nil {
					f1f1elem.User = f1f1iter.User
				}
				if f1f1iter.VolumesFrom != nil {
					f1f1elemf38 := []*svcapitypes.VolumeFrom{}
					for _, f1f1elemf38iter := range f1f1iter.VolumesFrom {
						f1f1elemf38elem := &svcapitypes.VolumeFrom{}
						if f1f1elemf38iter.ReadOnly != nil {
							f1f1elemf38elem.ReadOnly = f1f1elemf38iter.ReadOnly
						}
						if f1f1elemf38iter.SourceContainer != nil {
							f1f1elemf38elem.SourceContainer = f1f1elemf38iter.SourceContainer
						}
						f1f1elemf38 = append(f1f1elemf38, f1f1elemf38elem)
					}
					f1f1elem.VolumesFrom = f1f1elemf38
				}
				if f1f1iter.WorkingDirectory != nil {
					f1f1elem.WorkingDirectory = f1f1iter.WorkingDirectory
				}
				f1f1 = append(f1f1, f1f1elem)
			}
			f1.ContainerDefinitions = f1f1
		}
		if resp.TaskDefinition.Cpu != nil {
			f1.CPU = resp.TaskDefinition.Cpu
		}
		if resp.TaskDefinition.DeregisteredAt != nil {
			f1.DeregisteredAt = &metav1.Time{*resp.TaskDefinition.DeregisteredAt}
		}
		if resp.TaskDefinition.EphemeralStorage != nil {
			f1f4 := &svcapitypes.EphemeralStorage{}
			if resp.TaskDefinition.EphemeralStorage.SizeInGiB != nil {
				f1f4.SizeInGiB = resp.TaskDefinition.EphemeralStorage.SizeInGiB
			}
			f1.EphemeralStorage = f1f4
		}
		if resp.TaskDefinition.ExecutionRoleArn != nil {
			f1.ExecutionRoleARN = resp.TaskDefinition.ExecutionRoleArn
		}
		if resp.TaskDefinition.Family != nil {
			f1.Family = resp.TaskDefinition.Family
		}
		if resp.TaskDefinition.InferenceAccelerators != nil {
			f1f7 := []*svcapitypes.InferenceAccelerator{}
			for _, f1f7iter := range resp.TaskDefinition.InferenceAccelerators {
				f1f7elem := &svcapitypes.InferenceAccelerator{}
				if f1f7iter.DeviceName != nil {
					f1f7elem.DeviceName = f1f7iter.DeviceName
				}
				if f1f7iter.DeviceType != nil {
					f1f7elem.DeviceType = f1f7iter.DeviceType
				}
				f1f7 = append(f1f7, f1f7elem)
			}
			f1.InferenceAccelerators = f1f7
		}
		if resp.TaskDefinition.IpcMode != nil {
			f1.IPCMode = resp.TaskDefinition.IpcMode
		}
		if resp.TaskDefinition.Memory != nil {
			f1.Memory = resp.TaskDefinition.Memory
		}
		if resp.TaskDefinition.NetworkMode != nil {
			f1.NetworkMode = resp.TaskDefinition.NetworkMode
		}
		if resp.TaskDefinition.PidMode != nil {
			f1.PIDMode = resp.TaskDefinition.PidMode
		}
		if resp.TaskDefinition.PlacementConstraints != nil {
			f1f12 := []*svcapitypes.TaskDefinitionPlacementConstraint{}
			for _, f1f12iter := range resp.TaskDefinition.PlacementConstraints {
				f1f12elem := &svcapitypes.TaskDefinitionPlacementConstraint{}
				if f1f12iter.Expression != nil {
					f1f12elem.Expression = f1f12iter.Expression
				}
				if f1f12iter.Type != nil {
					f1f12elem.Type = f1f12iter.Type
				}
				f1f12 = append(f1f12, f1f12elem)
			}
			f1.PlacementConstraints = f1f12
		}
		if resp.TaskDefinition.ProxyConfiguration != nil {
			f1f13 := &svcapitypes.ProxyConfiguration{}
			if resp.TaskDefinition.ProxyConfiguration.ContainerName != nil {
				f1f13.ContainerName = resp.TaskDefinition.ProxyConfiguration.ContainerName
			}
			if resp.TaskDefinition.ProxyConfiguration.Properties != nil {
				f1f13f1 := []*svcapitypes.KeyValuePair{}
				for _, f1f13f1iter := range resp.TaskDefinition.ProxyConfiguration.Properties {
					f1f13f1elem := &svcapitypes.KeyValuePair{}
					if f1f13f1iter.Name != nil {
						f1f13f1elem.Name = f1f13f1iter.Name
					}
					if f1f13f1iter.Value != nil {
						f1f13f1elem.Value = f1f13f1iter.Value
					}
					f1f13f1 = append(f1f13f1, f1f13f1elem)
				}
				f1f13.Properties = f1f13f1
			}
			if resp.TaskDefinition.ProxyConfiguration.Type != nil {
				f1f13.Type = resp.TaskDefinition.ProxyConfiguration.Type
			}
			f1.ProxyConfiguration = f1f13
		}
		if resp.TaskDefinition.RegisteredAt != nil {
			f1.RegisteredAt = &metav1.Time{*resp.TaskDefinition.RegisteredAt}
		}
		if resp.TaskDefinition.RegisteredBy != nil {
			f1.RegisteredBy = resp.TaskDefinition.RegisteredBy
		}
		if resp.TaskDefinition.RequiresAttributes != nil {
			f1f16 := []*svcapitypes.Attribute{}
			for _, f1f16iter := range resp.TaskDefinition.RequiresAttributes {
				f1f16elem := &svcapitypes.Attribute{}
				if f1f16iter.Name != nil {
					f1f16elem.Name = f1f16iter.Name
				}
				if f1f16iter.TargetId != nil {
					f1f16elem.TargetID = f1f16iter.TargetId
				}
				if f1f16iter.TargetType != nil {
					f1f16elem.TargetType = f1f16iter.TargetType
				}
				if f1f16iter.Value != nil {
					f1f16elem.Value = f1f16iter.Value
				}
				f1f16 = append(f1f16, f1f16elem)
			}
			f1.RequiresAttributes = f1f16
		}
		if resp.TaskDefinition.RequiresCompatibilities != nil {
			f1f17 := []*string{}
			for _, f1f17iter := range resp.TaskDefinition.RequiresCompatibilities {
				var f1f17elem string
				f1f17elem = *f1f17iter
				f1f17 = append(f1f17, &f1f17elem)
			}
			f1.RequiresCompatibilities = f1f17
		}
		if resp.TaskDefinition.Revision != nil {
			f1.Revision = resp.TaskDefinition.Revision
		}
		if resp.TaskDefinition.RuntimePlatform != nil {
			f1f19 := &svcapitypes.RuntimePlatform{}
			if resp.TaskDefinition.RuntimePlatform.CpuArchitecture != nil {
				f1f19.CPUArchitecture = resp.TaskDefinition.RuntimePlatform.CpuArchitecture
			}
			if resp.TaskDefinition.RuntimePlatform.OperatingSystemFamily != nil {
				f1f19.OperatingSystemFamily = resp.TaskDefinition.RuntimePlatform.OperatingSystemFamily
			}
			f1.RuntimePlatform = f1f19
		}
		if resp.TaskDefinition.Status != nil {
			f1.Status = resp.TaskDefinition.Status
		}
		if resp.TaskDefinition.TaskDefinitionArn != nil {
			f1.TaskDefinitionARN = resp.TaskDefinition.TaskDefinitionArn
		}
		if resp.TaskDefinition.TaskRoleArn != nil {
			f1.TaskRoleARN = resp.TaskDefinition.TaskRoleArn
		}
		if resp.TaskDefinition.Volumes != nil {
			f1f23 := []*svcapitypes.Volume{}
			for _, f1f23iter := range resp.TaskDefinition.Volumes {
				f1f23elem := &svcapitypes.Volume{}
				if f1f23iter.ConfiguredAtLaunch != nil {
					f1f23elem.ConfiguredAtLaunch = f1f23iter.ConfiguredAtLaunch
				}
				if f1f23iter.DockerVolumeConfiguration != nil {
					f1f23elemf1 := &svcapitypes.DockerVolumeConfiguration{}
					if f1f23iter.DockerVolumeConfiguration.Autoprovision != nil {
						f1f23elemf1.Autoprovision = f1f23iter.DockerVolumeConfiguration.Autoprovision
					}
					if f1f23iter.DockerVolumeConfiguration.Driver != nil {
						f1f23elemf1.Driver = f1f23iter.DockerVolumeConfiguration.Driver
					}
					if f1f23iter.DockerVolumeConfiguration.DriverOpts != nil {
						f1f23elemf1f2 := map[string]*string{}
						for f1f23elemf1f2key, f1f23elemf1f2valiter := range f1f23iter.DockerVolumeConfiguration.DriverOpts {
							var f1f23elemf1f2val string
							f1f23elemf1f2val = *f1f23elemf1f2valiter
							f1f23elemf1f2[f1f23elemf1f2key] = &f1f23elemf1f2val
						}
						f1f23elemf1.DriverOpts = f1f23elemf1f2
					}
					if f1f23iter.DockerVolumeConfiguration.Labels != nil {
						f1f23elemf1f3 := map[string]*string{}
						for f1f23elemf1f3key, f1f23elemf1f3valiter := range f1f23iter.DockerVolumeConfiguration.Labels {
							var f1f23elemf1f3val string
							f1f23elemf1f3val = *f1f23elemf1f3valiter
							f1f23elemf1f3[f1f23elemf1f3key] = &f1f23elemf1f3val
						}
						f1f23elemf1.Labels = f1f23elemf1f3
					}
					if f1f23iter.DockerVolumeConfiguration.Scope != nil {
						f1f23elemf1.Scope = f1f23iter.DockerVolumeConfiguration.Scope
					}
					f1f23elem.DockerVolumeConfiguration = f1f23elemf1
				}
				if f1f23iter.EfsVolumeConfiguration != nil {
					f1f23elemf2 := &svcapitypes.EFSVolumeConfiguration{}
					if f1f23iter.EfsVolumeConfiguration.AuthorizationConfig != nil {
						f1f23elemf2f0 := &svcapitypes.EFSAuthorizationConfig{}
						if f1f23iter.EfsVolumeConfiguration.AuthorizationConfig.AccessPointId != nil {
							f1f23elemf2f0.AccessPointID = f1f23iter.EfsVolumeConfiguration.AuthorizationConfig.AccessPointId
						}
						if f1f23iter.EfsVolumeConfiguration.AuthorizationConfig.Iam != nil {
							f1f23elemf2f0.IAM = f1f23iter.EfsVolumeConfiguration.AuthorizationConfig.Iam
						}
						f1f23elemf2.AuthorizationConfig = f1f23elemf2f0
					}
					if f1f23iter.EfsVolumeConfiguration.FileSystemId != nil {
						f1f23elemf2.FileSystemID = f1f23iter.EfsVolumeConfiguration.FileSystemId
					}
					if f1f23iter.EfsVolumeConfiguration.RootDirectory != nil {
						f1f23elemf2.RootDirectory = f1f23iter.EfsVolumeConfiguration.RootDirectory
					}
					if f1f23iter.EfsVolumeConfiguration.TransitEncryption != nil {
						f1f23elemf2.TransitEncryption = f1f23iter.EfsVolumeConfiguration.TransitEncryption
					}
					if f1f23iter.EfsVolumeConfiguration.TransitEncryptionPort != nil {
						f1f23elemf2.TransitEncryptionPort = f1f23iter.EfsVolumeConfiguration.TransitEncryptionPort
					}
					f1f23elem.EFSVolumeConfiguration = f1f23elemf2
				}
				if f1f23iter.FsxWindowsFileServerVolumeConfiguration != nil {
					f1f23elemf3 := &svcapitypes.FSxWindowsFileServerVolumeConfiguration{}
					if f1f23iter.FsxWindowsFileServerVolumeConfiguration.AuthorizationConfig != nil {
						f1f23elemf3f0 := &svcapitypes.FSxWindowsFileServerAuthorizationConfig{}
						if f1f23iter.FsxWindowsFileServerVolumeConfiguration.AuthorizationConfig.CredentialsParameter != nil {
							f1f23elemf3f0.CredentialsParameter = f1f23iter.FsxWindowsFileServerVolumeConfiguration.AuthorizationConfig.CredentialsParameter
						}
						if f1f23iter.FsxWindowsFileServerVolumeConfiguration.AuthorizationConfig.Domain != nil {
							f1f23elemf3f0.Domain = f1f23iter.FsxWindowsFileServerVolumeConfiguration.AuthorizationConfig.Domain
						}
						f1f23elemf3.AuthorizationConfig = f1f23elemf3f0
					}
					if f1f23iter.FsxWindowsFileServerVolumeConfiguration.FileSystemId != nil {
						f1f23elemf3.FileSystemID = f1f23iter.FsxWindowsFileServerVolumeConfiguration.FileSystemId
					}
					if f1f23iter.FsxWindowsFileServerVolumeConfiguration.RootDirectory != nil {
						f1f23elemf3.RootDirectory = f1f23iter.FsxWindowsFileServerVolumeConfiguration.RootDirectory
					}
					f1f23elem.FsxWindowsFileServerVolumeConfiguration = f1f23elemf3
				}
				if f1f23iter.Host != nil {
					f1f23elemf4 := &svcapitypes.HostVolumeProperties{}
					if f1f23iter.Host.SourcePath != nil {
						f1f23elemf4.SourcePath = f1f23iter.Host.SourcePath
					}
					f1f23elem.Host = f1f23elemf4
				}
				if f1f23iter.Name != nil {
					f1f23elem.Name = f1f23iter.Name
				}
				f1f23 = append(f1f23, f1f23elem)
			}
			f1.Volumes = f1f23
		}
		cr.Status.AtProvider.TaskDefinition = f1
	} else {
		cr.Status.AtProvider.TaskDefinition = nil
	}

	return cr
}

// GenerateRegisterTaskDefinitionInput returns a create input.
func GenerateRegisterTaskDefinitionInput(cr *svcapitypes.TaskDefinition) *svcsdk.RegisterTaskDefinitionInput {
	res := &svcsdk.RegisterTaskDefinitionInput{}

	if cr.Spec.ForProvider.ContainerDefinitions != nil {
		f0 := []*svcsdk.ContainerDefinition{}
		for _, f0iter := range cr.Spec.ForProvider.ContainerDefinitions {
			f0elem := &svcsdk.ContainerDefinition{}
			if f0iter.Command != nil {
				f0elemf0 := []*string{}
				for _, f0elemf0iter := range f0iter.Command {
					var f0elemf0elem string
					f0elemf0elem = *f0elemf0iter
					f0elemf0 = append(f0elemf0, &f0elemf0elem)
				}
				f0elem.SetCommand(f0elemf0)
			}
			if f0iter.CPU != nil {
				f0elem.SetCpu(*f0iter.CPU)
			}
			if f0iter.CredentialSpecs != nil {
				f0elemf2 := []*string{}
				for _, f0elemf2iter := range f0iter.CredentialSpecs {
					var f0elemf2elem string
					f0elemf2elem = *f0elemf2iter
					f0elemf2 = append(f0elemf2, &f0elemf2elem)
				}
				f0elem.SetCredentialSpecs(f0elemf2)
			}
			if f0iter.DependsOn != nil {
				f0elemf3 := []*svcsdk.ContainerDependency{}
				for _, f0elemf3iter := range f0iter.DependsOn {
					f0elemf3elem := &svcsdk.ContainerDependency{}
					if f0elemf3iter.Condition != nil {
						f0elemf3elem.SetCondition(*f0elemf3iter.Condition)
					}
					if f0elemf3iter.ContainerName != nil {
						f0elemf3elem.SetContainerName(*f0elemf3iter.ContainerName)
					}
					f0elemf3 = append(f0elemf3, f0elemf3elem)
				}
				f0elem.SetDependsOn(f0elemf3)
			}
			if f0iter.DisableNetworking != nil {
				f0elem.SetDisableNetworking(*f0iter.DisableNetworking)
			}
			if f0iter.DNSSearchDomains != nil {
				f0elemf5 := []*string{}
				for _, f0elemf5iter := range f0iter.DNSSearchDomains {
					var f0elemf5elem string
					f0elemf5elem = *f0elemf5iter
					f0elemf5 = append(f0elemf5, &f0elemf5elem)
				}
				f0elem.SetDnsSearchDomains(f0elemf5)
			}
			if f0iter.DNSServers != nil {
				f0elemf6 := []*string{}
				for _, f0elemf6iter := range f0iter.DNSServers {
					var f0elemf6elem string
					f0elemf6elem = *f0elemf6iter
					f0elemf6 = append(f0elemf6, &f0elemf6elem)
				}
				f0elem.SetDnsServers(f0elemf6)
			}
			if f0iter.DockerLabels != nil {
				f0elemf7 := map[string]*string{}
				for f0elemf7key, f0elemf7valiter := range f0iter.DockerLabels {
					var f0elemf7val string
					f0elemf7val = *f0elemf7valiter
					f0elemf7[f0elemf7key] = &f0elemf7val
				}
				f0elem.SetDockerLabels(f0elemf7)
			}
			if f0iter.DockerSecurityOptions != nil {
				f0elemf8 := []*string{}
				for _, f0elemf8iter := range f0iter.DockerSecurityOptions {
					var f0elemf8elem string
					f0elemf8elem = *f0elemf8iter
					f0elemf8 = append(f0elemf8, &f0elemf8elem)
				}
				f0elem.SetDockerSecurityOptions(f0elemf8)
			}
			if f0iter.EntryPoint != nil {
				f0elemf9 := []*string{}
				for _, f0elemf9iter := range f0iter.EntryPoint {
					var f0elemf9elem string
					f0elemf9elem = *f0elemf9iter
					f0elemf9 = append(f0elemf9, &f0elemf9elem)
				}
				f0elem.SetEntryPoint(f0elemf9)
			}
			if f0iter.Environment != nil {
				f0elemf10 := []*svcsdk.KeyValuePair{}
				for _, f0elemf10iter := range f0iter.Environment {
					f0elemf10elem := &svcsdk.KeyValuePair{}
					if f0elemf10iter.Name != nil {
						f0elemf10elem.SetName(*f0elemf10iter.Name)
					}
					if f0elemf10iter.Value != nil {
						f0elemf10elem.SetValue(*f0elemf10iter.Value)
					}
					f0elemf10 = append(f0elemf10, f0elemf10elem)
				}
				f0elem.SetEnvironment(f0elemf10)
			}
			if f0iter.EnvironmentFiles != nil {
				f0elemf11 := []*svcsdk.EnvironmentFile{}
				for _, f0elemf11iter := range f0iter.EnvironmentFiles {
					f0elemf11elem := &svcsdk.EnvironmentFile{}
					if f0elemf11iter.Type != nil {
						f0elemf11elem.SetType(*f0elemf11iter.Type)
					}
					if f0elemf11iter.Value != nil {
						f0elemf11elem.SetValue(*f0elemf11iter.Value)
					}
					f0elemf11 = append(f0elemf11, f0elemf11elem)
				}
				f0elem.SetEnvironmentFiles(f0elemf11)
			}
			if f0iter.Essential != nil {
				f0elem.SetEssential(*f0iter.Essential)
			}
			if f0iter.ExtraHosts != nil {
				f0elemf13 := []*svcsdk.HostEntry{}
				for _, f0elemf13iter := range f0iter.ExtraHosts {
					f0elemf13elem := &svcsdk.HostEntry{}
					if f0elemf13iter.Hostname != nil {
						f0elemf13elem.SetHostname(*f0elemf13iter.Hostname)
					}
					if f0elemf13iter.IPAddress != nil {
						f0elemf13elem.SetIpAddress(*f0elemf13iter.IPAddress)
					}
					f0elemf13 = append(f0elemf13, f0elemf13elem)
				}
				f0elem.SetExtraHosts(f0elemf13)
			}
			if f0iter.FirelensConfiguration != nil {
				f0elemf14 := &svcsdk.FirelensConfiguration{}
				if f0iter.FirelensConfiguration.Options != nil {
					f0elemf14f0 := map[string]*string{}
					for f0elemf14f0key, f0elemf14f0valiter := range f0iter.FirelensConfiguration.Options {
						var f0elemf14f0val string
						f0elemf14f0val = *f0elemf14f0valiter
						f0elemf14f0[f0elemf14f0key] = &f0elemf14f0val
					}
					f0elemf14.SetOptions(f0elemf14f0)
				}
				if f0iter.FirelensConfiguration.Type != nil {
					f0elemf14.SetType(*f0iter.FirelensConfiguration.Type)
				}
				f0elem.SetFirelensConfiguration(f0elemf14)
			}
			if f0iter.HealthCheck != nil {
				f0elemf15 := &svcsdk.HealthCheck{}
				if f0iter.HealthCheck.Command != nil {
					f0elemf15f0 := []*string{}
					for _, f0elemf15f0iter := range f0iter.HealthCheck.Command {
						var f0elemf15f0elem string
						f0elemf15f0elem = *f0elemf15f0iter
						f0elemf15f0 = append(f0elemf15f0, &f0elemf15f0elem)
					}
					f0elemf15.SetCommand(f0elemf15f0)
				}
				if f0iter.HealthCheck.Interval != nil {
					f0elemf15.SetInterval(*f0iter.HealthCheck.Interval)
				}
				if f0iter.HealthCheck.Retries != nil {
					f0elemf15.SetRetries(*f0iter.HealthCheck.Retries)
				}
				if f0iter.HealthCheck.StartPeriod != nil {
					f0elemf15.SetStartPeriod(*f0iter.HealthCheck.StartPeriod)
				}
				if f0iter.HealthCheck.Timeout != nil {
					f0elemf15.SetTimeout(*f0iter.HealthCheck.Timeout)
				}
				f0elem.SetHealthCheck(f0elemf15)
			}
			if f0iter.Hostname != nil {
				f0elem.SetHostname(*f0iter.Hostname)
			}
			if f0iter.Image != nil {
				f0elem.SetImage(*f0iter.Image)
			}
			if f0iter.Interactive != nil {
				f0elem.SetInteractive(*f0iter.Interactive)
			}
			if f0iter.Links != nil {
				f0elemf19 := []*string{}
				for _, f0elemf19iter := range f0iter.Links {
					var f0elemf19elem string
					f0elemf19elem = *f0elemf19iter
					f0elemf19 = append(f0elemf19, &f0elemf19elem)
				}
				f0elem.SetLinks(f0elemf19)
			}
			if f0iter.LinuxParameters != nil {
				f0elemf20 := &svcsdk.LinuxParameters{}
				if f0iter.LinuxParameters.Capabilities != nil {
					f0elemf20f0 := &svcsdk.KernelCapabilities{}
					if f0iter.LinuxParameters.Capabilities.Add != nil {
						f0elemf20f0f0 := []*string{}
						for _, f0elemf20f0f0iter := range f0iter.LinuxParameters.Capabilities.Add {
							var f0elemf20f0f0elem string
							f0elemf20f0f0elem = *f0elemf20f0f0iter
							f0elemf20f0f0 = append(f0elemf20f0f0, &f0elemf20f0f0elem)
						}
						f0elemf20f0.SetAdd(f0elemf20f0f0)
					}
					if f0iter.LinuxParameters.Capabilities.Drop != nil {
						f0elemf20f0f1 := []*string{}
						for _, f0elemf20f0f1iter := range f0iter.LinuxParameters.Capabilities.Drop {
							var f0elemf20f0f1elem string
							f0elemf20f0f1elem = *f0elemf20f0f1iter
							f0elemf20f0f1 = append(f0elemf20f0f1, &f0elemf20f0f1elem)
						}
						f0elemf20f0.SetDrop(f0elemf20f0f1)
					}
					f0elemf20.SetCapabilities(f0elemf20f0)
				}
				if f0iter.LinuxParameters.Devices != nil {
					f0elemf20f1 := []*svcsdk.Device{}
					for _, f0elemf20f1iter := range f0iter.LinuxParameters.Devices {
						f0elemf20f1elem := &svcsdk.Device{}
						if f0elemf20f1iter.ContainerPath != nil {
							f0elemf20f1elem.SetContainerPath(*f0elemf20f1iter.ContainerPath)
						}
						if f0elemf20f1iter.HostPath != nil {
							f0elemf20f1elem.SetHostPath(*f0elemf20f1iter.HostPath)
						}
						if f0elemf20f1iter.Permissions != nil {
							f0elemf20f1elemf2 := []*string{}
							for _, f0elemf20f1elemf2iter := range f0elemf20f1iter.Permissions {
								var f0elemf20f1elemf2elem string
								f0elemf20f1elemf2elem = *f0elemf20f1elemf2iter
								f0elemf20f1elemf2 = append(f0elemf20f1elemf2, &f0elemf20f1elemf2elem)
							}
							f0elemf20f1elem.SetPermissions(f0elemf20f1elemf2)
						}
						f0elemf20f1 = append(f0elemf20f1, f0elemf20f1elem)
					}
					f0elemf20.SetDevices(f0elemf20f1)
				}
				if f0iter.LinuxParameters.InitProcessEnabled != nil {
					f0elemf20.SetInitProcessEnabled(*f0iter.LinuxParameters.InitProcessEnabled)
				}
				if f0iter.LinuxParameters.MaxSwap != nil {
					f0elemf20.SetMaxSwap(*f0iter.LinuxParameters.MaxSwap)
				}
				if f0iter.LinuxParameters.SharedMemorySize != nil {
					f0elemf20.SetSharedMemorySize(*f0iter.LinuxParameters.SharedMemorySize)
				}
				if f0iter.LinuxParameters.Swappiness != nil {
					f0elemf20.SetSwappiness(*f0iter.LinuxParameters.Swappiness)
				}
				if f0iter.LinuxParameters.Tmpfs != nil {
					f0elemf20f6 := []*svcsdk.Tmpfs{}
					for _, f0elemf20f6iter := range f0iter.LinuxParameters.Tmpfs {
						f0elemf20f6elem := &svcsdk.Tmpfs{}
						if f0elemf20f6iter.ContainerPath != nil {
							f0elemf20f6elem.SetContainerPath(*f0elemf20f6iter.ContainerPath)
						}
						if f0elemf20f6iter.MountOptions != nil {
							f0elemf20f6elemf1 := []*string{}
							for _, f0elemf20f6elemf1iter := range f0elemf20f6iter.MountOptions {
								var f0elemf20f6elemf1elem string
								f0elemf20f6elemf1elem = *f0elemf20f6elemf1iter
								f0elemf20f6elemf1 = append(f0elemf20f6elemf1, &f0elemf20f6elemf1elem)
							}
							f0elemf20f6elem.SetMountOptions(f0elemf20f6elemf1)
						}
						if f0elemf20f6iter.Size != nil {
							f0elemf20f6elem.SetSize(*f0elemf20f6iter.Size)
						}
						f0elemf20f6 = append(f0elemf20f6, f0elemf20f6elem)
					}
					f0elemf20.SetTmpfs(f0elemf20f6)
				}
				f0elem.SetLinuxParameters(f0elemf20)
			}
			if f0iter.LogConfiguration != nil {
				f0elemf21 := &svcsdk.LogConfiguration{}
				if f0iter.LogConfiguration.LogDriver != nil {
					f0elemf21.SetLogDriver(*f0iter.LogConfiguration.LogDriver)
				}
				if f0iter.LogConfiguration.Options != nil {
					f0elemf21f1 := map[string]*string{}
					for f0elemf21f1key, f0elemf21f1valiter := range f0iter.LogConfiguration.Options {
						var f0elemf21f1val string
						f0elemf21f1val = *f0elemf21f1valiter
						f0elemf21f1[f0elemf21f1key] = &f0elemf21f1val
					}
					f0elemf21.SetOptions(f0elemf21f1)
				}
				if f0iter.LogConfiguration.SecretOptions != nil {
					f0elemf21f2 := []*svcsdk.Secret{}
					for _, f0elemf21f2iter := range f0iter.LogConfiguration.SecretOptions {
						f0elemf21f2elem := &svcsdk.Secret{}
						if f0elemf21f2iter.Name != nil {
							f0elemf21f2elem.SetName(*f0elemf21f2iter.Name)
						}
						if f0elemf21f2iter.ValueFrom != nil {
							f0elemf21f2elem.SetValueFrom(*f0elemf21f2iter.ValueFrom)
						}
						f0elemf21f2 = append(f0elemf21f2, f0elemf21f2elem)
					}
					f0elemf21.SetSecretOptions(f0elemf21f2)
				}
				f0elem.SetLogConfiguration(f0elemf21)
			}
			if f0iter.Memory != nil {
				f0elem.SetMemory(*f0iter.Memory)
			}
			if f0iter.MemoryReservation != nil {
				f0elem.SetMemoryReservation(*f0iter.MemoryReservation)
			}
			if f0iter.MountPoints != nil {
				f0elemf24 := []*svcsdk.MountPoint{}
				for _, f0elemf24iter := range f0iter.MountPoints {
					f0elemf24elem := &svcsdk.MountPoint{}
					if f0elemf24iter.ContainerPath != nil {
						f0elemf24elem.SetContainerPath(*f0elemf24iter.ContainerPath)
					}
					if f0elemf24iter.ReadOnly != nil {
						f0elemf24elem.SetReadOnly(*f0elemf24iter.ReadOnly)
					}
					if f0elemf24iter.SourceVolume != nil {
						f0elemf24elem.SetSourceVolume(*f0elemf24iter.SourceVolume)
					}
					f0elemf24 = append(f0elemf24, f0elemf24elem)
				}
				f0elem.SetMountPoints(f0elemf24)
			}
			if f0iter.Name != nil {
				f0elem.SetName(*f0iter.Name)
			}
			if f0iter.PortMappings != nil {
				f0elemf26 := []*svcsdk.PortMapping{}
				for _, f0elemf26iter := range f0iter.PortMappings {
					f0elemf26elem := &svcsdk.PortMapping{}
					if f0elemf26iter.AppProtocol != nil {
						f0elemf26elem.SetAppProtocol(*f0elemf26iter.AppProtocol)
					}
					if f0elemf26iter.ContainerPort != nil {
						f0elemf26elem.SetContainerPort(*f0elemf26iter.ContainerPort)
					}
					if f0elemf26iter.ContainerPortRange != nil {
						f0elemf26elem.SetContainerPortRange(*f0elemf26iter.ContainerPortRange)
					}
					if f0elemf26iter.HostPort != nil {
						f0elemf26elem.SetHostPort(*f0elemf26iter.HostPort)
					}
					if f0elemf26iter.Name != nil {
						f0elemf26elem.SetName(*f0elemf26iter.Name)
					}
					if f0elemf26iter.Protocol != nil {
						f0elemf26elem.SetProtocol(*f0elemf26iter.Protocol)
					}
					f0elemf26 = append(f0elemf26, f0elemf26elem)
				}
				f0elem.SetPortMappings(f0elemf26)
			}
			if f0iter.Privileged != nil {
				f0elem.SetPrivileged(*f0iter.Privileged)
			}
			if f0iter.PseudoTerminal != nil {
				f0elem.SetPseudoTerminal(*f0iter.PseudoTerminal)
			}
			if f0iter.ReadonlyRootFilesystem != nil {
				f0elem.SetReadonlyRootFilesystem(*f0iter.ReadonlyRootFilesystem)
			}
			if f0iter.RepositoryCredentials != nil {
				f0elemf30 := &svcsdk.RepositoryCredentials{}
				if f0iter.RepositoryCredentials.CredentialsParameter != nil {
					f0elemf30.SetCredentialsParameter(*f0iter.RepositoryCredentials.CredentialsParameter)
				}
				f0elem.SetRepositoryCredentials(f0elemf30)
			}
			if f0iter.ResourceRequirements != nil {
				f0elemf31 := []*svcsdk.ResourceRequirement{}
				for _, f0elemf31iter := range f0iter.ResourceRequirements {
					f0elemf31elem := &svcsdk.ResourceRequirement{}
					if f0elemf31iter.Type != nil {
						f0elemf31elem.SetType(*f0elemf31iter.Type)
					}
					if f0elemf31iter.Value != nil {
						f0elemf31elem.SetValue(*f0elemf31iter.Value)
					}
					f0elemf31 = append(f0elemf31, f0elemf31elem)
				}
				f0elem.SetResourceRequirements(f0elemf31)
			}
			if f0iter.Secrets != nil {
				f0elemf32 := []*svcsdk.Secret{}
				for _, f0elemf32iter := range f0iter.Secrets {
					f0elemf32elem := &svcsdk.Secret{}
					if f0elemf32iter.Name != nil {
						f0elemf32elem.SetName(*f0elemf32iter.Name)
					}
					if f0elemf32iter.ValueFrom != nil {
						f0elemf32elem.SetValueFrom(*f0elemf32iter.ValueFrom)
					}
					f0elemf32 = append(f0elemf32, f0elemf32elem)
				}
				f0elem.SetSecrets(f0elemf32)
			}
			if f0iter.StartTimeout != nil {
				f0elem.SetStartTimeout(*f0iter.StartTimeout)
			}
			if f0iter.StopTimeout != nil {
				f0elem.SetStopTimeout(*f0iter.StopTimeout)
			}
			if f0iter.SystemControls != nil {
				f0elemf35 := []*svcsdk.SystemControl{}
				for _, f0elemf35iter := range f0iter.SystemControls {
					f0elemf35elem := &svcsdk.SystemControl{}
					if f0elemf35iter.Namespace != nil {
						f0elemf35elem.SetNamespace(*f0elemf35iter.Namespace)
					}
					if f0elemf35iter.Value != nil {
						f0elemf35elem.SetValue(*f0elemf35iter.Value)
					}
					f0elemf35 = append(f0elemf35, f0elemf35elem)
				}
				f0elem.SetSystemControls(f0elemf35)
			}
			if f0iter.Ulimits != nil {
				f0elemf36 := []*svcsdk.Ulimit{}
				for _, f0elemf36iter := range f0iter.Ulimits {
					f0elemf36elem := &svcsdk.Ulimit{}
					if f0elemf36iter.HardLimit != nil {
						f0elemf36elem.SetHardLimit(*f0elemf36iter.HardLimit)
					}
					if f0elemf36iter.Name != nil {
						f0elemf36elem.SetName(*f0elemf36iter.Name)
					}
					if f0elemf36iter.SoftLimit != nil {
						f0elemf36elem.SetSoftLimit(*f0elemf36iter.SoftLimit)
					}
					f0elemf36 = append(f0elemf36, f0elemf36elem)
				}
				f0elem.SetUlimits(f0elemf36)
			}
			if f0iter.User != nil {
				f0elem.SetUser(*f0iter.User)
			}
			if f0iter.VolumesFrom != nil {
				f0elemf38 := []*svcsdk.VolumeFrom{}
				for _, f0elemf38iter := range f0iter.VolumesFrom {
					f0elemf38elem := &svcsdk.VolumeFrom{}
					if f0elemf38iter.ReadOnly != nil {
						f0elemf38elem.SetReadOnly(*f0elemf38iter.ReadOnly)
					}
					if f0elemf38iter.SourceContainer != nil {
						f0elemf38elem.SetSourceContainer(*f0elemf38iter.SourceContainer)
					}
					f0elemf38 = append(f0elemf38, f0elemf38elem)
				}
				f0elem.SetVolumesFrom(f0elemf38)
			}
			if f0iter.WorkingDirectory != nil {
				f0elem.SetWorkingDirectory(*f0iter.WorkingDirectory)
			}
			f0 = append(f0, f0elem)
		}
		res.SetContainerDefinitions(f0)
	}
	if cr.Spec.ForProvider.CPU != nil {
		res.SetCpu(*cr.Spec.ForProvider.CPU)
	}
	if cr.Spec.ForProvider.EphemeralStorage != nil {
		f2 := &svcsdk.EphemeralStorage{}
		if cr.Spec.ForProvider.EphemeralStorage.SizeInGiB != nil {
			f2.SetSizeInGiB(*cr.Spec.ForProvider.EphemeralStorage.SizeInGiB)
		}
		res.SetEphemeralStorage(f2)
	}
	if cr.Spec.ForProvider.Family != nil {
		res.SetFamily(*cr.Spec.ForProvider.Family)
	}
	if cr.Spec.ForProvider.InferenceAccelerators != nil {
		f4 := []*svcsdk.InferenceAccelerator{}
		for _, f4iter := range cr.Spec.ForProvider.InferenceAccelerators {
			f4elem := &svcsdk.InferenceAccelerator{}
			if f4iter.DeviceName != nil {
				f4elem.SetDeviceName(*f4iter.DeviceName)
			}
			if f4iter.DeviceType != nil {
				f4elem.SetDeviceType(*f4iter.DeviceType)
			}
			f4 = append(f4, f4elem)
		}
		res.SetInferenceAccelerators(f4)
	}
	if cr.Spec.ForProvider.IPCMode != nil {
		res.SetIpcMode(*cr.Spec.ForProvider.IPCMode)
	}
	if cr.Spec.ForProvider.Memory != nil {
		res.SetMemory(*cr.Spec.ForProvider.Memory)
	}
	if cr.Spec.ForProvider.NetworkMode != nil {
		res.SetNetworkMode(*cr.Spec.ForProvider.NetworkMode)
	}
	if cr.Spec.ForProvider.PIDMode != nil {
		res.SetPidMode(*cr.Spec.ForProvider.PIDMode)
	}
	if cr.Spec.ForProvider.PlacementConstraints != nil {
		f9 := []*svcsdk.TaskDefinitionPlacementConstraint{}
		for _, f9iter := range cr.Spec.ForProvider.PlacementConstraints {
			f9elem := &svcsdk.TaskDefinitionPlacementConstraint{}
			if f9iter.Expression != nil {
				f9elem.SetExpression(*f9iter.Expression)
			}
			if f9iter.Type != nil {
				f9elem.SetType(*f9iter.Type)
			}
			f9 = append(f9, f9elem)
		}
		res.SetPlacementConstraints(f9)
	}
	if cr.Spec.ForProvider.ProxyConfiguration != nil {
		f10 := &svcsdk.ProxyConfiguration{}
		if cr.Spec.ForProvider.ProxyConfiguration.ContainerName != nil {
			f10.SetContainerName(*cr.Spec.ForProvider.ProxyConfiguration.ContainerName)
		}
		if cr.Spec.ForProvider.ProxyConfiguration.Properties != nil {
			f10f1 := []*svcsdk.KeyValuePair{}
			for _, f10f1iter := range cr.Spec.ForProvider.ProxyConfiguration.Properties {
				f10f1elem := &svcsdk.KeyValuePair{}
				if f10f1iter.Name != nil {
					f10f1elem.SetName(*f10f1iter.Name)
				}
				if f10f1iter.Value != nil {
					f10f1elem.SetValue(*f10f1iter.Value)
				}
				f10f1 = append(f10f1, f10f1elem)
			}
			f10.SetProperties(f10f1)
		}
		if cr.Spec.ForProvider.ProxyConfiguration.Type != nil {
			f10.SetType(*cr.Spec.ForProvider.ProxyConfiguration.Type)
		}
		res.SetProxyConfiguration(f10)
	}
	if cr.Spec.ForProvider.RequiresCompatibilities != nil {
		f11 := []*string{}
		for _, f11iter := range cr.Spec.ForProvider.RequiresCompatibilities {
			var f11elem string
			f11elem = *f11iter
			f11 = append(f11, &f11elem)
		}
		res.SetRequiresCompatibilities(f11)
	}
	if cr.Spec.ForProvider.RuntimePlatform != nil {
		f12 := &svcsdk.RuntimePlatform{}
		if cr.Spec.ForProvider.RuntimePlatform.CPUArchitecture != nil {
			f12.SetCpuArchitecture(*cr.Spec.ForProvider.RuntimePlatform.CPUArchitecture)
		}
		if cr.Spec.ForProvider.RuntimePlatform.OperatingSystemFamily != nil {
			f12.SetOperatingSystemFamily(*cr.Spec.ForProvider.RuntimePlatform.OperatingSystemFamily)
		}
		res.SetRuntimePlatform(f12)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f13 := []*svcsdk.Tag{}
		for _, f13iter := range cr.Spec.ForProvider.Tags {
			f13elem := &svcsdk.Tag{}
			if f13iter.Key != nil {
				f13elem.SetKey(*f13iter.Key)
			}
			if f13iter.Value != nil {
				f13elem.SetValue(*f13iter.Value)
			}
			f13 = append(f13, f13elem)
		}
		res.SetTags(f13)
	}

	return res
}

// GenerateDeregisterTaskDefinitionInput returns a deletion input.
func GenerateDeregisterTaskDefinitionInput(cr *svcapitypes.TaskDefinition) *svcsdk.DeregisterTaskDefinitionInput {
	res := &svcsdk.DeregisterTaskDefinitionInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
