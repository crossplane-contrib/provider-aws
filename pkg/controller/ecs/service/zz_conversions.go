/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package service

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/ecs"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/ecs/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeServicesInput returns input for read
// operation.
func GenerateDescribeServicesInput(cr *svcapitypes.Service) *svcsdk.DescribeServicesInput {
	res := &svcsdk.DescribeServicesInput{}

	return res
}

// GenerateService returns the current state in the form of *svcapitypes.Service.
func GenerateService(resp *svcsdk.DescribeServicesOutput) *svcapitypes.Service {
	cr := &svcapitypes.Service{}

	found := false
	for _, elem := range resp.Services {
		if elem.CapacityProviderStrategy != nil {
			f0 := []*svcapitypes.CapacityProviderStrategyItem{}
			for _, f0iter := range elem.CapacityProviderStrategy {
				f0elem := &svcapitypes.CapacityProviderStrategyItem{}
				if f0iter.Base != nil {
					f0elem.Base = f0iter.Base
				}
				if f0iter.CapacityProvider != nil {
					f0elem.CapacityProvider = f0iter.CapacityProvider
				}
				if f0iter.Weight != nil {
					f0elem.Weight = f0iter.Weight
				}
				f0 = append(f0, f0elem)
			}
			cr.Spec.ForProvider.CapacityProviderStrategy = f0
		} else {
			cr.Spec.ForProvider.CapacityProviderStrategy = nil
		}
		if elem.ClusterArn != nil {
			cr.Status.AtProvider.ClusterARN = elem.ClusterArn
		} else {
			cr.Status.AtProvider.ClusterARN = nil
		}
		if elem.CreatedAt != nil {
			cr.Status.AtProvider.CreatedAt = &metav1.Time{*elem.CreatedAt}
		} else {
			cr.Status.AtProvider.CreatedAt = nil
		}
		if elem.CreatedBy != nil {
			cr.Status.AtProvider.CreatedBy = elem.CreatedBy
		} else {
			cr.Status.AtProvider.CreatedBy = nil
		}
		if elem.DeploymentConfiguration != nil {
			f4 := &svcapitypes.DeploymentConfiguration{}
			if elem.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
				f4f0 := &svcapitypes.DeploymentCircuitBreaker{}
				if elem.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
					f4f0.Enable = elem.DeploymentConfiguration.DeploymentCircuitBreaker.Enable
				}
				if elem.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
					f4f0.Rollback = elem.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback
				}
				f4.DeploymentCircuitBreaker = f4f0
			}
			if elem.DeploymentConfiguration.MaximumPercent != nil {
				f4.MaximumPercent = elem.DeploymentConfiguration.MaximumPercent
			}
			if elem.DeploymentConfiguration.MinimumHealthyPercent != nil {
				f4.MinimumHealthyPercent = elem.DeploymentConfiguration.MinimumHealthyPercent
			}
			cr.Spec.ForProvider.DeploymentConfiguration = f4
		} else {
			cr.Spec.ForProvider.DeploymentConfiguration = nil
		}
		if elem.DeploymentController != nil {
			f5 := &svcapitypes.DeploymentController{}
			if elem.DeploymentController.Type != nil {
				f5.Type = elem.DeploymentController.Type
			}
			cr.Spec.ForProvider.DeploymentController = f5
		} else {
			cr.Spec.ForProvider.DeploymentController = nil
		}
		if elem.Deployments != nil {
			f6 := []*svcapitypes.Deployment{}
			for _, f6iter := range elem.Deployments {
				f6elem := &svcapitypes.Deployment{}
				if f6iter.CapacityProviderStrategy != nil {
					f6elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
					for _, f6elemf0iter := range f6iter.CapacityProviderStrategy {
						f6elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
						if f6elemf0iter.Base != nil {
							f6elemf0elem.Base = f6elemf0iter.Base
						}
						if f6elemf0iter.CapacityProvider != nil {
							f6elemf0elem.CapacityProvider = f6elemf0iter.CapacityProvider
						}
						if f6elemf0iter.Weight != nil {
							f6elemf0elem.Weight = f6elemf0iter.Weight
						}
						f6elemf0 = append(f6elemf0, f6elemf0elem)
					}
					f6elem.CapacityProviderStrategy = f6elemf0
				}
				if f6iter.CreatedAt != nil {
					f6elem.CreatedAt = &metav1.Time{*f6iter.CreatedAt}
				}
				if f6iter.DesiredCount != nil {
					f6elem.DesiredCount = f6iter.DesiredCount
				}
				if f6iter.FailedTasks != nil {
					f6elem.FailedTasks = f6iter.FailedTasks
				}
				if f6iter.Id != nil {
					f6elem.ID = f6iter.Id
				}
				if f6iter.LaunchType != nil {
					f6elem.LaunchType = f6iter.LaunchType
				}
				if f6iter.NetworkConfiguration != nil {
					f6elemf6 := &svcapitypes.NetworkConfiguration{}
					if f6iter.NetworkConfiguration.AwsvpcConfiguration != nil {
						f6elemf6f0 := &svcapitypes.AWSVPCConfiguration{}
						if f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
							f6elemf6f0.AssignPublicIP = f6iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
						}
						if f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
							f6elemf6f0f1 := []*string{}
							for _, f6elemf6f0f1iter := range f6iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
								var f6elemf6f0f1elem string
								f6elemf6f0f1elem = *f6elemf6f0f1iter
								f6elemf6f0f1 = append(f6elemf6f0f1, &f6elemf6f0f1elem)
							}
							f6elemf6f0.SecurityGroups = f6elemf6f0f1
						}
						if f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
							f6elemf6f0f2 := []*string{}
							for _, f6elemf6f0f2iter := range f6iter.NetworkConfiguration.AwsvpcConfiguration.Subnets {
								var f6elemf6f0f2elem string
								f6elemf6f0f2elem = *f6elemf6f0f2iter
								f6elemf6f0f2 = append(f6elemf6f0f2, &f6elemf6f0f2elem)
							}
							f6elemf6f0.Subnets = f6elemf6f0f2
						}
						f6elemf6.AWSvpcConfiguration = f6elemf6f0
					}
					f6elem.NetworkConfiguration = f6elemf6
				}
				if f6iter.PendingCount != nil {
					f6elem.PendingCount = f6iter.PendingCount
				}
				if f6iter.PlatformFamily != nil {
					f6elem.PlatformFamily = f6iter.PlatformFamily
				}
				if f6iter.PlatformVersion != nil {
					f6elem.PlatformVersion = f6iter.PlatformVersion
				}
				if f6iter.RolloutState != nil {
					f6elem.RolloutState = f6iter.RolloutState
				}
				if f6iter.RolloutStateReason != nil {
					f6elem.RolloutStateReason = f6iter.RolloutStateReason
				}
				if f6iter.RunningCount != nil {
					f6elem.RunningCount = f6iter.RunningCount
				}
				if f6iter.Status != nil {
					f6elem.Status = f6iter.Status
				}
				if f6iter.TaskDefinition != nil {
					f6elem.TaskDefinition = f6iter.TaskDefinition
				}
				if f6iter.UpdatedAt != nil {
					f6elem.UpdatedAt = &metav1.Time{*f6iter.UpdatedAt}
				}
				f6 = append(f6, f6elem)
			}
			cr.Status.AtProvider.Deployments = f6
		} else {
			cr.Status.AtProvider.Deployments = nil
		}
		if elem.DesiredCount != nil {
			cr.Spec.ForProvider.DesiredCount = elem.DesiredCount
		} else {
			cr.Spec.ForProvider.DesiredCount = nil
		}
		if elem.EnableECSManagedTags != nil {
			cr.Spec.ForProvider.EnableECSManagedTags = elem.EnableECSManagedTags
		} else {
			cr.Spec.ForProvider.EnableECSManagedTags = nil
		}
		if elem.EnableExecuteCommand != nil {
			cr.Spec.ForProvider.EnableExecuteCommand = elem.EnableExecuteCommand
		} else {
			cr.Spec.ForProvider.EnableExecuteCommand = nil
		}
		if elem.Events != nil {
			f10 := []*svcapitypes.ServiceEvent{}
			for _, f10iter := range elem.Events {
				f10elem := &svcapitypes.ServiceEvent{}
				if f10iter.CreatedAt != nil {
					f10elem.CreatedAt = &metav1.Time{*f10iter.CreatedAt}
				}
				if f10iter.Id != nil {
					f10elem.ID = f10iter.Id
				}
				if f10iter.Message != nil {
					f10elem.Message = f10iter.Message
				}
				f10 = append(f10, f10elem)
			}
			cr.Status.AtProvider.Events = f10
		} else {
			cr.Status.AtProvider.Events = nil
		}
		if elem.HealthCheckGracePeriodSeconds != nil {
			cr.Spec.ForProvider.HealthCheckGracePeriodSeconds = elem.HealthCheckGracePeriodSeconds
		} else {
			cr.Spec.ForProvider.HealthCheckGracePeriodSeconds = nil
		}
		if elem.LaunchType != nil {
			cr.Spec.ForProvider.LaunchType = elem.LaunchType
		} else {
			cr.Spec.ForProvider.LaunchType = nil
		}
		if elem.LoadBalancers != nil {
			f13 := []*svcapitypes.LoadBalancer{}
			for _, f13iter := range elem.LoadBalancers {
				f13elem := &svcapitypes.LoadBalancer{}
				if f13iter.ContainerName != nil {
					f13elem.ContainerName = f13iter.ContainerName
				}
				if f13iter.ContainerPort != nil {
					f13elem.ContainerPort = f13iter.ContainerPort
				}
				if f13iter.LoadBalancerName != nil {
					f13elem.LoadBalancerName = f13iter.LoadBalancerName
				}
				if f13iter.TargetGroupArn != nil {
					f13elem.TargetGroupARN = f13iter.TargetGroupArn
				}
				f13 = append(f13, f13elem)
			}
			cr.Status.AtProvider.LoadBalancers = f13
		} else {
			cr.Status.AtProvider.LoadBalancers = nil
		}
		if elem.NetworkConfiguration != nil {
			f14 := &svcapitypes.NetworkConfiguration{}
			if elem.NetworkConfiguration.AwsvpcConfiguration != nil {
				f14f0 := &svcapitypes.AWSVPCConfiguration{}
				if elem.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
					f14f0.AssignPublicIP = elem.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
				}
				if elem.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
					f14f0f1 := []*string{}
					for _, f14f0f1iter := range elem.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
						var f14f0f1elem string
						f14f0f1elem = *f14f0f1iter
						f14f0f1 = append(f14f0f1, &f14f0f1elem)
					}
					f14f0.SecurityGroups = f14f0f1
				}
				if elem.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
					f14f0f2 := []*string{}
					for _, f14f0f2iter := range elem.NetworkConfiguration.AwsvpcConfiguration.Subnets {
						var f14f0f2elem string
						f14f0f2elem = *f14f0f2iter
						f14f0f2 = append(f14f0f2, &f14f0f2elem)
					}
					f14f0.Subnets = f14f0f2
				}
				f14.AWSvpcConfiguration = f14f0
			}
			cr.Status.AtProvider.NetworkConfiguration = f14
		} else {
			cr.Status.AtProvider.NetworkConfiguration = nil
		}
		if elem.PendingCount != nil {
			cr.Status.AtProvider.PendingCount = elem.PendingCount
		} else {
			cr.Status.AtProvider.PendingCount = nil
		}
		if elem.PlacementConstraints != nil {
			f16 := []*svcapitypes.PlacementConstraint{}
			for _, f16iter := range elem.PlacementConstraints {
				f16elem := &svcapitypes.PlacementConstraint{}
				if f16iter.Expression != nil {
					f16elem.Expression = f16iter.Expression
				}
				if f16iter.Type != nil {
					f16elem.Type = f16iter.Type
				}
				f16 = append(f16, f16elem)
			}
			cr.Spec.ForProvider.PlacementConstraints = f16
		} else {
			cr.Spec.ForProvider.PlacementConstraints = nil
		}
		if elem.PlacementStrategy != nil {
			f17 := []*svcapitypes.PlacementStrategy{}
			for _, f17iter := range elem.PlacementStrategy {
				f17elem := &svcapitypes.PlacementStrategy{}
				if f17iter.Field != nil {
					f17elem.Field = f17iter.Field
				}
				if f17iter.Type != nil {
					f17elem.Type = f17iter.Type
				}
				f17 = append(f17, f17elem)
			}
			cr.Spec.ForProvider.PlacementStrategy = f17
		} else {
			cr.Spec.ForProvider.PlacementStrategy = nil
		}
		if elem.PlatformFamily != nil {
			cr.Status.AtProvider.PlatformFamily = elem.PlatformFamily
		} else {
			cr.Status.AtProvider.PlatformFamily = nil
		}
		if elem.PlatformVersion != nil {
			cr.Spec.ForProvider.PlatformVersion = elem.PlatformVersion
		} else {
			cr.Spec.ForProvider.PlatformVersion = nil
		}
		if elem.PropagateTags != nil {
			cr.Spec.ForProvider.PropagateTags = elem.PropagateTags
		} else {
			cr.Spec.ForProvider.PropagateTags = nil
		}
		if elem.RoleArn != nil {
			cr.Status.AtProvider.RoleARN = elem.RoleArn
		} else {
			cr.Status.AtProvider.RoleARN = nil
		}
		if elem.RunningCount != nil {
			cr.Status.AtProvider.RunningCount = elem.RunningCount
		} else {
			cr.Status.AtProvider.RunningCount = nil
		}
		if elem.SchedulingStrategy != nil {
			cr.Spec.ForProvider.SchedulingStrategy = elem.SchedulingStrategy
		} else {
			cr.Spec.ForProvider.SchedulingStrategy = nil
		}
		if elem.ServiceArn != nil {
			cr.Status.AtProvider.ServiceARN = elem.ServiceArn
		} else {
			cr.Status.AtProvider.ServiceARN = nil
		}
		if elem.ServiceName != nil {
			cr.Status.AtProvider.ServiceName = elem.ServiceName
		} else {
			cr.Status.AtProvider.ServiceName = nil
		}
		if elem.ServiceRegistries != nil {
			f26 := []*svcapitypes.ServiceRegistry{}
			for _, f26iter := range elem.ServiceRegistries {
				f26elem := &svcapitypes.ServiceRegistry{}
				if f26iter.ContainerName != nil {
					f26elem.ContainerName = f26iter.ContainerName
				}
				if f26iter.ContainerPort != nil {
					f26elem.ContainerPort = f26iter.ContainerPort
				}
				if f26iter.Port != nil {
					f26elem.Port = f26iter.Port
				}
				if f26iter.RegistryArn != nil {
					f26elem.RegistryARN = f26iter.RegistryArn
				}
				f26 = append(f26, f26elem)
			}
			cr.Spec.ForProvider.ServiceRegistries = f26
		} else {
			cr.Spec.ForProvider.ServiceRegistries = nil
		}
		if elem.Status != nil {
			cr.Status.AtProvider.Status = elem.Status
		} else {
			cr.Status.AtProvider.Status = nil
		}
		if elem.Tags != nil {
			f28 := []*svcapitypes.Tag{}
			for _, f28iter := range elem.Tags {
				f28elem := &svcapitypes.Tag{}
				if f28iter.Key != nil {
					f28elem.Key = f28iter.Key
				}
				if f28iter.Value != nil {
					f28elem.Value = f28iter.Value
				}
				f28 = append(f28, f28elem)
			}
			cr.Spec.ForProvider.Tags = f28
		} else {
			cr.Spec.ForProvider.Tags = nil
		}
		if elem.TaskDefinition != nil {
			cr.Status.AtProvider.TaskDefinition = elem.TaskDefinition
		} else {
			cr.Status.AtProvider.TaskDefinition = nil
		}
		if elem.TaskSets != nil {
			f30 := []*svcapitypes.TaskSet{}
			for _, f30iter := range elem.TaskSets {
				f30elem := &svcapitypes.TaskSet{}
				if f30iter.CapacityProviderStrategy != nil {
					f30elemf0 := []*svcapitypes.CapacityProviderStrategyItem{}
					for _, f30elemf0iter := range f30iter.CapacityProviderStrategy {
						f30elemf0elem := &svcapitypes.CapacityProviderStrategyItem{}
						if f30elemf0iter.Base != nil {
							f30elemf0elem.Base = f30elemf0iter.Base
						}
						if f30elemf0iter.CapacityProvider != nil {
							f30elemf0elem.CapacityProvider = f30elemf0iter.CapacityProvider
						}
						if f30elemf0iter.Weight != nil {
							f30elemf0elem.Weight = f30elemf0iter.Weight
						}
						f30elemf0 = append(f30elemf0, f30elemf0elem)
					}
					f30elem.CapacityProviderStrategy = f30elemf0
				}
				if f30iter.ClusterArn != nil {
					f30elem.ClusterARN = f30iter.ClusterArn
				}
				if f30iter.ComputedDesiredCount != nil {
					f30elem.ComputedDesiredCount = f30iter.ComputedDesiredCount
				}
				if f30iter.CreatedAt != nil {
					f30elem.CreatedAt = &metav1.Time{*f30iter.CreatedAt}
				}
				if f30iter.ExternalId != nil {
					f30elem.ExternalID = f30iter.ExternalId
				}
				if f30iter.Id != nil {
					f30elem.ID = f30iter.Id
				}
				if f30iter.LaunchType != nil {
					f30elem.LaunchType = f30iter.LaunchType
				}
				if f30iter.LoadBalancers != nil {
					f30elemf7 := []*svcapitypes.LoadBalancer{}
					for _, f30elemf7iter := range f30iter.LoadBalancers {
						f30elemf7elem := &svcapitypes.LoadBalancer{}
						if f30elemf7iter.ContainerName != nil {
							f30elemf7elem.ContainerName = f30elemf7iter.ContainerName
						}
						if f30elemf7iter.ContainerPort != nil {
							f30elemf7elem.ContainerPort = f30elemf7iter.ContainerPort
						}
						if f30elemf7iter.LoadBalancerName != nil {
							f30elemf7elem.LoadBalancerName = f30elemf7iter.LoadBalancerName
						}
						if f30elemf7iter.TargetGroupArn != nil {
							f30elemf7elem.TargetGroupARN = f30elemf7iter.TargetGroupArn
						}
						f30elemf7 = append(f30elemf7, f30elemf7elem)
					}
					f30elem.LoadBalancers = f30elemf7
				}
				if f30iter.NetworkConfiguration != nil {
					f30elemf8 := &svcapitypes.NetworkConfiguration{}
					if f30iter.NetworkConfiguration.AwsvpcConfiguration != nil {
						f30elemf8f0 := &svcapitypes.AWSVPCConfiguration{}
						if f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp != nil {
							f30elemf8f0.AssignPublicIP = f30iter.NetworkConfiguration.AwsvpcConfiguration.AssignPublicIp
						}
						if f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups != nil {
							f30elemf8f0f1 := []*string{}
							for _, f30elemf8f0f1iter := range f30iter.NetworkConfiguration.AwsvpcConfiguration.SecurityGroups {
								var f30elemf8f0f1elem string
								f30elemf8f0f1elem = *f30elemf8f0f1iter
								f30elemf8f0f1 = append(f30elemf8f0f1, &f30elemf8f0f1elem)
							}
							f30elemf8f0.SecurityGroups = f30elemf8f0f1
						}
						if f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets != nil {
							f30elemf8f0f2 := []*string{}
							for _, f30elemf8f0f2iter := range f30iter.NetworkConfiguration.AwsvpcConfiguration.Subnets {
								var f30elemf8f0f2elem string
								f30elemf8f0f2elem = *f30elemf8f0f2iter
								f30elemf8f0f2 = append(f30elemf8f0f2, &f30elemf8f0f2elem)
							}
							f30elemf8f0.Subnets = f30elemf8f0f2
						}
						f30elemf8.AWSvpcConfiguration = f30elemf8f0
					}
					f30elem.NetworkConfiguration = f30elemf8
				}
				if f30iter.PendingCount != nil {
					f30elem.PendingCount = f30iter.PendingCount
				}
				if f30iter.PlatformFamily != nil {
					f30elem.PlatformFamily = f30iter.PlatformFamily
				}
				if f30iter.PlatformVersion != nil {
					f30elem.PlatformVersion = f30iter.PlatformVersion
				}
				if f30iter.RunningCount != nil {
					f30elem.RunningCount = f30iter.RunningCount
				}
				if f30iter.Scale != nil {
					f30elemf13 := &svcapitypes.Scale{}
					if f30iter.Scale.Unit != nil {
						f30elemf13.Unit = f30iter.Scale.Unit
					}
					if f30iter.Scale.Value != nil {
						f30elemf13.Value = f30iter.Scale.Value
					}
					f30elem.Scale = f30elemf13
				}
				if f30iter.ServiceArn != nil {
					f30elem.ServiceARN = f30iter.ServiceArn
				}
				if f30iter.ServiceRegistries != nil {
					f30elemf15 := []*svcapitypes.ServiceRegistry{}
					for _, f30elemf15iter := range f30iter.ServiceRegistries {
						f30elemf15elem := &svcapitypes.ServiceRegistry{}
						if f30elemf15iter.ContainerName != nil {
							f30elemf15elem.ContainerName = f30elemf15iter.ContainerName
						}
						if f30elemf15iter.ContainerPort != nil {
							f30elemf15elem.ContainerPort = f30elemf15iter.ContainerPort
						}
						if f30elemf15iter.Port != nil {
							f30elemf15elem.Port = f30elemf15iter.Port
						}
						if f30elemf15iter.RegistryArn != nil {
							f30elemf15elem.RegistryARN = f30elemf15iter.RegistryArn
						}
						f30elemf15 = append(f30elemf15, f30elemf15elem)
					}
					f30elem.ServiceRegistries = f30elemf15
				}
				if f30iter.StabilityStatus != nil {
					f30elem.StabilityStatus = f30iter.StabilityStatus
				}
				if f30iter.StabilityStatusAt != nil {
					f30elem.StabilityStatusAt = &metav1.Time{*f30iter.StabilityStatusAt}
				}
				if f30iter.StartedBy != nil {
					f30elem.StartedBy = f30iter.StartedBy
				}
				if f30iter.Status != nil {
					f30elem.Status = f30iter.Status
				}
				if f30iter.Tags != nil {
					f30elemf20 := []*svcapitypes.Tag{}
					for _, f30elemf20iter := range f30iter.Tags {
						f30elemf20elem := &svcapitypes.Tag{}
						if f30elemf20iter.Key != nil {
							f30elemf20elem.Key = f30elemf20iter.Key
						}
						if f30elemf20iter.Value != nil {
							f30elemf20elem.Value = f30elemf20iter.Value
						}
						f30elemf20 = append(f30elemf20, f30elemf20elem)
					}
					f30elem.Tags = f30elemf20
				}
				if f30iter.TaskDefinition != nil {
					f30elem.TaskDefinition = f30iter.TaskDefinition
				}
				if f30iter.TaskSetArn != nil {
					f30elem.TaskSetARN = f30iter.TaskSetArn
				}
				if f30iter.UpdatedAt != nil {
					f30elem.UpdatedAt = &metav1.Time{*f30iter.UpdatedAt}
				}
				f30 = append(f30, f30elem)
			}
			cr.Status.AtProvider.TaskSets = f30
		} else {
			cr.Status.AtProvider.TaskSets = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateServiceInput returns a create input.
func GenerateCreateServiceInput(cr *svcapitypes.Service) *svcsdk.CreateServiceInput {
	res := &svcsdk.CreateServiceInput{}

	if cr.Spec.ForProvider.CapacityProviderStrategy != nil {
		f0 := []*svcsdk.CapacityProviderStrategyItem{}
		for _, f0iter := range cr.Spec.ForProvider.CapacityProviderStrategy {
			f0elem := &svcsdk.CapacityProviderStrategyItem{}
			if f0iter.Base != nil {
				f0elem.SetBase(*f0iter.Base)
			}
			if f0iter.CapacityProvider != nil {
				f0elem.SetCapacityProvider(*f0iter.CapacityProvider)
			}
			if f0iter.Weight != nil {
				f0elem.SetWeight(*f0iter.Weight)
			}
			f0 = append(f0, f0elem)
		}
		res.SetCapacityProviderStrategy(f0)
	}
	if cr.Spec.ForProvider.DeploymentConfiguration != nil {
		f1 := &svcsdk.DeploymentConfiguration{}
		if cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f1f0 := &svcsdk.DeploymentCircuitBreaker{}
			if cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
				f1f0.SetEnable(*cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker.Enable)
			}
			if cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
				f1f0.SetRollback(*cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback)
			}
			f1.SetDeploymentCircuitBreaker(f1f0)
		}
		if cr.Spec.ForProvider.DeploymentConfiguration.MaximumPercent != nil {
			f1.SetMaximumPercent(*cr.Spec.ForProvider.DeploymentConfiguration.MaximumPercent)
		}
		if cr.Spec.ForProvider.DeploymentConfiguration.MinimumHealthyPercent != nil {
			f1.SetMinimumHealthyPercent(*cr.Spec.ForProvider.DeploymentConfiguration.MinimumHealthyPercent)
		}
		res.SetDeploymentConfiguration(f1)
	}
	if cr.Spec.ForProvider.DeploymentController != nil {
		f2 := &svcsdk.DeploymentController{}
		if cr.Spec.ForProvider.DeploymentController.Type != nil {
			f2.SetType(*cr.Spec.ForProvider.DeploymentController.Type)
		}
		res.SetDeploymentController(f2)
	}
	if cr.Spec.ForProvider.DesiredCount != nil {
		res.SetDesiredCount(*cr.Spec.ForProvider.DesiredCount)
	}
	if cr.Spec.ForProvider.EnableECSManagedTags != nil {
		res.SetEnableECSManagedTags(*cr.Spec.ForProvider.EnableECSManagedTags)
	}
	if cr.Spec.ForProvider.EnableExecuteCommand != nil {
		res.SetEnableExecuteCommand(*cr.Spec.ForProvider.EnableExecuteCommand)
	}
	if cr.Spec.ForProvider.HealthCheckGracePeriodSeconds != nil {
		res.SetHealthCheckGracePeriodSeconds(*cr.Spec.ForProvider.HealthCheckGracePeriodSeconds)
	}
	if cr.Spec.ForProvider.LaunchType != nil {
		res.SetLaunchType(*cr.Spec.ForProvider.LaunchType)
	}
	if cr.Spec.ForProvider.PlacementConstraints != nil {
		f8 := []*svcsdk.PlacementConstraint{}
		for _, f8iter := range cr.Spec.ForProvider.PlacementConstraints {
			f8elem := &svcsdk.PlacementConstraint{}
			if f8iter.Expression != nil {
				f8elem.SetExpression(*f8iter.Expression)
			}
			if f8iter.Type != nil {
				f8elem.SetType(*f8iter.Type)
			}
			f8 = append(f8, f8elem)
		}
		res.SetPlacementConstraints(f8)
	}
	if cr.Spec.ForProvider.PlacementStrategy != nil {
		f9 := []*svcsdk.PlacementStrategy{}
		for _, f9iter := range cr.Spec.ForProvider.PlacementStrategy {
			f9elem := &svcsdk.PlacementStrategy{}
			if f9iter.Field != nil {
				f9elem.SetField(*f9iter.Field)
			}
			if f9iter.Type != nil {
				f9elem.SetType(*f9iter.Type)
			}
			f9 = append(f9, f9elem)
		}
		res.SetPlacementStrategy(f9)
	}
	if cr.Spec.ForProvider.PlatformVersion != nil {
		res.SetPlatformVersion(*cr.Spec.ForProvider.PlatformVersion)
	}
	if cr.Spec.ForProvider.PropagateTags != nil {
		res.SetPropagateTags(*cr.Spec.ForProvider.PropagateTags)
	}
	if cr.Spec.ForProvider.Role != nil {
		res.SetRole(*cr.Spec.ForProvider.Role)
	}
	if cr.Spec.ForProvider.SchedulingStrategy != nil {
		res.SetSchedulingStrategy(*cr.Spec.ForProvider.SchedulingStrategy)
	}
	if cr.Spec.ForProvider.ServiceRegistries != nil {
		f14 := []*svcsdk.ServiceRegistry{}
		for _, f14iter := range cr.Spec.ForProvider.ServiceRegistries {
			f14elem := &svcsdk.ServiceRegistry{}
			if f14iter.ContainerName != nil {
				f14elem.SetContainerName(*f14iter.ContainerName)
			}
			if f14iter.ContainerPort != nil {
				f14elem.SetContainerPort(*f14iter.ContainerPort)
			}
			if f14iter.Port != nil {
				f14elem.SetPort(*f14iter.Port)
			}
			if f14iter.RegistryARN != nil {
				f14elem.SetRegistryArn(*f14iter.RegistryARN)
			}
			f14 = append(f14, f14elem)
		}
		res.SetServiceRegistries(f14)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f15 := []*svcsdk.Tag{}
		for _, f15iter := range cr.Spec.ForProvider.Tags {
			f15elem := &svcsdk.Tag{}
			if f15iter.Key != nil {
				f15elem.SetKey(*f15iter.Key)
			}
			if f15iter.Value != nil {
				f15elem.SetValue(*f15iter.Value)
			}
			f15 = append(f15, f15elem)
		}
		res.SetTags(f15)
	}

	return res
}

// GenerateUpdateServiceInput returns an update input.
func GenerateUpdateServiceInput(cr *svcapitypes.Service) *svcsdk.UpdateServiceInput {
	res := &svcsdk.UpdateServiceInput{}

	if cr.Spec.ForProvider.CapacityProviderStrategy != nil {
		f0 := []*svcsdk.CapacityProviderStrategyItem{}
		for _, f0iter := range cr.Spec.ForProvider.CapacityProviderStrategy {
			f0elem := &svcsdk.CapacityProviderStrategyItem{}
			if f0iter.Base != nil {
				f0elem.SetBase(*f0iter.Base)
			}
			if f0iter.CapacityProvider != nil {
				f0elem.SetCapacityProvider(*f0iter.CapacityProvider)
			}
			if f0iter.Weight != nil {
				f0elem.SetWeight(*f0iter.Weight)
			}
			f0 = append(f0, f0elem)
		}
		res.SetCapacityProviderStrategy(f0)
	}
	if cr.Spec.ForProvider.DeploymentConfiguration != nil {
		f2 := &svcsdk.DeploymentConfiguration{}
		if cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker != nil {
			f2f0 := &svcsdk.DeploymentCircuitBreaker{}
			if cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker.Enable != nil {
				f2f0.SetEnable(*cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker.Enable)
			}
			if cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback != nil {
				f2f0.SetRollback(*cr.Spec.ForProvider.DeploymentConfiguration.DeploymentCircuitBreaker.Rollback)
			}
			f2.SetDeploymentCircuitBreaker(f2f0)
		}
		if cr.Spec.ForProvider.DeploymentConfiguration.MaximumPercent != nil {
			f2.SetMaximumPercent(*cr.Spec.ForProvider.DeploymentConfiguration.MaximumPercent)
		}
		if cr.Spec.ForProvider.DeploymentConfiguration.MinimumHealthyPercent != nil {
			f2.SetMinimumHealthyPercent(*cr.Spec.ForProvider.DeploymentConfiguration.MinimumHealthyPercent)
		}
		res.SetDeploymentConfiguration(f2)
	}
	if cr.Spec.ForProvider.DesiredCount != nil {
		res.SetDesiredCount(*cr.Spec.ForProvider.DesiredCount)
	}
	if cr.Spec.ForProvider.EnableExecuteCommand != nil {
		res.SetEnableExecuteCommand(*cr.Spec.ForProvider.EnableExecuteCommand)
	}
	if cr.Spec.ForProvider.HealthCheckGracePeriodSeconds != nil {
		res.SetHealthCheckGracePeriodSeconds(*cr.Spec.ForProvider.HealthCheckGracePeriodSeconds)
	}
	if cr.Status.AtProvider.NetworkConfiguration != nil {
		f7 := &svcsdk.NetworkConfiguration{}
		if cr.Status.AtProvider.NetworkConfiguration.AWSvpcConfiguration != nil {
			f7f0 := &svcsdk.AwsVpcConfiguration{}
			if cr.Status.AtProvider.NetworkConfiguration.AWSvpcConfiguration.AssignPublicIP != nil {
				f7f0.SetAssignPublicIp(*cr.Status.AtProvider.NetworkConfiguration.AWSvpcConfiguration.AssignPublicIP)
			}
			if cr.Status.AtProvider.NetworkConfiguration.AWSvpcConfiguration.SecurityGroups != nil {
				f7f0f1 := []*string{}
				for _, f7f0f1iter := range cr.Status.AtProvider.NetworkConfiguration.AWSvpcConfiguration.SecurityGroups {
					var f7f0f1elem string
					f7f0f1elem = *f7f0f1iter
					f7f0f1 = append(f7f0f1, &f7f0f1elem)
				}
				f7f0.SetSecurityGroups(f7f0f1)
			}
			if cr.Status.AtProvider.NetworkConfiguration.AWSvpcConfiguration.Subnets != nil {
				f7f0f2 := []*string{}
				for _, f7f0f2iter := range cr.Status.AtProvider.NetworkConfiguration.AWSvpcConfiguration.Subnets {
					var f7f0f2elem string
					f7f0f2elem = *f7f0f2iter
					f7f0f2 = append(f7f0f2, &f7f0f2elem)
				}
				f7f0.SetSubnets(f7f0f2)
			}
			f7.SetAwsvpcConfiguration(f7f0)
		}
		res.SetNetworkConfiguration(f7)
	}
	if cr.Spec.ForProvider.PlacementConstraints != nil {
		f8 := []*svcsdk.PlacementConstraint{}
		for _, f8iter := range cr.Spec.ForProvider.PlacementConstraints {
			f8elem := &svcsdk.PlacementConstraint{}
			if f8iter.Expression != nil {
				f8elem.SetExpression(*f8iter.Expression)
			}
			if f8iter.Type != nil {
				f8elem.SetType(*f8iter.Type)
			}
			f8 = append(f8, f8elem)
		}
		res.SetPlacementConstraints(f8)
	}
	if cr.Spec.ForProvider.PlacementStrategy != nil {
		f9 := []*svcsdk.PlacementStrategy{}
		for _, f9iter := range cr.Spec.ForProvider.PlacementStrategy {
			f9elem := &svcsdk.PlacementStrategy{}
			if f9iter.Field != nil {
				f9elem.SetField(*f9iter.Field)
			}
			if f9iter.Type != nil {
				f9elem.SetType(*f9iter.Type)
			}
			f9 = append(f9, f9elem)
		}
		res.SetPlacementStrategy(f9)
	}
	if cr.Spec.ForProvider.PlatformVersion != nil {
		res.SetPlatformVersion(*cr.Spec.ForProvider.PlatformVersion)
	}
	if cr.Status.AtProvider.TaskDefinition != nil {
		res.SetTaskDefinition(*cr.Status.AtProvider.TaskDefinition)
	}

	return res
}

// GenerateDeleteServiceInput returns a deletion input.
func GenerateDeleteServiceInput(cr *svcapitypes.Service) *svcsdk.DeleteServiceInput {
	res := &svcsdk.DeleteServiceInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
