/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package workgroup

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/athena"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/athena/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetWorkGroupInput returns input for read
// operation.
func GenerateGetWorkGroupInput(cr *svcapitypes.WorkGroup) *svcsdk.GetWorkGroupInput {
	res := &svcsdk.GetWorkGroupInput{}

	return res
}

// GenerateWorkGroup returns the current state in the form of *svcapitypes.WorkGroup.
func GenerateWorkGroup(resp *svcsdk.GetWorkGroupOutput) *svcapitypes.WorkGroup {
	cr := &svcapitypes.WorkGroup{}

	if resp.WorkGroup.Configuration != nil {
		f0 := &svcapitypes.WorkGroupConfiguration{}
		if resp.WorkGroup.Configuration.AdditionalConfiguration != nil {
			f0.AdditionalConfiguration = resp.WorkGroup.Configuration.AdditionalConfiguration
		}
		if resp.WorkGroup.Configuration.BytesScannedCutoffPerQuery != nil {
			f0.BytesScannedCutoffPerQuery = resp.WorkGroup.Configuration.BytesScannedCutoffPerQuery
		}
		if resp.WorkGroup.Configuration.CustomerContentEncryptionConfiguration != nil {
			f0f2 := &svcapitypes.CustomerContentEncryptionConfiguration{}
			if resp.WorkGroup.Configuration.CustomerContentEncryptionConfiguration.KmsKey != nil {
				f0f2.KMSKey = resp.WorkGroup.Configuration.CustomerContentEncryptionConfiguration.KmsKey
			}
			f0.CustomerContentEncryptionConfiguration = f0f2
		}
		if resp.WorkGroup.Configuration.EnableMinimumEncryptionConfiguration != nil {
			f0.EnableMinimumEncryptionConfiguration = resp.WorkGroup.Configuration.EnableMinimumEncryptionConfiguration
		}
		if resp.WorkGroup.Configuration.EnforceWorkGroupConfiguration != nil {
			f0.EnforceWorkGroupConfiguration = resp.WorkGroup.Configuration.EnforceWorkGroupConfiguration
		}
		if resp.WorkGroup.Configuration.EngineVersion != nil {
			f0f5 := &svcapitypes.EngineVersion{}
			if resp.WorkGroup.Configuration.EngineVersion.EffectiveEngineVersion != nil {
				f0f5.EffectiveEngineVersion = resp.WorkGroup.Configuration.EngineVersion.EffectiveEngineVersion
			}
			if resp.WorkGroup.Configuration.EngineVersion.SelectedEngineVersion != nil {
				f0f5.SelectedEngineVersion = resp.WorkGroup.Configuration.EngineVersion.SelectedEngineVersion
			}
			f0.EngineVersion = f0f5
		}
		if resp.WorkGroup.Configuration.ExecutionRole != nil {
			f0.ExecutionRole = resp.WorkGroup.Configuration.ExecutionRole
		}
		if resp.WorkGroup.Configuration.IdentityCenterConfiguration != nil {
			f0f7 := &svcapitypes.IdentityCenterConfiguration{}
			if resp.WorkGroup.Configuration.IdentityCenterConfiguration.EnableIdentityCenter != nil {
				f0f7.EnableIdentityCenter = resp.WorkGroup.Configuration.IdentityCenterConfiguration.EnableIdentityCenter
			}
			if resp.WorkGroup.Configuration.IdentityCenterConfiguration.IdentityCenterInstanceArn != nil {
				f0f7.IdentityCenterInstanceARN = resp.WorkGroup.Configuration.IdentityCenterConfiguration.IdentityCenterInstanceArn
			}
			f0.IdentityCenterConfiguration = f0f7
		}
		if resp.WorkGroup.Configuration.PublishCloudWatchMetricsEnabled != nil {
			f0.PublishCloudWatchMetricsEnabled = resp.WorkGroup.Configuration.PublishCloudWatchMetricsEnabled
		}
		if resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration != nil {
			f0f9 := &svcapitypes.QueryResultsS3AccessGrantsConfiguration{}
			if resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.AuthenticationType != nil {
				f0f9.AuthenticationType = resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.AuthenticationType
			}
			if resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.CreateUserLevelPrefix != nil {
				f0f9.CreateUserLevelPrefix = resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.CreateUserLevelPrefix
			}
			if resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.EnableS3AccessGrants != nil {
				f0f9.EnableS3AccessGrants = resp.WorkGroup.Configuration.QueryResultsS3AccessGrantsConfiguration.EnableS3AccessGrants
			}
			f0.QueryResultsS3AccessGrantsConfiguration = f0f9
		}
		if resp.WorkGroup.Configuration.RequesterPaysEnabled != nil {
			f0.RequesterPaysEnabled = resp.WorkGroup.Configuration.RequesterPaysEnabled
		}
		if resp.WorkGroup.Configuration.ResultConfiguration != nil {
			f0f11 := &svcapitypes.ResultConfiguration{}
			if resp.WorkGroup.Configuration.ResultConfiguration.AclConfiguration != nil {
				f0f11f0 := &svcapitypes.ACLConfiguration{}
				if resp.WorkGroup.Configuration.ResultConfiguration.AclConfiguration.S3AclOption != nil {
					f0f11f0.S3ACLOption = resp.WorkGroup.Configuration.ResultConfiguration.AclConfiguration.S3AclOption
				}
				f0f11.ACLConfiguration = f0f11f0
			}
			if resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration != nil {
				f0f11f1 := &svcapitypes.EncryptionConfiguration{}
				if resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration.EncryptionOption != nil {
					f0f11f1.EncryptionOption = resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration.EncryptionOption
				}
				if resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration.KmsKey != nil {
					f0f11f1.KMSKey = resp.WorkGroup.Configuration.ResultConfiguration.EncryptionConfiguration.KmsKey
				}
				f0f11.EncryptionConfiguration = f0f11f1
			}
			if resp.WorkGroup.Configuration.ResultConfiguration.ExpectedBucketOwner != nil {
				f0f11.ExpectedBucketOwner = resp.WorkGroup.Configuration.ResultConfiguration.ExpectedBucketOwner
			}
			if resp.WorkGroup.Configuration.ResultConfiguration.OutputLocation != nil {
				f0f11.OutputLocation = resp.WorkGroup.Configuration.ResultConfiguration.OutputLocation
			}
			f0.ResultConfiguration = f0f11
		}
		cr.Spec.ForProvider.Configuration = f0
	} else {
		cr.Spec.ForProvider.Configuration = nil
	}
	if resp.WorkGroup.Description != nil {
		cr.Spec.ForProvider.Description = resp.WorkGroup.Description
	} else {
		cr.Spec.ForProvider.Description = nil
	}

	return cr
}

// GenerateCreateWorkGroupInput returns a create input.
func GenerateCreateWorkGroupInput(cr *svcapitypes.WorkGroup) *svcsdk.CreateWorkGroupInput {
	res := &svcsdk.CreateWorkGroupInput{}

	if cr.Spec.ForProvider.Configuration != nil {
		f0 := &svcsdk.WorkGroupConfiguration{}
		if cr.Spec.ForProvider.Configuration.AdditionalConfiguration != nil {
			f0.SetAdditionalConfiguration(*cr.Spec.ForProvider.Configuration.AdditionalConfiguration)
		}
		if cr.Spec.ForProvider.Configuration.BytesScannedCutoffPerQuery != nil {
			f0.SetBytesScannedCutoffPerQuery(*cr.Spec.ForProvider.Configuration.BytesScannedCutoffPerQuery)
		}
		if cr.Spec.ForProvider.Configuration.CustomerContentEncryptionConfiguration != nil {
			f0f2 := &svcsdk.CustomerContentEncryptionConfiguration{}
			if cr.Spec.ForProvider.Configuration.CustomerContentEncryptionConfiguration.KMSKey != nil {
				f0f2.SetKmsKey(*cr.Spec.ForProvider.Configuration.CustomerContentEncryptionConfiguration.KMSKey)
			}
			f0.SetCustomerContentEncryptionConfiguration(f0f2)
		}
		if cr.Spec.ForProvider.Configuration.EnableMinimumEncryptionConfiguration != nil {
			f0.SetEnableMinimumEncryptionConfiguration(*cr.Spec.ForProvider.Configuration.EnableMinimumEncryptionConfiguration)
		}
		if cr.Spec.ForProvider.Configuration.EnforceWorkGroupConfiguration != nil {
			f0.SetEnforceWorkGroupConfiguration(*cr.Spec.ForProvider.Configuration.EnforceWorkGroupConfiguration)
		}
		if cr.Spec.ForProvider.Configuration.EngineVersion != nil {
			f0f5 := &svcsdk.EngineVersion{}
			if cr.Spec.ForProvider.Configuration.EngineVersion.EffectiveEngineVersion != nil {
				f0f5.SetEffectiveEngineVersion(*cr.Spec.ForProvider.Configuration.EngineVersion.EffectiveEngineVersion)
			}
			if cr.Spec.ForProvider.Configuration.EngineVersion.SelectedEngineVersion != nil {
				f0f5.SetSelectedEngineVersion(*cr.Spec.ForProvider.Configuration.EngineVersion.SelectedEngineVersion)
			}
			f0.SetEngineVersion(f0f5)
		}
		if cr.Spec.ForProvider.Configuration.ExecutionRole != nil {
			f0.SetExecutionRole(*cr.Spec.ForProvider.Configuration.ExecutionRole)
		}
		if cr.Spec.ForProvider.Configuration.IdentityCenterConfiguration != nil {
			f0f7 := &svcsdk.IdentityCenterConfiguration{}
			if cr.Spec.ForProvider.Configuration.IdentityCenterConfiguration.EnableIdentityCenter != nil {
				f0f7.SetEnableIdentityCenter(*cr.Spec.ForProvider.Configuration.IdentityCenterConfiguration.EnableIdentityCenter)
			}
			if cr.Spec.ForProvider.Configuration.IdentityCenterConfiguration.IdentityCenterInstanceARN != nil {
				f0f7.SetIdentityCenterInstanceArn(*cr.Spec.ForProvider.Configuration.IdentityCenterConfiguration.IdentityCenterInstanceARN)
			}
			f0.SetIdentityCenterConfiguration(f0f7)
		}
		if cr.Spec.ForProvider.Configuration.PublishCloudWatchMetricsEnabled != nil {
			f0.SetPublishCloudWatchMetricsEnabled(*cr.Spec.ForProvider.Configuration.PublishCloudWatchMetricsEnabled)
		}
		if cr.Spec.ForProvider.Configuration.QueryResultsS3AccessGrantsConfiguration != nil {
			f0f9 := &svcsdk.QueryResultsS3AccessGrantsConfiguration{}
			if cr.Spec.ForProvider.Configuration.QueryResultsS3AccessGrantsConfiguration.AuthenticationType != nil {
				f0f9.SetAuthenticationType(*cr.Spec.ForProvider.Configuration.QueryResultsS3AccessGrantsConfiguration.AuthenticationType)
			}
			if cr.Spec.ForProvider.Configuration.QueryResultsS3AccessGrantsConfiguration.CreateUserLevelPrefix != nil {
				f0f9.SetCreateUserLevelPrefix(*cr.Spec.ForProvider.Configuration.QueryResultsS3AccessGrantsConfiguration.CreateUserLevelPrefix)
			}
			if cr.Spec.ForProvider.Configuration.QueryResultsS3AccessGrantsConfiguration.EnableS3AccessGrants != nil {
				f0f9.SetEnableS3AccessGrants(*cr.Spec.ForProvider.Configuration.QueryResultsS3AccessGrantsConfiguration.EnableS3AccessGrants)
			}
			f0.SetQueryResultsS3AccessGrantsConfiguration(f0f9)
		}
		if cr.Spec.ForProvider.Configuration.RequesterPaysEnabled != nil {
			f0.SetRequesterPaysEnabled(*cr.Spec.ForProvider.Configuration.RequesterPaysEnabled)
		}
		if cr.Spec.ForProvider.Configuration.ResultConfiguration != nil {
			f0f11 := &svcsdk.ResultConfiguration{}
			if cr.Spec.ForProvider.Configuration.ResultConfiguration.ACLConfiguration != nil {
				f0f11f0 := &svcsdk.AclConfiguration{}
				if cr.Spec.ForProvider.Configuration.ResultConfiguration.ACLConfiguration.S3ACLOption != nil {
					f0f11f0.SetS3AclOption(*cr.Spec.ForProvider.Configuration.ResultConfiguration.ACLConfiguration.S3ACLOption)
				}
				f0f11.SetAclConfiguration(f0f11f0)
			}
			if cr.Spec.ForProvider.Configuration.ResultConfiguration.EncryptionConfiguration != nil {
				f0f11f1 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.Configuration.ResultConfiguration.EncryptionConfiguration.EncryptionOption != nil {
					f0f11f1.SetEncryptionOption(*cr.Spec.ForProvider.Configuration.ResultConfiguration.EncryptionConfiguration.EncryptionOption)
				}
				if cr.Spec.ForProvider.Configuration.ResultConfiguration.EncryptionConfiguration.KMSKey != nil {
					f0f11f1.SetKmsKey(*cr.Spec.ForProvider.Configuration.ResultConfiguration.EncryptionConfiguration.KMSKey)
				}
				f0f11.SetEncryptionConfiguration(f0f11f1)
			}
			if cr.Spec.ForProvider.Configuration.ResultConfiguration.ExpectedBucketOwner != nil {
				f0f11.SetExpectedBucketOwner(*cr.Spec.ForProvider.Configuration.ResultConfiguration.ExpectedBucketOwner)
			}
			if cr.Spec.ForProvider.Configuration.ResultConfiguration.OutputLocation != nil {
				f0f11.SetOutputLocation(*cr.Spec.ForProvider.Configuration.ResultConfiguration.OutputLocation)
			}
			f0.SetResultConfiguration(f0f11)
		}
		res.SetConfiguration(f0)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f2 := []*svcsdk.Tag{}
		for _, f2iter := range cr.Spec.ForProvider.Tags {
			f2elem := &svcsdk.Tag{}
			if f2iter.Key != nil {
				f2elem.SetKey(*f2iter.Key)
			}
			if f2iter.Value != nil {
				f2elem.SetValue(*f2iter.Value)
			}
			f2 = append(f2, f2elem)
		}
		res.SetTags(f2)
	}

	return res
}

// GenerateUpdateWorkGroupInput returns an update input.
func GenerateUpdateWorkGroupInput(cr *svcapitypes.WorkGroup) *svcsdk.UpdateWorkGroupInput {
	res := &svcsdk.UpdateWorkGroupInput{}

	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}

	return res
}

// GenerateDeleteWorkGroupInput returns a deletion input.
func GenerateDeleteWorkGroupInput(cr *svcapitypes.WorkGroup) *svcsdk.DeleteWorkGroupInput {
	res := &svcsdk.DeleteWorkGroupInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "InvalidRequestException"
}
