/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package identitypool

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/cognitoidentity"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/cognitoidentity/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeIdentityPoolInput returns input for read
// operation.
func GenerateDescribeIdentityPoolInput(cr *svcapitypes.IdentityPool) *svcsdk.DescribeIdentityPoolInput {
	res := &svcsdk.DescribeIdentityPoolInput{}

	if cr.Status.AtProvider.IdentityPoolID != nil {
		res.SetIdentityPoolId(*cr.Status.AtProvider.IdentityPoolID)
	}

	return res
}

// GenerateIdentityPool returns the current state in the form of *svcapitypes.IdentityPool.
func GenerateIdentityPool(resp *svcsdk.IdentityPool) *svcapitypes.IdentityPool {
	cr := &svcapitypes.IdentityPool{}

	if resp.AllowClassicFlow != nil {
		cr.Spec.ForProvider.AllowClassicFlow = resp.AllowClassicFlow
	} else {
		cr.Spec.ForProvider.AllowClassicFlow = nil
	}
	if resp.AllowUnauthenticatedIdentities != nil {
		cr.Status.AtProvider.AllowUnauthenticatedIDentities = resp.AllowUnauthenticatedIdentities
	} else {
		cr.Status.AtProvider.AllowUnauthenticatedIDentities = nil
	}
	if resp.CognitoIdentityProviders != nil {
		f2 := []*svcapitypes.Provider{}
		for _, f2iter := range resp.CognitoIdentityProviders {
			f2elem := &svcapitypes.Provider{}
			if f2iter.ClientId != nil {
				f2elem.ClientID = f2iter.ClientId
			}
			if f2iter.ProviderName != nil {
				f2elem.ProviderName = f2iter.ProviderName
			}
			if f2iter.ServerSideTokenCheck != nil {
				f2elem.ServerSideTokenCheck = f2iter.ServerSideTokenCheck
			}
			f2 = append(f2, f2elem)
		}
		cr.Status.AtProvider.CognitoIdentityProviders = f2
	} else {
		cr.Status.AtProvider.CognitoIdentityProviders = nil
	}
	if resp.DeveloperProviderName != nil {
		cr.Spec.ForProvider.DeveloperProviderName = resp.DeveloperProviderName
	} else {
		cr.Spec.ForProvider.DeveloperProviderName = nil
	}
	if resp.IdentityPoolId != nil {
		cr.Status.AtProvider.IdentityPoolID = resp.IdentityPoolId
	} else {
		cr.Status.AtProvider.IdentityPoolID = nil
	}
	if resp.IdentityPoolName != nil {
		cr.Spec.ForProvider.IdentityPoolName = resp.IdentityPoolName
	} else {
		cr.Spec.ForProvider.IdentityPoolName = nil
	}
	if resp.IdentityPoolTags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range resp.IdentityPoolTags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		cr.Spec.ForProvider.IdentityPoolTags = f6
	} else {
		cr.Spec.ForProvider.IdentityPoolTags = nil
	}
	if resp.OpenIdConnectProviderARNs != nil {
		f7 := []*string{}
		for _, f7iter := range resp.OpenIdConnectProviderARNs {
			var f7elem string
			f7elem = *f7iter
			f7 = append(f7, &f7elem)
		}
		cr.Status.AtProvider.OpenIDConnectProviderARNs = f7
	} else {
		cr.Status.AtProvider.OpenIDConnectProviderARNs = nil
	}
	if resp.SamlProviderARNs != nil {
		f8 := []*string{}
		for _, f8iter := range resp.SamlProviderARNs {
			var f8elem string
			f8elem = *f8iter
			f8 = append(f8, &f8elem)
		}
		cr.Spec.ForProvider.SamlProviderARNs = f8
	} else {
		cr.Spec.ForProvider.SamlProviderARNs = nil
	}
	if resp.SupportedLoginProviders != nil {
		f9 := map[string]*string{}
		for f9key, f9valiter := range resp.SupportedLoginProviders {
			var f9val string
			f9val = *f9valiter
			f9[f9key] = &f9val
		}
		cr.Spec.ForProvider.SupportedLoginProviders = f9
	} else {
		cr.Spec.ForProvider.SupportedLoginProviders = nil
	}

	return cr
}

// GenerateCreateIdentityPoolInput returns a create input.
func GenerateCreateIdentityPoolInput(cr *svcapitypes.IdentityPool) *svcsdk.CreateIdentityPoolInput {
	res := &svcsdk.CreateIdentityPoolInput{}

	if cr.Spec.ForProvider.AllowClassicFlow != nil {
		res.SetAllowClassicFlow(*cr.Spec.ForProvider.AllowClassicFlow)
	}
	if cr.Spec.ForProvider.DeveloperProviderName != nil {
		res.SetDeveloperProviderName(*cr.Spec.ForProvider.DeveloperProviderName)
	}
	if cr.Spec.ForProvider.IdentityPoolName != nil {
		res.SetIdentityPoolName(*cr.Spec.ForProvider.IdentityPoolName)
	}
	if cr.Spec.ForProvider.IdentityPoolTags != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range cr.Spec.ForProvider.IdentityPoolTags {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		res.SetIdentityPoolTags(f3)
	}
	if cr.Spec.ForProvider.SamlProviderARNs != nil {
		f4 := []*string{}
		for _, f4iter := range cr.Spec.ForProvider.SamlProviderARNs {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		res.SetSamlProviderARNs(f4)
	}
	if cr.Spec.ForProvider.SupportedLoginProviders != nil {
		f5 := map[string]*string{}
		for f5key, f5valiter := range cr.Spec.ForProvider.SupportedLoginProviders {
			var f5val string
			f5val = *f5valiter
			f5[f5key] = &f5val
		}
		res.SetSupportedLoginProviders(f5)
	}

	return res
}

// GenerateIdentityPool returns an update input.
func GenerateUpdateIdentityPoolInput(cr *svcapitypes.IdentityPool) *svcsdk.IdentityPool {
	res := &svcsdk.IdentityPool{}

	if cr.Spec.ForProvider.AllowClassicFlow != nil {
		res.SetAllowClassicFlow(*cr.Spec.ForProvider.AllowClassicFlow)
	}
	if cr.Status.AtProvider.AllowUnauthenticatedIDentities != nil {
		res.SetAllowUnauthenticatedIdentities(*cr.Status.AtProvider.AllowUnauthenticatedIDentities)
	}
	if cr.Status.AtProvider.CognitoIdentityProviders != nil {
		f2 := []*svcsdk.Provider{}
		for _, f2iter := range cr.Status.AtProvider.CognitoIdentityProviders {
			f2elem := &svcsdk.Provider{}
			if f2iter.ClientID != nil {
				f2elem.SetClientId(*f2iter.ClientID)
			}
			if f2iter.ProviderName != nil {
				f2elem.SetProviderName(*f2iter.ProviderName)
			}
			if f2iter.ServerSideTokenCheck != nil {
				f2elem.SetServerSideTokenCheck(*f2iter.ServerSideTokenCheck)
			}
			f2 = append(f2, f2elem)
		}
		res.SetCognitoIdentityProviders(f2)
	}
	if cr.Spec.ForProvider.DeveloperProviderName != nil {
		res.SetDeveloperProviderName(*cr.Spec.ForProvider.DeveloperProviderName)
	}
	if cr.Status.AtProvider.IdentityPoolID != nil {
		res.SetIdentityPoolId(*cr.Status.AtProvider.IdentityPoolID)
	}
	if cr.Spec.ForProvider.IdentityPoolName != nil {
		res.SetIdentityPoolName(*cr.Spec.ForProvider.IdentityPoolName)
	}
	if cr.Spec.ForProvider.IdentityPoolTags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range cr.Spec.ForProvider.IdentityPoolTags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		res.SetIdentityPoolTags(f6)
	}
	if cr.Status.AtProvider.OpenIDConnectProviderARNs != nil {
		f7 := []*string{}
		for _, f7iter := range cr.Status.AtProvider.OpenIDConnectProviderARNs {
			var f7elem string
			f7elem = *f7iter
			f7 = append(f7, &f7elem)
		}
		res.SetOpenIdConnectProviderARNs(f7)
	}
	if cr.Spec.ForProvider.SamlProviderARNs != nil {
		f8 := []*string{}
		for _, f8iter := range cr.Spec.ForProvider.SamlProviderARNs {
			var f8elem string
			f8elem = *f8iter
			f8 = append(f8, &f8elem)
		}
		res.SetSamlProviderARNs(f8)
	}
	if cr.Spec.ForProvider.SupportedLoginProviders != nil {
		f9 := map[string]*string{}
		for f9key, f9valiter := range cr.Spec.ForProvider.SupportedLoginProviders {
			var f9val string
			f9val = *f9valiter
			f9[f9key] = &f9val
		}
		res.SetSupportedLoginProviders(f9)
	}

	return res
}

// GenerateDeleteIdentityPoolInput returns a deletion input.
func GenerateDeleteIdentityPoolInput(cr *svcapitypes.IdentityPool) *svcsdk.DeleteIdentityPoolInput {
	res := &svcsdk.DeleteIdentityPoolInput{}

	if cr.Status.AtProvider.IdentityPoolID != nil {
		res.SetIdentityPoolId(*cr.Status.AtProvider.IdentityPoolID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
