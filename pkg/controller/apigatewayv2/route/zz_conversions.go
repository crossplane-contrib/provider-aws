/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package route

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/apigatewayv2"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/apigatewayv2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetRouteInput returns input for read
// operation.
func GenerateGetRouteInput(cr *svcapitypes.Route) *svcsdk.GetRouteInput {
	res := &svcsdk.GetRouteInput{}

	if cr.Status.AtProvider.RouteID != nil {
		res.SetRouteId(*cr.Status.AtProvider.RouteID)
	}

	return res
}

// GenerateRoute returns the current state in the form of *svcapitypes.Route.
func GenerateRoute(resp *svcsdk.GetRouteOutput) *svcapitypes.Route {
	cr := &svcapitypes.Route{}

	if resp.ApiGatewayManaged != nil {
		cr.Status.AtProvider.APIGatewayManaged = resp.ApiGatewayManaged
	} else {
		cr.Status.AtProvider.APIGatewayManaged = nil
	}
	if resp.ApiKeyRequired != nil {
		cr.Spec.ForProvider.APIKeyRequired = resp.ApiKeyRequired
	} else {
		cr.Spec.ForProvider.APIKeyRequired = nil
	}
	if resp.AuthorizationScopes != nil {
		f2 := []*string{}
		for _, f2iter := range resp.AuthorizationScopes {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		cr.Spec.ForProvider.AuthorizationScopes = f2
	} else {
		cr.Spec.ForProvider.AuthorizationScopes = nil
	}
	if resp.AuthorizationType != nil {
		cr.Spec.ForProvider.AuthorizationType = resp.AuthorizationType
	} else {
		cr.Spec.ForProvider.AuthorizationType = nil
	}
	if resp.AuthorizerId != nil {
		cr.Spec.ForProvider.AuthorizerID = resp.AuthorizerId
	} else {
		cr.Spec.ForProvider.AuthorizerID = nil
	}
	if resp.ModelSelectionExpression != nil {
		cr.Spec.ForProvider.ModelSelectionExpression = resp.ModelSelectionExpression
	} else {
		cr.Spec.ForProvider.ModelSelectionExpression = nil
	}
	if resp.OperationName != nil {
		cr.Spec.ForProvider.OperationName = resp.OperationName
	} else {
		cr.Spec.ForProvider.OperationName = nil
	}
	if resp.RequestModels != nil {
		f7 := map[string]*string{}
		for f7key, f7valiter := range resp.RequestModels {
			var f7val string
			f7val = *f7valiter
			f7[f7key] = &f7val
		}
		cr.Spec.ForProvider.RequestModels = f7
	} else {
		cr.Spec.ForProvider.RequestModels = nil
	}
	if resp.RequestParameters != nil {
		f8 := map[string]*svcapitypes.ParameterConstraints{}
		for f8key, f8valiter := range resp.RequestParameters {
			f8val := &svcapitypes.ParameterConstraints{}
			if f8valiter.Required != nil {
				f8val.Required = f8valiter.Required
			}
			f8[f8key] = f8val
		}
		cr.Spec.ForProvider.RequestParameters = f8
	} else {
		cr.Spec.ForProvider.RequestParameters = nil
	}
	if resp.RouteId != nil {
		cr.Status.AtProvider.RouteID = resp.RouteId
	} else {
		cr.Status.AtProvider.RouteID = nil
	}
	if resp.RouteKey != nil {
		cr.Spec.ForProvider.RouteKey = resp.RouteKey
	} else {
		cr.Spec.ForProvider.RouteKey = nil
	}
	if resp.RouteResponseSelectionExpression != nil {
		cr.Spec.ForProvider.RouteResponseSelectionExpression = resp.RouteResponseSelectionExpression
	} else {
		cr.Spec.ForProvider.RouteResponseSelectionExpression = nil
	}
	if resp.Target != nil {
		cr.Spec.ForProvider.Target = resp.Target
	} else {
		cr.Spec.ForProvider.Target = nil
	}

	return cr
}

// GenerateCreateRouteInput returns a create input.
func GenerateCreateRouteInput(cr *svcapitypes.Route) *svcsdk.CreateRouteInput {
	res := &svcsdk.CreateRouteInput{}

	if cr.Spec.ForProvider.APIKeyRequired != nil {
		res.SetApiKeyRequired(*cr.Spec.ForProvider.APIKeyRequired)
	}
	if cr.Spec.ForProvider.AuthorizationScopes != nil {
		f1 := []*string{}
		for _, f1iter := range cr.Spec.ForProvider.AuthorizationScopes {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetAuthorizationScopes(f1)
	}
	if cr.Spec.ForProvider.AuthorizationType != nil {
		res.SetAuthorizationType(*cr.Spec.ForProvider.AuthorizationType)
	}
	if cr.Spec.ForProvider.AuthorizerID != nil {
		res.SetAuthorizerId(*cr.Spec.ForProvider.AuthorizerID)
	}
	if cr.Spec.ForProvider.ModelSelectionExpression != nil {
		res.SetModelSelectionExpression(*cr.Spec.ForProvider.ModelSelectionExpression)
	}
	if cr.Spec.ForProvider.OperationName != nil {
		res.SetOperationName(*cr.Spec.ForProvider.OperationName)
	}
	if cr.Spec.ForProvider.RequestModels != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range cr.Spec.ForProvider.RequestModels {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		res.SetRequestModels(f6)
	}
	if cr.Spec.ForProvider.RequestParameters != nil {
		f7 := map[string]*svcsdk.ParameterConstraints{}
		for f7key, f7valiter := range cr.Spec.ForProvider.RequestParameters {
			f7val := &svcsdk.ParameterConstraints{}
			if f7valiter.Required != nil {
				f7val.SetRequired(*f7valiter.Required)
			}
			f7[f7key] = f7val
		}
		res.SetRequestParameters(f7)
	}
	if cr.Spec.ForProvider.RouteKey != nil {
		res.SetRouteKey(*cr.Spec.ForProvider.RouteKey)
	}
	if cr.Spec.ForProvider.RouteResponseSelectionExpression != nil {
		res.SetRouteResponseSelectionExpression(*cr.Spec.ForProvider.RouteResponseSelectionExpression)
	}
	if cr.Spec.ForProvider.Target != nil {
		res.SetTarget(*cr.Spec.ForProvider.Target)
	}

	return res
}

// GenerateUpdateRouteInput returns an update input.
func GenerateUpdateRouteInput(cr *svcapitypes.Route) *svcsdk.UpdateRouteInput {
	res := &svcsdk.UpdateRouteInput{}

	if cr.Spec.ForProvider.APIKeyRequired != nil {
		res.SetApiKeyRequired(*cr.Spec.ForProvider.APIKeyRequired)
	}
	if cr.Spec.ForProvider.AuthorizationScopes != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.AuthorizationScopes {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetAuthorizationScopes(f2)
	}
	if cr.Spec.ForProvider.AuthorizationType != nil {
		res.SetAuthorizationType(*cr.Spec.ForProvider.AuthorizationType)
	}
	if cr.Spec.ForProvider.AuthorizerID != nil {
		res.SetAuthorizerId(*cr.Spec.ForProvider.AuthorizerID)
	}
	if cr.Spec.ForProvider.ModelSelectionExpression != nil {
		res.SetModelSelectionExpression(*cr.Spec.ForProvider.ModelSelectionExpression)
	}
	if cr.Spec.ForProvider.OperationName != nil {
		res.SetOperationName(*cr.Spec.ForProvider.OperationName)
	}
	if cr.Spec.ForProvider.RequestModels != nil {
		f7 := map[string]*string{}
		for f7key, f7valiter := range cr.Spec.ForProvider.RequestModels {
			var f7val string
			f7val = *f7valiter
			f7[f7key] = &f7val
		}
		res.SetRequestModels(f7)
	}
	if cr.Spec.ForProvider.RequestParameters != nil {
		f8 := map[string]*svcsdk.ParameterConstraints{}
		for f8key, f8valiter := range cr.Spec.ForProvider.RequestParameters {
			f8val := &svcsdk.ParameterConstraints{}
			if f8valiter.Required != nil {
				f8val.SetRequired(*f8valiter.Required)
			}
			f8[f8key] = f8val
		}
		res.SetRequestParameters(f8)
	}
	if cr.Status.AtProvider.RouteID != nil {
		res.SetRouteId(*cr.Status.AtProvider.RouteID)
	}
	if cr.Spec.ForProvider.RouteKey != nil {
		res.SetRouteKey(*cr.Spec.ForProvider.RouteKey)
	}
	if cr.Spec.ForProvider.RouteResponseSelectionExpression != nil {
		res.SetRouteResponseSelectionExpression(*cr.Spec.ForProvider.RouteResponseSelectionExpression)
	}
	if cr.Spec.ForProvider.Target != nil {
		res.SetTarget(*cr.Spec.ForProvider.Target)
	}

	return res
}

// GenerateDeleteRouteInput returns a deletion input.
func GenerateDeleteRouteInput(cr *svcapitypes.Route) *svcsdk.DeleteRouteInput {
	res := &svcsdk.DeleteRouteInput{}

	if cr.Status.AtProvider.RouteID != nil {
		res.SetRouteId(*cr.Status.AtProvider.RouteID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
