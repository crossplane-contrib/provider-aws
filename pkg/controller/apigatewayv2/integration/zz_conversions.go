/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package integration

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/apigatewayv2"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/apigatewayv2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetIntegrationInput returns input for read
// operation.
func GenerateGetIntegrationInput(cr *svcapitypes.Integration) *svcsdk.GetIntegrationInput {
	res := &svcsdk.GetIntegrationInput{}

	if cr.Status.AtProvider.IntegrationID != nil {
		res.SetIntegrationId(*cr.Status.AtProvider.IntegrationID)
	}

	return res
}

// GenerateIntegration returns the current state in the form of *svcapitypes.Integration.
func GenerateIntegration(resp *svcsdk.GetIntegrationOutput) *svcapitypes.Integration {
	cr := &svcapitypes.Integration{}

	if resp.ApiGatewayManaged != nil {
		cr.Status.AtProvider.APIGatewayManaged = resp.ApiGatewayManaged
	} else {
		cr.Status.AtProvider.APIGatewayManaged = nil
	}
	if resp.ConnectionId != nil {
		cr.Spec.ForProvider.ConnectionID = resp.ConnectionId
	} else {
		cr.Spec.ForProvider.ConnectionID = nil
	}
	if resp.ConnectionType != nil {
		cr.Spec.ForProvider.ConnectionType = resp.ConnectionType
	} else {
		cr.Spec.ForProvider.ConnectionType = nil
	}
	if resp.ContentHandlingStrategy != nil {
		cr.Spec.ForProvider.ContentHandlingStrategy = resp.ContentHandlingStrategy
	} else {
		cr.Spec.ForProvider.ContentHandlingStrategy = nil
	}
	if resp.CredentialsArn != nil {
		cr.Spec.ForProvider.CredentialsARN = resp.CredentialsArn
	} else {
		cr.Spec.ForProvider.CredentialsARN = nil
	}
	if resp.Description != nil {
		cr.Spec.ForProvider.Description = resp.Description
	} else {
		cr.Spec.ForProvider.Description = nil
	}
	if resp.IntegrationId != nil {
		cr.Status.AtProvider.IntegrationID = resp.IntegrationId
	} else {
		cr.Status.AtProvider.IntegrationID = nil
	}
	if resp.IntegrationMethod != nil {
		cr.Spec.ForProvider.IntegrationMethod = resp.IntegrationMethod
	} else {
		cr.Spec.ForProvider.IntegrationMethod = nil
	}
	if resp.IntegrationResponseSelectionExpression != nil {
		cr.Status.AtProvider.IntegrationResponseSelectionExpression = resp.IntegrationResponseSelectionExpression
	} else {
		cr.Status.AtProvider.IntegrationResponseSelectionExpression = nil
	}
	if resp.IntegrationSubtype != nil {
		cr.Spec.ForProvider.IntegrationSubtype = resp.IntegrationSubtype
	} else {
		cr.Spec.ForProvider.IntegrationSubtype = nil
	}
	if resp.IntegrationType != nil {
		cr.Spec.ForProvider.IntegrationType = resp.IntegrationType
	} else {
		cr.Spec.ForProvider.IntegrationType = nil
	}
	if resp.IntegrationUri != nil {
		cr.Spec.ForProvider.IntegrationURI = resp.IntegrationUri
	} else {
		cr.Spec.ForProvider.IntegrationURI = nil
	}
	if resp.PassthroughBehavior != nil {
		cr.Spec.ForProvider.PassthroughBehavior = resp.PassthroughBehavior
	} else {
		cr.Spec.ForProvider.PassthroughBehavior = nil
	}
	if resp.PayloadFormatVersion != nil {
		cr.Spec.ForProvider.PayloadFormatVersion = resp.PayloadFormatVersion
	} else {
		cr.Spec.ForProvider.PayloadFormatVersion = nil
	}
	if resp.RequestParameters != nil {
		f14 := map[string]*string{}
		for f14key, f14valiter := range resp.RequestParameters {
			var f14val string
			f14val = *f14valiter
			f14[f14key] = &f14val
		}
		cr.Spec.ForProvider.RequestParameters = f14
	} else {
		cr.Spec.ForProvider.RequestParameters = nil
	}
	if resp.RequestTemplates != nil {
		f15 := map[string]*string{}
		for f15key, f15valiter := range resp.RequestTemplates {
			var f15val string
			f15val = *f15valiter
			f15[f15key] = &f15val
		}
		cr.Spec.ForProvider.RequestTemplates = f15
	} else {
		cr.Spec.ForProvider.RequestTemplates = nil
	}
	if resp.TemplateSelectionExpression != nil {
		cr.Spec.ForProvider.TemplateSelectionExpression = resp.TemplateSelectionExpression
	} else {
		cr.Spec.ForProvider.TemplateSelectionExpression = nil
	}
	if resp.TimeoutInMillis != nil {
		cr.Spec.ForProvider.TimeoutInMillis = resp.TimeoutInMillis
	} else {
		cr.Spec.ForProvider.TimeoutInMillis = nil
	}
	if resp.TlsConfig != nil {
		f18 := &svcapitypes.TLSConfigInput{}
		if resp.TlsConfig.ServerNameToVerify != nil {
			f18.ServerNameToVerify = resp.TlsConfig.ServerNameToVerify
		}
		cr.Spec.ForProvider.TLSConfig = f18
	} else {
		cr.Spec.ForProvider.TLSConfig = nil
	}

	return cr
}

// GenerateCreateIntegrationInput returns a create input.
func GenerateCreateIntegrationInput(cr *svcapitypes.Integration) *svcsdk.CreateIntegrationInput {
	res := &svcsdk.CreateIntegrationInput{}

	if cr.Spec.ForProvider.ConnectionID != nil {
		res.SetConnectionId(*cr.Spec.ForProvider.ConnectionID)
	}
	if cr.Spec.ForProvider.ConnectionType != nil {
		res.SetConnectionType(*cr.Spec.ForProvider.ConnectionType)
	}
	if cr.Spec.ForProvider.ContentHandlingStrategy != nil {
		res.SetContentHandlingStrategy(*cr.Spec.ForProvider.ContentHandlingStrategy)
	}
	if cr.Spec.ForProvider.CredentialsARN != nil {
		res.SetCredentialsArn(*cr.Spec.ForProvider.CredentialsARN)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.IntegrationMethod != nil {
		res.SetIntegrationMethod(*cr.Spec.ForProvider.IntegrationMethod)
	}
	if cr.Spec.ForProvider.IntegrationSubtype != nil {
		res.SetIntegrationSubtype(*cr.Spec.ForProvider.IntegrationSubtype)
	}
	if cr.Spec.ForProvider.IntegrationType != nil {
		res.SetIntegrationType(*cr.Spec.ForProvider.IntegrationType)
	}
	if cr.Spec.ForProvider.IntegrationURI != nil {
		res.SetIntegrationUri(*cr.Spec.ForProvider.IntegrationURI)
	}
	if cr.Spec.ForProvider.PassthroughBehavior != nil {
		res.SetPassthroughBehavior(*cr.Spec.ForProvider.PassthroughBehavior)
	}
	if cr.Spec.ForProvider.PayloadFormatVersion != nil {
		res.SetPayloadFormatVersion(*cr.Spec.ForProvider.PayloadFormatVersion)
	}
	if cr.Spec.ForProvider.RequestParameters != nil {
		f11 := map[string]*string{}
		for f11key, f11valiter := range cr.Spec.ForProvider.RequestParameters {
			var f11val string
			f11val = *f11valiter
			f11[f11key] = &f11val
		}
		res.SetRequestParameters(f11)
	}
	if cr.Spec.ForProvider.RequestTemplates != nil {
		f12 := map[string]*string{}
		for f12key, f12valiter := range cr.Spec.ForProvider.RequestTemplates {
			var f12val string
			f12val = *f12valiter
			f12[f12key] = &f12val
		}
		res.SetRequestTemplates(f12)
	}
	if cr.Spec.ForProvider.TemplateSelectionExpression != nil {
		res.SetTemplateSelectionExpression(*cr.Spec.ForProvider.TemplateSelectionExpression)
	}
	if cr.Spec.ForProvider.TimeoutInMillis != nil {
		res.SetTimeoutInMillis(*cr.Spec.ForProvider.TimeoutInMillis)
	}
	if cr.Spec.ForProvider.TLSConfig != nil {
		f15 := &svcsdk.TlsConfigInput{}
		if cr.Spec.ForProvider.TLSConfig.ServerNameToVerify != nil {
			f15.SetServerNameToVerify(*cr.Spec.ForProvider.TLSConfig.ServerNameToVerify)
		}
		res.SetTlsConfig(f15)
	}

	return res
}

// GenerateUpdateIntegrationInput returns an update input.
func GenerateUpdateIntegrationInput(cr *svcapitypes.Integration) *svcsdk.UpdateIntegrationInput {
	res := &svcsdk.UpdateIntegrationInput{}

	if cr.Spec.ForProvider.ConnectionID != nil {
		res.SetConnectionId(*cr.Spec.ForProvider.ConnectionID)
	}
	if cr.Spec.ForProvider.ConnectionType != nil {
		res.SetConnectionType(*cr.Spec.ForProvider.ConnectionType)
	}
	if cr.Spec.ForProvider.ContentHandlingStrategy != nil {
		res.SetContentHandlingStrategy(*cr.Spec.ForProvider.ContentHandlingStrategy)
	}
	if cr.Spec.ForProvider.CredentialsARN != nil {
		res.SetCredentialsArn(*cr.Spec.ForProvider.CredentialsARN)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Status.AtProvider.IntegrationID != nil {
		res.SetIntegrationId(*cr.Status.AtProvider.IntegrationID)
	}
	if cr.Spec.ForProvider.IntegrationMethod != nil {
		res.SetIntegrationMethod(*cr.Spec.ForProvider.IntegrationMethod)
	}
	if cr.Spec.ForProvider.IntegrationSubtype != nil {
		res.SetIntegrationSubtype(*cr.Spec.ForProvider.IntegrationSubtype)
	}
	if cr.Spec.ForProvider.IntegrationType != nil {
		res.SetIntegrationType(*cr.Spec.ForProvider.IntegrationType)
	}
	if cr.Spec.ForProvider.IntegrationURI != nil {
		res.SetIntegrationUri(*cr.Spec.ForProvider.IntegrationURI)
	}
	if cr.Spec.ForProvider.PassthroughBehavior != nil {
		res.SetPassthroughBehavior(*cr.Spec.ForProvider.PassthroughBehavior)
	}
	if cr.Spec.ForProvider.PayloadFormatVersion != nil {
		res.SetPayloadFormatVersion(*cr.Spec.ForProvider.PayloadFormatVersion)
	}
	if cr.Spec.ForProvider.RequestParameters != nil {
		f13 := map[string]*string{}
		for f13key, f13valiter := range cr.Spec.ForProvider.RequestParameters {
			var f13val string
			f13val = *f13valiter
			f13[f13key] = &f13val
		}
		res.SetRequestParameters(f13)
	}
	if cr.Spec.ForProvider.RequestTemplates != nil {
		f14 := map[string]*string{}
		for f14key, f14valiter := range cr.Spec.ForProvider.RequestTemplates {
			var f14val string
			f14val = *f14valiter
			f14[f14key] = &f14val
		}
		res.SetRequestTemplates(f14)
	}
	if cr.Spec.ForProvider.TemplateSelectionExpression != nil {
		res.SetTemplateSelectionExpression(*cr.Spec.ForProvider.TemplateSelectionExpression)
	}
	if cr.Spec.ForProvider.TimeoutInMillis != nil {
		res.SetTimeoutInMillis(*cr.Spec.ForProvider.TimeoutInMillis)
	}
	if cr.Spec.ForProvider.TLSConfig != nil {
		f18 := &svcsdk.TlsConfigInput{}
		if cr.Spec.ForProvider.TLSConfig.ServerNameToVerify != nil {
			f18.SetServerNameToVerify(*cr.Spec.ForProvider.TLSConfig.ServerNameToVerify)
		}
		res.SetTlsConfig(f18)
	}

	return res
}

// GenerateDeleteIntegrationInput returns a deletion input.
func GenerateDeleteIntegrationInput(cr *svcapitypes.Integration) *svcsdk.DeleteIntegrationInput {
	res := &svcsdk.DeleteIntegrationInput{}

	if cr.Status.AtProvider.IntegrationID != nil {
		res.SetIntegrationId(*cr.Status.AtProvider.IntegrationID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
