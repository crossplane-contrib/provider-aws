/*
Copyright 2019 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package stage

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/apigatewayv2"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane/provider-aws/apis/apigatewayv2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.
// TODO(muvaf): We can generate one-time boilerplate for these hooks but currently
// ACK doesn't support not generating if file exists.
// GenerateGetStagesInput returns input for read
// operation.
func GenerateGetStagesInput(cr *svcapitypes.Stage) *svcsdk.GetStagesInput {
	res := preGenerateGetStagesInput(cr, &svcsdk.GetStagesInput{})

	if cr.Spec.ForProvider.APIID != nil {
		res.SetApiId(*cr.Spec.ForProvider.APIID)
	}

	return postGenerateGetStagesInput(cr, res)
}

// GenerateStage returns the current state in the form of *svcapitypes.Stage.
func GenerateStage(resp *svcsdk.GetStagesOutput) *svcapitypes.Stage {
	cr := &svcapitypes.Stage{}

	found := false
	for _, elem := range resp.Items {
		if elem.AccessLogSettings != nil {
			f0 := &svcapitypes.AccessLogSettings{}
			if elem.AccessLogSettings.DestinationArn != nil {
				f0.DestinationARN = elem.AccessLogSettings.DestinationArn
			}
			if elem.AccessLogSettings.Format != nil {
				f0.Format = elem.AccessLogSettings.Format
			}
			cr.Spec.ForProvider.AccessLogSettings = f0
		}
		if elem.ApiGatewayManaged != nil {
			cr.Status.AtProvider.APIGatewayManaged = elem.ApiGatewayManaged
		}
		if elem.AutoDeploy != nil {
			cr.Spec.ForProvider.AutoDeploy = elem.AutoDeploy
		}
		if elem.ClientCertificateId != nil {
			cr.Spec.ForProvider.ClientCertificateID = elem.ClientCertificateId
		}
		if elem.CreatedDate != nil {
			cr.Status.AtProvider.CreatedDate = &metav1.Time{*elem.CreatedDate}
		}
		if elem.DefaultRouteSettings != nil {
			f5 := &svcapitypes.RouteSettings{}
			if elem.DefaultRouteSettings.DataTraceEnabled != nil {
				f5.DataTraceEnabled = elem.DefaultRouteSettings.DataTraceEnabled
			}
			if elem.DefaultRouteSettings.DetailedMetricsEnabled != nil {
				f5.DetailedMetricsEnabled = elem.DefaultRouteSettings.DetailedMetricsEnabled
			}
			if elem.DefaultRouteSettings.LoggingLevel != nil {
				f5.LoggingLevel = elem.DefaultRouteSettings.LoggingLevel
			}
			if elem.DefaultRouteSettings.ThrottlingBurstLimit != nil {
				f5.ThrottlingBurstLimit = elem.DefaultRouteSettings.ThrottlingBurstLimit
			}
			if elem.DefaultRouteSettings.ThrottlingRateLimit != nil {
				f5.ThrottlingRateLimit = elem.DefaultRouteSettings.ThrottlingRateLimit
			}
			cr.Spec.ForProvider.DefaultRouteSettings = f5
		}
		if elem.DeploymentId != nil {
			cr.Spec.ForProvider.DeploymentID = elem.DeploymentId
		}
		if elem.Description != nil {
			cr.Spec.ForProvider.Description = elem.Description
		}
		if elem.LastDeploymentStatusMessage != nil {
			cr.Status.AtProvider.LastDeploymentStatusMessage = elem.LastDeploymentStatusMessage
		}
		if elem.LastUpdatedDate != nil {
			cr.Status.AtProvider.LastUpdatedDate = &metav1.Time{*elem.LastUpdatedDate}
		}
		if elem.RouteSettings != nil {
			f10 := map[string]*svcapitypes.RouteSettings{}
			for f10key, f10valiter := range elem.RouteSettings {
				f10val := &svcapitypes.RouteSettings{}
				if f10valiter.DataTraceEnabled != nil {
					f10val.DataTraceEnabled = f10valiter.DataTraceEnabled
				}
				if f10valiter.DetailedMetricsEnabled != nil {
					f10val.DetailedMetricsEnabled = f10valiter.DetailedMetricsEnabled
				}
				if f10valiter.LoggingLevel != nil {
					f10val.LoggingLevel = f10valiter.LoggingLevel
				}
				if f10valiter.ThrottlingBurstLimit != nil {
					f10val.ThrottlingBurstLimit = f10valiter.ThrottlingBurstLimit
				}
				if f10valiter.ThrottlingRateLimit != nil {
					f10val.ThrottlingRateLimit = f10valiter.ThrottlingRateLimit
				}
				f10[f10key] = f10val
			}
			cr.Spec.ForProvider.RouteSettings = f10
		}
		if elem.StageName != nil {
			cr.Spec.ForProvider.StageName = elem.StageName
		}
		if elem.StageVariables != nil {
			f12 := map[string]*string{}
			for f12key, f12valiter := range elem.StageVariables {
				var f12val string
				f12val = *f12valiter
				f12[f12key] = &f12val
			}
			cr.Spec.ForProvider.StageVariables = f12
		}
		if elem.Tags != nil {
			f13 := map[string]*string{}
			for f13key, f13valiter := range elem.Tags {
				var f13val string
				f13val = *f13valiter
				f13[f13key] = &f13val
			}
			cr.Spec.ForProvider.Tags = f13
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateStageInput returns a create input.
func GenerateCreateStageInput(cr *svcapitypes.Stage) *svcsdk.CreateStageInput {
	res := preGenerateCreateStageInput(cr, &svcsdk.CreateStageInput{})

	if cr.Spec.ForProvider.AccessLogSettings != nil {
		f0 := &svcsdk.AccessLogSettings{}
		if cr.Spec.ForProvider.AccessLogSettings.DestinationARN != nil {
			f0.SetDestinationArn(*cr.Spec.ForProvider.AccessLogSettings.DestinationARN)
		}
		if cr.Spec.ForProvider.AccessLogSettings.Format != nil {
			f0.SetFormat(*cr.Spec.ForProvider.AccessLogSettings.Format)
		}
		res.SetAccessLogSettings(f0)
	}
	if cr.Spec.ForProvider.APIID != nil {
		res.SetApiId(*cr.Spec.ForProvider.APIID)
	}
	if cr.Spec.ForProvider.AutoDeploy != nil {
		res.SetAutoDeploy(*cr.Spec.ForProvider.AutoDeploy)
	}
	if cr.Spec.ForProvider.ClientCertificateID != nil {
		res.SetClientCertificateId(*cr.Spec.ForProvider.ClientCertificateID)
	}
	if cr.Spec.ForProvider.DefaultRouteSettings != nil {
		f4 := &svcsdk.RouteSettings{}
		if cr.Spec.ForProvider.DefaultRouteSettings.DataTraceEnabled != nil {
			f4.SetDataTraceEnabled(*cr.Spec.ForProvider.DefaultRouteSettings.DataTraceEnabled)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.DetailedMetricsEnabled != nil {
			f4.SetDetailedMetricsEnabled(*cr.Spec.ForProvider.DefaultRouteSettings.DetailedMetricsEnabled)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.LoggingLevel != nil {
			f4.SetLoggingLevel(*cr.Spec.ForProvider.DefaultRouteSettings.LoggingLevel)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingBurstLimit != nil {
			f4.SetThrottlingBurstLimit(*cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingBurstLimit)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingRateLimit != nil {
			f4.SetThrottlingRateLimit(*cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingRateLimit)
		}
		res.SetDefaultRouteSettings(f4)
	}
	if cr.Spec.ForProvider.DeploymentID != nil {
		res.SetDeploymentId(*cr.Spec.ForProvider.DeploymentID)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.RouteSettings != nil {
		f7 := map[string]*svcsdk.RouteSettings{}
		for f7key, f7valiter := range cr.Spec.ForProvider.RouteSettings {
			f7val := &svcsdk.RouteSettings{}
			if f7valiter.DataTraceEnabled != nil {
				f7val.SetDataTraceEnabled(*f7valiter.DataTraceEnabled)
			}
			if f7valiter.DetailedMetricsEnabled != nil {
				f7val.SetDetailedMetricsEnabled(*f7valiter.DetailedMetricsEnabled)
			}
			if f7valiter.LoggingLevel != nil {
				f7val.SetLoggingLevel(*f7valiter.LoggingLevel)
			}
			if f7valiter.ThrottlingBurstLimit != nil {
				f7val.SetThrottlingBurstLimit(*f7valiter.ThrottlingBurstLimit)
			}
			if f7valiter.ThrottlingRateLimit != nil {
				f7val.SetThrottlingRateLimit(*f7valiter.ThrottlingRateLimit)
			}
			f7[f7key] = f7val
		}
		res.SetRouteSettings(f7)
	}
	if cr.Spec.ForProvider.StageName != nil {
		res.SetStageName(*cr.Spec.ForProvider.StageName)
	}
	if cr.Spec.ForProvider.StageVariables != nil {
		f9 := map[string]*string{}
		for f9key, f9valiter := range cr.Spec.ForProvider.StageVariables {
			var f9val string
			f9val = *f9valiter
			f9[f9key] = &f9val
		}
		res.SetStageVariables(f9)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f10 := map[string]*string{}
		for f10key, f10valiter := range cr.Spec.ForProvider.Tags {
			var f10val string
			f10val = *f10valiter
			f10[f10key] = &f10val
		}
		res.SetTags(f10)
	}

	return postGenerateCreateStageInput(cr, res)
}

// GenerateDeleteStageInput returns a deletion input.
func GenerateDeleteStageInput(cr *svcapitypes.Stage) *svcsdk.DeleteStageInput {
	res := preGenerateDeleteStageInput(cr, &svcsdk.DeleteStageInput{})

	if cr.Spec.ForProvider.APIID != nil {
		res.SetApiId(*cr.Spec.ForProvider.APIID)
	}
	if cr.Spec.ForProvider.StageName != nil {
		res.SetStageName(*cr.Spec.ForProvider.StageName)
	}

	return postGenerateDeleteStageInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
