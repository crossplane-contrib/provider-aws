/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package stage

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/apigatewayv2"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/apigatewayv2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetStageInput returns input for read
// operation.
func GenerateGetStageInput(cr *svcapitypes.Stage) *svcsdk.GetStageInput {
	res := &svcsdk.GetStageInput{}

	if cr.Status.AtProvider.StageName != nil {
		res.SetStageName(*cr.Status.AtProvider.StageName)
	}

	return res
}

// GenerateStage returns the current state in the form of *svcapitypes.Stage.
func GenerateStage(resp *svcsdk.GetStageOutput) *svcapitypes.Stage {
	cr := &svcapitypes.Stage{}

	if resp.AccessLogSettings != nil {
		f0 := &svcapitypes.AccessLogSettings{}
		if resp.AccessLogSettings.DestinationArn != nil {
			f0.DestinationARN = resp.AccessLogSettings.DestinationArn
		}
		if resp.AccessLogSettings.Format != nil {
			f0.Format = resp.AccessLogSettings.Format
		}
		cr.Spec.ForProvider.AccessLogSettings = f0
	} else {
		cr.Spec.ForProvider.AccessLogSettings = nil
	}
	if resp.ApiGatewayManaged != nil {
		cr.Status.AtProvider.APIGatewayManaged = resp.ApiGatewayManaged
	} else {
		cr.Status.AtProvider.APIGatewayManaged = nil
	}
	if resp.AutoDeploy != nil {
		cr.Spec.ForProvider.AutoDeploy = resp.AutoDeploy
	} else {
		cr.Spec.ForProvider.AutoDeploy = nil
	}
	if resp.ClientCertificateId != nil {
		cr.Spec.ForProvider.ClientCertificateID = resp.ClientCertificateId
	} else {
		cr.Spec.ForProvider.ClientCertificateID = nil
	}
	if resp.CreatedDate != nil {
		cr.Status.AtProvider.CreatedDate = &metav1.Time{*resp.CreatedDate}
	} else {
		cr.Status.AtProvider.CreatedDate = nil
	}
	if resp.DefaultRouteSettings != nil {
		f5 := &svcapitypes.RouteSettings{}
		if resp.DefaultRouteSettings.DataTraceEnabled != nil {
			f5.DataTraceEnabled = resp.DefaultRouteSettings.DataTraceEnabled
		}
		if resp.DefaultRouteSettings.DetailedMetricsEnabled != nil {
			f5.DetailedMetricsEnabled = resp.DefaultRouteSettings.DetailedMetricsEnabled
		}
		if resp.DefaultRouteSettings.LoggingLevel != nil {
			f5.LoggingLevel = resp.DefaultRouteSettings.LoggingLevel
		}
		if resp.DefaultRouteSettings.ThrottlingBurstLimit != nil {
			f5.ThrottlingBurstLimit = resp.DefaultRouteSettings.ThrottlingBurstLimit
		}
		if resp.DefaultRouteSettings.ThrottlingRateLimit != nil {
			f5.ThrottlingRateLimit = resp.DefaultRouteSettings.ThrottlingRateLimit
		}
		cr.Spec.ForProvider.DefaultRouteSettings = f5
	} else {
		cr.Spec.ForProvider.DefaultRouteSettings = nil
	}
	if resp.DeploymentId != nil {
		cr.Spec.ForProvider.DeploymentID = resp.DeploymentId
	} else {
		cr.Spec.ForProvider.DeploymentID = nil
	}
	if resp.Description != nil {
		cr.Spec.ForProvider.Description = resp.Description
	} else {
		cr.Spec.ForProvider.Description = nil
	}
	if resp.LastDeploymentStatusMessage != nil {
		cr.Status.AtProvider.LastDeploymentStatusMessage = resp.LastDeploymentStatusMessage
	} else {
		cr.Status.AtProvider.LastDeploymentStatusMessage = nil
	}
	if resp.LastUpdatedDate != nil {
		cr.Status.AtProvider.LastUpdatedDate = &metav1.Time{*resp.LastUpdatedDate}
	} else {
		cr.Status.AtProvider.LastUpdatedDate = nil
	}
	if resp.RouteSettings != nil {
		f10 := map[string]*svcapitypes.RouteSettings{}
		for f10key, f10valiter := range resp.RouteSettings {
			f10val := &svcapitypes.RouteSettings{}
			if f10valiter.DataTraceEnabled != nil {
				f10val.DataTraceEnabled = f10valiter.DataTraceEnabled
			}
			if f10valiter.DetailedMetricsEnabled != nil {
				f10val.DetailedMetricsEnabled = f10valiter.DetailedMetricsEnabled
			}
			if f10valiter.LoggingLevel != nil {
				f10val.LoggingLevel = f10valiter.LoggingLevel
			}
			if f10valiter.ThrottlingBurstLimit != nil {
				f10val.ThrottlingBurstLimit = f10valiter.ThrottlingBurstLimit
			}
			if f10valiter.ThrottlingRateLimit != nil {
				f10val.ThrottlingRateLimit = f10valiter.ThrottlingRateLimit
			}
			f10[f10key] = f10val
		}
		cr.Spec.ForProvider.RouteSettings = f10
	} else {
		cr.Spec.ForProvider.RouteSettings = nil
	}
	if resp.StageName != nil {
		cr.Status.AtProvider.StageName = resp.StageName
	} else {
		cr.Status.AtProvider.StageName = nil
	}
	if resp.StageVariables != nil {
		f12 := map[string]*string{}
		for f12key, f12valiter := range resp.StageVariables {
			var f12val string
			f12val = *f12valiter
			f12[f12key] = &f12val
		}
		cr.Spec.ForProvider.StageVariables = f12
	} else {
		cr.Spec.ForProvider.StageVariables = nil
	}
	if resp.Tags != nil {
		f13 := map[string]*string{}
		for f13key, f13valiter := range resp.Tags {
			var f13val string
			f13val = *f13valiter
			f13[f13key] = &f13val
		}
		cr.Spec.ForProvider.Tags = f13
	} else {
		cr.Spec.ForProvider.Tags = nil
	}

	return cr
}

// GenerateCreateStageInput returns a create input.
func GenerateCreateStageInput(cr *svcapitypes.Stage) *svcsdk.CreateStageInput {
	res := &svcsdk.CreateStageInput{}

	if cr.Spec.ForProvider.AccessLogSettings != nil {
		f0 := &svcsdk.AccessLogSettings{}
		if cr.Spec.ForProvider.AccessLogSettings.DestinationARN != nil {
			f0.SetDestinationArn(*cr.Spec.ForProvider.AccessLogSettings.DestinationARN)
		}
		if cr.Spec.ForProvider.AccessLogSettings.Format != nil {
			f0.SetFormat(*cr.Spec.ForProvider.AccessLogSettings.Format)
		}
		res.SetAccessLogSettings(f0)
	}
	if cr.Spec.ForProvider.AutoDeploy != nil {
		res.SetAutoDeploy(*cr.Spec.ForProvider.AutoDeploy)
	}
	if cr.Spec.ForProvider.ClientCertificateID != nil {
		res.SetClientCertificateId(*cr.Spec.ForProvider.ClientCertificateID)
	}
	if cr.Spec.ForProvider.DefaultRouteSettings != nil {
		f3 := &svcsdk.RouteSettings{}
		if cr.Spec.ForProvider.DefaultRouteSettings.DataTraceEnabled != nil {
			f3.SetDataTraceEnabled(*cr.Spec.ForProvider.DefaultRouteSettings.DataTraceEnabled)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.DetailedMetricsEnabled != nil {
			f3.SetDetailedMetricsEnabled(*cr.Spec.ForProvider.DefaultRouteSettings.DetailedMetricsEnabled)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.LoggingLevel != nil {
			f3.SetLoggingLevel(*cr.Spec.ForProvider.DefaultRouteSettings.LoggingLevel)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingBurstLimit != nil {
			f3.SetThrottlingBurstLimit(*cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingBurstLimit)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingRateLimit != nil {
			f3.SetThrottlingRateLimit(*cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingRateLimit)
		}
		res.SetDefaultRouteSettings(f3)
	}
	if cr.Spec.ForProvider.DeploymentID != nil {
		res.SetDeploymentId(*cr.Spec.ForProvider.DeploymentID)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.RouteSettings != nil {
		f6 := map[string]*svcsdk.RouteSettings{}
		for f6key, f6valiter := range cr.Spec.ForProvider.RouteSettings {
			f6val := &svcsdk.RouteSettings{}
			if f6valiter.DataTraceEnabled != nil {
				f6val.SetDataTraceEnabled(*f6valiter.DataTraceEnabled)
			}
			if f6valiter.DetailedMetricsEnabled != nil {
				f6val.SetDetailedMetricsEnabled(*f6valiter.DetailedMetricsEnabled)
			}
			if f6valiter.LoggingLevel != nil {
				f6val.SetLoggingLevel(*f6valiter.LoggingLevel)
			}
			if f6valiter.ThrottlingBurstLimit != nil {
				f6val.SetThrottlingBurstLimit(*f6valiter.ThrottlingBurstLimit)
			}
			if f6valiter.ThrottlingRateLimit != nil {
				f6val.SetThrottlingRateLimit(*f6valiter.ThrottlingRateLimit)
			}
			f6[f6key] = f6val
		}
		res.SetRouteSettings(f6)
	}
	if cr.Spec.ForProvider.StageVariables != nil {
		f7 := map[string]*string{}
		for f7key, f7valiter := range cr.Spec.ForProvider.StageVariables {
			var f7val string
			f7val = *f7valiter
			f7[f7key] = &f7val
		}
		res.SetStageVariables(f7)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f8 := map[string]*string{}
		for f8key, f8valiter := range cr.Spec.ForProvider.Tags {
			var f8val string
			f8val = *f8valiter
			f8[f8key] = &f8val
		}
		res.SetTags(f8)
	}

	return res
}

// GenerateUpdateStageInput returns an update input.
func GenerateUpdateStageInput(cr *svcapitypes.Stage) *svcsdk.UpdateStageInput {
	res := &svcsdk.UpdateStageInput{}

	if cr.Spec.ForProvider.AccessLogSettings != nil {
		f0 := &svcsdk.AccessLogSettings{}
		if cr.Spec.ForProvider.AccessLogSettings.DestinationARN != nil {
			f0.SetDestinationArn(*cr.Spec.ForProvider.AccessLogSettings.DestinationARN)
		}
		if cr.Spec.ForProvider.AccessLogSettings.Format != nil {
			f0.SetFormat(*cr.Spec.ForProvider.AccessLogSettings.Format)
		}
		res.SetAccessLogSettings(f0)
	}
	if cr.Spec.ForProvider.AutoDeploy != nil {
		res.SetAutoDeploy(*cr.Spec.ForProvider.AutoDeploy)
	}
	if cr.Spec.ForProvider.ClientCertificateID != nil {
		res.SetClientCertificateId(*cr.Spec.ForProvider.ClientCertificateID)
	}
	if cr.Spec.ForProvider.DefaultRouteSettings != nil {
		f4 := &svcsdk.RouteSettings{}
		if cr.Spec.ForProvider.DefaultRouteSettings.DataTraceEnabled != nil {
			f4.SetDataTraceEnabled(*cr.Spec.ForProvider.DefaultRouteSettings.DataTraceEnabled)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.DetailedMetricsEnabled != nil {
			f4.SetDetailedMetricsEnabled(*cr.Spec.ForProvider.DefaultRouteSettings.DetailedMetricsEnabled)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.LoggingLevel != nil {
			f4.SetLoggingLevel(*cr.Spec.ForProvider.DefaultRouteSettings.LoggingLevel)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingBurstLimit != nil {
			f4.SetThrottlingBurstLimit(*cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingBurstLimit)
		}
		if cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingRateLimit != nil {
			f4.SetThrottlingRateLimit(*cr.Spec.ForProvider.DefaultRouteSettings.ThrottlingRateLimit)
		}
		res.SetDefaultRouteSettings(f4)
	}
	if cr.Spec.ForProvider.DeploymentID != nil {
		res.SetDeploymentId(*cr.Spec.ForProvider.DeploymentID)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.RouteSettings != nil {
		f7 := map[string]*svcsdk.RouteSettings{}
		for f7key, f7valiter := range cr.Spec.ForProvider.RouteSettings {
			f7val := &svcsdk.RouteSettings{}
			if f7valiter.DataTraceEnabled != nil {
				f7val.SetDataTraceEnabled(*f7valiter.DataTraceEnabled)
			}
			if f7valiter.DetailedMetricsEnabled != nil {
				f7val.SetDetailedMetricsEnabled(*f7valiter.DetailedMetricsEnabled)
			}
			if f7valiter.LoggingLevel != nil {
				f7val.SetLoggingLevel(*f7valiter.LoggingLevel)
			}
			if f7valiter.ThrottlingBurstLimit != nil {
				f7val.SetThrottlingBurstLimit(*f7valiter.ThrottlingBurstLimit)
			}
			if f7valiter.ThrottlingRateLimit != nil {
				f7val.SetThrottlingRateLimit(*f7valiter.ThrottlingRateLimit)
			}
			f7[f7key] = f7val
		}
		res.SetRouteSettings(f7)
	}
	if cr.Status.AtProvider.StageName != nil {
		res.SetStageName(*cr.Status.AtProvider.StageName)
	}
	if cr.Spec.ForProvider.StageVariables != nil {
		f9 := map[string]*string{}
		for f9key, f9valiter := range cr.Spec.ForProvider.StageVariables {
			var f9val string
			f9val = *f9valiter
			f9[f9key] = &f9val
		}
		res.SetStageVariables(f9)
	}

	return res
}

// GenerateDeleteStageInput returns a deletion input.
func GenerateDeleteStageInput(cr *svcapitypes.Stage) *svcsdk.DeleteStageInput {
	res := &svcsdk.DeleteStageInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
