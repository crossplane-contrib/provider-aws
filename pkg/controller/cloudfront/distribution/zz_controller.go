/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package distribution

import (
	"context"

	svcapi "github.com/aws/aws-sdk-go/service/cloudfront"
	svcsdk "github.com/aws/aws-sdk-go/service/cloudfront"
	svcsdkapi "github.com/aws/aws-sdk-go/service/cloudfront/cloudfrontiface"
	"github.com/google/go-cmp/cmp"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/meta"
	"github.com/crossplane/crossplane-runtime/pkg/reconciler/managed"
	cpresource "github.com/crossplane/crossplane-runtime/pkg/resource"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/cloudfront/v1alpha1"
	awsclient "github.com/crossplane-contrib/provider-aws/pkg/clients"
)

const (
	errUnexpectedObject = "managed resource is not an Distribution resource"

	errCreateSession = "cannot create a new session"
	errCreate        = "cannot create Distribution in AWS"
	errUpdate        = "cannot update Distribution in AWS"
	errDescribe      = "failed to describe Distribution"
	errDelete        = "failed to delete Distribution"
)

type connector struct {
	kube client.Client
	opts []option
}

func (c *connector) Connect(ctx context.Context, mg cpresource.Managed) (managed.ExternalClient, error) {
	cr, ok := mg.(*svcapitypes.Distribution)
	if !ok {
		return nil, errors.New(errUnexpectedObject)
	}
	sess, err := awsclient.GetConfigV1(ctx, c.kube, mg, cr.Spec.ForProvider.Region)
	if err != nil {
		return nil, errors.Wrap(err, errCreateSession)
	}
	return newExternal(c.kube, svcapi.New(sess), c.opts), nil
}

func (e *external) Observe(ctx context.Context, mg cpresource.Managed) (managed.ExternalObservation, error) {
	cr, ok := mg.(*svcapitypes.Distribution)
	if !ok {
		return managed.ExternalObservation{}, errors.New(errUnexpectedObject)
	}
	if meta.GetExternalName(cr) == "" {
		return managed.ExternalObservation{
			ResourceExists: false,
		}, nil
	}
	input := GenerateGetDistributionInput(cr)
	if err := e.preObserve(ctx, cr, input); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "pre-observe failed")
	}
	resp, err := e.client.GetDistributionWithContext(ctx, input)
	if err != nil {
		return managed.ExternalObservation{ResourceExists: false}, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDescribe)
	}
	currentSpec := cr.Spec.ForProvider.DeepCopy()
	if err := e.lateInitialize(&cr.Spec.ForProvider, resp); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "late-init failed")
	}
	GenerateDistribution(resp).Status.AtProvider.DeepCopyInto(&cr.Status.AtProvider)

	upToDate, err := e.isUpToDate(cr, resp)
	if err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "isUpToDate check failed")
	}
	return e.postObserve(ctx, cr, resp, managed.ExternalObservation{
		ResourceExists:          true,
		ResourceUpToDate:        upToDate,
		ResourceLateInitialized: !cmp.Equal(&cr.Spec.ForProvider, currentSpec),
	}, nil)
}

func (e *external) Create(ctx context.Context, mg cpresource.Managed) (managed.ExternalCreation, error) {
	cr, ok := mg.(*svcapitypes.Distribution)
	if !ok {
		return managed.ExternalCreation{}, errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Creating())
	input := GenerateCreateDistributionInput(cr)
	if err := e.preCreate(ctx, cr, input); err != nil {
		return managed.ExternalCreation{}, errors.Wrap(err, "pre-create failed")
	}
	resp, err := e.client.CreateDistributionWithContext(ctx, input)
	if err != nil {
		return managed.ExternalCreation{}, awsclient.Wrap(err, errCreate)
	}

	if resp.Distribution != nil {
		f0 := &svcapitypes.Distribution_SDK{}
		if resp.Distribution.ARN != nil {
			f0.ARN = resp.Distribution.ARN
		}
		if resp.Distribution.ActiveTrustedKeyGroups != nil {
			f0f1 := &svcapitypes.ActiveTrustedKeyGroups{}
			if resp.Distribution.ActiveTrustedKeyGroups.Enabled != nil {
				f0f1.Enabled = resp.Distribution.ActiveTrustedKeyGroups.Enabled
			}
			if resp.Distribution.ActiveTrustedKeyGroups.Items != nil {
				f0f1f1 := []*svcapitypes.KGKeyPairIDs{}
				for _, f0f1f1iter := range resp.Distribution.ActiveTrustedKeyGroups.Items {
					f0f1f1elem := &svcapitypes.KGKeyPairIDs{}
					if f0f1f1iter.KeyGroupId != nil {
						f0f1f1elem.KeyGroupID = f0f1f1iter.KeyGroupId
					}
					if f0f1f1iter.KeyPairIds != nil {
						f0f1f1elemf1 := &svcapitypes.KeyPairIDs{}
						if f0f1f1iter.KeyPairIds.Items != nil {
							f0f1f1elemf1f0 := []*string{}
							for _, f0f1f1elemf1f0iter := range f0f1f1iter.KeyPairIds.Items {
								var f0f1f1elemf1f0elem string
								f0f1f1elemf1f0elem = *f0f1f1elemf1f0iter
								f0f1f1elemf1f0 = append(f0f1f1elemf1f0, &f0f1f1elemf1f0elem)
							}
							f0f1f1elemf1.Items = f0f1f1elemf1f0
						}
						if f0f1f1iter.KeyPairIds.Quantity != nil {
							f0f1f1elemf1.Quantity = f0f1f1iter.KeyPairIds.Quantity
						}
						f0f1f1elem.KeyPairIDs = f0f1f1elemf1
					}
					f0f1f1 = append(f0f1f1, f0f1f1elem)
				}
				f0f1.Items = f0f1f1
			}
			if resp.Distribution.ActiveTrustedKeyGroups.Quantity != nil {
				f0f1.Quantity = resp.Distribution.ActiveTrustedKeyGroups.Quantity
			}
			f0.ActiveTrustedKeyGroups = f0f1
		}
		if resp.Distribution.ActiveTrustedSigners != nil {
			f0f2 := &svcapitypes.ActiveTrustedSigners{}
			if resp.Distribution.ActiveTrustedSigners.Enabled != nil {
				f0f2.Enabled = resp.Distribution.ActiveTrustedSigners.Enabled
			}
			if resp.Distribution.ActiveTrustedSigners.Items != nil {
				f0f2f1 := []*svcapitypes.Signer{}
				for _, f0f2f1iter := range resp.Distribution.ActiveTrustedSigners.Items {
					f0f2f1elem := &svcapitypes.Signer{}
					if f0f2f1iter.AwsAccountNumber != nil {
						f0f2f1elem.AWSAccountNumber = f0f2f1iter.AwsAccountNumber
					}
					if f0f2f1iter.KeyPairIds != nil {
						f0f2f1elemf1 := &svcapitypes.KeyPairIDs{}
						if f0f2f1iter.KeyPairIds.Items != nil {
							f0f2f1elemf1f0 := []*string{}
							for _, f0f2f1elemf1f0iter := range f0f2f1iter.KeyPairIds.Items {
								var f0f2f1elemf1f0elem string
								f0f2f1elemf1f0elem = *f0f2f1elemf1f0iter
								f0f2f1elemf1f0 = append(f0f2f1elemf1f0, &f0f2f1elemf1f0elem)
							}
							f0f2f1elemf1.Items = f0f2f1elemf1f0
						}
						if f0f2f1iter.KeyPairIds.Quantity != nil {
							f0f2f1elemf1.Quantity = f0f2f1iter.KeyPairIds.Quantity
						}
						f0f2f1elem.KeyPairIDs = f0f2f1elemf1
					}
					f0f2f1 = append(f0f2f1, f0f2f1elem)
				}
				f0f2.Items = f0f2f1
			}
			if resp.Distribution.ActiveTrustedSigners.Quantity != nil {
				f0f2.Quantity = resp.Distribution.ActiveTrustedSigners.Quantity
			}
			f0.ActiveTrustedSigners = f0f2
		}
		if resp.Distribution.AliasICPRecordals != nil {
			f0f3 := []*svcapitypes.AliasICPRecordal{}
			for _, f0f3iter := range resp.Distribution.AliasICPRecordals {
				f0f3elem := &svcapitypes.AliasICPRecordal{}
				if f0f3iter.CNAME != nil {
					f0f3elem.CNAME = f0f3iter.CNAME
				}
				if f0f3iter.ICPRecordalStatus != nil {
					f0f3elem.ICPRecordalStatus = f0f3iter.ICPRecordalStatus
				}
				f0f3 = append(f0f3, f0f3elem)
			}
			f0.AliasICPRecordals = f0f3
		}
		if resp.Distribution.DistributionConfig != nil {
			f0f4 := &svcapitypes.DistributionConfig{}
			if resp.Distribution.DistributionConfig.Aliases != nil {
				f0f4f0 := &svcapitypes.Aliases{}
				if resp.Distribution.DistributionConfig.Aliases.Items != nil {
					f0f4f0f0 := []*string{}
					for _, f0f4f0f0iter := range resp.Distribution.DistributionConfig.Aliases.Items {
						var f0f4f0f0elem string
						f0f4f0f0elem = *f0f4f0f0iter
						f0f4f0f0 = append(f0f4f0f0, &f0f4f0f0elem)
					}
					f0f4f0.Items = f0f4f0f0
				}
				f0f4.Aliases = f0f4f0
			}
			if resp.Distribution.DistributionConfig.CacheBehaviors != nil {
				f0f4f1 := &svcapitypes.CacheBehaviors{}
				if resp.Distribution.DistributionConfig.CacheBehaviors.Items != nil {
					f0f4f1f0 := []*svcapitypes.CacheBehavior{}
					for _, f0f4f1f0iter := range resp.Distribution.DistributionConfig.CacheBehaviors.Items {
						f0f4f1f0elem := &svcapitypes.CacheBehavior{}
						if f0f4f1f0iter.AllowedMethods != nil {
							f0f4f1f0elemf0 := &svcapitypes.AllowedMethods{}
							if f0f4f1f0iter.AllowedMethods.CachedMethods != nil {
								f0f4f1f0elemf0f0 := &svcapitypes.CachedMethods{}
								if f0f4f1f0iter.AllowedMethods.CachedMethods.Items != nil {
									f0f4f1f0elemf0f0f0 := []*string{}
									for _, f0f4f1f0elemf0f0f0iter := range f0f4f1f0iter.AllowedMethods.CachedMethods.Items {
										var f0f4f1f0elemf0f0f0elem string
										f0f4f1f0elemf0f0f0elem = *f0f4f1f0elemf0f0f0iter
										f0f4f1f0elemf0f0f0 = append(f0f4f1f0elemf0f0f0, &f0f4f1f0elemf0f0f0elem)
									}
									f0f4f1f0elemf0f0.Items = f0f4f1f0elemf0f0f0
								}
								f0f4f1f0elemf0.CachedMethods = f0f4f1f0elemf0f0
							}
							if f0f4f1f0iter.AllowedMethods.Items != nil {
								f0f4f1f0elemf0f1 := []*string{}
								for _, f0f4f1f0elemf0f1iter := range f0f4f1f0iter.AllowedMethods.Items {
									var f0f4f1f0elemf0f1elem string
									f0f4f1f0elemf0f1elem = *f0f4f1f0elemf0f1iter
									f0f4f1f0elemf0f1 = append(f0f4f1f0elemf0f1, &f0f4f1f0elemf0f1elem)
								}
								f0f4f1f0elemf0.Items = f0f4f1f0elemf0f1
							}
							f0f4f1f0elem.AllowedMethods = f0f4f1f0elemf0
						}
						if f0f4f1f0iter.CachePolicyId != nil {
							f0f4f1f0elem.CachePolicyID = f0f4f1f0iter.CachePolicyId
						}
						if f0f4f1f0iter.Compress != nil {
							f0f4f1f0elem.Compress = f0f4f1f0iter.Compress
						}
						if f0f4f1f0iter.DefaultTTL != nil {
							f0f4f1f0elem.DefaultTTL = f0f4f1f0iter.DefaultTTL
						}
						if f0f4f1f0iter.FieldLevelEncryptionId != nil {
							f0f4f1f0elem.FieldLevelEncryptionID = f0f4f1f0iter.FieldLevelEncryptionId
						}
						if f0f4f1f0iter.ForwardedValues != nil {
							f0f4f1f0elemf5 := &svcapitypes.ForwardedValues{}
							if f0f4f1f0iter.ForwardedValues.Cookies != nil {
								f0f4f1f0elemf5f0 := &svcapitypes.CookiePreference{}
								if f0f4f1f0iter.ForwardedValues.Cookies.Forward != nil {
									f0f4f1f0elemf5f0.Forward = f0f4f1f0iter.ForwardedValues.Cookies.Forward
								}
								if f0f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames != nil {
									f0f4f1f0elemf5f0f1 := &svcapitypes.CookieNames{}
									if f0f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
										f0f4f1f0elemf5f0f1f0 := []*string{}
										for _, f0f4f1f0elemf5f0f1f0iter := range f0f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Items {
											var f0f4f1f0elemf5f0f1f0elem string
											f0f4f1f0elemf5f0f1f0elem = *f0f4f1f0elemf5f0f1f0iter
											f0f4f1f0elemf5f0f1f0 = append(f0f4f1f0elemf5f0f1f0, &f0f4f1f0elemf5f0f1f0elem)
										}
										f0f4f1f0elemf5f0f1.Items = f0f4f1f0elemf5f0f1f0
									}
									if f0f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Quantity != nil {
										f0f4f1f0elemf5f0f1.Quantity = f0f4f1f0iter.ForwardedValues.Cookies.WhitelistedNames.Quantity
									}
									f0f4f1f0elemf5f0.WhitelistedNames = f0f4f1f0elemf5f0f1
								}
								f0f4f1f0elemf5.Cookies = f0f4f1f0elemf5f0
							}
							if f0f4f1f0iter.ForwardedValues.Headers != nil {
								f0f4f1f0elemf5f1 := &svcapitypes.Headers{}
								if f0f4f1f0iter.ForwardedValues.Headers.Items != nil {
									f0f4f1f0elemf5f1f0 := []*string{}
									for _, f0f4f1f0elemf5f1f0iter := range f0f4f1f0iter.ForwardedValues.Headers.Items {
										var f0f4f1f0elemf5f1f0elem string
										f0f4f1f0elemf5f1f0elem = *f0f4f1f0elemf5f1f0iter
										f0f4f1f0elemf5f1f0 = append(f0f4f1f0elemf5f1f0, &f0f4f1f0elemf5f1f0elem)
									}
									f0f4f1f0elemf5f1.Items = f0f4f1f0elemf5f1f0
								}
								f0f4f1f0elemf5.Headers = f0f4f1f0elemf5f1
							}
							if f0f4f1f0iter.ForwardedValues.QueryString != nil {
								f0f4f1f0elemf5.QueryString = f0f4f1f0iter.ForwardedValues.QueryString
							}
							if f0f4f1f0iter.ForwardedValues.QueryStringCacheKeys != nil {
								f0f4f1f0elemf5f3 := &svcapitypes.QueryStringCacheKeys{}
								if f0f4f1f0iter.ForwardedValues.QueryStringCacheKeys.Items != nil {
									f0f4f1f0elemf5f3f0 := []*string{}
									for _, f0f4f1f0elemf5f3f0iter := range f0f4f1f0iter.ForwardedValues.QueryStringCacheKeys.Items {
										var f0f4f1f0elemf5f3f0elem string
										f0f4f1f0elemf5f3f0elem = *f0f4f1f0elemf5f3f0iter
										f0f4f1f0elemf5f3f0 = append(f0f4f1f0elemf5f3f0, &f0f4f1f0elemf5f3f0elem)
									}
									f0f4f1f0elemf5f3.Items = f0f4f1f0elemf5f3f0
								}
								f0f4f1f0elemf5.QueryStringCacheKeys = f0f4f1f0elemf5f3
							}
							f0f4f1f0elem.ForwardedValues = f0f4f1f0elemf5
						}
						if f0f4f1f0iter.FunctionAssociations != nil {
							f0f4f1f0elemf6 := &svcapitypes.FunctionAssociations{}
							if f0f4f1f0iter.FunctionAssociations.Items != nil {
								f0f4f1f0elemf6f0 := []*svcapitypes.FunctionAssociation{}
								for _, f0f4f1f0elemf6f0iter := range f0f4f1f0iter.FunctionAssociations.Items {
									f0f4f1f0elemf6f0elem := &svcapitypes.FunctionAssociation{}
									if f0f4f1f0elemf6f0iter.EventType != nil {
										f0f4f1f0elemf6f0elem.EventType = f0f4f1f0elemf6f0iter.EventType
									}
									if f0f4f1f0elemf6f0iter.FunctionARN != nil {
										f0f4f1f0elemf6f0elem.FunctionARN = f0f4f1f0elemf6f0iter.FunctionARN
									}
									f0f4f1f0elemf6f0 = append(f0f4f1f0elemf6f0, f0f4f1f0elemf6f0elem)
								}
								f0f4f1f0elemf6.Items = f0f4f1f0elemf6f0
							}
							f0f4f1f0elem.FunctionAssociations = f0f4f1f0elemf6
						}
						if f0f4f1f0iter.LambdaFunctionAssociations != nil {
							f0f4f1f0elemf7 := &svcapitypes.LambdaFunctionAssociations{}
							if f0f4f1f0iter.LambdaFunctionAssociations.Items != nil {
								f0f4f1f0elemf7f0 := []*svcapitypes.LambdaFunctionAssociation{}
								for _, f0f4f1f0elemf7f0iter := range f0f4f1f0iter.LambdaFunctionAssociations.Items {
									f0f4f1f0elemf7f0elem := &svcapitypes.LambdaFunctionAssociation{}
									if f0f4f1f0elemf7f0iter.EventType != nil {
										f0f4f1f0elemf7f0elem.EventType = f0f4f1f0elemf7f0iter.EventType
									}
									if f0f4f1f0elemf7f0iter.IncludeBody != nil {
										f0f4f1f0elemf7f0elem.IncludeBody = f0f4f1f0elemf7f0iter.IncludeBody
									}
									if f0f4f1f0elemf7f0iter.LambdaFunctionARN != nil {
										f0f4f1f0elemf7f0elem.LambdaFunctionARN = f0f4f1f0elemf7f0iter.LambdaFunctionARN
									}
									f0f4f1f0elemf7f0 = append(f0f4f1f0elemf7f0, f0f4f1f0elemf7f0elem)
								}
								f0f4f1f0elemf7.Items = f0f4f1f0elemf7f0
							}
							f0f4f1f0elem.LambdaFunctionAssociations = f0f4f1f0elemf7
						}
						if f0f4f1f0iter.MaxTTL != nil {
							f0f4f1f0elem.MaxTTL = f0f4f1f0iter.MaxTTL
						}
						if f0f4f1f0iter.MinTTL != nil {
							f0f4f1f0elem.MinTTL = f0f4f1f0iter.MinTTL
						}
						if f0f4f1f0iter.OriginRequestPolicyId != nil {
							f0f4f1f0elem.OriginRequestPolicyID = f0f4f1f0iter.OriginRequestPolicyId
						}
						if f0f4f1f0iter.PathPattern != nil {
							f0f4f1f0elem.PathPattern = f0f4f1f0iter.PathPattern
						}
						if f0f4f1f0iter.RealtimeLogConfigArn != nil {
							f0f4f1f0elem.RealtimeLogConfigARN = f0f4f1f0iter.RealtimeLogConfigArn
						}
						if f0f4f1f0iter.ResponseHeadersPolicyId != nil {
							f0f4f1f0elem.ResponseHeadersPolicyID = f0f4f1f0iter.ResponseHeadersPolicyId
						}
						if f0f4f1f0iter.SmoothStreaming != nil {
							f0f4f1f0elem.SmoothStreaming = f0f4f1f0iter.SmoothStreaming
						}
						if f0f4f1f0iter.TargetOriginId != nil {
							f0f4f1f0elem.TargetOriginID = f0f4f1f0iter.TargetOriginId
						}
						if f0f4f1f0iter.TrustedKeyGroups != nil {
							f0f4f1f0elemf16 := &svcapitypes.TrustedKeyGroups{}
							if f0f4f1f0iter.TrustedKeyGroups.Enabled != nil {
								f0f4f1f0elemf16.Enabled = f0f4f1f0iter.TrustedKeyGroups.Enabled
							}
							if f0f4f1f0iter.TrustedKeyGroups.Items != nil {
								f0f4f1f0elemf16f1 := []*string{}
								for _, f0f4f1f0elemf16f1iter := range f0f4f1f0iter.TrustedKeyGroups.Items {
									var f0f4f1f0elemf16f1elem string
									f0f4f1f0elemf16f1elem = *f0f4f1f0elemf16f1iter
									f0f4f1f0elemf16f1 = append(f0f4f1f0elemf16f1, &f0f4f1f0elemf16f1elem)
								}
								f0f4f1f0elemf16.Items = f0f4f1f0elemf16f1
							}
							f0f4f1f0elem.TrustedKeyGroups = f0f4f1f0elemf16
						}
						if f0f4f1f0iter.TrustedSigners != nil {
							f0f4f1f0elemf17 := &svcapitypes.TrustedSigners{}
							if f0f4f1f0iter.TrustedSigners.Enabled != nil {
								f0f4f1f0elemf17.Enabled = f0f4f1f0iter.TrustedSigners.Enabled
							}
							if f0f4f1f0iter.TrustedSigners.Items != nil {
								f0f4f1f0elemf17f1 := []*string{}
								for _, f0f4f1f0elemf17f1iter := range f0f4f1f0iter.TrustedSigners.Items {
									var f0f4f1f0elemf17f1elem string
									f0f4f1f0elemf17f1elem = *f0f4f1f0elemf17f1iter
									f0f4f1f0elemf17f1 = append(f0f4f1f0elemf17f1, &f0f4f1f0elemf17f1elem)
								}
								f0f4f1f0elemf17.Items = f0f4f1f0elemf17f1
							}
							f0f4f1f0elem.TrustedSigners = f0f4f1f0elemf17
						}
						if f0f4f1f0iter.ViewerProtocolPolicy != nil {
							f0f4f1f0elem.ViewerProtocolPolicy = f0f4f1f0iter.ViewerProtocolPolicy
						}
						f0f4f1f0 = append(f0f4f1f0, f0f4f1f0elem)
					}
					f0f4f1.Items = f0f4f1f0
				}
				f0f4.CacheBehaviors = f0f4f1
			}
			if resp.Distribution.DistributionConfig.CallerReference != nil {
				f0f4.CallerReference = resp.Distribution.DistributionConfig.CallerReference
			}
			if resp.Distribution.DistributionConfig.Comment != nil {
				f0f4.Comment = resp.Distribution.DistributionConfig.Comment
			}
			if resp.Distribution.DistributionConfig.CustomErrorResponses != nil {
				f0f4f4 := &svcapitypes.CustomErrorResponses{}
				if resp.Distribution.DistributionConfig.CustomErrorResponses.Items != nil {
					f0f4f4f0 := []*svcapitypes.CustomErrorResponse{}
					for _, f0f4f4f0iter := range resp.Distribution.DistributionConfig.CustomErrorResponses.Items {
						f0f4f4f0elem := &svcapitypes.CustomErrorResponse{}
						if f0f4f4f0iter.ErrorCachingMinTTL != nil {
							f0f4f4f0elem.ErrorCachingMinTTL = f0f4f4f0iter.ErrorCachingMinTTL
						}
						if f0f4f4f0iter.ErrorCode != nil {
							f0f4f4f0elem.ErrorCode = f0f4f4f0iter.ErrorCode
						}
						if f0f4f4f0iter.ResponseCode != nil {
							f0f4f4f0elem.ResponseCode = f0f4f4f0iter.ResponseCode
						}
						if f0f4f4f0iter.ResponsePagePath != nil {
							f0f4f4f0elem.ResponsePagePath = f0f4f4f0iter.ResponsePagePath
						}
						f0f4f4f0 = append(f0f4f4f0, f0f4f4f0elem)
					}
					f0f4f4.Items = f0f4f4f0
				}
				f0f4.CustomErrorResponses = f0f4f4
			}
			if resp.Distribution.DistributionConfig.DefaultCacheBehavior != nil {
				f0f4f5 := &svcapitypes.DefaultCacheBehavior{}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods != nil {
					f0f4f5f0 := &svcapitypes.AllowedMethods{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods != nil {
						f0f4f5f0f0 := &svcapitypes.CachedMethods{}
						if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items != nil {
							f0f4f5f0f0f0 := []*string{}
							for _, f0f4f5f0f0f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.CachedMethods.Items {
								var f0f4f5f0f0f0elem string
								f0f4f5f0f0f0elem = *f0f4f5f0f0f0iter
								f0f4f5f0f0f0 = append(f0f4f5f0f0f0, &f0f4f5f0f0f0elem)
							}
							f0f4f5f0f0.Items = f0f4f5f0f0f0
						}
						f0f4f5f0.CachedMethods = f0f4f5f0f0
					}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items != nil {
						f0f4f5f0f1 := []*string{}
						for _, f0f4f5f0f1iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.AllowedMethods.Items {
							var f0f4f5f0f1elem string
							f0f4f5f0f1elem = *f0f4f5f0f1iter
							f0f4f5f0f1 = append(f0f4f5f0f1, &f0f4f5f0f1elem)
						}
						f0f4f5f0.Items = f0f4f5f0f1
					}
					f0f4f5.AllowedMethods = f0f4f5f0
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId != nil {
					f0f4f5.CachePolicyID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.CachePolicyId
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.Compress != nil {
					f0f4f5.Compress = resp.Distribution.DistributionConfig.DefaultCacheBehavior.Compress
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL != nil {
					f0f4f5.DefaultTTL = resp.Distribution.DistributionConfig.DefaultCacheBehavior.DefaultTTL
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId != nil {
					f0f4f5.FieldLevelEncryptionID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.FieldLevelEncryptionId
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues != nil {
					f0f4f5f5 := &svcapitypes.ForwardedValues{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies != nil {
						f0f4f5f5f0 := &svcapitypes.CookiePreference{}
						if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward != nil {
							f0f4f5f5f0.Forward = resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.Forward
						}
						if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames != nil {
							f0f4f5f5f0f1 := &svcapitypes.CookieNames{}
							if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items != nil {
								f0f4f5f5f0f1f0 := []*string{}
								for _, f0f4f5f5f0f1f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Items {
									var f0f4f5f5f0f1f0elem string
									f0f4f5f5f0f1f0elem = *f0f4f5f5f0f1f0iter
									f0f4f5f5f0f1f0 = append(f0f4f5f5f0f1f0, &f0f4f5f5f0f1f0elem)
								}
								f0f4f5f5f0f1.Items = f0f4f5f5f0f1f0
							}
							if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity != nil {
								f0f4f5f5f0f1.Quantity = resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Cookies.WhitelistedNames.Quantity
							}
							f0f4f5f5f0.WhitelistedNames = f0f4f5f5f0f1
						}
						f0f4f5f5.Cookies = f0f4f5f5f0
					}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers != nil {
						f0f4f5f5f1 := &svcapitypes.Headers{}
						if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items != nil {
							f0f4f5f5f1f0 := []*string{}
							for _, f0f4f5f5f1f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.Headers.Items {
								var f0f4f5f5f1f0elem string
								f0f4f5f5f1f0elem = *f0f4f5f5f1f0iter
								f0f4f5f5f1f0 = append(f0f4f5f5f1f0, &f0f4f5f5f1f0elem)
							}
							f0f4f5f5f1.Items = f0f4f5f5f1f0
						}
						f0f4f5f5.Headers = f0f4f5f5f1
					}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString != nil {
						f0f4f5f5.QueryString = resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryString
					}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys != nil {
						f0f4f5f5f3 := &svcapitypes.QueryStringCacheKeys{}
						if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items != nil {
							f0f4f5f5f3f0 := []*string{}
							for _, f0f4f5f5f3f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.ForwardedValues.QueryStringCacheKeys.Items {
								var f0f4f5f5f3f0elem string
								f0f4f5f5f3f0elem = *f0f4f5f5f3f0iter
								f0f4f5f5f3f0 = append(f0f4f5f5f3f0, &f0f4f5f5f3f0elem)
							}
							f0f4f5f5f3.Items = f0f4f5f5f3f0
						}
						f0f4f5f5.QueryStringCacheKeys = f0f4f5f5f3
					}
					f0f4f5.ForwardedValues = f0f4f5f5
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.FunctionAssociations != nil {
					f0f4f5f6 := &svcapitypes.FunctionAssociations{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items != nil {
						f0f4f5f6f0 := []*svcapitypes.FunctionAssociation{}
						for _, f0f4f5f6f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.FunctionAssociations.Items {
							f0f4f5f6f0elem := &svcapitypes.FunctionAssociation{}
							if f0f4f5f6f0iter.EventType != nil {
								f0f4f5f6f0elem.EventType = f0f4f5f6f0iter.EventType
							}
							if f0f4f5f6f0iter.FunctionARN != nil {
								f0f4f5f6f0elem.FunctionARN = f0f4f5f6f0iter.FunctionARN
							}
							f0f4f5f6f0 = append(f0f4f5f6f0, f0f4f5f6f0elem)
						}
						f0f4f5f6.Items = f0f4f5f6f0
					}
					f0f4f5.FunctionAssociations = f0f4f5f6
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations != nil {
					f0f4f5f7 := &svcapitypes.LambdaFunctionAssociations{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items != nil {
						f0f4f5f7f0 := []*svcapitypes.LambdaFunctionAssociation{}
						for _, f0f4f5f7f0iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.LambdaFunctionAssociations.Items {
							f0f4f5f7f0elem := &svcapitypes.LambdaFunctionAssociation{}
							if f0f4f5f7f0iter.EventType != nil {
								f0f4f5f7f0elem.EventType = f0f4f5f7f0iter.EventType
							}
							if f0f4f5f7f0iter.IncludeBody != nil {
								f0f4f5f7f0elem.IncludeBody = f0f4f5f7f0iter.IncludeBody
							}
							if f0f4f5f7f0iter.LambdaFunctionARN != nil {
								f0f4f5f7f0elem.LambdaFunctionARN = f0f4f5f7f0iter.LambdaFunctionARN
							}
							f0f4f5f7f0 = append(f0f4f5f7f0, f0f4f5f7f0elem)
						}
						f0f4f5f7.Items = f0f4f5f7f0
					}
					f0f4f5.LambdaFunctionAssociations = f0f4f5f7
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL != nil {
					f0f4f5.MaxTTL = resp.Distribution.DistributionConfig.DefaultCacheBehavior.MaxTTL
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL != nil {
					f0f4f5.MinTTL = resp.Distribution.DistributionConfig.DefaultCacheBehavior.MinTTL
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId != nil {
					f0f4f5.OriginRequestPolicyID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.OriginRequestPolicyId
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn != nil {
					f0f4f5.RealtimeLogConfigARN = resp.Distribution.DistributionConfig.DefaultCacheBehavior.RealtimeLogConfigArn
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyId != nil {
					f0f4f5.ResponseHeadersPolicyID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.ResponseHeadersPolicyId
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming != nil {
					f0f4f5.SmoothStreaming = resp.Distribution.DistributionConfig.DefaultCacheBehavior.SmoothStreaming
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId != nil {
					f0f4f5.TargetOriginID = resp.Distribution.DistributionConfig.DefaultCacheBehavior.TargetOriginId
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups != nil {
					f0f4f5f15 := &svcapitypes.TrustedKeyGroups{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled != nil {
						f0f4f5f15.Enabled = resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Enabled
					}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items != nil {
						f0f4f5f15f1 := []*string{}
						for _, f0f4f5f15f1iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedKeyGroups.Items {
							var f0f4f5f15f1elem string
							f0f4f5f15f1elem = *f0f4f5f15f1iter
							f0f4f5f15f1 = append(f0f4f5f15f1, &f0f4f5f15f1elem)
						}
						f0f4f5f15.Items = f0f4f5f15f1
					}
					f0f4f5.TrustedKeyGroups = f0f4f5f15
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners != nil {
					f0f4f5f16 := &svcapitypes.TrustedSigners{}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled != nil {
						f0f4f5f16.Enabled = resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Enabled
					}
					if resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items != nil {
						f0f4f5f16f1 := []*string{}
						for _, f0f4f5f16f1iter := range resp.Distribution.DistributionConfig.DefaultCacheBehavior.TrustedSigners.Items {
							var f0f4f5f16f1elem string
							f0f4f5f16f1elem = *f0f4f5f16f1iter
							f0f4f5f16f1 = append(f0f4f5f16f1, &f0f4f5f16f1elem)
						}
						f0f4f5f16.Items = f0f4f5f16f1
					}
					f0f4f5.TrustedSigners = f0f4f5f16
				}
				if resp.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy != nil {
					f0f4f5.ViewerProtocolPolicy = resp.Distribution.DistributionConfig.DefaultCacheBehavior.ViewerProtocolPolicy
				}
				f0f4.DefaultCacheBehavior = f0f4f5
			}
			if resp.Distribution.DistributionConfig.DefaultRootObject != nil {
				f0f4.DefaultRootObject = resp.Distribution.DistributionConfig.DefaultRootObject
			}
			if resp.Distribution.DistributionConfig.Enabled != nil {
				f0f4.Enabled = resp.Distribution.DistributionConfig.Enabled
			}
			if resp.Distribution.DistributionConfig.HttpVersion != nil {
				f0f4.HTTPVersion = resp.Distribution.DistributionConfig.HttpVersion
			}
			if resp.Distribution.DistributionConfig.IsIPV6Enabled != nil {
				f0f4.IsIPV6Enabled = resp.Distribution.DistributionConfig.IsIPV6Enabled
			}
			if resp.Distribution.DistributionConfig.Logging != nil {
				f0f4f10 := &svcapitypes.LoggingConfig{}
				if resp.Distribution.DistributionConfig.Logging.Bucket != nil {
					f0f4f10.Bucket = resp.Distribution.DistributionConfig.Logging.Bucket
				}
				if resp.Distribution.DistributionConfig.Logging.Enabled != nil {
					f0f4f10.Enabled = resp.Distribution.DistributionConfig.Logging.Enabled
				}
				if resp.Distribution.DistributionConfig.Logging.IncludeCookies != nil {
					f0f4f10.IncludeCookies = resp.Distribution.DistributionConfig.Logging.IncludeCookies
				}
				if resp.Distribution.DistributionConfig.Logging.Prefix != nil {
					f0f4f10.Prefix = resp.Distribution.DistributionConfig.Logging.Prefix
				}
				f0f4.Logging = f0f4f10
			}
			if resp.Distribution.DistributionConfig.OriginGroups != nil {
				f0f4f11 := &svcapitypes.OriginGroups{}
				if resp.Distribution.DistributionConfig.OriginGroups.Items != nil {
					f0f4f11f0 := []*svcapitypes.OriginGroup{}
					for _, f0f4f11f0iter := range resp.Distribution.DistributionConfig.OriginGroups.Items {
						f0f4f11f0elem := &svcapitypes.OriginGroup{}
						if f0f4f11f0iter.FailoverCriteria != nil {
							f0f4f11f0elemf0 := &svcapitypes.OriginGroupFailoverCriteria{}
							if f0f4f11f0iter.FailoverCriteria.StatusCodes != nil {
								f0f4f11f0elemf0f0 := &svcapitypes.StatusCodes{}
								if f0f4f11f0iter.FailoverCriteria.StatusCodes.Items != nil {
									f0f4f11f0elemf0f0f0 := []*int64{}
									for _, f0f4f11f0elemf0f0f0iter := range f0f4f11f0iter.FailoverCriteria.StatusCodes.Items {
										var f0f4f11f0elemf0f0f0elem int64
										f0f4f11f0elemf0f0f0elem = *f0f4f11f0elemf0f0f0iter
										f0f4f11f0elemf0f0f0 = append(f0f4f11f0elemf0f0f0, &f0f4f11f0elemf0f0f0elem)
									}
									f0f4f11f0elemf0f0.Items = f0f4f11f0elemf0f0f0
								}
								f0f4f11f0elemf0.StatusCodes = f0f4f11f0elemf0f0
							}
							f0f4f11f0elem.FailoverCriteria = f0f4f11f0elemf0
						}
						if f0f4f11f0iter.Id != nil {
							f0f4f11f0elem.ID = f0f4f11f0iter.Id
						}
						if f0f4f11f0iter.Members != nil {
							f0f4f11f0elemf2 := &svcapitypes.OriginGroupMembers{}
							if f0f4f11f0iter.Members.Items != nil {
								f0f4f11f0elemf2f0 := []*svcapitypes.OriginGroupMember{}
								for _, f0f4f11f0elemf2f0iter := range f0f4f11f0iter.Members.Items {
									f0f4f11f0elemf2f0elem := &svcapitypes.OriginGroupMember{}
									if f0f4f11f0elemf2f0iter.OriginId != nil {
										f0f4f11f0elemf2f0elem.OriginID = f0f4f11f0elemf2f0iter.OriginId
									}
									f0f4f11f0elemf2f0 = append(f0f4f11f0elemf2f0, f0f4f11f0elemf2f0elem)
								}
								f0f4f11f0elemf2.Items = f0f4f11f0elemf2f0
							}
							if f0f4f11f0iter.Members.Quantity != nil {
								f0f4f11f0elemf2.Quantity = f0f4f11f0iter.Members.Quantity
							}
							f0f4f11f0elem.Members = f0f4f11f0elemf2
						}
						f0f4f11f0 = append(f0f4f11f0, f0f4f11f0elem)
					}
					f0f4f11.Items = f0f4f11f0
				}
				f0f4.OriginGroups = f0f4f11
			}
			if resp.Distribution.DistributionConfig.Origins != nil {
				f0f4f12 := &svcapitypes.Origins{}
				if resp.Distribution.DistributionConfig.Origins.Items != nil {
					f0f4f12f0 := []*svcapitypes.Origin{}
					for _, f0f4f12f0iter := range resp.Distribution.DistributionConfig.Origins.Items {
						f0f4f12f0elem := &svcapitypes.Origin{}
						if f0f4f12f0iter.ConnectionAttempts != nil {
							f0f4f12f0elem.ConnectionAttempts = f0f4f12f0iter.ConnectionAttempts
						}
						if f0f4f12f0iter.ConnectionTimeout != nil {
							f0f4f12f0elem.ConnectionTimeout = f0f4f12f0iter.ConnectionTimeout
						}
						if f0f4f12f0iter.CustomHeaders != nil {
							f0f4f12f0elemf2 := &svcapitypes.CustomHeaders{}
							if f0f4f12f0iter.CustomHeaders.Items != nil {
								f0f4f12f0elemf2f0 := []*svcapitypes.OriginCustomHeader{}
								for _, f0f4f12f0elemf2f0iter := range f0f4f12f0iter.CustomHeaders.Items {
									f0f4f12f0elemf2f0elem := &svcapitypes.OriginCustomHeader{}
									if f0f4f12f0elemf2f0iter.HeaderName != nil {
										f0f4f12f0elemf2f0elem.HeaderName = f0f4f12f0elemf2f0iter.HeaderName
									}
									if f0f4f12f0elemf2f0iter.HeaderValue != nil {
										f0f4f12f0elemf2f0elem.HeaderValue = f0f4f12f0elemf2f0iter.HeaderValue
									}
									f0f4f12f0elemf2f0 = append(f0f4f12f0elemf2f0, f0f4f12f0elemf2f0elem)
								}
								f0f4f12f0elemf2.Items = f0f4f12f0elemf2f0
							}
							f0f4f12f0elem.CustomHeaders = f0f4f12f0elemf2
						}
						if f0f4f12f0iter.CustomOriginConfig != nil {
							f0f4f12f0elemf3 := &svcapitypes.CustomOriginConfig{}
							if f0f4f12f0iter.CustomOriginConfig.HTTPPort != nil {
								f0f4f12f0elemf3.HTTPPort = f0f4f12f0iter.CustomOriginConfig.HTTPPort
							}
							if f0f4f12f0iter.CustomOriginConfig.HTTPSPort != nil {
								f0f4f12f0elemf3.HTTPSPort = f0f4f12f0iter.CustomOriginConfig.HTTPSPort
							}
							if f0f4f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout != nil {
								f0f4f12f0elemf3.OriginKeepaliveTimeout = f0f4f12f0iter.CustomOriginConfig.OriginKeepaliveTimeout
							}
							if f0f4f12f0iter.CustomOriginConfig.OriginProtocolPolicy != nil {
								f0f4f12f0elemf3.OriginProtocolPolicy = f0f4f12f0iter.CustomOriginConfig.OriginProtocolPolicy
							}
							if f0f4f12f0iter.CustomOriginConfig.OriginReadTimeout != nil {
								f0f4f12f0elemf3.OriginReadTimeout = f0f4f12f0iter.CustomOriginConfig.OriginReadTimeout
							}
							if f0f4f12f0iter.CustomOriginConfig.OriginSslProtocols != nil {
								f0f4f12f0elemf3f5 := &svcapitypes.OriginSSLProtocols{}
								if f0f4f12f0iter.CustomOriginConfig.OriginSslProtocols.Items != nil {
									f0f4f12f0elemf3f5f0 := []*string{}
									for _, f0f4f12f0elemf3f5f0iter := range f0f4f12f0iter.CustomOriginConfig.OriginSslProtocols.Items {
										var f0f4f12f0elemf3f5f0elem string
										f0f4f12f0elemf3f5f0elem = *f0f4f12f0elemf3f5f0iter
										f0f4f12f0elemf3f5f0 = append(f0f4f12f0elemf3f5f0, &f0f4f12f0elemf3f5f0elem)
									}
									f0f4f12f0elemf3f5.Items = f0f4f12f0elemf3f5f0
								}
								f0f4f12f0elemf3.OriginSSLProtocols = f0f4f12f0elemf3f5
							}
							f0f4f12f0elem.CustomOriginConfig = f0f4f12f0elemf3
						}
						if f0f4f12f0iter.DomainName != nil {
							f0f4f12f0elem.DomainName = f0f4f12f0iter.DomainName
						}
						if f0f4f12f0iter.Id != nil {
							f0f4f12f0elem.ID = f0f4f12f0iter.Id
						}
						if f0f4f12f0iter.OriginPath != nil {
							f0f4f12f0elem.OriginPath = f0f4f12f0iter.OriginPath
						}
						if f0f4f12f0iter.OriginShield != nil {
							f0f4f12f0elemf7 := &svcapitypes.OriginShield{}
							if f0f4f12f0iter.OriginShield.Enabled != nil {
								f0f4f12f0elemf7.Enabled = f0f4f12f0iter.OriginShield.Enabled
							}
							if f0f4f12f0iter.OriginShield.OriginShieldRegion != nil {
								f0f4f12f0elemf7.OriginShieldRegion = f0f4f12f0iter.OriginShield.OriginShieldRegion
							}
							f0f4f12f0elem.OriginShield = f0f4f12f0elemf7
						}
						if f0f4f12f0iter.S3OriginConfig != nil {
							f0f4f12f0elemf8 := &svcapitypes.S3OriginConfig{}
							if f0f4f12f0iter.S3OriginConfig.OriginAccessIdentity != nil {
								f0f4f12f0elemf8.OriginAccessIdentity = f0f4f12f0iter.S3OriginConfig.OriginAccessIdentity
							}
							f0f4f12f0elem.S3OriginConfig = f0f4f12f0elemf8
						}
						f0f4f12f0 = append(f0f4f12f0, f0f4f12f0elem)
					}
					f0f4f12.Items = f0f4f12f0
				}
				f0f4.Origins = f0f4f12
			}
			if resp.Distribution.DistributionConfig.PriceClass != nil {
				f0f4.PriceClass = resp.Distribution.DistributionConfig.PriceClass
			}
			if resp.Distribution.DistributionConfig.Restrictions != nil {
				f0f4f14 := &svcapitypes.Restrictions{}
				if resp.Distribution.DistributionConfig.Restrictions.GeoRestriction != nil {
					f0f4f14f0 := &svcapitypes.GeoRestriction{}
					if resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items != nil {
						f0f4f14f0f0 := []*string{}
						for _, f0f4f14f0f0iter := range resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.Items {
							var f0f4f14f0f0elem string
							f0f4f14f0f0elem = *f0f4f14f0f0iter
							f0f4f14f0f0 = append(f0f4f14f0f0, &f0f4f14f0f0elem)
						}
						f0f4f14f0.Items = f0f4f14f0f0
					}
					if resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType != nil {
						f0f4f14f0.RestrictionType = resp.Distribution.DistributionConfig.Restrictions.GeoRestriction.RestrictionType
					}
					f0f4f14.GeoRestriction = f0f4f14f0
				}
				f0f4.Restrictions = f0f4f14
			}
			if resp.Distribution.DistributionConfig.ViewerCertificate != nil {
				f0f4f15 := &svcapitypes.ViewerCertificate{}
				if resp.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn != nil {
					f0f4f15.ACMCertificateARN = resp.Distribution.DistributionConfig.ViewerCertificate.ACMCertificateArn
				}
				if resp.Distribution.DistributionConfig.ViewerCertificate.Certificate != nil {
					f0f4f15.Certificate = resp.Distribution.DistributionConfig.ViewerCertificate.Certificate
				}
				if resp.Distribution.DistributionConfig.ViewerCertificate.CertificateSource != nil {
					f0f4f15.CertificateSource = resp.Distribution.DistributionConfig.ViewerCertificate.CertificateSource
				}
				if resp.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate != nil {
					f0f4f15.CloudFrontDefaultCertificate = resp.Distribution.DistributionConfig.ViewerCertificate.CloudFrontDefaultCertificate
				}
				if resp.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId != nil {
					f0f4f15.IAMCertificateID = resp.Distribution.DistributionConfig.ViewerCertificate.IAMCertificateId
				}
				if resp.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion != nil {
					f0f4f15.MinimumProtocolVersion = resp.Distribution.DistributionConfig.ViewerCertificate.MinimumProtocolVersion
				}
				if resp.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod != nil {
					f0f4f15.SSLSupportMethod = resp.Distribution.DistributionConfig.ViewerCertificate.SSLSupportMethod
				}
				f0f4.ViewerCertificate = f0f4f15
			}
			if resp.Distribution.DistributionConfig.WebACLId != nil {
				f0f4.WebACLID = resp.Distribution.DistributionConfig.WebACLId
			}
			f0.DistributionConfig = f0f4
		}
		if resp.Distribution.DomainName != nil {
			f0.DomainName = resp.Distribution.DomainName
		}
		if resp.Distribution.Id != nil {
			f0.ID = resp.Distribution.Id
		}
		if resp.Distribution.InProgressInvalidationBatches != nil {
			f0.InProgressInvalidationBatches = resp.Distribution.InProgressInvalidationBatches
		}
		if resp.Distribution.LastModifiedTime != nil {
			f0.LastModifiedTime = &metav1.Time{*resp.Distribution.LastModifiedTime}
		}
		if resp.Distribution.Status != nil {
			f0.Status = resp.Distribution.Status
		}
		cr.Status.AtProvider.Distribution = f0
	} else {
		cr.Status.AtProvider.Distribution = nil
	}
	if resp.ETag != nil {
		cr.Status.AtProvider.ETag = resp.ETag
	} else {
		cr.Status.AtProvider.ETag = nil
	}
	if resp.Location != nil {
		cr.Status.AtProvider.Location = resp.Location
	} else {
		cr.Status.AtProvider.Location = nil
	}

	return e.postCreate(ctx, cr, resp, managed.ExternalCreation{}, err)
}

func (e *external) Update(ctx context.Context, mg cpresource.Managed) (managed.ExternalUpdate, error) {
	cr, ok := mg.(*svcapitypes.Distribution)
	if !ok {
		return managed.ExternalUpdate{}, errors.New(errUnexpectedObject)
	}
	input := GenerateUpdateDistributionInput(cr)
	if err := e.preUpdate(ctx, cr, input); err != nil {
		return managed.ExternalUpdate{}, errors.Wrap(err, "pre-update failed")
	}
	resp, err := e.client.UpdateDistributionWithContext(ctx, input)
	return e.postUpdate(ctx, cr, resp, managed.ExternalUpdate{}, awsclient.Wrap(err, errUpdate))
}

func (e *external) Delete(ctx context.Context, mg cpresource.Managed) error {
	cr, ok := mg.(*svcapitypes.Distribution)
	if !ok {
		return errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Deleting())
	input := GenerateDeleteDistributionInput(cr)
	ignore, err := e.preDelete(ctx, cr, input)
	if err != nil {
		return errors.Wrap(err, "pre-delete failed")
	}
	if ignore {
		return nil
	}
	resp, err := e.client.DeleteDistributionWithContext(ctx, input)
	return e.postDelete(ctx, cr, resp, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDelete))
}

type option func(*external)

func newExternal(kube client.Client, client svcsdkapi.CloudFrontAPI, opts []option) *external {
	e := &external{
		kube:           kube,
		client:         client,
		preObserve:     nopPreObserve,
		postObserve:    nopPostObserve,
		lateInitialize: nopLateInitialize,
		isUpToDate:     alwaysUpToDate,
		preCreate:      nopPreCreate,
		postCreate:     nopPostCreate,
		preDelete:      nopPreDelete,
		postDelete:     nopPostDelete,
		preUpdate:      nopPreUpdate,
		postUpdate:     nopPostUpdate,
	}
	for _, f := range opts {
		f(e)
	}
	return e
}

type external struct {
	kube           client.Client
	client         svcsdkapi.CloudFrontAPI
	preObserve     func(context.Context, *svcapitypes.Distribution, *svcsdk.GetDistributionInput) error
	postObserve    func(context.Context, *svcapitypes.Distribution, *svcsdk.GetDistributionOutput, managed.ExternalObservation, error) (managed.ExternalObservation, error)
	lateInitialize func(*svcapitypes.DistributionParameters, *svcsdk.GetDistributionOutput) error
	isUpToDate     func(*svcapitypes.Distribution, *svcsdk.GetDistributionOutput) (bool, error)
	preCreate      func(context.Context, *svcapitypes.Distribution, *svcsdk.CreateDistributionInput) error
	postCreate     func(context.Context, *svcapitypes.Distribution, *svcsdk.CreateDistributionOutput, managed.ExternalCreation, error) (managed.ExternalCreation, error)
	preDelete      func(context.Context, *svcapitypes.Distribution, *svcsdk.DeleteDistributionInput) (bool, error)
	postDelete     func(context.Context, *svcapitypes.Distribution, *svcsdk.DeleteDistributionOutput, error) error
	preUpdate      func(context.Context, *svcapitypes.Distribution, *svcsdk.UpdateDistributionInput) error
	postUpdate     func(context.Context, *svcapitypes.Distribution, *svcsdk.UpdateDistributionOutput, managed.ExternalUpdate, error) (managed.ExternalUpdate, error)
}

func nopPreObserve(context.Context, *svcapitypes.Distribution, *svcsdk.GetDistributionInput) error {
	return nil
}

func nopPostObserve(_ context.Context, _ *svcapitypes.Distribution, _ *svcsdk.GetDistributionOutput, obs managed.ExternalObservation, err error) (managed.ExternalObservation, error) {
	return obs, err
}
func nopLateInitialize(*svcapitypes.DistributionParameters, *svcsdk.GetDistributionOutput) error {
	return nil
}
func alwaysUpToDate(*svcapitypes.Distribution, *svcsdk.GetDistributionOutput) (bool, error) {
	return true, nil
}

func nopPreCreate(context.Context, *svcapitypes.Distribution, *svcsdk.CreateDistributionInput) error {
	return nil
}
func nopPostCreate(_ context.Context, _ *svcapitypes.Distribution, _ *svcsdk.CreateDistributionOutput, cre managed.ExternalCreation, err error) (managed.ExternalCreation, error) {
	return cre, err
}
func nopPreDelete(context.Context, *svcapitypes.Distribution, *svcsdk.DeleteDistributionInput) (bool, error) {
	return false, nil
}
func nopPostDelete(_ context.Context, _ *svcapitypes.Distribution, _ *svcsdk.DeleteDistributionOutput, err error) error {
	return err
}
func nopPreUpdate(context.Context, *svcapitypes.Distribution, *svcsdk.UpdateDistributionInput) error {
	return nil
}
func nopPostUpdate(_ context.Context, _ *svcapitypes.Distribution, _ *svcsdk.UpdateDistributionOutput, upd managed.ExternalUpdate, err error) (managed.ExternalUpdate, error) {
	return upd, err
}
