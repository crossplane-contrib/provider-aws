/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package broker

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/mq"

	svcapitypes "github.com/crossplane/provider-aws/apis/mq/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeBrokerInput returns input for read
// operation.
func GenerateDescribeBrokerInput(cr *svcapitypes.Broker) *svcsdk.DescribeBrokerInput {
	res := &svcsdk.DescribeBrokerInput{}

	if cr.Status.AtProvider.BrokerID != nil {
		res.SetBrokerId(*cr.Status.AtProvider.BrokerID)
	}

	return res
}

// GenerateBroker returns the current state in the form of *svcapitypes.Broker.
func GenerateBroker(resp *svcsdk.DescribeBrokerResponse) *svcapitypes.Broker {
	cr := &svcapitypes.Broker{}

	if resp.BrokerArn != nil {
		cr.Status.AtProvider.BrokerARN = resp.BrokerArn
	} else {
		cr.Status.AtProvider.BrokerARN = nil
	}
	if resp.BrokerId != nil {
		cr.Status.AtProvider.BrokerID = resp.BrokerId
	} else {
		cr.Status.AtProvider.BrokerID = nil
	}

	return cr
}

// GenerateCreateBrokerRequest returns a create input.
func GenerateCreateBrokerRequest(cr *svcapitypes.Broker) *svcsdk.CreateBrokerRequest {
	res := &svcsdk.CreateBrokerRequest{}

	if cr.Spec.ForProvider.AuthenticationStrategy != nil {
		res.SetAuthenticationStrategy(*cr.Spec.ForProvider.AuthenticationStrategy)
	}
	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Spec.ForProvider.BrokerName != nil {
		res.SetBrokerName(*cr.Spec.ForProvider.BrokerName)
	}
	if cr.Spec.ForProvider.Configuration != nil {
		f3 := &svcsdk.ConfigurationId{}
		if cr.Spec.ForProvider.Configuration.ID != nil {
			f3.SetId(*cr.Spec.ForProvider.Configuration.ID)
		}
		if cr.Spec.ForProvider.Configuration.Revision != nil {
			f3.SetRevision(*cr.Spec.ForProvider.Configuration.Revision)
		}
		res.SetConfiguration(f3)
	}
	if cr.Spec.ForProvider.CreatorRequestID != nil {
		res.SetCreatorRequestId(*cr.Spec.ForProvider.CreatorRequestID)
	}
	if cr.Spec.ForProvider.DeploymentMode != nil {
		res.SetDeploymentMode(*cr.Spec.ForProvider.DeploymentMode)
	}
	if cr.Spec.ForProvider.EncryptionOptions != nil {
		f6 := &svcsdk.EncryptionOptions{}
		if cr.Spec.ForProvider.EncryptionOptions.KMSKeyID != nil {
			f6.SetKmsKeyId(*cr.Spec.ForProvider.EncryptionOptions.KMSKeyID)
		}
		if cr.Spec.ForProvider.EncryptionOptions.UseAWSOwnedKey != nil {
			f6.SetUseAwsOwnedKey(*cr.Spec.ForProvider.EncryptionOptions.UseAWSOwnedKey)
		}
		res.SetEncryptionOptions(f6)
	}
	if cr.Spec.ForProvider.EngineType != nil {
		res.SetEngineType(*cr.Spec.ForProvider.EngineType)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.HostInstanceType != nil {
		res.SetHostInstanceType(*cr.Spec.ForProvider.HostInstanceType)
	}
	if cr.Spec.ForProvider.LDAPServerMetadata != nil {
		f10 := &svcsdk.LdapServerMetadataInput{}
		if cr.Spec.ForProvider.LDAPServerMetadata.Hosts != nil {
			f10f0 := []*string{}
			for _, f10f0iter := range cr.Spec.ForProvider.LDAPServerMetadata.Hosts {
				var f10f0elem string
				f10f0elem = *f10f0iter
				f10f0 = append(f10f0, &f10f0elem)
			}
			f10.SetHosts(f10f0)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.RoleBase != nil {
			f10.SetRoleBase(*cr.Spec.ForProvider.LDAPServerMetadata.RoleBase)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.RoleName != nil {
			f10.SetRoleName(*cr.Spec.ForProvider.LDAPServerMetadata.RoleName)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.RoleSearchMatching != nil {
			f10.SetRoleSearchMatching(*cr.Spec.ForProvider.LDAPServerMetadata.RoleSearchMatching)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.RoleSearchSubtree != nil {
			f10.SetRoleSearchSubtree(*cr.Spec.ForProvider.LDAPServerMetadata.RoleSearchSubtree)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.ServiceAccountPassword != nil {
			f10.SetServiceAccountPassword(*cr.Spec.ForProvider.LDAPServerMetadata.ServiceAccountPassword)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.ServiceAccountUsername != nil {
			f10.SetServiceAccountUsername(*cr.Spec.ForProvider.LDAPServerMetadata.ServiceAccountUsername)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.UserBase != nil {
			f10.SetUserBase(*cr.Spec.ForProvider.LDAPServerMetadata.UserBase)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.UserRoleName != nil {
			f10.SetUserRoleName(*cr.Spec.ForProvider.LDAPServerMetadata.UserRoleName)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.UserSearchMatching != nil {
			f10.SetUserSearchMatching(*cr.Spec.ForProvider.LDAPServerMetadata.UserSearchMatching)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.UserSearchSubtree != nil {
			f10.SetUserSearchSubtree(*cr.Spec.ForProvider.LDAPServerMetadata.UserSearchSubtree)
		}
		res.SetLdapServerMetadata(f10)
	}
	if cr.Spec.ForProvider.Logs != nil {
		f11 := &svcsdk.Logs{}
		if cr.Spec.ForProvider.Logs.Audit != nil {
			f11.SetAudit(*cr.Spec.ForProvider.Logs.Audit)
		}
		if cr.Spec.ForProvider.Logs.General != nil {
			f11.SetGeneral(*cr.Spec.ForProvider.Logs.General)
		}
		res.SetLogs(f11)
	}
	if cr.Spec.ForProvider.MaintenanceWindowStartTime != nil {
		f12 := &svcsdk.WeeklyStartTime{}
		if cr.Spec.ForProvider.MaintenanceWindowStartTime.DayOfWeek != nil {
			f12.SetDayOfWeek(*cr.Spec.ForProvider.MaintenanceWindowStartTime.DayOfWeek)
		}
		if cr.Spec.ForProvider.MaintenanceWindowStartTime.TimeOfDay != nil {
			f12.SetTimeOfDay(*cr.Spec.ForProvider.MaintenanceWindowStartTime.TimeOfDay)
		}
		if cr.Spec.ForProvider.MaintenanceWindowStartTime.TimeZone != nil {
			f12.SetTimeZone(*cr.Spec.ForProvider.MaintenanceWindowStartTime.TimeZone)
		}
		res.SetMaintenanceWindowStartTime(f12)
	}
	if cr.Spec.ForProvider.PubliclyAccessible != nil {
		res.SetPubliclyAccessible(*cr.Spec.ForProvider.PubliclyAccessible)
	}
	if cr.Spec.ForProvider.SecurityGroups != nil {
		f14 := []*string{}
		for _, f14iter := range cr.Spec.ForProvider.SecurityGroups {
			var f14elem string
			f14elem = *f14iter
			f14 = append(f14, &f14elem)
		}
		res.SetSecurityGroups(f14)
	}
	if cr.Spec.ForProvider.StorageType != nil {
		res.SetStorageType(*cr.Spec.ForProvider.StorageType)
	}
	if cr.Spec.ForProvider.SubnetIDs != nil {
		f16 := []*string{}
		for _, f16iter := range cr.Spec.ForProvider.SubnetIDs {
			var f16elem string
			f16elem = *f16iter
			f16 = append(f16, &f16elem)
		}
		res.SetSubnetIds(f16)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f17 := map[string]*string{}
		for f17key, f17valiter := range cr.Spec.ForProvider.Tags {
			var f17val string
			f17val = *f17valiter
			f17[f17key] = &f17val
		}
		res.SetTags(f17)
	}
	if cr.Spec.ForProvider.Users != nil {
		f18 := []*svcsdk.User{}
		for _, f18iter := range cr.Spec.ForProvider.Users {
			f18elem := &svcsdk.User{}
			if f18iter.ConsoleAccess != nil {
				f18elem.SetConsoleAccess(*f18iter.ConsoleAccess)
			}
			if f18iter.Groups != nil {
				f18elemf1 := []*string{}
				for _, f18elemf1iter := range f18iter.Groups {
					var f18elemf1elem string
					f18elemf1elem = *f18elemf1iter
					f18elemf1 = append(f18elemf1, &f18elemf1elem)
				}
				f18elem.SetGroups(f18elemf1)
			}
			if f18iter.Password != nil {
				f18elem.SetPassword(*f18iter.Password)
			}
			if f18iter.Username != nil {
				f18elem.SetUsername(*f18iter.Username)
			}
			f18 = append(f18, f18elem)
		}
		res.SetUsers(f18)
	}

	return res
}

// GenerateUpdateBrokerRequest returns an update input.
func GenerateUpdateBrokerRequest(cr *svcapitypes.Broker) *svcsdk.UpdateBrokerRequest {
	res := &svcsdk.UpdateBrokerRequest{}

	if cr.Spec.ForProvider.AuthenticationStrategy != nil {
		res.SetAuthenticationStrategy(*cr.Spec.ForProvider.AuthenticationStrategy)
	}
	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Status.AtProvider.BrokerID != nil {
		res.SetBrokerId(*cr.Status.AtProvider.BrokerID)
	}
	if cr.Spec.ForProvider.Configuration != nil {
		f3 := &svcsdk.ConfigurationId{}
		if cr.Spec.ForProvider.Configuration.ID != nil {
			f3.SetId(*cr.Spec.ForProvider.Configuration.ID)
		}
		if cr.Spec.ForProvider.Configuration.Revision != nil {
			f3.SetRevision(*cr.Spec.ForProvider.Configuration.Revision)
		}
		res.SetConfiguration(f3)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.HostInstanceType != nil {
		res.SetHostInstanceType(*cr.Spec.ForProvider.HostInstanceType)
	}
	if cr.Spec.ForProvider.LDAPServerMetadata != nil {
		f6 := &svcsdk.LdapServerMetadataInput{}
		if cr.Spec.ForProvider.LDAPServerMetadata.Hosts != nil {
			f6f0 := []*string{}
			for _, f6f0iter := range cr.Spec.ForProvider.LDAPServerMetadata.Hosts {
				var f6f0elem string
				f6f0elem = *f6f0iter
				f6f0 = append(f6f0, &f6f0elem)
			}
			f6.SetHosts(f6f0)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.RoleBase != nil {
			f6.SetRoleBase(*cr.Spec.ForProvider.LDAPServerMetadata.RoleBase)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.RoleName != nil {
			f6.SetRoleName(*cr.Spec.ForProvider.LDAPServerMetadata.RoleName)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.RoleSearchMatching != nil {
			f6.SetRoleSearchMatching(*cr.Spec.ForProvider.LDAPServerMetadata.RoleSearchMatching)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.RoleSearchSubtree != nil {
			f6.SetRoleSearchSubtree(*cr.Spec.ForProvider.LDAPServerMetadata.RoleSearchSubtree)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.ServiceAccountPassword != nil {
			f6.SetServiceAccountPassword(*cr.Spec.ForProvider.LDAPServerMetadata.ServiceAccountPassword)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.ServiceAccountUsername != nil {
			f6.SetServiceAccountUsername(*cr.Spec.ForProvider.LDAPServerMetadata.ServiceAccountUsername)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.UserBase != nil {
			f6.SetUserBase(*cr.Spec.ForProvider.LDAPServerMetadata.UserBase)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.UserRoleName != nil {
			f6.SetUserRoleName(*cr.Spec.ForProvider.LDAPServerMetadata.UserRoleName)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.UserSearchMatching != nil {
			f6.SetUserSearchMatching(*cr.Spec.ForProvider.LDAPServerMetadata.UserSearchMatching)
		}
		if cr.Spec.ForProvider.LDAPServerMetadata.UserSearchSubtree != nil {
			f6.SetUserSearchSubtree(*cr.Spec.ForProvider.LDAPServerMetadata.UserSearchSubtree)
		}
		res.SetLdapServerMetadata(f6)
	}
	if cr.Spec.ForProvider.Logs != nil {
		f7 := &svcsdk.Logs{}
		if cr.Spec.ForProvider.Logs.Audit != nil {
			f7.SetAudit(*cr.Spec.ForProvider.Logs.Audit)
		}
		if cr.Spec.ForProvider.Logs.General != nil {
			f7.SetGeneral(*cr.Spec.ForProvider.Logs.General)
		}
		res.SetLogs(f7)
	}
	if cr.Spec.ForProvider.SecurityGroups != nil {
		f8 := []*string{}
		for _, f8iter := range cr.Spec.ForProvider.SecurityGroups {
			var f8elem string
			f8elem = *f8iter
			f8 = append(f8, &f8elem)
		}
		res.SetSecurityGroups(f8)
	}

	return res
}

// GenerateDeleteBrokerInput returns a deletion input.
func GenerateDeleteBrokerInput(cr *svcapitypes.Broker) *svcsdk.DeleteBrokerInput {
	res := &svcsdk.DeleteBrokerInput{}

	if cr.Status.AtProvider.BrokerID != nil {
		res.SetBrokerId(*cr.Status.AtProvider.BrokerID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
