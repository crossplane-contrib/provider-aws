/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package user

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/mq"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/mq/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeUserInput returns input for read
// operation.
func GenerateDescribeUserInput(cr *svcapitypes.User) *svcsdk.DescribeUserInput {
	res := &svcsdk.DescribeUserInput{}

	return res
}

// GenerateUser returns the current state in the form of *svcapitypes.User.
func GenerateUser(resp *svcsdk.DescribeUserResponse) *svcapitypes.User {
	cr := &svcapitypes.User{}

	if resp.ConsoleAccess != nil {
		cr.Spec.ForProvider.ConsoleAccess = resp.ConsoleAccess
	} else {
		cr.Spec.ForProvider.ConsoleAccess = nil
	}
	if resp.Groups != nil {
		f2 := []*string{}
		for _, f2iter := range resp.Groups {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		cr.Spec.ForProvider.Groups = f2
	} else {
		cr.Spec.ForProvider.Groups = nil
	}

	return cr
}

// GenerateCreateUserRequest returns a create input.
func GenerateCreateUserRequest(cr *svcapitypes.User) *svcsdk.CreateUserRequest {
	res := &svcsdk.CreateUserRequest{}

	if cr.Spec.ForProvider.ConsoleAccess != nil {
		res.SetConsoleAccess(*cr.Spec.ForProvider.ConsoleAccess)
	}
	if cr.Spec.ForProvider.Groups != nil {
		f1 := []*string{}
		for _, f1iter := range cr.Spec.ForProvider.Groups {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetGroups(f1)
	}

	return res
}

// GenerateUpdateUserRequest returns an update input.
func GenerateUpdateUserRequest(cr *svcapitypes.User) *svcsdk.UpdateUserRequest {
	res := &svcsdk.UpdateUserRequest{}

	if cr.Spec.ForProvider.ConsoleAccess != nil {
		res.SetConsoleAccess(*cr.Spec.ForProvider.ConsoleAccess)
	}
	if cr.Spec.ForProvider.Groups != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.Groups {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetGroups(f2)
	}

	return res
}

// GenerateDeleteUserInput returns a deletion input.
func GenerateDeleteUserInput(cr *svcapitypes.User) *svcsdk.DeleteUserInput {
	res := &svcsdk.DeleteUserInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
