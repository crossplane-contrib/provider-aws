/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package storagelensgroup

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/s3control"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/s3control/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetStorageLensGroupInput returns input for read
// operation.
func GenerateGetStorageLensGroupInput(cr *svcapitypes.StorageLensGroup) *svcsdk.GetStorageLensGroupInput {
	res := &svcsdk.GetStorageLensGroupInput{}

	if cr.Spec.ForProvider.AccountID != nil {
		res.SetAccountId(*cr.Spec.ForProvider.AccountID)
	}

	return res
}

// GenerateStorageLensGroup returns the current state in the form of *svcapitypes.StorageLensGroup.
func GenerateStorageLensGroup(resp *svcsdk.GetStorageLensGroupOutput) *svcapitypes.StorageLensGroup {
	cr := &svcapitypes.StorageLensGroup{}

	return cr
}

// GenerateCreateStorageLensGroupInput returns a create input.
func GenerateCreateStorageLensGroupInput(cr *svcapitypes.StorageLensGroup) *svcsdk.CreateStorageLensGroupInput {
	res := &svcsdk.CreateStorageLensGroupInput{}

	if cr.Spec.ForProvider.AccountID != nil {
		res.SetAccountId(*cr.Spec.ForProvider.AccountID)
	}
	if cr.Spec.ForProvider.StorageLensGroup != nil {
		f1 := &svcsdk.StorageLensGroup{}
		if cr.Spec.ForProvider.StorageLensGroup.Filter != nil {
			f1f0 := &svcsdk.StorageLensGroupFilter{}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.And != nil {
				f1f0f0 := &svcsdk.StorageLensGroupAndOperator{}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnyPrefix != nil {
					f1f0f0f0 := []*string{}
					for _, f1f0f0f0iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnyPrefix {
						var f1f0f0f0elem string
						f1f0f0f0elem = *f1f0f0f0iter
						f1f0f0f0 = append(f1f0f0f0, &f1f0f0f0elem)
					}
					f1f0f0.SetMatchAnyPrefix(f1f0f0f0)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnySuffix != nil {
					f1f0f0f1 := []*string{}
					for _, f1f0f0f1iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnySuffix {
						var f1f0f0f1elem string
						f1f0f0f1elem = *f1f0f0f1iter
						f1f0f0f1 = append(f1f0f0f1, &f1f0f0f1elem)
					}
					f1f0f0.SetMatchAnySuffix(f1f0f0f1)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnyTag != nil {
					f1f0f0f2 := []*svcsdk.S3Tag{}
					for _, f1f0f0f2iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnyTag {
						f1f0f0f2elem := &svcsdk.S3Tag{}
						if f1f0f0f2iter.Key != nil {
							f1f0f0f2elem.SetKey(*f1f0f0f2iter.Key)
						}
						if f1f0f0f2iter.Value != nil {
							f1f0f0f2elem.SetValue(*f1f0f0f2iter.Value)
						}
						f1f0f0f2 = append(f1f0f0f2, f1f0f0f2elem)
					}
					f1f0f0.SetMatchAnyTag(f1f0f0f2)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge != nil {
					f1f0f0f3 := &svcsdk.MatchObjectAge{}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge.DaysGreaterThan != nil {
						f1f0f0f3.SetDaysGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge.DaysGreaterThan)
					}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge.DaysLessThan != nil {
						f1f0f0f3.SetDaysLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge.DaysLessThan)
					}
					f1f0f0.SetMatchObjectAge(f1f0f0f3)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize != nil {
					f1f0f0f4 := &svcsdk.MatchObjectSize{}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize.BytesGreaterThan != nil {
						f1f0f0f4.SetBytesGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize.BytesGreaterThan)
					}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize.BytesLessThan != nil {
						f1f0f0f4.SetBytesLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize.BytesLessThan)
					}
					f1f0f0.SetMatchObjectSize(f1f0f0f4)
				}
				f1f0.SetAnd(f1f0f0)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnyPrefix != nil {
				f1f0f1 := []*string{}
				for _, f1f0f1iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnyPrefix {
					var f1f0f1elem string
					f1f0f1elem = *f1f0f1iter
					f1f0f1 = append(f1f0f1, &f1f0f1elem)
				}
				f1f0.SetMatchAnyPrefix(f1f0f1)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnySuffix != nil {
				f1f0f2 := []*string{}
				for _, f1f0f2iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnySuffix {
					var f1f0f2elem string
					f1f0f2elem = *f1f0f2iter
					f1f0f2 = append(f1f0f2, &f1f0f2elem)
				}
				f1f0.SetMatchAnySuffix(f1f0f2)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnyTag != nil {
				f1f0f3 := []*svcsdk.S3Tag{}
				for _, f1f0f3iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnyTag {
					f1f0f3elem := &svcsdk.S3Tag{}
					if f1f0f3iter.Key != nil {
						f1f0f3elem.SetKey(*f1f0f3iter.Key)
					}
					if f1f0f3iter.Value != nil {
						f1f0f3elem.SetValue(*f1f0f3iter.Value)
					}
					f1f0f3 = append(f1f0f3, f1f0f3elem)
				}
				f1f0.SetMatchAnyTag(f1f0f3)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge != nil {
				f1f0f4 := &svcsdk.MatchObjectAge{}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge.DaysGreaterThan != nil {
					f1f0f4.SetDaysGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge.DaysGreaterThan)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge.DaysLessThan != nil {
					f1f0f4.SetDaysLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge.DaysLessThan)
				}
				f1f0.SetMatchObjectAge(f1f0f4)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize != nil {
				f1f0f5 := &svcsdk.MatchObjectSize{}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize.BytesGreaterThan != nil {
					f1f0f5.SetBytesGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize.BytesGreaterThan)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize.BytesLessThan != nil {
					f1f0f5.SetBytesLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize.BytesLessThan)
				}
				f1f0.SetMatchObjectSize(f1f0f5)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.Or != nil {
				f1f0f6 := &svcsdk.StorageLensGroupOrOperator{}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnyPrefix != nil {
					f1f0f6f0 := []*string{}
					for _, f1f0f6f0iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnyPrefix {
						var f1f0f6f0elem string
						f1f0f6f0elem = *f1f0f6f0iter
						f1f0f6f0 = append(f1f0f6f0, &f1f0f6f0elem)
					}
					f1f0f6.SetMatchAnyPrefix(f1f0f6f0)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnySuffix != nil {
					f1f0f6f1 := []*string{}
					for _, f1f0f6f1iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnySuffix {
						var f1f0f6f1elem string
						f1f0f6f1elem = *f1f0f6f1iter
						f1f0f6f1 = append(f1f0f6f1, &f1f0f6f1elem)
					}
					f1f0f6.SetMatchAnySuffix(f1f0f6f1)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnyTag != nil {
					f1f0f6f2 := []*svcsdk.S3Tag{}
					for _, f1f0f6f2iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnyTag {
						f1f0f6f2elem := &svcsdk.S3Tag{}
						if f1f0f6f2iter.Key != nil {
							f1f0f6f2elem.SetKey(*f1f0f6f2iter.Key)
						}
						if f1f0f6f2iter.Value != nil {
							f1f0f6f2elem.SetValue(*f1f0f6f2iter.Value)
						}
						f1f0f6f2 = append(f1f0f6f2, f1f0f6f2elem)
					}
					f1f0f6.SetMatchAnyTag(f1f0f6f2)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge != nil {
					f1f0f6f3 := &svcsdk.MatchObjectAge{}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge.DaysGreaterThan != nil {
						f1f0f6f3.SetDaysGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge.DaysGreaterThan)
					}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge.DaysLessThan != nil {
						f1f0f6f3.SetDaysLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge.DaysLessThan)
					}
					f1f0f6.SetMatchObjectAge(f1f0f6f3)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize != nil {
					f1f0f6f4 := &svcsdk.MatchObjectSize{}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize.BytesGreaterThan != nil {
						f1f0f6f4.SetBytesGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize.BytesGreaterThan)
					}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize.BytesLessThan != nil {
						f1f0f6f4.SetBytesLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize.BytesLessThan)
					}
					f1f0f6.SetMatchObjectSize(f1f0f6f4)
				}
				f1f0.SetOr(f1f0f6)
			}
			f1.SetFilter(f1f0)
		}
		if cr.Spec.ForProvider.StorageLensGroup.Name != nil {
			f1.SetName(*cr.Spec.ForProvider.StorageLensGroup.Name)
		}
		if cr.Spec.ForProvider.StorageLensGroup.StorageLensGroupARN != nil {
			f1.SetStorageLensGroupArn(*cr.Spec.ForProvider.StorageLensGroup.StorageLensGroupARN)
		}
		res.SetStorageLensGroup(f1)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f2 := []*svcsdk.Tag{}
		for _, f2iter := range cr.Spec.ForProvider.Tags {
			f2elem := &svcsdk.Tag{}
			if f2iter.Key != nil {
				f2elem.SetKey(*f2iter.Key)
			}
			if f2iter.Value != nil {
				f2elem.SetValue(*f2iter.Value)
			}
			f2 = append(f2, f2elem)
		}
		res.SetTags(f2)
	}

	return res
}

// GenerateUpdateStorageLensGroupInput returns an update input.
func GenerateUpdateStorageLensGroupInput(cr *svcapitypes.StorageLensGroup) *svcsdk.UpdateStorageLensGroupInput {
	res := &svcsdk.UpdateStorageLensGroupInput{}

	if cr.Spec.ForProvider.AccountID != nil {
		res.SetAccountId(*cr.Spec.ForProvider.AccountID)
	}
	if cr.Spec.ForProvider.StorageLensGroup != nil {
		f2 := &svcsdk.StorageLensGroup{}
		if cr.Spec.ForProvider.StorageLensGroup.Filter != nil {
			f2f0 := &svcsdk.StorageLensGroupFilter{}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.And != nil {
				f2f0f0 := &svcsdk.StorageLensGroupAndOperator{}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnyPrefix != nil {
					f2f0f0f0 := []*string{}
					for _, f2f0f0f0iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnyPrefix {
						var f2f0f0f0elem string
						f2f0f0f0elem = *f2f0f0f0iter
						f2f0f0f0 = append(f2f0f0f0, &f2f0f0f0elem)
					}
					f2f0f0.SetMatchAnyPrefix(f2f0f0f0)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnySuffix != nil {
					f2f0f0f1 := []*string{}
					for _, f2f0f0f1iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnySuffix {
						var f2f0f0f1elem string
						f2f0f0f1elem = *f2f0f0f1iter
						f2f0f0f1 = append(f2f0f0f1, &f2f0f0f1elem)
					}
					f2f0f0.SetMatchAnySuffix(f2f0f0f1)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnyTag != nil {
					f2f0f0f2 := []*svcsdk.S3Tag{}
					for _, f2f0f0f2iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchAnyTag {
						f2f0f0f2elem := &svcsdk.S3Tag{}
						if f2f0f0f2iter.Key != nil {
							f2f0f0f2elem.SetKey(*f2f0f0f2iter.Key)
						}
						if f2f0f0f2iter.Value != nil {
							f2f0f0f2elem.SetValue(*f2f0f0f2iter.Value)
						}
						f2f0f0f2 = append(f2f0f0f2, f2f0f0f2elem)
					}
					f2f0f0.SetMatchAnyTag(f2f0f0f2)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge != nil {
					f2f0f0f3 := &svcsdk.MatchObjectAge{}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge.DaysGreaterThan != nil {
						f2f0f0f3.SetDaysGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge.DaysGreaterThan)
					}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge.DaysLessThan != nil {
						f2f0f0f3.SetDaysLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectAge.DaysLessThan)
					}
					f2f0f0.SetMatchObjectAge(f2f0f0f3)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize != nil {
					f2f0f0f4 := &svcsdk.MatchObjectSize{}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize.BytesGreaterThan != nil {
						f2f0f0f4.SetBytesGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize.BytesGreaterThan)
					}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize.BytesLessThan != nil {
						f2f0f0f4.SetBytesLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.And.MatchObjectSize.BytesLessThan)
					}
					f2f0f0.SetMatchObjectSize(f2f0f0f4)
				}
				f2f0.SetAnd(f2f0f0)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnyPrefix != nil {
				f2f0f1 := []*string{}
				for _, f2f0f1iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnyPrefix {
					var f2f0f1elem string
					f2f0f1elem = *f2f0f1iter
					f2f0f1 = append(f2f0f1, &f2f0f1elem)
				}
				f2f0.SetMatchAnyPrefix(f2f0f1)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnySuffix != nil {
				f2f0f2 := []*string{}
				for _, f2f0f2iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnySuffix {
					var f2f0f2elem string
					f2f0f2elem = *f2f0f2iter
					f2f0f2 = append(f2f0f2, &f2f0f2elem)
				}
				f2f0.SetMatchAnySuffix(f2f0f2)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnyTag != nil {
				f2f0f3 := []*svcsdk.S3Tag{}
				for _, f2f0f3iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.MatchAnyTag {
					f2f0f3elem := &svcsdk.S3Tag{}
					if f2f0f3iter.Key != nil {
						f2f0f3elem.SetKey(*f2f0f3iter.Key)
					}
					if f2f0f3iter.Value != nil {
						f2f0f3elem.SetValue(*f2f0f3iter.Value)
					}
					f2f0f3 = append(f2f0f3, f2f0f3elem)
				}
				f2f0.SetMatchAnyTag(f2f0f3)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge != nil {
				f2f0f4 := &svcsdk.MatchObjectAge{}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge.DaysGreaterThan != nil {
					f2f0f4.SetDaysGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge.DaysGreaterThan)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge.DaysLessThan != nil {
					f2f0f4.SetDaysLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectAge.DaysLessThan)
				}
				f2f0.SetMatchObjectAge(f2f0f4)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize != nil {
				f2f0f5 := &svcsdk.MatchObjectSize{}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize.BytesGreaterThan != nil {
					f2f0f5.SetBytesGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize.BytesGreaterThan)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize.BytesLessThan != nil {
					f2f0f5.SetBytesLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.MatchObjectSize.BytesLessThan)
				}
				f2f0.SetMatchObjectSize(f2f0f5)
			}
			if cr.Spec.ForProvider.StorageLensGroup.Filter.Or != nil {
				f2f0f6 := &svcsdk.StorageLensGroupOrOperator{}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnyPrefix != nil {
					f2f0f6f0 := []*string{}
					for _, f2f0f6f0iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnyPrefix {
						var f2f0f6f0elem string
						f2f0f6f0elem = *f2f0f6f0iter
						f2f0f6f0 = append(f2f0f6f0, &f2f0f6f0elem)
					}
					f2f0f6.SetMatchAnyPrefix(f2f0f6f0)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnySuffix != nil {
					f2f0f6f1 := []*string{}
					for _, f2f0f6f1iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnySuffix {
						var f2f0f6f1elem string
						f2f0f6f1elem = *f2f0f6f1iter
						f2f0f6f1 = append(f2f0f6f1, &f2f0f6f1elem)
					}
					f2f0f6.SetMatchAnySuffix(f2f0f6f1)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnyTag != nil {
					f2f0f6f2 := []*svcsdk.S3Tag{}
					for _, f2f0f6f2iter := range cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchAnyTag {
						f2f0f6f2elem := &svcsdk.S3Tag{}
						if f2f0f6f2iter.Key != nil {
							f2f0f6f2elem.SetKey(*f2f0f6f2iter.Key)
						}
						if f2f0f6f2iter.Value != nil {
							f2f0f6f2elem.SetValue(*f2f0f6f2iter.Value)
						}
						f2f0f6f2 = append(f2f0f6f2, f2f0f6f2elem)
					}
					f2f0f6.SetMatchAnyTag(f2f0f6f2)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge != nil {
					f2f0f6f3 := &svcsdk.MatchObjectAge{}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge.DaysGreaterThan != nil {
						f2f0f6f3.SetDaysGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge.DaysGreaterThan)
					}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge.DaysLessThan != nil {
						f2f0f6f3.SetDaysLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectAge.DaysLessThan)
					}
					f2f0f6.SetMatchObjectAge(f2f0f6f3)
				}
				if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize != nil {
					f2f0f6f4 := &svcsdk.MatchObjectSize{}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize.BytesGreaterThan != nil {
						f2f0f6f4.SetBytesGreaterThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize.BytesGreaterThan)
					}
					if cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize.BytesLessThan != nil {
						f2f0f6f4.SetBytesLessThan(*cr.Spec.ForProvider.StorageLensGroup.Filter.Or.MatchObjectSize.BytesLessThan)
					}
					f2f0f6.SetMatchObjectSize(f2f0f6f4)
				}
				f2f0.SetOr(f2f0f6)
			}
			f2.SetFilter(f2f0)
		}
		if cr.Spec.ForProvider.StorageLensGroup.Name != nil {
			f2.SetName(*cr.Spec.ForProvider.StorageLensGroup.Name)
		}
		if cr.Spec.ForProvider.StorageLensGroup.StorageLensGroupARN != nil {
			f2.SetStorageLensGroupArn(*cr.Spec.ForProvider.StorageLensGroup.StorageLensGroupARN)
		}
		res.SetStorageLensGroup(f2)
	}

	return res
}

// GenerateDeleteStorageLensGroupInput returns a deletion input.
func GenerateDeleteStorageLensGroupInput(cr *svcapitypes.StorageLensGroup) *svcsdk.DeleteStorageLensGroupInput {
	res := &svcsdk.DeleteStorageLensGroupInput{}

	if cr.Spec.ForProvider.AccountID != nil {
		res.SetAccountId(*cr.Spec.ForProvider.AccountID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
