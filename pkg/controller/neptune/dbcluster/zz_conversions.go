/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package dbcluster

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/neptune"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/neptune/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeDBClustersInput returns input for read
// operation.
func GenerateDescribeDBClustersInput(cr *svcapitypes.DBCluster) *svcsdk.DescribeDBClustersInput {
	res := &svcsdk.DescribeDBClustersInput{}

	if cr.Status.AtProvider.DBClusterIdentifier != nil {
		res.SetDBClusterIdentifier(*cr.Status.AtProvider.DBClusterIdentifier)
	}

	return res
}

// GenerateDBCluster returns the current state in the form of *svcapitypes.DBCluster.
func GenerateDBCluster(resp *svcsdk.DescribeDBClustersOutput) *svcapitypes.DBCluster {
	cr := &svcapitypes.DBCluster{}

	found := false
	for _, elem := range resp.DBClusters {
		if elem.AllocatedStorage != nil {
			cr.Status.AtProvider.AllocatedStorage = elem.AllocatedStorage
		} else {
			cr.Status.AtProvider.AllocatedStorage = nil
		}
		if elem.AssociatedRoles != nil {
			f1 := []*svcapitypes.DBClusterRole{}
			for _, f1iter := range elem.AssociatedRoles {
				f1elem := &svcapitypes.DBClusterRole{}
				if f1iter.FeatureName != nil {
					f1elem.FeatureName = f1iter.FeatureName
				}
				if f1iter.RoleArn != nil {
					f1elem.RoleARN = f1iter.RoleArn
				}
				if f1iter.Status != nil {
					f1elem.Status = f1iter.Status
				}
				f1 = append(f1, f1elem)
			}
			cr.Status.AtProvider.AssociatedRoles = f1
		} else {
			cr.Status.AtProvider.AssociatedRoles = nil
		}
		if elem.AutomaticRestartTime != nil {
			cr.Status.AtProvider.AutomaticRestartTime = &metav1.Time{*elem.AutomaticRestartTime}
		} else {
			cr.Status.AtProvider.AutomaticRestartTime = nil
		}
		if elem.AvailabilityZones != nil {
			f3 := []*string{}
			for _, f3iter := range elem.AvailabilityZones {
				var f3elem string
				f3elem = *f3iter
				f3 = append(f3, &f3elem)
			}
			cr.Spec.ForProvider.AvailabilityZones = f3
		} else {
			cr.Spec.ForProvider.AvailabilityZones = nil
		}
		if elem.BackupRetentionPeriod != nil {
			cr.Spec.ForProvider.BackupRetentionPeriod = elem.BackupRetentionPeriod
		} else {
			cr.Spec.ForProvider.BackupRetentionPeriod = nil
		}
		if elem.CharacterSetName != nil {
			cr.Spec.ForProvider.CharacterSetName = elem.CharacterSetName
		} else {
			cr.Spec.ForProvider.CharacterSetName = nil
		}
		if elem.CloneGroupId != nil {
			cr.Status.AtProvider.CloneGroupID = elem.CloneGroupId
		} else {
			cr.Status.AtProvider.CloneGroupID = nil
		}
		if elem.ClusterCreateTime != nil {
			cr.Status.AtProvider.ClusterCreateTime = &metav1.Time{*elem.ClusterCreateTime}
		} else {
			cr.Status.AtProvider.ClusterCreateTime = nil
		}
		if elem.CopyTagsToSnapshot != nil {
			cr.Spec.ForProvider.CopyTagsToSnapshot = elem.CopyTagsToSnapshot
		} else {
			cr.Spec.ForProvider.CopyTagsToSnapshot = nil
		}
		if elem.CrossAccountClone != nil {
			cr.Status.AtProvider.CrossAccountClone = elem.CrossAccountClone
		} else {
			cr.Status.AtProvider.CrossAccountClone = nil
		}
		if elem.DBClusterArn != nil {
			cr.Status.AtProvider.DBClusterARN = elem.DBClusterArn
		} else {
			cr.Status.AtProvider.DBClusterARN = nil
		}
		if elem.DBClusterIdentifier != nil {
			cr.Status.AtProvider.DBClusterIdentifier = elem.DBClusterIdentifier
		} else {
			cr.Status.AtProvider.DBClusterIdentifier = nil
		}
		if elem.DBClusterMembers != nil {
			f12 := []*svcapitypes.DBClusterMember{}
			for _, f12iter := range elem.DBClusterMembers {
				f12elem := &svcapitypes.DBClusterMember{}
				if f12iter.DBClusterParameterGroupStatus != nil {
					f12elem.DBClusterParameterGroupStatus = f12iter.DBClusterParameterGroupStatus
				}
				if f12iter.DBInstanceIdentifier != nil {
					f12elem.DBInstanceIdentifier = f12iter.DBInstanceIdentifier
				}
				if f12iter.IsClusterWriter != nil {
					f12elem.IsClusterWriter = f12iter.IsClusterWriter
				}
				if f12iter.PromotionTier != nil {
					f12elem.PromotionTier = f12iter.PromotionTier
				}
				f12 = append(f12, f12elem)
			}
			cr.Status.AtProvider.DBClusterMembers = f12
		} else {
			cr.Status.AtProvider.DBClusterMembers = nil
		}
		if elem.DBClusterOptionGroupMemberships != nil {
			f13 := []*svcapitypes.DBClusterOptionGroupStatus{}
			for _, f13iter := range elem.DBClusterOptionGroupMemberships {
				f13elem := &svcapitypes.DBClusterOptionGroupStatus{}
				if f13iter.DBClusterOptionGroupName != nil {
					f13elem.DBClusterOptionGroupName = f13iter.DBClusterOptionGroupName
				}
				if f13iter.Status != nil {
					f13elem.Status = f13iter.Status
				}
				f13 = append(f13, f13elem)
			}
			cr.Status.AtProvider.DBClusterOptionGroupMemberships = f13
		} else {
			cr.Status.AtProvider.DBClusterOptionGroupMemberships = nil
		}
		if elem.DBClusterParameterGroup != nil {
			cr.Status.AtProvider.DBClusterParameterGroup = elem.DBClusterParameterGroup
		} else {
			cr.Status.AtProvider.DBClusterParameterGroup = nil
		}
		if elem.DBSubnetGroup != nil {
			cr.Status.AtProvider.DBSubnetGroup = elem.DBSubnetGroup
		} else {
			cr.Status.AtProvider.DBSubnetGroup = nil
		}
		if elem.DatabaseName != nil {
			cr.Spec.ForProvider.DatabaseName = elem.DatabaseName
		} else {
			cr.Spec.ForProvider.DatabaseName = nil
		}
		if elem.DbClusterResourceId != nil {
			cr.Status.AtProvider.DBClusterResourceID = elem.DbClusterResourceId
		} else {
			cr.Status.AtProvider.DBClusterResourceID = nil
		}
		if elem.DeletionProtection != nil {
			cr.Spec.ForProvider.DeletionProtection = elem.DeletionProtection
		} else {
			cr.Spec.ForProvider.DeletionProtection = nil
		}
		if elem.EarliestRestorableTime != nil {
			cr.Status.AtProvider.EarliestRestorableTime = &metav1.Time{*elem.EarliestRestorableTime}
		} else {
			cr.Status.AtProvider.EarliestRestorableTime = nil
		}
		if elem.EnabledCloudwatchLogsExports != nil {
			f20 := []*string{}
			for _, f20iter := range elem.EnabledCloudwatchLogsExports {
				var f20elem string
				f20elem = *f20iter
				f20 = append(f20, &f20elem)
			}
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = f20
		} else {
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = nil
		}
		if elem.Endpoint != nil {
			cr.Status.AtProvider.Endpoint = elem.Endpoint
		} else {
			cr.Status.AtProvider.Endpoint = nil
		}
		if elem.Engine != nil {
			cr.Spec.ForProvider.Engine = elem.Engine
		} else {
			cr.Spec.ForProvider.Engine = nil
		}
		if elem.EngineVersion != nil {
			cr.Spec.ForProvider.EngineVersion = elem.EngineVersion
		} else {
			cr.Spec.ForProvider.EngineVersion = nil
		}
		if elem.GlobalClusterIdentifier != nil {
			cr.Spec.ForProvider.GlobalClusterIdentifier = elem.GlobalClusterIdentifier
		} else {
			cr.Spec.ForProvider.GlobalClusterIdentifier = nil
		}
		if elem.HostedZoneId != nil {
			cr.Status.AtProvider.HostedZoneID = elem.HostedZoneId
		} else {
			cr.Status.AtProvider.HostedZoneID = nil
		}
		if elem.IAMDatabaseAuthenticationEnabled != nil {
			cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = elem.IAMDatabaseAuthenticationEnabled
		} else {
			cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = nil
		}
		if elem.IOOptimizedNextAllowedModificationTime != nil {
			cr.Status.AtProvider.IOOptimizedNextAllowedModificationTime = &metav1.Time{*elem.IOOptimizedNextAllowedModificationTime}
		} else {
			cr.Status.AtProvider.IOOptimizedNextAllowedModificationTime = nil
		}
		if elem.KmsKeyId != nil {
			cr.Spec.ForProvider.KMSKeyID = elem.KmsKeyId
		} else {
			cr.Spec.ForProvider.KMSKeyID = nil
		}
		if elem.LatestRestorableTime != nil {
			cr.Status.AtProvider.LatestRestorableTime = &metav1.Time{*elem.LatestRestorableTime}
		} else {
			cr.Status.AtProvider.LatestRestorableTime = nil
		}
		if elem.MasterUsername != nil {
			cr.Spec.ForProvider.MasterUsername = elem.MasterUsername
		} else {
			cr.Spec.ForProvider.MasterUsername = nil
		}
		if elem.MultiAZ != nil {
			cr.Status.AtProvider.MultiAZ = elem.MultiAZ
		} else {
			cr.Status.AtProvider.MultiAZ = nil
		}
		if elem.PendingModifiedValues != nil {
			f32 := &svcapitypes.ClusterPendingModifiedValues{}
			if elem.PendingModifiedValues.AllocatedStorage != nil {
				f32.AllocatedStorage = elem.PendingModifiedValues.AllocatedStorage
			}
			if elem.PendingModifiedValues.BackupRetentionPeriod != nil {
				f32.BackupRetentionPeriod = elem.PendingModifiedValues.BackupRetentionPeriod
			}
			if elem.PendingModifiedValues.DBClusterIdentifier != nil {
				f32.DBClusterIdentifier = elem.PendingModifiedValues.DBClusterIdentifier
			}
			if elem.PendingModifiedValues.EngineVersion != nil {
				f32.EngineVersion = elem.PendingModifiedValues.EngineVersion
			}
			if elem.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
				f32.IAMDatabaseAuthenticationEnabled = elem.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
			}
			if elem.PendingModifiedValues.Iops != nil {
				f32.IOPS = elem.PendingModifiedValues.Iops
			}
			if elem.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
				f32f6 := &svcapitypes.PendingCloudwatchLogsExports{}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
					f32f6f0 := []*string{}
					for _, f32f6f0iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
						var f32f6f0elem string
						f32f6f0elem = *f32f6f0iter
						f32f6f0 = append(f32f6f0, &f32f6f0elem)
					}
					f32f6.LogTypesToDisable = f32f6f0
				}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
					f32f6f1 := []*string{}
					for _, f32f6f1iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
						var f32f6f1elem string
						f32f6f1elem = *f32f6f1iter
						f32f6f1 = append(f32f6f1, &f32f6f1elem)
					}
					f32f6.LogTypesToEnable = f32f6f1
				}
				f32.PendingCloudwatchLogsExports = f32f6
			}
			if elem.PendingModifiedValues.StorageType != nil {
				f32.StorageType = elem.PendingModifiedValues.StorageType
			}
			cr.Status.AtProvider.PendingModifiedValues = f32
		} else {
			cr.Status.AtProvider.PendingModifiedValues = nil
		}
		if elem.PercentProgress != nil {
			cr.Status.AtProvider.PercentProgress = elem.PercentProgress
		} else {
			cr.Status.AtProvider.PercentProgress = nil
		}
		if elem.Port != nil {
			cr.Spec.ForProvider.Port = elem.Port
		} else {
			cr.Spec.ForProvider.Port = nil
		}
		if elem.PreferredBackupWindow != nil {
			cr.Spec.ForProvider.PreferredBackupWindow = elem.PreferredBackupWindow
		} else {
			cr.Spec.ForProvider.PreferredBackupWindow = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = nil
		}
		if elem.ReadReplicaIdentifiers != nil {
			f37 := []*string{}
			for _, f37iter := range elem.ReadReplicaIdentifiers {
				var f37elem string
				f37elem = *f37iter
				f37 = append(f37, &f37elem)
			}
			cr.Status.AtProvider.ReadReplicaIdentifiers = f37
		} else {
			cr.Status.AtProvider.ReadReplicaIdentifiers = nil
		}
		if elem.ReaderEndpoint != nil {
			cr.Status.AtProvider.ReaderEndpoint = elem.ReaderEndpoint
		} else {
			cr.Status.AtProvider.ReaderEndpoint = nil
		}
		if elem.ReplicationSourceIdentifier != nil {
			cr.Spec.ForProvider.ReplicationSourceIdentifier = elem.ReplicationSourceIdentifier
		} else {
			cr.Spec.ForProvider.ReplicationSourceIdentifier = nil
		}
		if elem.ServerlessV2ScalingConfiguration != nil {
			f40 := &svcapitypes.ServerlessV2ScalingConfiguration{}
			if elem.ServerlessV2ScalingConfiguration.MaxCapacity != nil {
				f40.MaxCapacity = elem.ServerlessV2ScalingConfiguration.MaxCapacity
			}
			if elem.ServerlessV2ScalingConfiguration.MinCapacity != nil {
				f40.MinCapacity = elem.ServerlessV2ScalingConfiguration.MinCapacity
			}
			cr.Spec.ForProvider.ServerlessV2ScalingConfiguration = f40
		} else {
			cr.Spec.ForProvider.ServerlessV2ScalingConfiguration = nil
		}
		if elem.Status != nil {
			cr.Status.AtProvider.Status = elem.Status
		} else {
			cr.Status.AtProvider.Status = nil
		}
		if elem.StorageEncrypted != nil {
			cr.Spec.ForProvider.StorageEncrypted = elem.StorageEncrypted
		} else {
			cr.Spec.ForProvider.StorageEncrypted = nil
		}
		if elem.StorageType != nil {
			cr.Spec.ForProvider.StorageType = elem.StorageType
		} else {
			cr.Spec.ForProvider.StorageType = nil
		}
		if elem.VpcSecurityGroups != nil {
			f44 := []*svcapitypes.VPCSecurityGroupMembership{}
			for _, f44iter := range elem.VpcSecurityGroups {
				f44elem := &svcapitypes.VPCSecurityGroupMembership{}
				if f44iter.Status != nil {
					f44elem.Status = f44iter.Status
				}
				if f44iter.VpcSecurityGroupId != nil {
					f44elem.VPCSecurityGroupID = f44iter.VpcSecurityGroupId
				}
				f44 = append(f44, f44elem)
			}
			cr.Status.AtProvider.VPCSecurityGroups = f44
		} else {
			cr.Status.AtProvider.VPCSecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateDBClusterInput returns a create input.
func GenerateCreateDBClusterInput(cr *svcapitypes.DBCluster) *svcsdk.CreateDBClusterInput {
	res := &svcsdk.CreateDBClusterInput{}

	if cr.Spec.ForProvider.AvailabilityZones != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.AvailabilityZones {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAvailabilityZones(f0)
	}
	if cr.Spec.ForProvider.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*cr.Spec.ForProvider.BackupRetentionPeriod)
	}
	if cr.Spec.ForProvider.CharacterSetName != nil {
		res.SetCharacterSetName(*cr.Spec.ForProvider.CharacterSetName)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBClusterParameterGroupName != nil {
		res.SetDBClusterParameterGroupName(*cr.Spec.ForProvider.DBClusterParameterGroupName)
	}
	if cr.Spec.ForProvider.DBSubnetGroupName != nil {
		res.SetDBSubnetGroupName(*cr.Spec.ForProvider.DBSubnetGroupName)
	}
	if cr.Spec.ForProvider.DatabaseName != nil {
		res.SetDatabaseName(*cr.Spec.ForProvider.DatabaseName)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.DestinationRegion != nil {
		res.SetDestinationRegion(*cr.Spec.ForProvider.DestinationRegion)
	}
	if cr.Spec.ForProvider.EnableCloudwatchLogsExports != nil {
		f9 := []*string{}
		for _, f9iter := range cr.Spec.ForProvider.EnableCloudwatchLogsExports {
			var f9elem string
			f9elem = *f9iter
			f9 = append(f9, &f9elem)
		}
		res.SetEnableCloudwatchLogsExports(f9)
	}
	if cr.Spec.ForProvider.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*cr.Spec.ForProvider.EnableIAMDatabaseAuthentication)
	}
	if cr.Spec.ForProvider.Engine != nil {
		res.SetEngine(*cr.Spec.ForProvider.Engine)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.GlobalClusterIdentifier != nil {
		res.SetGlobalClusterIdentifier(*cr.Spec.ForProvider.GlobalClusterIdentifier)
	}
	if cr.Spec.ForProvider.KMSKeyID != nil {
		res.SetKmsKeyId(*cr.Spec.ForProvider.KMSKeyID)
	}
	if cr.Spec.ForProvider.MasterUserPassword != nil {
		res.SetMasterUserPassword(*cr.Spec.ForProvider.MasterUserPassword)
	}
	if cr.Spec.ForProvider.MasterUsername != nil {
		res.SetMasterUsername(*cr.Spec.ForProvider.MasterUsername)
	}
	if cr.Spec.ForProvider.OptionGroupName != nil {
		res.SetOptionGroupName(*cr.Spec.ForProvider.OptionGroupName)
	}
	if cr.Spec.ForProvider.Port != nil {
		res.SetPort(*cr.Spec.ForProvider.Port)
	}
	if cr.Spec.ForProvider.PreSignedURL != nil {
		res.SetPreSignedUrl(*cr.Spec.ForProvider.PreSignedURL)
	}
	if cr.Spec.ForProvider.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*cr.Spec.ForProvider.PreferredBackupWindow)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.ReplicationSourceIdentifier != nil {
		res.SetReplicationSourceIdentifier(*cr.Spec.ForProvider.ReplicationSourceIdentifier)
	}
	if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration != nil {
		f23 := &svcsdk.ServerlessV2ScalingConfiguration{}
		if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MaxCapacity != nil {
			f23.SetMaxCapacity(*cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MaxCapacity)
		}
		if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MinCapacity != nil {
			f23.SetMinCapacity(*cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MinCapacity)
		}
		res.SetServerlessV2ScalingConfiguration(f23)
	}
	if cr.Spec.ForProvider.SourceRegion != nil {
		res.SetSourceRegion(*cr.Spec.ForProvider.SourceRegion)
	}
	if cr.Spec.ForProvider.StorageEncrypted != nil {
		res.SetStorageEncrypted(*cr.Spec.ForProvider.StorageEncrypted)
	}
	if cr.Spec.ForProvider.StorageType != nil {
		res.SetStorageType(*cr.Spec.ForProvider.StorageType)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f27 := []*svcsdk.Tag{}
		for _, f27iter := range cr.Spec.ForProvider.Tags {
			f27elem := &svcsdk.Tag{}
			if f27iter.Key != nil {
				f27elem.SetKey(*f27iter.Key)
			}
			if f27iter.Value != nil {
				f27elem.SetValue(*f27iter.Value)
			}
			f27 = append(f27, f27elem)
		}
		res.SetTags(f27)
	}
	if cr.Spec.ForProvider.VPCSecurityGroupIDs != nil {
		f28 := []*string{}
		for _, f28iter := range cr.Spec.ForProvider.VPCSecurityGroupIDs {
			var f28elem string
			f28elem = *f28iter
			f28 = append(f28, &f28elem)
		}
		res.SetVpcSecurityGroupIds(f28)
	}

	return res
}

// GenerateModifyDBClusterInput returns an update input.
func GenerateModifyDBClusterInput(cr *svcapitypes.DBCluster) *svcsdk.ModifyDBClusterInput {
	res := &svcsdk.ModifyDBClusterInput{}

	if cr.Spec.ForProvider.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*cr.Spec.ForProvider.BackupRetentionPeriod)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBClusterParameterGroupName != nil {
		res.SetDBClusterParameterGroupName(*cr.Spec.ForProvider.DBClusterParameterGroupName)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*cr.Spec.ForProvider.EnableIAMDatabaseAuthentication)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.MasterUserPassword != nil {
		res.SetMasterUserPassword(*cr.Spec.ForProvider.MasterUserPassword)
	}
	if cr.Spec.ForProvider.OptionGroupName != nil {
		res.SetOptionGroupName(*cr.Spec.ForProvider.OptionGroupName)
	}
	if cr.Spec.ForProvider.Port != nil {
		res.SetPort(*cr.Spec.ForProvider.Port)
	}
	if cr.Spec.ForProvider.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*cr.Spec.ForProvider.PreferredBackupWindow)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration != nil {
		f16 := &svcsdk.ServerlessV2ScalingConfiguration{}
		if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MaxCapacity != nil {
			f16.SetMaxCapacity(*cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MaxCapacity)
		}
		if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MinCapacity != nil {
			f16.SetMinCapacity(*cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MinCapacity)
		}
		res.SetServerlessV2ScalingConfiguration(f16)
	}
	if cr.Spec.ForProvider.StorageType != nil {
		res.SetStorageType(*cr.Spec.ForProvider.StorageType)
	}
	if cr.Spec.ForProvider.VPCSecurityGroupIDs != nil {
		f18 := []*string{}
		for _, f18iter := range cr.Spec.ForProvider.VPCSecurityGroupIDs {
			var f18elem string
			f18elem = *f18iter
			f18 = append(f18, &f18elem)
		}
		res.SetVpcSecurityGroupIds(f18)
	}

	return res
}

// GenerateDeleteDBClusterInput returns a deletion input.
func GenerateDeleteDBClusterInput(cr *svcapitypes.DBCluster) *svcsdk.DeleteDBClusterInput {
	res := &svcsdk.DeleteDBClusterInput{}

	if cr.Status.AtProvider.DBClusterIdentifier != nil {
		res.SetDBClusterIdentifier(*cr.Status.AtProvider.DBClusterIdentifier)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "DBClusterNotFoundFault"
}
