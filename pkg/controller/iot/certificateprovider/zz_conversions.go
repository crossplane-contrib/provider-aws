/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package certificateprovider

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/iot"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/iot/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeCertificateProviderInput returns input for read
// operation.
func GenerateDescribeCertificateProviderInput(cr *svcapitypes.CertificateProvider) *svcsdk.DescribeCertificateProviderInput {
	res := &svcsdk.DescribeCertificateProviderInput{}

	if cr.Spec.ForProvider.CertificateProviderName != nil {
		res.SetCertificateProviderName(*cr.Spec.ForProvider.CertificateProviderName)
	}

	return res
}

// GenerateCertificateProvider returns the current state in the form of *svcapitypes.CertificateProvider.
func GenerateCertificateProvider(resp *svcsdk.DescribeCertificateProviderOutput) *svcapitypes.CertificateProvider {
	cr := &svcapitypes.CertificateProvider{}

	if resp.AccountDefaultForOperations != nil {
		f0 := []*string{}
		for _, f0iter := range resp.AccountDefaultForOperations {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		cr.Spec.ForProvider.AccountDefaultForOperations = f0
	} else {
		cr.Spec.ForProvider.AccountDefaultForOperations = nil
	}
	if resp.CertificateProviderArn != nil {
		cr.Status.AtProvider.CertificateProviderARN = resp.CertificateProviderArn
	} else {
		cr.Status.AtProvider.CertificateProviderARN = nil
	}
	if resp.CertificateProviderName != nil {
		cr.Spec.ForProvider.CertificateProviderName = resp.CertificateProviderName
	} else {
		cr.Spec.ForProvider.CertificateProviderName = nil
	}
	if resp.LambdaFunctionArn != nil {
		cr.Spec.ForProvider.LambdaFunctionARN = resp.LambdaFunctionArn
	} else {
		cr.Spec.ForProvider.LambdaFunctionARN = nil
	}

	return cr
}

// GenerateCreateCertificateProviderInput returns a create input.
func GenerateCreateCertificateProviderInput(cr *svcapitypes.CertificateProvider) *svcsdk.CreateCertificateProviderInput {
	res := &svcsdk.CreateCertificateProviderInput{}

	if cr.Spec.ForProvider.AccountDefaultForOperations != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.AccountDefaultForOperations {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAccountDefaultForOperations(f0)
	}
	if cr.Spec.ForProvider.CertificateProviderName != nil {
		res.SetCertificateProviderName(*cr.Spec.ForProvider.CertificateProviderName)
	}
	if cr.Spec.ForProvider.ClientToken != nil {
		res.SetClientToken(*cr.Spec.ForProvider.ClientToken)
	}
	if cr.Spec.ForProvider.LambdaFunctionARN != nil {
		res.SetLambdaFunctionArn(*cr.Spec.ForProvider.LambdaFunctionARN)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range cr.Spec.ForProvider.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}

	return res
}

// GenerateUpdateCertificateProviderInput returns an update input.
func GenerateUpdateCertificateProviderInput(cr *svcapitypes.CertificateProvider) *svcsdk.UpdateCertificateProviderInput {
	res := &svcsdk.UpdateCertificateProviderInput{}

	if cr.Spec.ForProvider.AccountDefaultForOperations != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.AccountDefaultForOperations {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAccountDefaultForOperations(f0)
	}
	if cr.Spec.ForProvider.CertificateProviderName != nil {
		res.SetCertificateProviderName(*cr.Spec.ForProvider.CertificateProviderName)
	}
	if cr.Spec.ForProvider.LambdaFunctionARN != nil {
		res.SetLambdaFunctionArn(*cr.Spec.ForProvider.LambdaFunctionARN)
	}

	return res
}

// GenerateDeleteCertificateProviderInput returns a deletion input.
func GenerateDeleteCertificateProviderInput(cr *svcapitypes.CertificateProvider) *svcsdk.DeleteCertificateProviderInput {
	res := &svcsdk.DeleteCertificateProviderInput{}

	if cr.Spec.ForProvider.CertificateProviderName != nil {
		res.SetCertificateProviderName(*cr.Spec.ForProvider.CertificateProviderName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
