/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package thing

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/iot"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/iot/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeThingInput returns input for read
// operation.
func GenerateDescribeThingInput(cr *svcapitypes.Thing) *svcsdk.DescribeThingInput {
	res := &svcsdk.DescribeThingInput{}

	return res
}

// GenerateThing returns the current state in the form of *svcapitypes.Thing.
func GenerateThing(resp *svcsdk.DescribeThingOutput) *svcapitypes.Thing {
	cr := &svcapitypes.Thing{}

	if resp.BillingGroupName != nil {
		cr.Spec.ForProvider.BillingGroupName = resp.BillingGroupName
	} else {
		cr.Spec.ForProvider.BillingGroupName = nil
	}
	if resp.ThingArn != nil {
		cr.Status.AtProvider.ThingARN = resp.ThingArn
	} else {
		cr.Status.AtProvider.ThingARN = nil
	}
	if resp.ThingId != nil {
		cr.Status.AtProvider.ThingID = resp.ThingId
	} else {
		cr.Status.AtProvider.ThingID = nil
	}
	if resp.ThingTypeName != nil {
		cr.Spec.ForProvider.ThingTypeName = resp.ThingTypeName
	} else {
		cr.Spec.ForProvider.ThingTypeName = nil
	}

	return cr
}

// GenerateCreateThingInput returns a create input.
func GenerateCreateThingInput(cr *svcapitypes.Thing) *svcsdk.CreateThingInput {
	res := &svcsdk.CreateThingInput{}

	if cr.Spec.ForProvider.AttributePayload != nil {
		f0 := &svcsdk.AttributePayload{}
		if cr.Spec.ForProvider.AttributePayload.Attributes != nil {
			f0f0 := map[string]*string{}
			for f0f0key, f0f0valiter := range cr.Spec.ForProvider.AttributePayload.Attributes {
				var f0f0val string
				f0f0val = *f0f0valiter
				f0f0[f0f0key] = &f0f0val
			}
			f0.SetAttributes(f0f0)
		}
		if cr.Spec.ForProvider.AttributePayload.Merge != nil {
			f0.SetMerge(*cr.Spec.ForProvider.AttributePayload.Merge)
		}
		res.SetAttributePayload(f0)
	}
	if cr.Spec.ForProvider.BillingGroupName != nil {
		res.SetBillingGroupName(*cr.Spec.ForProvider.BillingGroupName)
	}
	if cr.Spec.ForProvider.ThingTypeName != nil {
		res.SetThingTypeName(*cr.Spec.ForProvider.ThingTypeName)
	}

	return res
}

// GenerateUpdateThingInput returns an update input.
func GenerateUpdateThingInput(cr *svcapitypes.Thing) *svcsdk.UpdateThingInput {
	res := &svcsdk.UpdateThingInput{}

	if cr.Spec.ForProvider.AttributePayload != nil {
		f0 := &svcsdk.AttributePayload{}
		if cr.Spec.ForProvider.AttributePayload.Attributes != nil {
			f0f0 := map[string]*string{}
			for f0f0key, f0f0valiter := range cr.Spec.ForProvider.AttributePayload.Attributes {
				var f0f0val string
				f0f0val = *f0f0valiter
				f0f0[f0f0key] = &f0f0val
			}
			f0.SetAttributes(f0f0)
		}
		if cr.Spec.ForProvider.AttributePayload.Merge != nil {
			f0.SetMerge(*cr.Spec.ForProvider.AttributePayload.Merge)
		}
		res.SetAttributePayload(f0)
	}
	if cr.Spec.ForProvider.ThingTypeName != nil {
		res.SetThingTypeName(*cr.Spec.ForProvider.ThingTypeName)
	}

	return res
}

// GenerateDeleteThingInput returns a deletion input.
func GenerateDeleteThingInput(cr *svcapitypes.Thing) *svcsdk.DeleteThingInput {
	res := &svcsdk.DeleteThingInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
