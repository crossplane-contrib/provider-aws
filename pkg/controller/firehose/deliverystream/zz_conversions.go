/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package deliverystream

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/firehose"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/firehose/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeDeliveryStreamInput returns input for read
// operation.
func GenerateDescribeDeliveryStreamInput(cr *svcapitypes.DeliveryStream) *svcsdk.DescribeDeliveryStreamInput {
	res := &svcsdk.DescribeDeliveryStreamInput{}

	if cr.Spec.ForProvider.DeliveryStreamName != nil {
		res.SetDeliveryStreamName(*cr.Spec.ForProvider.DeliveryStreamName)
	}

	return res
}

// GenerateDeliveryStream returns the current state in the form of *svcapitypes.DeliveryStream.
func GenerateDeliveryStream(resp *svcsdk.DescribeDeliveryStreamOutput) *svcapitypes.DeliveryStream {
	cr := &svcapitypes.DeliveryStream{}

	if resp.DeliveryStreamDescription.DeliveryStreamARN != nil {
		cr.Status.AtProvider.DeliveryStreamARN = resp.DeliveryStreamDescription.DeliveryStreamARN
	} else {
		cr.Status.AtProvider.DeliveryStreamARN = nil
	}
	if resp.DeliveryStreamDescription.DeliveryStreamName != nil {
		cr.Spec.ForProvider.DeliveryStreamName = resp.DeliveryStreamDescription.DeliveryStreamName
	} else {
		cr.Spec.ForProvider.DeliveryStreamName = nil
	}
	if resp.DeliveryStreamDescription.DeliveryStreamStatus != nil {
		cr.Status.AtProvider.DeliveryStreamStatus = resp.DeliveryStreamDescription.DeliveryStreamStatus
	} else {
		cr.Status.AtProvider.DeliveryStreamStatus = nil
	}
	if resp.DeliveryStreamDescription.DeliveryStreamType != nil {
		cr.Spec.ForProvider.DeliveryStreamType = resp.DeliveryStreamDescription.DeliveryStreamType
	} else {
		cr.Spec.ForProvider.DeliveryStreamType = nil
	}

	return cr
}

// GenerateCreateDeliveryStreamInput returns a create input.
func GenerateCreateDeliveryStreamInput(cr *svcapitypes.DeliveryStream) *svcsdk.CreateDeliveryStreamInput {
	res := &svcsdk.CreateDeliveryStreamInput{}

	if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration != nil {
		f0 := &svcsdk.AmazonOpenSearchServerlessDestinationConfiguration{}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints != nil {
			f0f0 := &svcsdk.AmazonOpenSearchServerlessBufferingHints{}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				f0f0.SetIntervalInSeconds(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.IntervalInSeconds)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				f0f0.SetSizeInMBs(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.BufferingHints.SizeInMBs)
			}
			f0.SetBufferingHints(f0f0)
		}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions != nil {
			f0f1 := &svcsdk.CloudWatchLoggingOptions{}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f0f1.SetEnabled(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f0f1.SetLogGroupName(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f0f1.SetLogStreamName(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			}
			f0.SetCloudWatchLoggingOptions(f0f1)
		}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint != nil {
			f0.SetCollectionEndpoint(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.CollectionEndpoint)
		}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.IndexName != nil {
			f0.SetIndexName(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.IndexName)
		}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration != nil {
			f0f4 := &svcsdk.ProcessingConfiguration{}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f0f4.SetEnabled(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f0f4f1 := []*svcsdk.Processor{}
				for _, f0f4f1iter := range cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.ProcessingConfiguration.Processors {
					f0f4f1elem := &svcsdk.Processor{}
					if f0f4f1iter.Parameters != nil {
						f0f4f1elemf0 := []*svcsdk.ProcessorParameter{}
						for _, f0f4f1elemf0iter := range f0f4f1iter.Parameters {
							f0f4f1elemf0elem := &svcsdk.ProcessorParameter{}
							if f0f4f1elemf0iter.ParameterName != nil {
								f0f4f1elemf0elem.SetParameterName(*f0f4f1elemf0iter.ParameterName)
							}
							if f0f4f1elemf0iter.ParameterValue != nil {
								f0f4f1elemf0elem.SetParameterValue(*f0f4f1elemf0iter.ParameterValue)
							}
							f0f4f1elemf0 = append(f0f4f1elemf0, f0f4f1elemf0elem)
						}
						f0f4f1elem.SetParameters(f0f4f1elemf0)
					}
					if f0f4f1iter.Type != nil {
						f0f4f1elem.SetType(*f0f4f1iter.Type)
					}
					f0f4f1 = append(f0f4f1, f0f4f1elem)
				}
				f0f4.SetProcessors(f0f4f1)
			}
			f0.SetProcessingConfiguration(f0f4)
		}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions != nil {
			f0f5 := &svcsdk.AmazonOpenSearchServerlessRetryOptions{}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				f0f5.SetDurationInSeconds(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.RetryOptions.DurationInSeconds)
			}
			f0.SetRetryOptions(f0f5)
		}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN != nil {
			f0.SetRoleARN(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.RoleARN)
		}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode != nil {
			f0.SetS3BackupMode(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3BackupMode)
		}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration != nil {
			f0f8 := &svcsdk.S3DestinationConfiguration{}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN != nil {
				f0f8.SetBucketARN(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BucketARN)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints != nil {
				f0f8f1 := &svcsdk.BufferingHints{}
				if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					f0f8f1.SetIntervalInSeconds(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				}
				if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					f0f8f1.SetSizeInMBs(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				}
				f0f8.SetBufferingHints(f0f8f1)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				f0f8f2 := &svcsdk.CloudWatchLoggingOptions{}
				if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					f0f8f2.SetEnabled(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				}
				if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					f0f8f2.SetLogGroupName(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				}
				if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					f0f8f2.SetLogStreamName(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				}
				f0f8.SetCloudWatchLoggingOptions(f0f8f2)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				f0f8.SetCompressionFormat(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.CompressionFormat)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				f0f8f4 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f0f8f4f0 := &svcsdk.KMSEncryptionConfig{}
					if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f0f8f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
					f0f8f4.SetKMSEncryptionConfig(f0f8f4f0)
				}
				if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f0f8f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f0f8.SetEncryptionConfiguration(f0f8f4)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				f0f8.SetErrorOutputPrefix(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix != nil {
				f0f8.SetPrefix(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.Prefix)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN != nil {
				f0f8.SetRoleARN(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.S3Configuration.RoleARN)
			}
			f0.SetS3Configuration(f0f8)
		}
		if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration != nil {
			f0f9 := &svcsdk.VpcConfiguration{}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN != nil {
				f0f9.SetRoleARN(*cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.RoleARN)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs != nil {
				f0f9f1 := []*string{}
				for _, f0f9f1iter := range cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SecurityGroupIDs {
					var f0f9f1elem string
					f0f9f1elem = *f0f9f1iter
					f0f9f1 = append(f0f9f1, &f0f9f1elem)
				}
				f0f9.SetSecurityGroupIds(f0f9f1)
			}
			if cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs != nil {
				f0f9f2 := []*string{}
				for _, f0f9f2iter := range cr.Spec.ForProvider.AmazonOpenSearchServerlessDestinationConfiguration.VPCConfiguration.SubnetIDs {
					var f0f9f2elem string
					f0f9f2elem = *f0f9f2iter
					f0f9f2 = append(f0f9f2, &f0f9f2elem)
				}
				f0f9.SetSubnetIds(f0f9f2)
			}
			f0.SetVpcConfiguration(f0f9)
		}
		res.SetAmazonOpenSearchServerlessDestinationConfiguration(f0)
	}
	if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration != nil {
		f1 := &svcsdk.AmazonopensearchserviceDestinationConfiguration{}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.BufferingHints != nil {
			f1f0 := &svcsdk.AmazonopensearchserviceBufferingHints{}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				f1f0.SetIntervalInSeconds(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.BufferingHints.IntervalInSeconds)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				f1f0.SetSizeInMBs(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.BufferingHints.SizeInMBs)
			}
			f1.SetBufferingHints(f1f0)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions != nil {
			f1f1 := &svcsdk.CloudWatchLoggingOptions{}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f1f1.SetEnabled(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f1f1.SetLogGroupName(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f1f1.SetLogStreamName(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			}
			f1.SetCloudWatchLoggingOptions(f1f1)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint != nil {
			f1.SetClusterEndpoint(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.ClusterEndpoint)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions != nil {
			f1f3 := &svcsdk.DocumentIdOptions{}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat != nil {
				f1f3.SetDefaultDocumentIdFormat(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat)
			}
			f1.SetDocumentIdOptions(f1f3)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.DomainARN != nil {
			f1.SetDomainARN(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.DomainARN)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.IndexName != nil {
			f1.SetIndexName(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.IndexName)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod != nil {
			f1.SetIndexRotationPeriod(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.IndexRotationPeriod)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration != nil {
			f1f7 := &svcsdk.ProcessingConfiguration{}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f1f7.SetEnabled(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f1f7f1 := []*svcsdk.Processor{}
				for _, f1f7f1iter := range cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.ProcessingConfiguration.Processors {
					f1f7f1elem := &svcsdk.Processor{}
					if f1f7f1iter.Parameters != nil {
						f1f7f1elemf0 := []*svcsdk.ProcessorParameter{}
						for _, f1f7f1elemf0iter := range f1f7f1iter.Parameters {
							f1f7f1elemf0elem := &svcsdk.ProcessorParameter{}
							if f1f7f1elemf0iter.ParameterName != nil {
								f1f7f1elemf0elem.SetParameterName(*f1f7f1elemf0iter.ParameterName)
							}
							if f1f7f1elemf0iter.ParameterValue != nil {
								f1f7f1elemf0elem.SetParameterValue(*f1f7f1elemf0iter.ParameterValue)
							}
							f1f7f1elemf0 = append(f1f7f1elemf0, f1f7f1elemf0elem)
						}
						f1f7f1elem.SetParameters(f1f7f1elemf0)
					}
					if f1f7f1iter.Type != nil {
						f1f7f1elem.SetType(*f1f7f1iter.Type)
					}
					f1f7f1 = append(f1f7f1, f1f7f1elem)
				}
				f1f7.SetProcessors(f1f7f1)
			}
			f1.SetProcessingConfiguration(f1f7)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.RetryOptions != nil {
			f1f8 := &svcsdk.AmazonopensearchserviceRetryOptions{}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				f1f8.SetDurationInSeconds(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.RetryOptions.DurationInSeconds)
			}
			f1.SetRetryOptions(f1f8)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.RoleARN != nil {
			f1.SetRoleARN(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.RoleARN)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3BackupMode != nil {
			f1.SetS3BackupMode(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3BackupMode)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration != nil {
			f1f11 := &svcsdk.S3DestinationConfiguration{}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN != nil {
				f1f11.SetBucketARN(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BucketARN)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints != nil {
				f1f11f1 := &svcsdk.BufferingHints{}
				if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					f1f11f1.SetIntervalInSeconds(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				}
				if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					f1f11f1.SetSizeInMBs(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				}
				f1f11.SetBufferingHints(f1f11f1)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				f1f11f2 := &svcsdk.CloudWatchLoggingOptions{}
				if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					f1f11f2.SetEnabled(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				}
				if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					f1f11f2.SetLogGroupName(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				}
				if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					f1f11f2.SetLogStreamName(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				}
				f1f11.SetCloudWatchLoggingOptions(f1f11f2)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				f1f11.SetCompressionFormat(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.CompressionFormat)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				f1f11f4 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f1f11f4f0 := &svcsdk.KMSEncryptionConfig{}
					if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f1f11f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
					f1f11f4.SetKMSEncryptionConfig(f1f11f4f0)
				}
				if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f1f11f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f1f11.SetEncryptionConfiguration(f1f11f4)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				f1f11.SetErrorOutputPrefix(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix != nil {
				f1f11.SetPrefix(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.Prefix)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN != nil {
				f1f11.SetRoleARN(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.S3Configuration.RoleARN)
			}
			f1.SetS3Configuration(f1f11)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.TypeName != nil {
			f1.SetTypeName(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.TypeName)
		}
		if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration != nil {
			f1f13 := &svcsdk.VpcConfiguration{}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN != nil {
				f1f13.SetRoleARN(*cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.RoleARN)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs != nil {
				f1f13f1 := []*string{}
				for _, f1f13f1iter := range cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SecurityGroupIDs {
					var f1f13f1elem string
					f1f13f1elem = *f1f13f1iter
					f1f13f1 = append(f1f13f1, &f1f13f1elem)
				}
				f1f13.SetSecurityGroupIds(f1f13f1)
			}
			if cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs != nil {
				f1f13f2 := []*string{}
				for _, f1f13f2iter := range cr.Spec.ForProvider.AmazonopensearchserviceDestinationConfiguration.VPCConfiguration.SubnetIDs {
					var f1f13f2elem string
					f1f13f2elem = *f1f13f2iter
					f1f13f2 = append(f1f13f2, &f1f13f2elem)
				}
				f1f13.SetSubnetIds(f1f13f2)
			}
			f1.SetVpcConfiguration(f1f13)
		}
		res.SetAmazonopensearchserviceDestinationConfiguration(f1)
	}
	if cr.Spec.ForProvider.DeliveryStreamEncryptionConfigurationInput != nil {
		f2 := &svcsdk.DeliveryStreamEncryptionConfigurationInput{}
		if cr.Spec.ForProvider.DeliveryStreamEncryptionConfigurationInput.KeyARN != nil {
			f2.SetKeyARN(*cr.Spec.ForProvider.DeliveryStreamEncryptionConfigurationInput.KeyARN)
		}
		if cr.Spec.ForProvider.DeliveryStreamEncryptionConfigurationInput.KeyType != nil {
			f2.SetKeyType(*cr.Spec.ForProvider.DeliveryStreamEncryptionConfigurationInput.KeyType)
		}
		res.SetDeliveryStreamEncryptionConfigurationInput(f2)
	}
	if cr.Spec.ForProvider.DeliveryStreamName != nil {
		res.SetDeliveryStreamName(*cr.Spec.ForProvider.DeliveryStreamName)
	}
	if cr.Spec.ForProvider.DeliveryStreamType != nil {
		res.SetDeliveryStreamType(*cr.Spec.ForProvider.DeliveryStreamType)
	}
	if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration != nil {
		f5 := &svcsdk.ElasticsearchDestinationConfiguration{}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.BufferingHints != nil {
			f5f0 := &svcsdk.ElasticsearchBufferingHints{}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				f5f0.SetIntervalInSeconds(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.BufferingHints.IntervalInSeconds)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				f5f0.SetSizeInMBs(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.BufferingHints.SizeInMBs)
			}
			f5.SetBufferingHints(f5f0)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions != nil {
			f5f1 := &svcsdk.CloudWatchLoggingOptions{}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f5f1.SetEnabled(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f5f1.SetLogGroupName(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f5f1.SetLogStreamName(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			}
			f5.SetCloudWatchLoggingOptions(f5f1)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.ClusterEndpoint != nil {
			f5.SetClusterEndpoint(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.ClusterEndpoint)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.DocumentIDOptions != nil {
			f5f3 := &svcsdk.DocumentIdOptions{}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat != nil {
				f5f3.SetDefaultDocumentIdFormat(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.DocumentIDOptions.DefaultDocumentIDFormat)
			}
			f5.SetDocumentIdOptions(f5f3)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.DomainARN != nil {
			f5.SetDomainARN(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.DomainARN)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.IndexName != nil {
			f5.SetIndexName(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.IndexName)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.IndexRotationPeriod != nil {
			f5.SetIndexRotationPeriod(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.IndexRotationPeriod)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.ProcessingConfiguration != nil {
			f5f7 := &svcsdk.ProcessingConfiguration{}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f5f7.SetEnabled(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f5f7f1 := []*svcsdk.Processor{}
				for _, f5f7f1iter := range cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.ProcessingConfiguration.Processors {
					f5f7f1elem := &svcsdk.Processor{}
					if f5f7f1iter.Parameters != nil {
						f5f7f1elemf0 := []*svcsdk.ProcessorParameter{}
						for _, f5f7f1elemf0iter := range f5f7f1iter.Parameters {
							f5f7f1elemf0elem := &svcsdk.ProcessorParameter{}
							if f5f7f1elemf0iter.ParameterName != nil {
								f5f7f1elemf0elem.SetParameterName(*f5f7f1elemf0iter.ParameterName)
							}
							if f5f7f1elemf0iter.ParameterValue != nil {
								f5f7f1elemf0elem.SetParameterValue(*f5f7f1elemf0iter.ParameterValue)
							}
							f5f7f1elemf0 = append(f5f7f1elemf0, f5f7f1elemf0elem)
						}
						f5f7f1elem.SetParameters(f5f7f1elemf0)
					}
					if f5f7f1iter.Type != nil {
						f5f7f1elem.SetType(*f5f7f1iter.Type)
					}
					f5f7f1 = append(f5f7f1, f5f7f1elem)
				}
				f5f7.SetProcessors(f5f7f1)
			}
			f5.SetProcessingConfiguration(f5f7)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.RetryOptions != nil {
			f5f8 := &svcsdk.ElasticsearchRetryOptions{}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				f5f8.SetDurationInSeconds(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.RetryOptions.DurationInSeconds)
			}
			f5.SetRetryOptions(f5f8)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.RoleARN != nil {
			f5.SetRoleARN(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.RoleARN)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3BackupMode != nil {
			f5.SetS3BackupMode(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3BackupMode)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration != nil {
			f5f11 := &svcsdk.S3DestinationConfiguration{}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN != nil {
				f5f11.SetBucketARN(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.BucketARN)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints != nil {
				f5f11f1 := &svcsdk.BufferingHints{}
				if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					f5f11f1.SetIntervalInSeconds(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				}
				if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					f5f11f1.SetSizeInMBs(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				}
				f5f11.SetBufferingHints(f5f11f1)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				f5f11f2 := &svcsdk.CloudWatchLoggingOptions{}
				if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					f5f11f2.SetEnabled(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				}
				if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					f5f11f2.SetLogGroupName(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				}
				if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					f5f11f2.SetLogStreamName(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				}
				f5f11.SetCloudWatchLoggingOptions(f5f11f2)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				f5f11.SetCompressionFormat(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.CompressionFormat)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				f5f11f4 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f5f11f4f0 := &svcsdk.KMSEncryptionConfig{}
					if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f5f11f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
					f5f11f4.SetKMSEncryptionConfig(f5f11f4f0)
				}
				if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f5f11f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f5f11.SetEncryptionConfiguration(f5f11f4)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				f5f11.SetErrorOutputPrefix(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.Prefix != nil {
				f5f11.SetPrefix(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.Prefix)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN != nil {
				f5f11.SetRoleARN(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.S3Configuration.RoleARN)
			}
			f5.SetS3Configuration(f5f11)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.TypeName != nil {
			f5.SetTypeName(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.TypeName)
		}
		if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.VPCConfiguration != nil {
			f5f13 := &svcsdk.VpcConfiguration{}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN != nil {
				f5f13.SetRoleARN(*cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.VPCConfiguration.RoleARN)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs != nil {
				f5f13f1 := []*string{}
				for _, f5f13f1iter := range cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.VPCConfiguration.SecurityGroupIDs {
					var f5f13f1elem string
					f5f13f1elem = *f5f13f1iter
					f5f13f1 = append(f5f13f1, &f5f13f1elem)
				}
				f5f13.SetSecurityGroupIds(f5f13f1)
			}
			if cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs != nil {
				f5f13f2 := []*string{}
				for _, f5f13f2iter := range cr.Spec.ForProvider.ElasticsearchDestinationConfiguration.VPCConfiguration.SubnetIDs {
					var f5f13f2elem string
					f5f13f2elem = *f5f13f2iter
					f5f13f2 = append(f5f13f2, &f5f13f2elem)
				}
				f5f13.SetSubnetIds(f5f13f2)
			}
			f5.SetVpcConfiguration(f5f13)
		}
		res.SetElasticsearchDestinationConfiguration(f5)
	}
	if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration != nil {
		f6 := &svcsdk.ExtendedS3DestinationConfiguration{}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.BucketARN != nil {
			f6.SetBucketARN(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.BucketARN)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.BufferingHints != nil {
			f6f1 := &svcsdk.BufferingHints{}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				f6f1.SetIntervalInSeconds(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.BufferingHints.IntervalInSeconds)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs != nil {
				f6f1.SetSizeInMBs(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.BufferingHints.SizeInMBs)
			}
			f6.SetBufferingHints(f6f1)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions != nil {
			f6f2 := &svcsdk.CloudWatchLoggingOptions{}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f6f2.SetEnabled(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f6f2.SetLogGroupName(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f6f2.SetLogStreamName(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			}
			f6.SetCloudWatchLoggingOptions(f6f2)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.CompressionFormat != nil {
			f6.SetCompressionFormat(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.CompressionFormat)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration != nil {
			f6f4 := &svcsdk.DataFormatConversionConfiguration{}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled != nil {
				f6f4.SetEnabled(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration != nil {
				f6f4f1 := &svcsdk.InputFormatConfiguration{}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer != nil {
					f6f4f1f0 := &svcsdk.Deserializer{}
					if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe != nil {
						f6f4f1f0f0 := &svcsdk.HiveJsonSerDe{}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats != nil {
							f6f4f1f0f0f0 := []*string{}
							for _, f6f4f1f0f0f0iter := range cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.HiveJSONSerDe.TimestampFormats {
								var f6f4f1f0f0f0elem string
								f6f4f1f0f0f0elem = *f6f4f1f0f0f0iter
								f6f4f1f0f0f0 = append(f6f4f1f0f0f0, &f6f4f1f0f0f0elem)
							}
							f6f4f1f0f0.SetTimestampFormats(f6f4f1f0f0f0)
						}
						f6f4f1f0.SetHiveJsonSerDe(f6f4f1f0f0)
					}
					if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe != nil {
						f6f4f1f0f1 := &svcsdk.OpenXJsonSerDe{}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive != nil {
							f6f4f1f0f1.SetCaseInsensitive(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.CaseInsensitive)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings != nil {
							f6f4f1f0f1f1 := map[string]*string{}
							for f6f4f1f0f1f1key, f6f4f1f0f1f1valiter := range cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ColumnToJSONKeyMappings {
								var f6f4f1f0f1f1val string
								f6f4f1f0f1f1val = *f6f4f1f0f1f1valiter
								f6f4f1f0f1f1[f6f4f1f0f1f1key] = &f6f4f1f0f1f1val
							}
							f6f4f1f0f1.SetColumnToJsonKeyMappings(f6f4f1f0f1f1)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores != nil {
							f6f4f1f0f1.SetConvertDotsInJsonKeysToUnderscores(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.InputFormatConfiguration.Deserializer.OpenXJSONSerDe.ConvertDotsInJSONKeysToUnderscores)
						}
						f6f4f1f0.SetOpenXJsonSerDe(f6f4f1f0f1)
					}
					f6f4f1.SetDeserializer(f6f4f1f0)
				}
				f6f4.SetInputFormatConfiguration(f6f4f1)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration != nil {
				f6f4f2 := &svcsdk.OutputFormatConfiguration{}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer != nil {
					f6f4f2f0 := &svcsdk.Serializer{}
					if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe != nil {
						f6f4f2f0f0 := &svcsdk.OrcSerDe{}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes != nil {
							f6f4f2f0f0.SetBlockSizeBytes(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BlockSizeBytes)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns != nil {
							f6f4f2f0f0f1 := []*string{}
							for _, f6f4f2f0f0f1iter := range cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterColumns {
								var f6f4f2f0f0f1elem string
								f6f4f2f0f0f1elem = *f6f4f2f0f0f1iter
								f6f4f2f0f0f1 = append(f6f4f2f0f0f1, &f6f4f2f0f0f1elem)
							}
							f6f4f2f0f0.SetBloomFilterColumns(f6f4f2f0f0f1)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability != nil {
							f6f4f2f0f0.SetBloomFilterFalsePositiveProbability(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.BloomFilterFalsePositiveProbability)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression != nil {
							f6f4f2f0f0.SetCompression(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.Compression)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold != nil {
							f6f4f2f0f0.SetDictionaryKeyThreshold(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.DictionaryKeyThreshold)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding != nil {
							f6f4f2f0f0.SetEnablePadding(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.EnablePadding)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion != nil {
							f6f4f2f0f0.SetFormatVersion(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.FormatVersion)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance != nil {
							f6f4f2f0f0.SetPaddingTolerance(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.PaddingTolerance)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride != nil {
							f6f4f2f0f0.SetRowIndexStride(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.RowIndexStride)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes != nil {
							f6f4f2f0f0.SetStripeSizeBytes(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.OrcSerDe.StripeSizeBytes)
						}
						f6f4f2f0.SetOrcSerDe(f6f4f2f0f0)
					}
					if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe != nil {
						f6f4f2f0f1 := &svcsdk.ParquetSerDe{}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes != nil {
							f6f4f2f0f1.SetBlockSizeBytes(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.BlockSizeBytes)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression != nil {
							f6f4f2f0f1.SetCompression(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.Compression)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression != nil {
							f6f4f2f0f1.SetEnableDictionaryCompression(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.EnableDictionaryCompression)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes != nil {
							f6f4f2f0f1.SetMaxPaddingBytes(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.MaxPaddingBytes)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes != nil {
							f6f4f2f0f1.SetPageSizeBytes(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.PageSizeBytes)
						}
						if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion != nil {
							f6f4f2f0f1.SetWriterVersion(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.OutputFormatConfiguration.Serializer.ParquetSerDe.WriterVersion)
						}
						f6f4f2f0.SetParquetSerDe(f6f4f2f0f1)
					}
					f6f4f2.SetSerializer(f6f4f2f0)
				}
				f6f4.SetOutputFormatConfiguration(f6f4f2)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration != nil {
				f6f4f3 := &svcsdk.SchemaConfiguration{}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID != nil {
					f6f4f3.SetCatalogId(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.CatalogID)
				}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName != nil {
					f6f4f3.SetDatabaseName(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.DatabaseName)
				}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region != nil {
					f6f4f3.SetRegion(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.Region)
				}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN != nil {
					f6f4f3.SetRoleARN(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.RoleARN)
				}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName != nil {
					f6f4f3.SetTableName(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.TableName)
				}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID != nil {
					f6f4f3.SetVersionId(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DataFormatConversionConfiguration.SchemaConfiguration.VersionID)
				}
				f6f4.SetSchemaConfiguration(f6f4f3)
			}
			f6.SetDataFormatConversionConfiguration(f6f4)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration != nil {
			f6f5 := &svcsdk.DynamicPartitioningConfiguration{}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled != nil {
				f6f5.SetEnabled(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions != nil {
				f6f5f1 := &svcsdk.RetryOptions{}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds != nil {
					f6f5f1.SetDurationInSeconds(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.DynamicPartitioningConfiguration.RetryOptions.DurationInSeconds)
				}
				f6f5.SetRetryOptions(f6f5f1)
			}
			f6.SetDynamicPartitioningConfiguration(f6f5)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.EncryptionConfiguration != nil {
			f6f6 := &svcsdk.EncryptionConfiguration{}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil {
				f6f6f0 := &svcsdk.KMSEncryptionConfig{}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
					f6f6f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
				}
				f6f6.SetKMSEncryptionConfig(f6f6f0)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil {
				f6f6.SetNoEncryptionConfig(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig)
			}
			f6.SetEncryptionConfiguration(f6f6)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.ErrorOutputPrefix != nil {
			f6.SetErrorOutputPrefix(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.ErrorOutputPrefix)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.Prefix != nil {
			f6.SetPrefix(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.Prefix)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.ProcessingConfiguration != nil {
			f6f9 := &svcsdk.ProcessingConfiguration{}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f6f9.SetEnabled(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f6f9f1 := []*svcsdk.Processor{}
				for _, f6f9f1iter := range cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.ProcessingConfiguration.Processors {
					f6f9f1elem := &svcsdk.Processor{}
					if f6f9f1iter.Parameters != nil {
						f6f9f1elemf0 := []*svcsdk.ProcessorParameter{}
						for _, f6f9f1elemf0iter := range f6f9f1iter.Parameters {
							f6f9f1elemf0elem := &svcsdk.ProcessorParameter{}
							if f6f9f1elemf0iter.ParameterName != nil {
								f6f9f1elemf0elem.SetParameterName(*f6f9f1elemf0iter.ParameterName)
							}
							if f6f9f1elemf0iter.ParameterValue != nil {
								f6f9f1elemf0elem.SetParameterValue(*f6f9f1elemf0iter.ParameterValue)
							}
							f6f9f1elemf0 = append(f6f9f1elemf0, f6f9f1elemf0elem)
						}
						f6f9f1elem.SetParameters(f6f9f1elemf0)
					}
					if f6f9f1iter.Type != nil {
						f6f9f1elem.SetType(*f6f9f1iter.Type)
					}
					f6f9f1 = append(f6f9f1, f6f9f1elem)
				}
				f6f9.SetProcessors(f6f9f1)
			}
			f6.SetProcessingConfiguration(f6f9)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.RoleARN != nil {
			f6.SetRoleARN(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.RoleARN)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration != nil {
			f6f11 := &svcsdk.S3DestinationConfiguration{}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN != nil {
				f6f11.SetBucketARN(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BucketARN)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints != nil {
				f6f11f1 := &svcsdk.BufferingHints{}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds != nil {
					f6f11f1.SetIntervalInSeconds(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds)
				}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs != nil {
					f6f11f1.SetSizeInMBs(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs)
				}
				f6f11.SetBufferingHints(f6f11f1)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions != nil {
				f6f11f2 := &svcsdk.CloudWatchLoggingOptions{}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled != nil {
					f6f11f2.SetEnabled(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled)
				}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
					f6f11f2.SetLogGroupName(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
					f6f11f2.SetLogStreamName(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
				f6f11.SetCloudWatchLoggingOptions(f6f11f2)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat != nil {
				f6f11.SetCompressionFormat(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.CompressionFormat)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration != nil {
				f6f11f4 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f6f11f4f0 := &svcsdk.KMSEncryptionConfig{}
					if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f6f11f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
					f6f11f4.SetKMSEncryptionConfig(f6f11f4f0)
				}
				if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f6f11f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f6f11.SetEncryptionConfiguration(f6f11f4)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix != nil {
				f6f11.SetErrorOutputPrefix(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix != nil {
				f6f11.SetPrefix(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.Prefix)
			}
			if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN != nil {
				f6f11.SetRoleARN(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupConfiguration.RoleARN)
			}
			f6.SetS3BackupConfiguration(f6f11)
		}
		if cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupMode != nil {
			f6.SetS3BackupMode(*cr.Spec.ForProvider.ExtendedS3DestinationConfiguration.S3BackupMode)
		}
		res.SetExtendedS3DestinationConfiguration(f6)
	}
	if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration != nil {
		f7 := &svcsdk.HttpEndpointDestinationConfiguration{}
		if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.BufferingHints != nil {
			f7f0 := &svcsdk.HttpEndpointBufferingHints{}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				f7f0.SetIntervalInSeconds(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.BufferingHints.IntervalInSeconds)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				f7f0.SetSizeInMBs(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.BufferingHints.SizeInMBs)
			}
			f7.SetBufferingHints(f7f0)
		}
		if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions != nil {
			f7f1 := &svcsdk.CloudWatchLoggingOptions{}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f7f1.SetEnabled(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f7f1.SetLogGroupName(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f7f1.SetLogStreamName(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			}
			f7.SetCloudWatchLoggingOptions(f7f1)
		}
		if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.EndpointConfiguration != nil {
			f7f2 := &svcsdk.HttpEndpointConfiguration{}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey != nil {
				f7f2.SetAccessKey(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.EndpointConfiguration.AccessKey)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name != nil {
				f7f2.SetName(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.EndpointConfiguration.Name)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL != nil {
				f7f2.SetUrl(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.EndpointConfiguration.URL)
			}
			f7.SetEndpointConfiguration(f7f2)
		}
		if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.ProcessingConfiguration != nil {
			f7f3 := &svcsdk.ProcessingConfiguration{}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f7f3.SetEnabled(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f7f3f1 := []*svcsdk.Processor{}
				for _, f7f3f1iter := range cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.ProcessingConfiguration.Processors {
					f7f3f1elem := &svcsdk.Processor{}
					if f7f3f1iter.Parameters != nil {
						f7f3f1elemf0 := []*svcsdk.ProcessorParameter{}
						for _, f7f3f1elemf0iter := range f7f3f1iter.Parameters {
							f7f3f1elemf0elem := &svcsdk.ProcessorParameter{}
							if f7f3f1elemf0iter.ParameterName != nil {
								f7f3f1elemf0elem.SetParameterName(*f7f3f1elemf0iter.ParameterName)
							}
							if f7f3f1elemf0iter.ParameterValue != nil {
								f7f3f1elemf0elem.SetParameterValue(*f7f3f1elemf0iter.ParameterValue)
							}
							f7f3f1elemf0 = append(f7f3f1elemf0, f7f3f1elemf0elem)
						}
						f7f3f1elem.SetParameters(f7f3f1elemf0)
					}
					if f7f3f1iter.Type != nil {
						f7f3f1elem.SetType(*f7f3f1iter.Type)
					}
					f7f3f1 = append(f7f3f1, f7f3f1elem)
				}
				f7f3.SetProcessors(f7f3f1)
			}
			f7.SetProcessingConfiguration(f7f3)
		}
		if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RequestConfiguration != nil {
			f7f4 := &svcsdk.HttpEndpointRequestConfiguration{}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes != nil {
				f7f4f0 := []*svcsdk.HttpEndpointCommonAttribute{}
				for _, f7f4f0iter := range cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RequestConfiguration.CommonAttributes {
					f7f4f0elem := &svcsdk.HttpEndpointCommonAttribute{}
					if f7f4f0iter.AttributeName != nil {
						f7f4f0elem.SetAttributeName(*f7f4f0iter.AttributeName)
					}
					if f7f4f0iter.AttributeValue != nil {
						f7f4f0elem.SetAttributeValue(*f7f4f0iter.AttributeValue)
					}
					f7f4f0 = append(f7f4f0, f7f4f0elem)
				}
				f7f4.SetCommonAttributes(f7f4f0)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding != nil {
				f7f4.SetContentEncoding(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RequestConfiguration.ContentEncoding)
			}
			f7.SetRequestConfiguration(f7f4)
		}
		if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RetryOptions != nil {
			f7f5 := &svcsdk.HttpEndpointRetryOptions{}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				f7f5.SetDurationInSeconds(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RetryOptions.DurationInSeconds)
			}
			f7.SetRetryOptions(f7f5)
		}
		if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RoleARN != nil {
			f7.SetRoleARN(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.RoleARN)
		}
		if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3BackupMode != nil {
			f7.SetS3BackupMode(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3BackupMode)
		}
		if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration != nil {
			f7f8 := &svcsdk.S3DestinationConfiguration{}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN != nil {
				f7f8.SetBucketARN(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.BucketARN)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints != nil {
				f7f8f1 := &svcsdk.BufferingHints{}
				if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					f7f8f1.SetIntervalInSeconds(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				}
				if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					f7f8f1.SetSizeInMBs(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				}
				f7f8.SetBufferingHints(f7f8f1)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				f7f8f2 := &svcsdk.CloudWatchLoggingOptions{}
				if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					f7f8f2.SetEnabled(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				}
				if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					f7f8f2.SetLogGroupName(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				}
				if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					f7f8f2.SetLogStreamName(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				}
				f7f8.SetCloudWatchLoggingOptions(f7f8f2)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				f7f8.SetCompressionFormat(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.CompressionFormat)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				f7f8f4 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f7f8f4f0 := &svcsdk.KMSEncryptionConfig{}
					if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f7f8f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
					f7f8f4.SetKMSEncryptionConfig(f7f8f4f0)
				}
				if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f7f8f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f7f8.SetEncryptionConfiguration(f7f8f4)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				f7f8.SetErrorOutputPrefix(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix != nil {
				f7f8.SetPrefix(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.Prefix)
			}
			if cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN != nil {
				f7f8.SetRoleARN(*cr.Spec.ForProvider.HTTPEndpointDestinationConfiguration.S3Configuration.RoleARN)
			}
			f7.SetS3Configuration(f7f8)
		}
		res.SetHttpEndpointDestinationConfiguration(f7)
	}
	if cr.Spec.ForProvider.KinesisStreamSourceConfiguration != nil {
		f8 := &svcsdk.KinesisStreamSourceConfiguration{}
		if cr.Spec.ForProvider.KinesisStreamSourceConfiguration.KinesisStreamARN != nil {
			f8.SetKinesisStreamARN(*cr.Spec.ForProvider.KinesisStreamSourceConfiguration.KinesisStreamARN)
		}
		if cr.Spec.ForProvider.KinesisStreamSourceConfiguration.RoleARN != nil {
			f8.SetRoleARN(*cr.Spec.ForProvider.KinesisStreamSourceConfiguration.RoleARN)
		}
		res.SetKinesisStreamSourceConfiguration(f8)
	}
	if cr.Spec.ForProvider.MSKSourceConfiguration != nil {
		f9 := &svcsdk.MSKSourceConfiguration{}
		if cr.Spec.ForProvider.MSKSourceConfiguration.AuthenticationConfiguration != nil {
			f9f0 := &svcsdk.AuthenticationConfiguration{}
			if cr.Spec.ForProvider.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity != nil {
				f9f0.SetConnectivity(*cr.Spec.ForProvider.MSKSourceConfiguration.AuthenticationConfiguration.Connectivity)
			}
			if cr.Spec.ForProvider.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN != nil {
				f9f0.SetRoleARN(*cr.Spec.ForProvider.MSKSourceConfiguration.AuthenticationConfiguration.RoleARN)
			}
			f9.SetAuthenticationConfiguration(f9f0)
		}
		if cr.Spec.ForProvider.MSKSourceConfiguration.MSKClusterARN != nil {
			f9.SetMSKClusterARN(*cr.Spec.ForProvider.MSKSourceConfiguration.MSKClusterARN)
		}
		if cr.Spec.ForProvider.MSKSourceConfiguration.TopicName != nil {
			f9.SetTopicName(*cr.Spec.ForProvider.MSKSourceConfiguration.TopicName)
		}
		res.SetMSKSourceConfiguration(f9)
	}
	if cr.Spec.ForProvider.RedshiftDestinationConfiguration != nil {
		f10 := &svcsdk.RedshiftDestinationConfiguration{}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.CloudWatchLoggingOptions != nil {
			f10f0 := &svcsdk.CloudWatchLoggingOptions{}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f10f0.SetEnabled(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f10f0.SetLogGroupName(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f10f0.SetLogStreamName(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			}
			f10.SetCloudWatchLoggingOptions(f10f0)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.ClusterJDBCURL != nil {
			f10.SetClusterJDBCURL(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.ClusterJDBCURL)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.CopyCommand != nil {
			f10f2 := &svcsdk.CopyCommand{}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.CopyCommand.CopyOptions != nil {
				f10f2.SetCopyOptions(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.CopyCommand.CopyOptions)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns != nil {
				f10f2.SetDataTableColumns(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.CopyCommand.DataTableColumns)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.CopyCommand.DataTableName != nil {
				f10f2.SetDataTableName(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.CopyCommand.DataTableName)
			}
			f10.SetCopyCommand(f10f2)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.Password != nil {
			f10.SetPassword(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.Password)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.ProcessingConfiguration != nil {
			f10f4 := &svcsdk.ProcessingConfiguration{}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f10f4.SetEnabled(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.ProcessingConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f10f4f1 := []*svcsdk.Processor{}
				for _, f10f4f1iter := range cr.Spec.ForProvider.RedshiftDestinationConfiguration.ProcessingConfiguration.Processors {
					f10f4f1elem := &svcsdk.Processor{}
					if f10f4f1iter.Parameters != nil {
						f10f4f1elemf0 := []*svcsdk.ProcessorParameter{}
						for _, f10f4f1elemf0iter := range f10f4f1iter.Parameters {
							f10f4f1elemf0elem := &svcsdk.ProcessorParameter{}
							if f10f4f1elemf0iter.ParameterName != nil {
								f10f4f1elemf0elem.SetParameterName(*f10f4f1elemf0iter.ParameterName)
							}
							if f10f4f1elemf0iter.ParameterValue != nil {
								f10f4f1elemf0elem.SetParameterValue(*f10f4f1elemf0iter.ParameterValue)
							}
							f10f4f1elemf0 = append(f10f4f1elemf0, f10f4f1elemf0elem)
						}
						f10f4f1elem.SetParameters(f10f4f1elemf0)
					}
					if f10f4f1iter.Type != nil {
						f10f4f1elem.SetType(*f10f4f1iter.Type)
					}
					f10f4f1 = append(f10f4f1, f10f4f1elem)
				}
				f10f4.SetProcessors(f10f4f1)
			}
			f10.SetProcessingConfiguration(f10f4)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.RetryOptions != nil {
			f10f5 := &svcsdk.RedshiftRetryOptions{}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				f10f5.SetDurationInSeconds(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.RetryOptions.DurationInSeconds)
			}
			f10.SetRetryOptions(f10f5)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.RoleARN != nil {
			f10.SetRoleARN(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.RoleARN)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration != nil {
			f10f7 := &svcsdk.S3DestinationConfiguration{}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN != nil {
				f10f7.SetBucketARN(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.BucketARN)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints != nil {
				f10f7f1 := &svcsdk.BufferingHints{}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds != nil {
					f10f7f1.SetIntervalInSeconds(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.IntervalInSeconds)
				}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs != nil {
					f10f7f1.SetSizeInMBs(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.BufferingHints.SizeInMBs)
				}
				f10f7.SetBufferingHints(f10f7f1)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions != nil {
				f10f7f2 := &svcsdk.CloudWatchLoggingOptions{}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled != nil {
					f10f7f2.SetEnabled(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.Enabled)
				}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
					f10f7f2.SetLogGroupName(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogGroupName)
				}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
					f10f7f2.SetLogStreamName(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.CloudWatchLoggingOptions.LogStreamName)
				}
				f10f7.SetCloudWatchLoggingOptions(f10f7f2)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat != nil {
				f10f7.SetCompressionFormat(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.CompressionFormat)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration != nil {
				f10f7f4 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f10f7f4f0 := &svcsdk.KMSEncryptionConfig{}
					if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f10f7f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
					f10f7f4.SetKMSEncryptionConfig(f10f7f4f0)
				}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f10f7f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f10f7.SetEncryptionConfiguration(f10f7f4)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix != nil {
				f10f7.SetErrorOutputPrefix(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.ErrorOutputPrefix)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix != nil {
				f10f7.SetPrefix(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.Prefix)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN != nil {
				f10f7.SetRoleARN(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupConfiguration.RoleARN)
			}
			f10.SetS3BackupConfiguration(f10f7)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupMode != nil {
			f10.SetS3BackupMode(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3BackupMode)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration != nil {
			f10f9 := &svcsdk.S3DestinationConfiguration{}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.BucketARN != nil {
				f10f9.SetBucketARN(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.BucketARN)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.BufferingHints != nil {
				f10f9f1 := &svcsdk.BufferingHints{}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					f10f9f1.SetIntervalInSeconds(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					f10f9f1.SetSizeInMBs(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				}
				f10f9.SetBufferingHints(f10f9f1)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				f10f9f2 := &svcsdk.CloudWatchLoggingOptions{}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					f10f9f2.SetEnabled(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					f10f9f2.SetLogGroupName(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					f10f9f2.SetLogStreamName(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				}
				f10f9.SetCloudWatchLoggingOptions(f10f9f2)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				f10f9.SetCompressionFormat(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.CompressionFormat)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				f10f9f4 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f10f9f4f0 := &svcsdk.KMSEncryptionConfig{}
					if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f10f9f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
					f10f9f4.SetKMSEncryptionConfig(f10f9f4f0)
				}
				if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f10f9f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f10f9.SetEncryptionConfiguration(f10f9f4)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				f10f9.SetErrorOutputPrefix(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.Prefix != nil {
				f10f9.SetPrefix(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.Prefix)
			}
			if cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.RoleARN != nil {
				f10f9.SetRoleARN(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.S3Configuration.RoleARN)
			}
			f10.SetS3Configuration(f10f9)
		}
		if cr.Spec.ForProvider.RedshiftDestinationConfiguration.Username != nil {
			f10.SetUsername(*cr.Spec.ForProvider.RedshiftDestinationConfiguration.Username)
		}
		res.SetRedshiftDestinationConfiguration(f10)
	}
	if cr.Spec.ForProvider.S3DestinationConfiguration != nil {
		f11 := &svcsdk.S3DestinationConfiguration{}
		if cr.Spec.ForProvider.S3DestinationConfiguration.BucketARN != nil {
			f11.SetBucketARN(*cr.Spec.ForProvider.S3DestinationConfiguration.BucketARN)
		}
		if cr.Spec.ForProvider.S3DestinationConfiguration.BufferingHints != nil {
			f11f1 := &svcsdk.BufferingHints{}
			if cr.Spec.ForProvider.S3DestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				f11f1.SetIntervalInSeconds(*cr.Spec.ForProvider.S3DestinationConfiguration.BufferingHints.IntervalInSeconds)
			}
			if cr.Spec.ForProvider.S3DestinationConfiguration.BufferingHints.SizeInMBs != nil {
				f11f1.SetSizeInMBs(*cr.Spec.ForProvider.S3DestinationConfiguration.BufferingHints.SizeInMBs)
			}
			f11.SetBufferingHints(f11f1)
		}
		if cr.Spec.ForProvider.S3DestinationConfiguration.CloudWatchLoggingOptions != nil {
			f11f2 := &svcsdk.CloudWatchLoggingOptions{}
			if cr.Spec.ForProvider.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f11f2.SetEnabled(*cr.Spec.ForProvider.S3DestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			}
			if cr.Spec.ForProvider.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f11f2.SetLogGroupName(*cr.Spec.ForProvider.S3DestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			}
			if cr.Spec.ForProvider.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f11f2.SetLogStreamName(*cr.Spec.ForProvider.S3DestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			}
			f11.SetCloudWatchLoggingOptions(f11f2)
		}
		if cr.Spec.ForProvider.S3DestinationConfiguration.CompressionFormat != nil {
			f11.SetCompressionFormat(*cr.Spec.ForProvider.S3DestinationConfiguration.CompressionFormat)
		}
		if cr.Spec.ForProvider.S3DestinationConfiguration.EncryptionConfiguration != nil {
			f11f4 := &svcsdk.EncryptionConfiguration{}
			if cr.Spec.ForProvider.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig != nil {
				f11f4f0 := &svcsdk.KMSEncryptionConfig{}
				if cr.Spec.ForProvider.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
					f11f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.S3DestinationConfiguration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
				}
				f11f4.SetKMSEncryptionConfig(f11f4f0)
			}
			if cr.Spec.ForProvider.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig != nil {
				f11f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.S3DestinationConfiguration.EncryptionConfiguration.NoEncryptionConfig)
			}
			f11.SetEncryptionConfiguration(f11f4)
		}
		if cr.Spec.ForProvider.S3DestinationConfiguration.ErrorOutputPrefix != nil {
			f11.SetErrorOutputPrefix(*cr.Spec.ForProvider.S3DestinationConfiguration.ErrorOutputPrefix)
		}
		if cr.Spec.ForProvider.S3DestinationConfiguration.Prefix != nil {
			f11.SetPrefix(*cr.Spec.ForProvider.S3DestinationConfiguration.Prefix)
		}
		if cr.Spec.ForProvider.S3DestinationConfiguration.RoleARN != nil {
			f11.SetRoleARN(*cr.Spec.ForProvider.S3DestinationConfiguration.RoleARN)
		}
		res.SetS3DestinationConfiguration(f11)
	}
	if cr.Spec.ForProvider.SnowflakeDestinationConfiguration != nil {
		f12 := &svcsdk.SnowflakeDestinationConfiguration{}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.AccountURL != nil {
			f12.SetAccountUrl(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.AccountURL)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions != nil {
			f12f1 := &svcsdk.CloudWatchLoggingOptions{}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f12f1.SetEnabled(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f12f1.SetLogGroupName(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f12f1.SetLogStreamName(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			}
			f12.SetCloudWatchLoggingOptions(f12f1)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.ContentColumnName != nil {
			f12.SetContentColumnName(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.ContentColumnName)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.DataLoadingOption != nil {
			f12.SetDataLoadingOption(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.DataLoadingOption)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.Database != nil {
			f12.SetDatabase(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.Database)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.KeyPassphrase != nil {
			f12.SetKeyPassphrase(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.KeyPassphrase)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.MetaDataColumnName != nil {
			f12.SetMetaDataColumnName(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.MetaDataColumnName)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.PrivateKey != nil {
			f12.SetPrivateKey(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.PrivateKey)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.ProcessingConfiguration != nil {
			f12f8 := &svcsdk.ProcessingConfiguration{}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f12f8.SetEnabled(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.ProcessingConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f12f8f1 := []*svcsdk.Processor{}
				for _, f12f8f1iter := range cr.Spec.ForProvider.SnowflakeDestinationConfiguration.ProcessingConfiguration.Processors {
					f12f8f1elem := &svcsdk.Processor{}
					if f12f8f1iter.Parameters != nil {
						f12f8f1elemf0 := []*svcsdk.ProcessorParameter{}
						for _, f12f8f1elemf0iter := range f12f8f1iter.Parameters {
							f12f8f1elemf0elem := &svcsdk.ProcessorParameter{}
							if f12f8f1elemf0iter.ParameterName != nil {
								f12f8f1elemf0elem.SetParameterName(*f12f8f1elemf0iter.ParameterName)
							}
							if f12f8f1elemf0iter.ParameterValue != nil {
								f12f8f1elemf0elem.SetParameterValue(*f12f8f1elemf0iter.ParameterValue)
							}
							f12f8f1elemf0 = append(f12f8f1elemf0, f12f8f1elemf0elem)
						}
						f12f8f1elem.SetParameters(f12f8f1elemf0)
					}
					if f12f8f1iter.Type != nil {
						f12f8f1elem.SetType(*f12f8f1iter.Type)
					}
					f12f8f1 = append(f12f8f1, f12f8f1elem)
				}
				f12f8.SetProcessors(f12f8f1)
			}
			f12.SetProcessingConfiguration(f12f8)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.RetryOptions != nil {
			f12f9 := &svcsdk.SnowflakeRetryOptions{}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				f12f9.SetDurationInSeconds(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.RetryOptions.DurationInSeconds)
			}
			f12.SetRetryOptions(f12f9)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.RoleARN != nil {
			f12.SetRoleARN(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.RoleARN)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3BackupMode != nil {
			f12.SetS3BackupMode(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3BackupMode)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration != nil {
			f12f12 := &svcsdk.S3DestinationConfiguration{}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.BucketARN != nil {
				f12f12.SetBucketARN(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.BucketARN)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints != nil {
				f12f12f1 := &svcsdk.BufferingHints{}
				if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					f12f12f1.SetIntervalInSeconds(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				}
				if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					f12f12f1.SetSizeInMBs(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				}
				f12f12.SetBufferingHints(f12f12f1)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				f12f12f2 := &svcsdk.CloudWatchLoggingOptions{}
				if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					f12f12f2.SetEnabled(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				}
				if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					f12f12f2.SetLogGroupName(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				}
				if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					f12f12f2.SetLogStreamName(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				}
				f12f12.SetCloudWatchLoggingOptions(f12f12f2)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				f12f12.SetCompressionFormat(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.CompressionFormat)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				f12f12f4 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f12f12f4f0 := &svcsdk.KMSEncryptionConfig{}
					if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f12f12f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
					f12f12f4.SetKMSEncryptionConfig(f12f12f4f0)
				}
				if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f12f12f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f12f12.SetEncryptionConfiguration(f12f12f4)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				f12f12.SetErrorOutputPrefix(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.Prefix != nil {
				f12f12.SetPrefix(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.Prefix)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.RoleARN != nil {
				f12f12.SetRoleARN(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.S3Configuration.RoleARN)
			}
			f12.SetS3Configuration(f12f12)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.Schema != nil {
			f12.SetSchema(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.Schema)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration != nil {
			f12f14 := &svcsdk.SnowflakeRoleConfiguration{}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled != nil {
				f12f14.SetEnabled(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole != nil {
				f12f14.SetSnowflakeRole(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.SnowflakeRoleConfiguration.SnowflakeRole)
			}
			f12.SetSnowflakeRoleConfiguration(f12f14)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration != nil {
			f12f15 := &svcsdk.SnowflakeVpcConfiguration{}
			if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID != nil {
				f12f15.SetPrivateLinkVpceId(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.SnowflakeVPCConfiguration.PrivateLinkVPCeID)
			}
			f12.SetSnowflakeVpcConfiguration(f12f15)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.Table != nil {
			f12.SetTable(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.Table)
		}
		if cr.Spec.ForProvider.SnowflakeDestinationConfiguration.User != nil {
			f12.SetUser(*cr.Spec.ForProvider.SnowflakeDestinationConfiguration.User)
		}
		res.SetSnowflakeDestinationConfiguration(f12)
	}
	if cr.Spec.ForProvider.SplunkDestinationConfiguration != nil {
		f13 := &svcsdk.SplunkDestinationConfiguration{}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.BufferingHints != nil {
			f13f0 := &svcsdk.SplunkBufferingHints{}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds != nil {
				f13f0.SetIntervalInSeconds(*cr.Spec.ForProvider.SplunkDestinationConfiguration.BufferingHints.IntervalInSeconds)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.BufferingHints.SizeInMBs != nil {
				f13f0.SetSizeInMBs(*cr.Spec.ForProvider.SplunkDestinationConfiguration.BufferingHints.SizeInMBs)
			}
			f13.SetBufferingHints(f13f0)
		}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.CloudWatchLoggingOptions != nil {
			f13f1 := &svcsdk.CloudWatchLoggingOptions{}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled != nil {
				f13f1.SetEnabled(*cr.Spec.ForProvider.SplunkDestinationConfiguration.CloudWatchLoggingOptions.Enabled)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName != nil {
				f13f1.SetLogGroupName(*cr.Spec.ForProvider.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogGroupName)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName != nil {
				f13f1.SetLogStreamName(*cr.Spec.ForProvider.SplunkDestinationConfiguration.CloudWatchLoggingOptions.LogStreamName)
			}
			f13.SetCloudWatchLoggingOptions(f13f1)
		}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds != nil {
			f13.SetHECAcknowledgmentTimeoutInSeconds(*cr.Spec.ForProvider.SplunkDestinationConfiguration.HECAcknowledgmentTimeoutInSeconds)
		}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.HECEndpoint != nil {
			f13.SetHECEndpoint(*cr.Spec.ForProvider.SplunkDestinationConfiguration.HECEndpoint)
		}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.HECEndpointType != nil {
			f13.SetHECEndpointType(*cr.Spec.ForProvider.SplunkDestinationConfiguration.HECEndpointType)
		}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.HECToken != nil {
			f13.SetHECToken(*cr.Spec.ForProvider.SplunkDestinationConfiguration.HECToken)
		}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.ProcessingConfiguration != nil {
			f13f6 := &svcsdk.ProcessingConfiguration{}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled != nil {
				f13f6.SetEnabled(*cr.Spec.ForProvider.SplunkDestinationConfiguration.ProcessingConfiguration.Enabled)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.ProcessingConfiguration.Processors != nil {
				f13f6f1 := []*svcsdk.Processor{}
				for _, f13f6f1iter := range cr.Spec.ForProvider.SplunkDestinationConfiguration.ProcessingConfiguration.Processors {
					f13f6f1elem := &svcsdk.Processor{}
					if f13f6f1iter.Parameters != nil {
						f13f6f1elemf0 := []*svcsdk.ProcessorParameter{}
						for _, f13f6f1elemf0iter := range f13f6f1iter.Parameters {
							f13f6f1elemf0elem := &svcsdk.ProcessorParameter{}
							if f13f6f1elemf0iter.ParameterName != nil {
								f13f6f1elemf0elem.SetParameterName(*f13f6f1elemf0iter.ParameterName)
							}
							if f13f6f1elemf0iter.ParameterValue != nil {
								f13f6f1elemf0elem.SetParameterValue(*f13f6f1elemf0iter.ParameterValue)
							}
							f13f6f1elemf0 = append(f13f6f1elemf0, f13f6f1elemf0elem)
						}
						f13f6f1elem.SetParameters(f13f6f1elemf0)
					}
					if f13f6f1iter.Type != nil {
						f13f6f1elem.SetType(*f13f6f1iter.Type)
					}
					f13f6f1 = append(f13f6f1, f13f6f1elem)
				}
				f13f6.SetProcessors(f13f6f1)
			}
			f13.SetProcessingConfiguration(f13f6)
		}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.RetryOptions != nil {
			f13f7 := &svcsdk.SplunkRetryOptions{}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds != nil {
				f13f7.SetDurationInSeconds(*cr.Spec.ForProvider.SplunkDestinationConfiguration.RetryOptions.DurationInSeconds)
			}
			f13.SetRetryOptions(f13f7)
		}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3BackupMode != nil {
			f13.SetS3BackupMode(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3BackupMode)
		}
		if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration != nil {
			f13f9 := &svcsdk.S3DestinationConfiguration{}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.BucketARN != nil {
				f13f9.SetBucketARN(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.BucketARN)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.BufferingHints != nil {
				f13f9f1 := &svcsdk.BufferingHints{}
				if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds != nil {
					f13f9f1.SetIntervalInSeconds(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.BufferingHints.IntervalInSeconds)
				}
				if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs != nil {
					f13f9f1.SetSizeInMBs(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.BufferingHints.SizeInMBs)
				}
				f13f9.SetBufferingHints(f13f9f1)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions != nil {
				f13f9f2 := &svcsdk.CloudWatchLoggingOptions{}
				if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled != nil {
					f13f9f2.SetEnabled(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.Enabled)
				}
				if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName != nil {
					f13f9f2.SetLogGroupName(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogGroupName)
				}
				if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName != nil {
					f13f9f2.SetLogStreamName(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.CloudWatchLoggingOptions.LogStreamName)
				}
				f13f9.SetCloudWatchLoggingOptions(f13f9f2)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.CompressionFormat != nil {
				f13f9.SetCompressionFormat(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.CompressionFormat)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration != nil {
				f13f9f4 := &svcsdk.EncryptionConfiguration{}
				if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig != nil {
					f13f9f4f0 := &svcsdk.KMSEncryptionConfig{}
					if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN != nil {
						f13f9f4f0.SetAWSKMSKeyARN(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.KMSEncryptionConfig.AWSKMSKeyARN)
					}
					f13f9f4.SetKMSEncryptionConfig(f13f9f4f0)
				}
				if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig != nil {
					f13f9f4.SetNoEncryptionConfig(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.EncryptionConfiguration.NoEncryptionConfig)
				}
				f13f9.SetEncryptionConfiguration(f13f9f4)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix != nil {
				f13f9.SetErrorOutputPrefix(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.ErrorOutputPrefix)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.Prefix != nil {
				f13f9.SetPrefix(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.Prefix)
			}
			if cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.RoleARN != nil {
				f13f9.SetRoleARN(*cr.Spec.ForProvider.SplunkDestinationConfiguration.S3Configuration.RoleARN)
			}
			f13.SetS3Configuration(f13f9)
		}
		res.SetSplunkDestinationConfiguration(f13)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f14 := []*svcsdk.Tag{}
		for _, f14iter := range cr.Spec.ForProvider.Tags {
			f14elem := &svcsdk.Tag{}
			if f14iter.Key != nil {
				f14elem.SetKey(*f14iter.Key)
			}
			if f14iter.Value != nil {
				f14elem.SetValue(*f14iter.Value)
			}
			f14 = append(f14, f14elem)
		}
		res.SetTags(f14)
	}

	return res
}

// GenerateDeleteDeliveryStreamInput returns a deletion input.
func GenerateDeleteDeliveryStreamInput(cr *svcapitypes.DeliveryStream) *svcsdk.DeleteDeliveryStreamInput {
	res := &svcsdk.DeleteDeliveryStreamInput{}

	if cr.Spec.ForProvider.DeliveryStreamName != nil {
		res.SetDeliveryStreamName(*cr.Spec.ForProvider.DeliveryStreamName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
