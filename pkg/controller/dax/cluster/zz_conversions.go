/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package cluster

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/dax"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/dax/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeClustersInput returns input for read
// operation.
func GenerateDescribeClustersInput(cr *svcapitypes.Cluster) *svcsdk.DescribeClustersInput {
	res := &svcsdk.DescribeClustersInput{}

	if cr.Status.AtProvider.ClusterName != nil {
		f0 := []*string{}
		f0 = append(f0, cr.Status.AtProvider.ClusterName)
		res.SetClusterNames(f0)
	}

	return res
}

// GenerateCluster returns the current state in the form of *svcapitypes.Cluster.
func GenerateCluster(resp *svcsdk.DescribeClustersOutput) *svcapitypes.Cluster {
	cr := &svcapitypes.Cluster{}

	found := false
	for _, elem := range resp.Clusters {
		if elem.ActiveNodes != nil {
			cr.Status.AtProvider.ActiveNodes = elem.ActiveNodes
		} else {
			cr.Status.AtProvider.ActiveNodes = nil
		}
		if elem.ClusterArn != nil {
			cr.Status.AtProvider.ClusterARN = elem.ClusterArn
		} else {
			cr.Status.AtProvider.ClusterARN = nil
		}
		if elem.ClusterDiscoveryEndpoint != nil {
			f2 := &svcapitypes.Endpoint{}
			if elem.ClusterDiscoveryEndpoint.Address != nil {
				f2.Address = elem.ClusterDiscoveryEndpoint.Address
			}
			if elem.ClusterDiscoveryEndpoint.Port != nil {
				f2.Port = elem.ClusterDiscoveryEndpoint.Port
			}
			if elem.ClusterDiscoveryEndpoint.URL != nil {
				f2.URL = elem.ClusterDiscoveryEndpoint.URL
			}
			cr.Status.AtProvider.ClusterDiscoveryEndpoint = f2
		} else {
			cr.Status.AtProvider.ClusterDiscoveryEndpoint = nil
		}
		if elem.ClusterEndpointEncryptionType != nil {
			cr.Spec.ForProvider.ClusterEndpointEncryptionType = elem.ClusterEndpointEncryptionType
		} else {
			cr.Spec.ForProvider.ClusterEndpointEncryptionType = nil
		}
		if elem.ClusterName != nil {
			cr.Status.AtProvider.ClusterName = elem.ClusterName
		} else {
			cr.Status.AtProvider.ClusterName = nil
		}
		if elem.Description != nil {
			cr.Spec.ForProvider.Description = elem.Description
		} else {
			cr.Spec.ForProvider.Description = nil
		}
		if elem.IamRoleArn != nil {
			cr.Status.AtProvider.IAMRoleARN = elem.IamRoleArn
		} else {
			cr.Status.AtProvider.IAMRoleARN = nil
		}
		if elem.NodeIdsToRemove != nil {
			f7 := []*string{}
			for _, f7iter := range elem.NodeIdsToRemove {
				var f7elem string
				f7elem = *f7iter
				f7 = append(f7, &f7elem)
			}
			cr.Status.AtProvider.NodeIDsToRemove = f7
		} else {
			cr.Status.AtProvider.NodeIDsToRemove = nil
		}
		if elem.NodeType != nil {
			cr.Spec.ForProvider.NodeType = elem.NodeType
		} else {
			cr.Spec.ForProvider.NodeType = nil
		}
		if elem.Nodes != nil {
			f9 := []*svcapitypes.Node{}
			for _, f9iter := range elem.Nodes {
				f9elem := &svcapitypes.Node{}
				if f9iter.AvailabilityZone != nil {
					f9elem.AvailabilityZone = f9iter.AvailabilityZone
				}
				if f9iter.Endpoint != nil {
					f9elemf1 := &svcapitypes.Endpoint{}
					if f9iter.Endpoint.Address != nil {
						f9elemf1.Address = f9iter.Endpoint.Address
					}
					if f9iter.Endpoint.Port != nil {
						f9elemf1.Port = f9iter.Endpoint.Port
					}
					if f9iter.Endpoint.URL != nil {
						f9elemf1.URL = f9iter.Endpoint.URL
					}
					f9elem.Endpoint = f9elemf1
				}
				if f9iter.NodeCreateTime != nil {
					f9elem.NodeCreateTime = &metav1.Time{*f9iter.NodeCreateTime}
				}
				if f9iter.NodeId != nil {
					f9elem.NodeID = f9iter.NodeId
				}
				if f9iter.NodeStatus != nil {
					f9elem.NodeStatus = f9iter.NodeStatus
				}
				if f9iter.ParameterGroupStatus != nil {
					f9elem.ParameterGroupStatus = f9iter.ParameterGroupStatus
				}
				f9 = append(f9, f9elem)
			}
			cr.Status.AtProvider.Nodes = f9
		} else {
			cr.Status.AtProvider.Nodes = nil
		}
		if elem.NotificationConfiguration != nil {
			f10 := &svcapitypes.NotificationConfiguration{}
			if elem.NotificationConfiguration.TopicArn != nil {
				f10.TopicARN = elem.NotificationConfiguration.TopicArn
			}
			if elem.NotificationConfiguration.TopicStatus != nil {
				f10.TopicStatus = elem.NotificationConfiguration.TopicStatus
			}
			cr.Status.AtProvider.NotificationConfiguration = f10
		} else {
			cr.Status.AtProvider.NotificationConfiguration = nil
		}
		if elem.ParameterGroup != nil {
			f11 := &svcapitypes.ParameterGroupStatus_SDK{}
			if elem.ParameterGroup.NodeIdsToReboot != nil {
				f11f0 := []*string{}
				for _, f11f0iter := range elem.ParameterGroup.NodeIdsToReboot {
					var f11f0elem string
					f11f0elem = *f11f0iter
					f11f0 = append(f11f0, &f11f0elem)
				}
				f11.NodeIDsToReboot = f11f0
			}
			if elem.ParameterGroup.ParameterApplyStatus != nil {
				f11.ParameterApplyStatus = elem.ParameterGroup.ParameterApplyStatus
			}
			if elem.ParameterGroup.ParameterGroupName != nil {
				f11.ParameterGroupName = elem.ParameterGroup.ParameterGroupName
			}
			cr.Status.AtProvider.ParameterGroup = f11
		} else {
			cr.Status.AtProvider.ParameterGroup = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = nil
		}
		if elem.SSEDescription != nil {
			f13 := &svcapitypes.SSEDescription{}
			if elem.SSEDescription.Status != nil {
				f13.Status = elem.SSEDescription.Status
			}
			cr.Status.AtProvider.SSEDescription = f13
		} else {
			cr.Status.AtProvider.SSEDescription = nil
		}
		if elem.SecurityGroups != nil {
			f14 := []*svcapitypes.SecurityGroupMembership{}
			for _, f14iter := range elem.SecurityGroups {
				f14elem := &svcapitypes.SecurityGroupMembership{}
				if f14iter.SecurityGroupIdentifier != nil {
					f14elem.SecurityGroupIdentifier = f14iter.SecurityGroupIdentifier
				}
				if f14iter.Status != nil {
					f14elem.Status = f14iter.Status
				}
				f14 = append(f14, f14elem)
			}
			cr.Status.AtProvider.SecurityGroups = f14
		} else {
			cr.Status.AtProvider.SecurityGroups = nil
		}
		if elem.Status != nil {
			cr.Status.AtProvider.Status = elem.Status
		} else {
			cr.Status.AtProvider.Status = nil
		}
		if elem.SubnetGroup != nil {
			cr.Status.AtProvider.SubnetGroup = elem.SubnetGroup
		} else {
			cr.Status.AtProvider.SubnetGroup = nil
		}
		if elem.TotalNodes != nil {
			cr.Status.AtProvider.TotalNodes = elem.TotalNodes
		} else {
			cr.Status.AtProvider.TotalNodes = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateClusterInput returns a create input.
func GenerateCreateClusterInput(cr *svcapitypes.Cluster) *svcsdk.CreateClusterInput {
	res := &svcsdk.CreateClusterInput{}

	if cr.Spec.ForProvider.AvailabilityZones != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.AvailabilityZones {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAvailabilityZones(f0)
	}
	if cr.Spec.ForProvider.ClusterEndpointEncryptionType != nil {
		res.SetClusterEndpointEncryptionType(*cr.Spec.ForProvider.ClusterEndpointEncryptionType)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.NodeType != nil {
		res.SetNodeType(*cr.Spec.ForProvider.NodeType)
	}
	if cr.Spec.ForProvider.NotificationTopicARN != nil {
		res.SetNotificationTopicArn(*cr.Spec.ForProvider.NotificationTopicARN)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.ReplicationFactor != nil {
		res.SetReplicationFactor(*cr.Spec.ForProvider.ReplicationFactor)
	}
	if cr.Spec.ForProvider.SSESpecification != nil {
		f7 := &svcsdk.SSESpecification{}
		if cr.Spec.ForProvider.SSESpecification.Enabled != nil {
			f7.SetEnabled(*cr.Spec.ForProvider.SSESpecification.Enabled)
		}
		res.SetSSESpecification(f7)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f8 := []*svcsdk.Tag{}
		for _, f8iter := range cr.Spec.ForProvider.Tags {
			f8elem := &svcsdk.Tag{}
			if f8iter.Key != nil {
				f8elem.SetKey(*f8iter.Key)
			}
			if f8iter.Value != nil {
				f8elem.SetValue(*f8iter.Value)
			}
			f8 = append(f8, f8elem)
		}
		res.SetTags(f8)
	}

	return res
}

// GenerateUpdateClusterInput returns an update input.
func GenerateUpdateClusterInput(cr *svcapitypes.Cluster) *svcsdk.UpdateClusterInput {
	res := &svcsdk.UpdateClusterInput{}

	if cr.Status.AtProvider.ClusterName != nil {
		res.SetClusterName(*cr.Status.AtProvider.ClusterName)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.NotificationTopicARN != nil {
		res.SetNotificationTopicArn(*cr.Spec.ForProvider.NotificationTopicARN)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}

	return res
}

// GenerateDeleteClusterInput returns a deletion input.
func GenerateDeleteClusterInput(cr *svcapitypes.Cluster) *svcsdk.DeleteClusterInput {
	res := &svcsdk.DeleteClusterInput{}

	if cr.Status.AtProvider.ClusterName != nil {
		res.SetClusterName(*cr.Status.AtProvider.ClusterName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ClusterNotFoundFault"
}
