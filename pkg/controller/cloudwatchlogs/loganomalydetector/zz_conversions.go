/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package loganomalydetector

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/cloudwatchlogs"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/cloudwatchlogs/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetLogAnomalyDetectorInput returns input for read
// operation.
func GenerateGetLogAnomalyDetectorInput(cr *svcapitypes.LogAnomalyDetector) *svcsdk.GetLogAnomalyDetectorInput {
	res := &svcsdk.GetLogAnomalyDetectorInput{}

	if cr.Status.AtProvider.AnomalyDetectorARN != nil {
		res.SetAnomalyDetectorArn(*cr.Status.AtProvider.AnomalyDetectorARN)
	}

	return res
}

// GenerateLogAnomalyDetector returns the current state in the form of *svcapitypes.LogAnomalyDetector.
func GenerateLogAnomalyDetector(resp *svcsdk.GetLogAnomalyDetectorOutput) *svcapitypes.LogAnomalyDetector {
	cr := &svcapitypes.LogAnomalyDetector{}

	if resp.AnomalyVisibilityTime != nil {
		cr.Spec.ForProvider.AnomalyVisibilityTime = resp.AnomalyVisibilityTime
	} else {
		cr.Spec.ForProvider.AnomalyVisibilityTime = nil
	}
	if resp.DetectorName != nil {
		cr.Spec.ForProvider.DetectorName = resp.DetectorName
	} else {
		cr.Spec.ForProvider.DetectorName = nil
	}
	if resp.EvaluationFrequency != nil {
		cr.Spec.ForProvider.EvaluationFrequency = resp.EvaluationFrequency
	} else {
		cr.Spec.ForProvider.EvaluationFrequency = nil
	}
	if resp.FilterPattern != nil {
		cr.Spec.ForProvider.FilterPattern = resp.FilterPattern
	} else {
		cr.Spec.ForProvider.FilterPattern = nil
	}
	if resp.KmsKeyId != nil {
		cr.Spec.ForProvider.KMSKeyID = resp.KmsKeyId
	} else {
		cr.Spec.ForProvider.KMSKeyID = nil
	}
	if resp.LogGroupArnList != nil {
		f8 := []*string{}
		for _, f8iter := range resp.LogGroupArnList {
			var f8elem string
			f8elem = *f8iter
			f8 = append(f8, &f8elem)
		}
		cr.Spec.ForProvider.LogGroupARNList = f8
	} else {
		cr.Spec.ForProvider.LogGroupARNList = nil
	}

	return cr
}

// GenerateCreateLogAnomalyDetectorInput returns a create input.
func GenerateCreateLogAnomalyDetectorInput(cr *svcapitypes.LogAnomalyDetector) *svcsdk.CreateLogAnomalyDetectorInput {
	res := &svcsdk.CreateLogAnomalyDetectorInput{}

	if cr.Spec.ForProvider.AnomalyVisibilityTime != nil {
		res.SetAnomalyVisibilityTime(*cr.Spec.ForProvider.AnomalyVisibilityTime)
	}
	if cr.Spec.ForProvider.DetectorName != nil {
		res.SetDetectorName(*cr.Spec.ForProvider.DetectorName)
	}
	if cr.Spec.ForProvider.EvaluationFrequency != nil {
		res.SetEvaluationFrequency(*cr.Spec.ForProvider.EvaluationFrequency)
	}
	if cr.Spec.ForProvider.FilterPattern != nil {
		res.SetFilterPattern(*cr.Spec.ForProvider.FilterPattern)
	}
	if cr.Spec.ForProvider.KMSKeyID != nil {
		res.SetKmsKeyId(*cr.Spec.ForProvider.KMSKeyID)
	}
	if cr.Spec.ForProvider.LogGroupARNList != nil {
		f5 := []*string{}
		for _, f5iter := range cr.Spec.ForProvider.LogGroupARNList {
			var f5elem string
			f5elem = *f5iter
			f5 = append(f5, &f5elem)
		}
		res.SetLogGroupArnList(f5)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range cr.Spec.ForProvider.Tags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		res.SetTags(f6)
	}

	return res
}

// GenerateUpdateLogAnomalyDetectorInput returns an update input.
func GenerateUpdateLogAnomalyDetectorInput(cr *svcapitypes.LogAnomalyDetector) *svcsdk.UpdateLogAnomalyDetectorInput {
	res := &svcsdk.UpdateLogAnomalyDetectorInput{}

	if cr.Status.AtProvider.AnomalyDetectorARN != nil {
		res.SetAnomalyDetectorArn(*cr.Status.AtProvider.AnomalyDetectorARN)
	}
	if cr.Spec.ForProvider.AnomalyVisibilityTime != nil {
		res.SetAnomalyVisibilityTime(*cr.Spec.ForProvider.AnomalyVisibilityTime)
	}
	if cr.Spec.ForProvider.EvaluationFrequency != nil {
		res.SetEvaluationFrequency(*cr.Spec.ForProvider.EvaluationFrequency)
	}
	if cr.Spec.ForProvider.FilterPattern != nil {
		res.SetFilterPattern(*cr.Spec.ForProvider.FilterPattern)
	}

	return res
}

// GenerateDeleteLogAnomalyDetectorInput returns a deletion input.
func GenerateDeleteLogAnomalyDetectorInput(cr *svcapitypes.LogAnomalyDetector) *svcsdk.DeleteLogAnomalyDetectorInput {
	res := &svcsdk.DeleteLogAnomalyDetectorInput{}

	if cr.Status.AtProvider.AnomalyDetectorARN != nil {
		res.SetAnomalyDetectorArn(*cr.Status.AtProvider.AnomalyDetectorARN)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
