/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package object

import (
	"bytes"
	"context"
	"time"

	"github.com/aws/aws-sdk-go-v2/aws"
	awss3 "github.com/aws/aws-sdk-go-v2/service/s3"
	"github.com/aws/aws-sdk-go-v2/service/s3/types"
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/event"
	"github.com/crossplane/crossplane-runtime/pkg/ratelimiter"
	"github.com/crossplane/crossplane-runtime/pkg/resource"
	"github.com/crossplane/provider-aws/pkg/clients/s3"
	"github.com/google/go-cmp/cmp"
	"github.com/pkg/errors"
	"k8s.io/client-go/util/workqueue"
	ctrl "sigs.k8s.io/controller-runtime"
	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller"

	"github.com/crossplane/crossplane-runtime/pkg/logging"
	"github.com/crossplane/crossplane-runtime/pkg/reconciler/managed"
	cpresource "github.com/crossplane/crossplane-runtime/pkg/resource"

	v1alpha1 "github.com/crossplane/provider-aws/apis/s3/v1alpha1"
	awsclient "github.com/crossplane/provider-aws/pkg/clients"
)

const (
	errUnexpectedObject = "managed resource is not an Object resource"

	errCreateSession = "cannot create a new session"
	errCreate        = "cannot create Object in AWS"
	errUpdate        = "cannot update Object in AWS"
	errDescribe      = "failed to describe Object"
	errGet           = "failed to get Object for bucket with key"
	errDelete        = "failed to delete Object"
)

// SetupObject adds a controller that reconciles Object.
func SetupObject(mgr ctrl.Manager, l logging.Logger, rl workqueue.RateLimiter, poll time.Duration) error {
	name := managed.ControllerName(v1alpha1.ObjectGroupKind)
	logger := l.WithValues("object", name)
	return ctrl.NewControllerManagedBy(mgr).
		Named(name).
		WithOptions(controller.Options{
			RateLimiter: ratelimiter.NewController(rl),
		}).
		For(&v1alpha1.Object{}).
		Complete(managed.NewReconciler(mgr,
			resource.ManagedKind(v1alpha1.ObjectGroupVersionKind),
			managed.WithExternalConnecter(&connector{kube: mgr.GetClient(),
				newClientFn: s3.NewObjectClient, logger: logger}),
			managed.WithPollInterval(poll),
			managed.WithLogger(l.WithValues("controller", name)),
			managed.WithRecorder(event.NewAPIRecorder(mgr.GetEventRecorderFor(name)))))
}

type connector struct {
	kube        client.Client
	newClientFn func(config aws.Config) s3.ObjectClient
	logger      logging.Logger
}

func (c *connector) Connect(ctx context.Context, mg cpresource.Managed) (managed.ExternalClient, error) {
	cr, ok := mg.(*v1alpha1.Object)
	if !ok {
		return nil, errors.New(errUnexpectedObject)
	}
	cfg, err := awsclient.GetConfig(ctx, c.kube, mg, cr.Spec.ForProvider.Region)
	if err != nil {
		return nil, err
	}
	return &external{client: c.newClientFn(*cfg), kube: c.kube, logger: c.logger}, nil
}

type external struct {
	kube   client.Client
	client s3.ObjectClient
	logger logging.Logger
}

func (e *external) Observe(ctx context.Context, mg cpresource.Managed) (managed.ExternalObservation, error) {
	object, ok := mg.(*v1alpha1.Object)
	if !ok {
		return managed.ExternalObservation{}, errors.New(errUnexpectedObject)
	}

	resp, err := e.client.GetObject(ctx, &awss3.GetObjectInput{
		Bucket: object.Spec.ForProvider.BucketName,
		Key:    object.Spec.ForProvider.Key,
	})

	if err != nil {
		if s3.IsErrorBucketNotFound(err) {
			return managed.ExternalObservation{}, nil
		}
		return managed.ExternalObservation{}, awsclient.Wrap(resource.Ignore(s3.IsErrorObjectNotFound, err), errGet)
	}

	object.SetConditions(xpv1.Available())

	buf := new(bytes.Buffer)
	buf.ReadFrom(resp.Body)
	fromStr := buf.String()
	expectStr := ""
	if object.Spec.ForProvider.Body != nil {
		expectStr = *object.Spec.ForProvider.Body
	}

	// If our version and the external version are the same, we return ResourceUpToDate: true
	return managed.ExternalObservation{
		ResourceExists:   true,
		ResourceUpToDate: cmp.Equal(expectStr, fromStr),
	}, nil

}

// Create create Object in the bucket
func (e *external) Create(ctx context.Context, mg cpresource.Managed) (managed.ExternalCreation, error) {
	object, ok := mg.(*v1alpha1.Object)
	if !ok {
		return managed.ExternalCreation{}, errors.New(errUnexpectedObject)
	}
	object.SetConditions(xpv1.Creating())
	_, err := e.client.PutObject(ctx, s3.GenerateCreateObjectInput(object.Spec.ForProvider))
	return managed.ExternalCreation{}, awsclient.Wrap(err, errCreate)
}

// Update patches the existing Object in the bucket
func (e *external) Update(ctx context.Context, mg cpresource.Managed) (managed.ExternalUpdate, error) {
	object, ok := mg.(*v1alpha1.Object)
	if !ok {
		return managed.ExternalUpdate{}, errors.New(errUnexpectedObject)
	}
	object.SetConditions(xpv1.Creating())
	_, err := e.client.PutObject(ctx, s3.GenerateCreateObjectInput(object.Spec.ForProvider))
	return managed.ExternalUpdate{}, awsclient.Wrap(err, errUpdate)
}

// Delete removes the existing policy for a bucket
func (e *external) Delete(ctx context.Context, mg cpresource.Managed) error {
	cr, ok := mg.(*v1alpha1.Object)
	if !ok {
		return errors.New(errUnexpectedObject)
	}
	cr.SetConditions(xpv1.Deleting())

	objectIdentifiers := []types.ObjectIdentifier{}
	inVer := &awss3.ListObjectVersionsInput{
		Bucket: cr.Spec.ForProvider.BucketName,
		Prefix: cr.Spec.ForProvider.Key,
	}

	for {
		objects, err := e.client.ListObjectVersions(ctx, inVer)
		if err != nil {
			if s3.IsErrorBucketNotFound(err) {
				return awsclient.Wrap(nil, errDelete)
			}
			return awsclient.Wrap(resource.Ignore(s3.IsErrorObjectNotFound, err), errDelete)
		}
		for _, object := range objects.DeleteMarkers {
			objectIdentifiers = append(objectIdentifiers, types.ObjectIdentifier{
				Key:       object.Key,
				VersionId: object.VersionId,
			})
		}
		for _, version := range objects.Versions {
			objectIdentifiers = append(objectIdentifiers, types.ObjectIdentifier{
				Key:       version.Key,
				VersionId: version.VersionId,
			})
		}
		_, err = e.client.DeleteObjects(ctx, &awss3.DeleteObjectsInput{
			Bucket: cr.Spec.ForProvider.BucketName,
			Delete: &types.Delete{
				Objects: objectIdentifiers,
			},
		})
		if err != nil {
			return awsclient.Wrap(err, errDelete)
		}
		if objects.IsTruncated {
			inVer.VersionIdMarker = objects.NextVersionIdMarker
			inVer.KeyMarker = objects.NextKeyMarker
		} else {
			break
		}
		objectIdentifiers = objectIdentifiers[:0]
	}

	return awsclient.Wrap(nil, errDelete)
}
