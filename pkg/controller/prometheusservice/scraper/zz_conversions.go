/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package scraper

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/prometheusservice"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/prometheusservice/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeScraperInput returns input for read
// operation.
func GenerateDescribeScraperInput(cr *svcapitypes.Scraper) *svcsdk.DescribeScraperInput {
	res := &svcsdk.DescribeScraperInput{}

	if cr.Status.AtProvider.ScraperID != nil {
		res.SetScraperId(*cr.Status.AtProvider.ScraperID)
	}

	return res
}

// GenerateScraper returns the current state in the form of *svcapitypes.Scraper.
func GenerateScraper(resp *svcsdk.DescribeScraperOutput) *svcapitypes.Scraper {
	cr := &svcapitypes.Scraper{}

	if resp.Scraper.Alias != nil {
		cr.Spec.ForProvider.Alias = resp.Scraper.Alias
	} else {
		cr.Spec.ForProvider.Alias = nil
	}
	if resp.Scraper.Arn != nil {
		cr.Status.AtProvider.ARN = resp.Scraper.Arn
	} else {
		cr.Status.AtProvider.ARN = nil
	}
	if resp.Scraper.Destination != nil {
		f3 := &svcapitypes.Destination{}
		if resp.Scraper.Destination.AmpConfiguration != nil {
			f3f0 := &svcapitypes.AmpConfiguration{}
			if resp.Scraper.Destination.AmpConfiguration.WorkspaceArn != nil {
				f3f0.WorkspaceARN = resp.Scraper.Destination.AmpConfiguration.WorkspaceArn
			}
			f3.AmpConfiguration = f3f0
		}
		cr.Spec.ForProvider.Destination = f3
	} else {
		cr.Spec.ForProvider.Destination = nil
	}
	if resp.Scraper.ScrapeConfiguration != nil {
		f6 := &svcapitypes.ScrapeConfiguration{}
		if resp.Scraper.ScrapeConfiguration.ConfigurationBlob != nil {
			f6.ConfigurationBlob = resp.Scraper.ScrapeConfiguration.ConfigurationBlob
		}
		cr.Spec.ForProvider.ScrapeConfiguration = f6
	} else {
		cr.Spec.ForProvider.ScrapeConfiguration = nil
	}
	if resp.Scraper.ScraperId != nil {
		cr.Status.AtProvider.ScraperID = resp.Scraper.ScraperId
	} else {
		cr.Status.AtProvider.ScraperID = nil
	}
	if resp.Scraper.Source != nil {
		f8 := &svcapitypes.Source{}
		if resp.Scraper.Source.EksConfiguration != nil {
			f8f0 := &svcapitypes.EKSConfiguration{}
			if resp.Scraper.Source.EksConfiguration.ClusterArn != nil {
				f8f0.ClusterARN = resp.Scraper.Source.EksConfiguration.ClusterArn
			}
			if resp.Scraper.Source.EksConfiguration.SecurityGroupIds != nil {
				f8f0f1 := []*string{}
				for _, f8f0f1iter := range resp.Scraper.Source.EksConfiguration.SecurityGroupIds {
					var f8f0f1elem string
					f8f0f1elem = *f8f0f1iter
					f8f0f1 = append(f8f0f1, &f8f0f1elem)
				}
				f8f0.SecurityGroupIDs = f8f0f1
			}
			if resp.Scraper.Source.EksConfiguration.SubnetIds != nil {
				f8f0f2 := []*string{}
				for _, f8f0f2iter := range resp.Scraper.Source.EksConfiguration.SubnetIds {
					var f8f0f2elem string
					f8f0f2elem = *f8f0f2iter
					f8f0f2 = append(f8f0f2, &f8f0f2elem)
				}
				f8f0.SubnetIDs = f8f0f2
			}
			f8.EKSConfiguration = f8f0
		}
		cr.Spec.ForProvider.Source = f8
	} else {
		cr.Spec.ForProvider.Source = nil
	}
	if resp.Scraper.Status != nil {
		f9 := &svcapitypes.ScraperStatus_SDK{}
		if resp.Scraper.Status.StatusCode != nil {
			f9.StatusCode = resp.Scraper.Status.StatusCode
		}
		cr.Status.AtProvider.Status = f9
	} else {
		cr.Status.AtProvider.Status = nil
	}
	if resp.Scraper.Tags != nil {
		f11 := map[string]*string{}
		for f11key, f11valiter := range resp.Scraper.Tags {
			var f11val string
			f11val = *f11valiter
			f11[f11key] = &f11val
		}
		cr.Spec.ForProvider.Tags = f11
	} else {
		cr.Spec.ForProvider.Tags = nil
	}

	return cr
}

// GenerateCreateScraperInput returns a create input.
func GenerateCreateScraperInput(cr *svcapitypes.Scraper) *svcsdk.CreateScraperInput {
	res := &svcsdk.CreateScraperInput{}

	if cr.Spec.ForProvider.Alias != nil {
		res.SetAlias(*cr.Spec.ForProvider.Alias)
	}
	if cr.Spec.ForProvider.ClientToken != nil {
		res.SetClientToken(*cr.Spec.ForProvider.ClientToken)
	}
	if cr.Spec.ForProvider.Destination != nil {
		f2 := &svcsdk.Destination{}
		if cr.Spec.ForProvider.Destination.AmpConfiguration != nil {
			f2f0 := &svcsdk.AmpConfiguration{}
			if cr.Spec.ForProvider.Destination.AmpConfiguration.WorkspaceARN != nil {
				f2f0.SetWorkspaceArn(*cr.Spec.ForProvider.Destination.AmpConfiguration.WorkspaceARN)
			}
			f2.SetAmpConfiguration(f2f0)
		}
		res.SetDestination(f2)
	}
	if cr.Spec.ForProvider.ScrapeConfiguration != nil {
		f3 := &svcsdk.ScrapeConfiguration{}
		if cr.Spec.ForProvider.ScrapeConfiguration.ConfigurationBlob != nil {
			f3.SetConfigurationBlob(cr.Spec.ForProvider.ScrapeConfiguration.ConfigurationBlob)
		}
		res.SetScrapeConfiguration(f3)
	}
	if cr.Spec.ForProvider.Source != nil {
		f4 := &svcsdk.Source{}
		if cr.Spec.ForProvider.Source.EKSConfiguration != nil {
			f4f0 := &svcsdk.EksConfiguration{}
			if cr.Spec.ForProvider.Source.EKSConfiguration.ClusterARN != nil {
				f4f0.SetClusterArn(*cr.Spec.ForProvider.Source.EKSConfiguration.ClusterARN)
			}
			if cr.Spec.ForProvider.Source.EKSConfiguration.SecurityGroupIDs != nil {
				f4f0f1 := []*string{}
				for _, f4f0f1iter := range cr.Spec.ForProvider.Source.EKSConfiguration.SecurityGroupIDs {
					var f4f0f1elem string
					f4f0f1elem = *f4f0f1iter
					f4f0f1 = append(f4f0f1, &f4f0f1elem)
				}
				f4f0.SetSecurityGroupIds(f4f0f1)
			}
			if cr.Spec.ForProvider.Source.EKSConfiguration.SubnetIDs != nil {
				f4f0f2 := []*string{}
				for _, f4f0f2iter := range cr.Spec.ForProvider.Source.EKSConfiguration.SubnetIDs {
					var f4f0f2elem string
					f4f0f2elem = *f4f0f2iter
					f4f0f2 = append(f4f0f2, &f4f0f2elem)
				}
				f4f0.SetSubnetIds(f4f0f2)
			}
			f4.SetEksConfiguration(f4f0)
		}
		res.SetSource(f4)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f5 := map[string]*string{}
		for f5key, f5valiter := range cr.Spec.ForProvider.Tags {
			var f5val string
			f5val = *f5valiter
			f5[f5key] = &f5val
		}
		res.SetTags(f5)
	}

	return res
}

// GenerateDeleteScraperInput returns a deletion input.
func GenerateDeleteScraperInput(cr *svcapitypes.Scraper) *svcsdk.DeleteScraperInput {
	res := &svcsdk.DeleteScraperInput{}

	if cr.Spec.ForProvider.ClientToken != nil {
		res.SetClientToken(*cr.Spec.ForProvider.ClientToken)
	}
	if cr.Status.AtProvider.ScraperID != nil {
		res.SetScraperId(*cr.Status.AtProvider.ScraperID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
