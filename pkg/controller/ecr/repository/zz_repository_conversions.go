// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package repository

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/ecr"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane/provider-aws/apis/ecr/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.
// TODO(muvaf): We can generate one-time boilerplate for these hooks but currently
// ACK doesn't support not generating if file exists.
// GenerateDescribeRepositoriesInput returns input for read
// operation.
func GenerateDescribeRepositoriesInput(cr *svcapitypes.Repository) *svcsdk.DescribeRepositoriesInput {
	res := preGenerateDescribeRepositoriesInput(cr, &svcsdk.DescribeRepositoriesInput{})

	if cr.Status.AtProvider.RegistryID != nil {
		res.SetRegistryId(*cr.Status.AtProvider.RegistryID)
	}

	return postGenerateDescribeRepositoriesInput(cr, res)
}

// GenerateRepository returns the current state in the form of *svcapitypes.Repository.
func GenerateRepository(resp *svcsdk.DescribeRepositoriesOutput) *svcapitypes.Repository {
	cr := &svcapitypes.Repository{}

	found := false
	for _, elem := range resp.Repositories {
		if elem.CreatedAt != nil {
			cr.Status.AtProvider.CreatedAt = &metav1.Time{*elem.CreatedAt}
		}
		if elem.EncryptionConfiguration != nil {
			f1 := &svcapitypes.EncryptionConfiguration{}
			if elem.EncryptionConfiguration.EncryptionType != nil {
				f1.EncryptionType = elem.EncryptionConfiguration.EncryptionType
			}
			if elem.EncryptionConfiguration.KmsKey != nil {
				f1.KMSKey = elem.EncryptionConfiguration.KmsKey
			}
			cr.Spec.ForProvider.EncryptionConfiguration = f1
		}
		if elem.ImageScanningConfiguration != nil {
			f2 := &svcapitypes.ImageScanningConfiguration{}
			if elem.ImageScanningConfiguration.ScanOnPush != nil {
				f2.ScanOnPush = elem.ImageScanningConfiguration.ScanOnPush
			}
			cr.Spec.ForProvider.ImageScanningConfiguration = f2
		}
		if elem.ImageTagMutability != nil {
			cr.Spec.ForProvider.ImageTagMutability = elem.ImageTagMutability
		}
		if elem.RegistryId != nil {
			cr.Status.AtProvider.RegistryID = elem.RegistryId
		}
		if elem.RepositoryArn != nil {
			cr.Status.AtProvider.RepositoryARN = elem.RepositoryArn
		}
		if elem.RepositoryUri != nil {
			cr.Status.AtProvider.RepositoryURI = elem.RepositoryUri
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateRepositoryInput returns a create input.
func GenerateCreateRepositoryInput(cr *svcapitypes.Repository) *svcsdk.CreateRepositoryInput {
	res := preGenerateCreateRepositoryInput(cr, &svcsdk.CreateRepositoryInput{})

	if cr.Spec.ForProvider.EncryptionConfiguration != nil {
		f0 := &svcsdk.EncryptionConfiguration{}
		if cr.Spec.ForProvider.EncryptionConfiguration.EncryptionType != nil {
			f0.SetEncryptionType(*cr.Spec.ForProvider.EncryptionConfiguration.EncryptionType)
		}
		if cr.Spec.ForProvider.EncryptionConfiguration.KMSKey != nil {
			f0.SetKmsKey(*cr.Spec.ForProvider.EncryptionConfiguration.KMSKey)
		}
		res.SetEncryptionConfiguration(f0)
	}
	if cr.Spec.ForProvider.ImageScanningConfiguration != nil {
		f1 := &svcsdk.ImageScanningConfiguration{}
		if cr.Spec.ForProvider.ImageScanningConfiguration.ScanOnPush != nil {
			f1.SetScanOnPush(*cr.Spec.ForProvider.ImageScanningConfiguration.ScanOnPush)
		}
		res.SetImageScanningConfiguration(f1)
	}
	if cr.Spec.ForProvider.ImageTagMutability != nil {
		res.SetImageTagMutability(*cr.Spec.ForProvider.ImageTagMutability)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range cr.Spec.ForProvider.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}

	return postGenerateCreateRepositoryInput(cr, res)
}

// GenerateDeleteRepositoryInput returns a deletion input.
func GenerateDeleteRepositoryInput(cr *svcapitypes.Repository) *svcsdk.DeleteRepositoryInput {
	res := preGenerateDeleteRepositoryInput(cr, &svcsdk.DeleteRepositoryInput{})

	if cr.Status.AtProvider.RegistryID != nil {
		res.SetRegistryId(*cr.Status.AtProvider.RegistryID)
	}

	return postGenerateDeleteRepositoryInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "RepositoryNotFoundException"
}
