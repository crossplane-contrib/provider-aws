/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package accesspoint

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/efs"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/efs/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeAccessPointsInput returns input for read
// operation.
func GenerateDescribeAccessPointsInput(cr *svcapitypes.AccessPoint) *svcsdk.DescribeAccessPointsInput {
	res := &svcsdk.DescribeAccessPointsInput{}

	if cr.Status.AtProvider.AccessPointID != nil {
		res.SetAccessPointId(*cr.Status.AtProvider.AccessPointID)
	}
	if cr.Status.AtProvider.FileSystemID != nil {
		res.SetFileSystemId(*cr.Status.AtProvider.FileSystemID)
	}

	return res
}

// GenerateAccessPoint returns the current state in the form of *svcapitypes.AccessPoint.
func GenerateAccessPoint(resp *svcsdk.DescribeAccessPointsOutput) *svcapitypes.AccessPoint {
	cr := &svcapitypes.AccessPoint{}

	found := false
	for _, elem := range resp.AccessPoints {
		if elem.AccessPointArn != nil {
			cr.Status.AtProvider.AccessPointARN = elem.AccessPointArn
		} else {
			cr.Status.AtProvider.AccessPointARN = nil
		}
		if elem.AccessPointId != nil {
			cr.Status.AtProvider.AccessPointID = elem.AccessPointId
		} else {
			cr.Status.AtProvider.AccessPointID = nil
		}
		if elem.ClientToken != nil {
			cr.Status.AtProvider.ClientToken = elem.ClientToken
		} else {
			cr.Status.AtProvider.ClientToken = nil
		}
		if elem.FileSystemId != nil {
			cr.Status.AtProvider.FileSystemID = elem.FileSystemId
		} else {
			cr.Status.AtProvider.FileSystemID = nil
		}
		if elem.LifeCycleState != nil {
			cr.Status.AtProvider.LifeCycleState = elem.LifeCycleState
		} else {
			cr.Status.AtProvider.LifeCycleState = nil
		}
		if elem.Name != nil {
			cr.Status.AtProvider.Name = elem.Name
		} else {
			cr.Status.AtProvider.Name = nil
		}
		if elem.OwnerId != nil {
			cr.Status.AtProvider.OwnerID = elem.OwnerId
		} else {
			cr.Status.AtProvider.OwnerID = nil
		}
		if elem.PosixUser != nil {
			f7 := &svcapitypes.PosixUser{}
			if elem.PosixUser.Gid != nil {
				f7.Gid = elem.PosixUser.Gid
			}
			if elem.PosixUser.SecondaryGids != nil {
				f7f1 := []*int64{}
				for _, f7f1iter := range elem.PosixUser.SecondaryGids {
					var f7f1elem int64
					f7f1elem = *f7f1iter
					f7f1 = append(f7f1, &f7f1elem)
				}
				f7.SecondaryGids = f7f1
			}
			if elem.PosixUser.Uid != nil {
				f7.Uid = elem.PosixUser.Uid
			}
			cr.Spec.ForProvider.PosixUser = f7
		} else {
			cr.Spec.ForProvider.PosixUser = nil
		}
		if elem.RootDirectory != nil {
			f8 := &svcapitypes.RootDirectory{}
			if elem.RootDirectory.CreationInfo != nil {
				f8f0 := &svcapitypes.CreationInfo{}
				if elem.RootDirectory.CreationInfo.OwnerGid != nil {
					f8f0.OwnerGid = elem.RootDirectory.CreationInfo.OwnerGid
				}
				if elem.RootDirectory.CreationInfo.OwnerUid != nil {
					f8f0.OwnerUid = elem.RootDirectory.CreationInfo.OwnerUid
				}
				if elem.RootDirectory.CreationInfo.Permissions != nil {
					f8f0.Permissions = elem.RootDirectory.CreationInfo.Permissions
				}
				f8.CreationInfo = f8f0
			}
			if elem.RootDirectory.Path != nil {
				f8.Path = elem.RootDirectory.Path
			}
			cr.Spec.ForProvider.RootDirectory = f8
		} else {
			cr.Spec.ForProvider.RootDirectory = nil
		}
		if elem.Tags != nil {
			f9 := []*svcapitypes.Tag{}
			for _, f9iter := range elem.Tags {
				f9elem := &svcapitypes.Tag{}
				if f9iter.Key != nil {
					f9elem.Key = f9iter.Key
				}
				if f9iter.Value != nil {
					f9elem.Value = f9iter.Value
				}
				f9 = append(f9, f9elem)
			}
			cr.Spec.ForProvider.Tags = f9
		} else {
			cr.Spec.ForProvider.Tags = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateAccessPointInput returns a create input.
func GenerateCreateAccessPointInput(cr *svcapitypes.AccessPoint) *svcsdk.CreateAccessPointInput {
	res := &svcsdk.CreateAccessPointInput{}

	if cr.Spec.ForProvider.PosixUser != nil {
		f0 := &svcsdk.PosixUser{}
		if cr.Spec.ForProvider.PosixUser.Gid != nil {
			f0.SetGid(*cr.Spec.ForProvider.PosixUser.Gid)
		}
		if cr.Spec.ForProvider.PosixUser.SecondaryGids != nil {
			f0f1 := []*int64{}
			for _, f0f1iter := range cr.Spec.ForProvider.PosixUser.SecondaryGids {
				var f0f1elem int64
				f0f1elem = *f0f1iter
				f0f1 = append(f0f1, &f0f1elem)
			}
			f0.SetSecondaryGids(f0f1)
		}
		if cr.Spec.ForProvider.PosixUser.Uid != nil {
			f0.SetUid(*cr.Spec.ForProvider.PosixUser.Uid)
		}
		res.SetPosixUser(f0)
	}
	if cr.Spec.ForProvider.RootDirectory != nil {
		f1 := &svcsdk.RootDirectory{}
		if cr.Spec.ForProvider.RootDirectory.CreationInfo != nil {
			f1f0 := &svcsdk.CreationInfo{}
			if cr.Spec.ForProvider.RootDirectory.CreationInfo.OwnerGid != nil {
				f1f0.SetOwnerGid(*cr.Spec.ForProvider.RootDirectory.CreationInfo.OwnerGid)
			}
			if cr.Spec.ForProvider.RootDirectory.CreationInfo.OwnerUid != nil {
				f1f0.SetOwnerUid(*cr.Spec.ForProvider.RootDirectory.CreationInfo.OwnerUid)
			}
			if cr.Spec.ForProvider.RootDirectory.CreationInfo.Permissions != nil {
				f1f0.SetPermissions(*cr.Spec.ForProvider.RootDirectory.CreationInfo.Permissions)
			}
			f1.SetCreationInfo(f1f0)
		}
		if cr.Spec.ForProvider.RootDirectory.Path != nil {
			f1.SetPath(*cr.Spec.ForProvider.RootDirectory.Path)
		}
		res.SetRootDirectory(f1)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f2 := []*svcsdk.Tag{}
		for _, f2iter := range cr.Spec.ForProvider.Tags {
			f2elem := &svcsdk.Tag{}
			if f2iter.Key != nil {
				f2elem.SetKey(*f2iter.Key)
			}
			if f2iter.Value != nil {
				f2elem.SetValue(*f2iter.Value)
			}
			f2 = append(f2, f2elem)
		}
		res.SetTags(f2)
	}

	return res
}

// GenerateDeleteAccessPointInput returns a deletion input.
func GenerateDeleteAccessPointInput(cr *svcapitypes.AccessPoint) *svcsdk.DeleteAccessPointInput {
	res := &svcsdk.DeleteAccessPointInput{}

	if cr.Status.AtProvider.AccessPointID != nil {
		res.SetAccessPointId(*cr.Status.AtProvider.AccessPointID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "AccessPointNotFound"
}
