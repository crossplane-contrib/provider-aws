/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package provisionedproduct

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/servicecatalog"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/servicecatalog/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeProvisionedProductInput returns input for read
// operation.
func GenerateDescribeProvisionedProductInput(cr *svcapitypes.ProvisionedProduct) *svcsdk.DescribeProvisionedProductInput {
	res := &svcsdk.DescribeProvisionedProductInput{}

	if cr.Spec.ForProvider.AcceptLanguage != nil {
		res.SetAcceptLanguage(*cr.Spec.ForProvider.AcceptLanguage)
	}
	if cr.Spec.ForProvider.Name != nil {
		res.SetName(*cr.Spec.ForProvider.Name)
	}

	return res
}

// GenerateProvisionedProduct returns the current state in the form of *svcapitypes.ProvisionedProduct.
func GenerateProvisionedProduct(resp *svcsdk.DescribeProvisionedProductOutput) *svcapitypes.ProvisionedProduct {
	cr := &svcapitypes.ProvisionedProduct{}

	return cr
}

// GenerateProvisionProductInput returns a create input.
func GenerateProvisionProductInput(cr *svcapitypes.ProvisionedProduct) *svcsdk.ProvisionProductInput {
	res := &svcsdk.ProvisionProductInput{}

	if cr.Spec.ForProvider.AcceptLanguage != nil {
		res.SetAcceptLanguage(*cr.Spec.ForProvider.AcceptLanguage)
	}
	if cr.Spec.ForProvider.NotificationARNs != nil {
		f1 := []*string{}
		for _, f1iter := range cr.Spec.ForProvider.NotificationARNs {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetNotificationArns(f1)
	}
	if cr.Spec.ForProvider.PathID != nil {
		res.SetPathId(*cr.Spec.ForProvider.PathID)
	}
	if cr.Spec.ForProvider.PathName != nil {
		res.SetPathName(*cr.Spec.ForProvider.PathName)
	}
	if cr.Spec.ForProvider.ProductID != nil {
		res.SetProductId(*cr.Spec.ForProvider.ProductID)
	}
	if cr.Spec.ForProvider.ProductName != nil {
		res.SetProductName(*cr.Spec.ForProvider.ProductName)
	}
	if cr.Spec.ForProvider.Name != nil {
		res.SetProvisionedProductName(*cr.Spec.ForProvider.Name)
	}
	if cr.Spec.ForProvider.ProvisioningArtifactID != nil {
		res.SetProvisioningArtifactId(*cr.Spec.ForProvider.ProvisioningArtifactID)
	}
	if cr.Spec.ForProvider.ProvisioningArtifactName != nil {
		res.SetProvisioningArtifactName(*cr.Spec.ForProvider.ProvisioningArtifactName)
	}
	if cr.Spec.ForProvider.ProvisioningParameters != nil {
		f9 := []*svcsdk.ProvisioningParameter{}
		for _, f9iter := range cr.Spec.ForProvider.ProvisioningParameters {
			f9elem := &svcsdk.ProvisioningParameter{}
			if f9iter.Key != nil {
				f9elem.SetKey(*f9iter.Key)
			}
			if f9iter.Value != nil {
				f9elem.SetValue(*f9iter.Value)
			}
			f9 = append(f9, f9elem)
		}
		res.SetProvisioningParameters(f9)
	}
	if cr.Spec.ForProvider.ProvisioningPreferences != nil {
		f10 := &svcsdk.ProvisioningPreferences{}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetAccounts != nil {
			f10f0 := []*string{}
			for _, f10f0iter := range cr.Spec.ForProvider.ProvisioningPreferences.StackSetAccounts {
				var f10f0elem string
				f10f0elem = *f10f0iter
				f10f0 = append(f10f0, &f10f0elem)
			}
			f10.SetStackSetAccounts(f10f0)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetFailureToleranceCount != nil {
			f10.SetStackSetFailureToleranceCount(*cr.Spec.ForProvider.ProvisioningPreferences.StackSetFailureToleranceCount)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetFailureTolerancePercentage != nil {
			f10.SetStackSetFailureTolerancePercentage(*cr.Spec.ForProvider.ProvisioningPreferences.StackSetFailureTolerancePercentage)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetMaxConcurrencyCount != nil {
			f10.SetStackSetMaxConcurrencyCount(*cr.Spec.ForProvider.ProvisioningPreferences.StackSetMaxConcurrencyCount)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetMaxConcurrencyPercentage != nil {
			f10.SetStackSetMaxConcurrencyPercentage(*cr.Spec.ForProvider.ProvisioningPreferences.StackSetMaxConcurrencyPercentage)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetRegions != nil {
			f10f5 := []*string{}
			for _, f10f5iter := range cr.Spec.ForProvider.ProvisioningPreferences.StackSetRegions {
				var f10f5elem string
				f10f5elem = *f10f5iter
				f10f5 = append(f10f5, &f10f5elem)
			}
			f10.SetStackSetRegions(f10f5)
		}
		res.SetProvisioningPreferences(f10)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f11 := []*svcsdk.Tag{}
		for _, f11iter := range cr.Spec.ForProvider.Tags {
			f11elem := &svcsdk.Tag{}
			if f11iter.Key != nil {
				f11elem.SetKey(*f11iter.Key)
			}
			if f11iter.Value != nil {
				f11elem.SetValue(*f11iter.Value)
			}
			f11 = append(f11, f11elem)
		}
		res.SetTags(f11)
	}

	return res
}

// GenerateUpdateProvisionedProductInput returns an update input.
func GenerateUpdateProvisionedProductInput(cr *svcapitypes.ProvisionedProduct) *svcsdk.UpdateProvisionedProductInput {
	res := &svcsdk.UpdateProvisionedProductInput{}

	if cr.Spec.ForProvider.AcceptLanguage != nil {
		res.SetAcceptLanguage(*cr.Spec.ForProvider.AcceptLanguage)
	}
	if cr.Spec.ForProvider.PathID != nil {
		res.SetPathId(*cr.Spec.ForProvider.PathID)
	}
	if cr.Spec.ForProvider.PathName != nil {
		res.SetPathName(*cr.Spec.ForProvider.PathName)
	}
	if cr.Spec.ForProvider.ProductID != nil {
		res.SetProductId(*cr.Spec.ForProvider.ProductID)
	}
	if cr.Spec.ForProvider.ProductName != nil {
		res.SetProductName(*cr.Spec.ForProvider.ProductName)
	}
	if cr.Spec.ForProvider.ProvisioningArtifactID != nil {
		res.SetProvisioningArtifactId(*cr.Spec.ForProvider.ProvisioningArtifactID)
	}
	if cr.Spec.ForProvider.ProvisioningArtifactName != nil {
		res.SetProvisioningArtifactName(*cr.Spec.ForProvider.ProvisioningArtifactName)
	}
	if cr.Spec.ForProvider.ProvisioningParameters != nil {
		f8 := []*svcsdk.UpdateProvisioningParameter{}
		for _, f8iter := range cr.Spec.ForProvider.ProvisioningParameters {
			f8elem := &svcsdk.UpdateProvisioningParameter{}
			if f8iter.Key != nil {
				f8elem.SetKey(*f8iter.Key)
			}
			if f8iter.Value != nil {
				f8elem.SetValue(*f8iter.Value)
			}
			f8 = append(f8, f8elem)
		}
		res.SetProvisioningParameters(f8)
	}
	if cr.Spec.ForProvider.ProvisioningPreferences != nil {
		f9 := &svcsdk.UpdateProvisioningPreferences{}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetAccounts != nil {
			f9f0 := []*string{}
			for _, f9f0iter := range cr.Spec.ForProvider.ProvisioningPreferences.StackSetAccounts {
				var f9f0elem string
				f9f0elem = *f9f0iter
				f9f0 = append(f9f0, &f9f0elem)
			}
			f9.SetStackSetAccounts(f9f0)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetFailureToleranceCount != nil {
			f9.SetStackSetFailureToleranceCount(*cr.Spec.ForProvider.ProvisioningPreferences.StackSetFailureToleranceCount)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetFailureTolerancePercentage != nil {
			f9.SetStackSetFailureTolerancePercentage(*cr.Spec.ForProvider.ProvisioningPreferences.StackSetFailureTolerancePercentage)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetMaxConcurrencyCount != nil {
			f9.SetStackSetMaxConcurrencyCount(*cr.Spec.ForProvider.ProvisioningPreferences.StackSetMaxConcurrencyCount)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetMaxConcurrencyPercentage != nil {
			f9.SetStackSetMaxConcurrencyPercentage(*cr.Spec.ForProvider.ProvisioningPreferences.StackSetMaxConcurrencyPercentage)
		}
		if cr.Spec.ForProvider.ProvisioningPreferences.StackSetRegions != nil {
			f9f5 := []*string{}
			for _, f9f5iter := range cr.Spec.ForProvider.ProvisioningPreferences.StackSetRegions {
				var f9f5elem string
				f9f5elem = *f9f5iter
				f9f5 = append(f9f5, &f9f5elem)
			}
			f9.SetStackSetRegions(f9f5)
		}
		res.SetProvisioningPreferences(f9)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f10 := []*svcsdk.Tag{}
		for _, f10iter := range cr.Spec.ForProvider.Tags {
			f10elem := &svcsdk.Tag{}
			if f10iter.Key != nil {
				f10elem.SetKey(*f10iter.Key)
			}
			if f10iter.Value != nil {
				f10elem.SetValue(*f10iter.Value)
			}
			f10 = append(f10, f10elem)
		}
		res.SetTags(f10)
	}

	return res
}

// GenerateTerminateProvisionedProductInput returns a deletion input.
func GenerateTerminateProvisionedProductInput(cr *svcapitypes.ProvisionedProduct) *svcsdk.TerminateProvisionedProductInput {
	res := &svcsdk.TerminateProvisionedProductInput{}

	if cr.Spec.ForProvider.AcceptLanguage != nil {
		res.SetAcceptLanguage(*cr.Spec.ForProvider.AcceptLanguage)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
