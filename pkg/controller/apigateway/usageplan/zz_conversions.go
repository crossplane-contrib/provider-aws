/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package usageplan

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/apigateway"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/apigateway/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetUsagePlanInput returns input for read
// operation.
func GenerateGetUsagePlanInput(cr *svcapitypes.UsagePlan) *svcsdk.GetUsagePlanInput {
	res := &svcsdk.GetUsagePlanInput{}

	return res
}

// GenerateUsagePlan returns the current state in the form of *svcapitypes.UsagePlan.
func GenerateUsagePlan(resp *svcsdk.UsagePlan) *svcapitypes.UsagePlan {
	cr := &svcapitypes.UsagePlan{}

	if resp.ApiStages != nil {
		f0 := []*svcapitypes.APIStage{}
		for _, f0iter := range resp.ApiStages {
			f0elem := &svcapitypes.APIStage{}
			if f0iter.ApiId != nil {
				f0elem.APIID = f0iter.ApiId
			}
			if f0iter.Stage != nil {
				f0elem.Stage = f0iter.Stage
			}
			if f0iter.Throttle != nil {
				f0elemf2 := map[string]*svcapitypes.ThrottleSettings{}
				for f0elemf2key, f0elemf2valiter := range f0iter.Throttle {
					f0elemf2val := &svcapitypes.ThrottleSettings{}
					if f0elemf2valiter.BurstLimit != nil {
						f0elemf2val.BurstLimit = f0elemf2valiter.BurstLimit
					}
					if f0elemf2valiter.RateLimit != nil {
						f0elemf2val.RateLimit = f0elemf2valiter.RateLimit
					}
					f0elemf2[f0elemf2key] = f0elemf2val
				}
				f0elem.Throttle = f0elemf2
			}
			f0 = append(f0, f0elem)
		}
		cr.Status.AtProvider.APIStages = f0
	} else {
		cr.Status.AtProvider.APIStages = nil
	}
	if resp.Description != nil {
		cr.Spec.ForProvider.Description = resp.Description
	} else {
		cr.Spec.ForProvider.Description = nil
	}
	if resp.Id != nil {
		cr.Status.AtProvider.ID = resp.Id
	} else {
		cr.Status.AtProvider.ID = nil
	}
	if resp.Name != nil {
		cr.Spec.ForProvider.Name = resp.Name
	} else {
		cr.Spec.ForProvider.Name = nil
	}
	if resp.ProductCode != nil {
		cr.Status.AtProvider.ProductCode = resp.ProductCode
	} else {
		cr.Status.AtProvider.ProductCode = nil
	}
	if resp.Quota != nil {
		f5 := &svcapitypes.QuotaSettings{}
		if resp.Quota.Limit != nil {
			f5.Limit = resp.Quota.Limit
		}
		if resp.Quota.Offset != nil {
			f5.Offset = resp.Quota.Offset
		}
		if resp.Quota.Period != nil {
			f5.Period = resp.Quota.Period
		}
		cr.Spec.ForProvider.Quota = f5
	} else {
		cr.Spec.ForProvider.Quota = nil
	}
	if resp.Tags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range resp.Tags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		cr.Spec.ForProvider.Tags = f6
	} else {
		cr.Spec.ForProvider.Tags = nil
	}
	if resp.Throttle != nil {
		f7 := &svcapitypes.ThrottleSettings{}
		if resp.Throttle.BurstLimit != nil {
			f7.BurstLimit = resp.Throttle.BurstLimit
		}
		if resp.Throttle.RateLimit != nil {
			f7.RateLimit = resp.Throttle.RateLimit
		}
		cr.Spec.ForProvider.Throttle = f7
	} else {
		cr.Spec.ForProvider.Throttle = nil
	}

	return cr
}

// GenerateCreateUsagePlanInput returns a create input.
func GenerateCreateUsagePlanInput(cr *svcapitypes.UsagePlan) *svcsdk.CreateUsagePlanInput {
	res := &svcsdk.CreateUsagePlanInput{}

	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.Name != nil {
		res.SetName(*cr.Spec.ForProvider.Name)
	}
	if cr.Spec.ForProvider.Quota != nil {
		f2 := &svcsdk.QuotaSettings{}
		if cr.Spec.ForProvider.Quota.Limit != nil {
			f2.SetLimit(*cr.Spec.ForProvider.Quota.Limit)
		}
		if cr.Spec.ForProvider.Quota.Offset != nil {
			f2.SetOffset(*cr.Spec.ForProvider.Quota.Offset)
		}
		if cr.Spec.ForProvider.Quota.Period != nil {
			f2.SetPeriod(*cr.Spec.ForProvider.Quota.Period)
		}
		res.SetQuota(f2)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range cr.Spec.ForProvider.Tags {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		res.SetTags(f3)
	}
	if cr.Spec.ForProvider.Throttle != nil {
		f4 := &svcsdk.ThrottleSettings{}
		if cr.Spec.ForProvider.Throttle.BurstLimit != nil {
			f4.SetBurstLimit(*cr.Spec.ForProvider.Throttle.BurstLimit)
		}
		if cr.Spec.ForProvider.Throttle.RateLimit != nil {
			f4.SetRateLimit(*cr.Spec.ForProvider.Throttle.RateLimit)
		}
		res.SetThrottle(f4)
	}

	return res
}

// GenerateUpdateUsagePlanInput returns an update input.
func GenerateUpdateUsagePlanInput(cr *svcapitypes.UsagePlan) *svcsdk.UpdateUsagePlanInput {
	res := &svcsdk.UpdateUsagePlanInput{}

	return res
}

// GenerateDeleteUsagePlanInput returns a deletion input.
func GenerateDeleteUsagePlanInput(cr *svcapitypes.UsagePlan) *svcsdk.DeleteUsagePlanInput {
	res := &svcsdk.DeleteUsagePlanInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
