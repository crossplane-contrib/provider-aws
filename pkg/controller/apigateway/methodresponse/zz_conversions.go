/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package methodresponse

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/apigateway"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/apigateway/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetMethodResponseInput returns input for read
// operation.
func GenerateGetMethodResponseInput(cr *svcapitypes.MethodResponse) *svcsdk.GetMethodResponseInput {
	res := &svcsdk.GetMethodResponseInput{}

	if cr.Spec.ForProvider.HTTPMethod != nil {
		res.SetHttpMethod(*cr.Spec.ForProvider.HTTPMethod)
	}
	if cr.Spec.ForProvider.StatusCode != nil {
		res.SetStatusCode(*cr.Spec.ForProvider.StatusCode)
	}

	return res
}

// GenerateMethodResponse returns the current state in the form of *svcapitypes.MethodResponse.
func GenerateMethodResponse(resp *svcsdk.MethodResponse) *svcapitypes.MethodResponse {
	cr := &svcapitypes.MethodResponse{}

	if resp.ResponseModels != nil {
		f0 := map[string]*string{}
		for f0key, f0valiter := range resp.ResponseModels {
			var f0val string
			f0val = *f0valiter
			f0[f0key] = &f0val
		}
		cr.Spec.ForProvider.ResponseModels = f0
	} else {
		cr.Spec.ForProvider.ResponseModels = nil
	}
	if resp.ResponseParameters != nil {
		f1 := map[string]*bool{}
		for f1key, f1valiter := range resp.ResponseParameters {
			var f1val bool
			f1val = *f1valiter
			f1[f1key] = &f1val
		}
		cr.Spec.ForProvider.ResponseParameters = f1
	} else {
		cr.Spec.ForProvider.ResponseParameters = nil
	}
	if resp.StatusCode != nil {
		cr.Spec.ForProvider.StatusCode = resp.StatusCode
	} else {
		cr.Spec.ForProvider.StatusCode = nil
	}

	return cr
}

// GeneratePutMethodResponseInput returns a create input.
func GeneratePutMethodResponseInput(cr *svcapitypes.MethodResponse) *svcsdk.PutMethodResponseInput {
	res := &svcsdk.PutMethodResponseInput{}

	if cr.Spec.ForProvider.HTTPMethod != nil {
		res.SetHttpMethod(*cr.Spec.ForProvider.HTTPMethod)
	}
	if cr.Spec.ForProvider.ResponseModels != nil {
		f1 := map[string]*string{}
		for f1key, f1valiter := range cr.Spec.ForProvider.ResponseModels {
			var f1val string
			f1val = *f1valiter
			f1[f1key] = &f1val
		}
		res.SetResponseModels(f1)
	}
	if cr.Spec.ForProvider.ResponseParameters != nil {
		f2 := map[string]*bool{}
		for f2key, f2valiter := range cr.Spec.ForProvider.ResponseParameters {
			var f2val bool
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		res.SetResponseParameters(f2)
	}
	if cr.Spec.ForProvider.StatusCode != nil {
		res.SetStatusCode(*cr.Spec.ForProvider.StatusCode)
	}

	return res
}

// GenerateUpdateMethodResponseInput returns an update input.
func GenerateUpdateMethodResponseInput(cr *svcapitypes.MethodResponse) *svcsdk.UpdateMethodResponseInput {
	res := &svcsdk.UpdateMethodResponseInput{}

	if cr.Spec.ForProvider.HTTPMethod != nil {
		res.SetHttpMethod(*cr.Spec.ForProvider.HTTPMethod)
	}
	if cr.Spec.ForProvider.StatusCode != nil {
		res.SetStatusCode(*cr.Spec.ForProvider.StatusCode)
	}

	return res
}

// GenerateDeleteMethodResponseInput returns a deletion input.
func GenerateDeleteMethodResponseInput(cr *svcapitypes.MethodResponse) *svcsdk.DeleteMethodResponseInput {
	res := &svcsdk.DeleteMethodResponseInput{}

	if cr.Spec.ForProvider.HTTPMethod != nil {
		res.SetHttpMethod(*cr.Spec.ForProvider.HTTPMethod)
	}
	if cr.Spec.ForProvider.StatusCode != nil {
		res.SetStatusCode(*cr.Spec.ForProvider.StatusCode)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
