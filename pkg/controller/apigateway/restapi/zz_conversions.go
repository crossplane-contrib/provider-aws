/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package restapi

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/apigateway"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/apigateway/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetRestApiInput returns input for read
// operation.
func GenerateGetRestApiInput(cr *svcapitypes.RestAPI) *svcsdk.GetRestApiInput {
	res := &svcsdk.GetRestApiInput{}

	return res
}

// GenerateRestAPI returns the current state in the form of *svcapitypes.RestAPI.
func GenerateRestAPI(resp *svcsdk.RestApi) *svcapitypes.RestAPI {
	cr := &svcapitypes.RestAPI{}

	if resp.ApiKeySource != nil {
		cr.Spec.ForProvider.APIKeySource = resp.ApiKeySource
	} else {
		cr.Spec.ForProvider.APIKeySource = nil
	}
	if resp.BinaryMediaTypes != nil {
		f1 := []*string{}
		for _, f1iter := range resp.BinaryMediaTypes {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		cr.Spec.ForProvider.BinaryMediaTypes = f1
	} else {
		cr.Spec.ForProvider.BinaryMediaTypes = nil
	}
	if resp.CreatedDate != nil {
		cr.Status.AtProvider.CreatedDate = &metav1.Time{*resp.CreatedDate}
	} else {
		cr.Status.AtProvider.CreatedDate = nil
	}
	if resp.Description != nil {
		cr.Spec.ForProvider.Description = resp.Description
	} else {
		cr.Spec.ForProvider.Description = nil
	}
	if resp.DisableExecuteApiEndpoint != nil {
		cr.Spec.ForProvider.DisableExecuteAPIEndpoint = resp.DisableExecuteApiEndpoint
	} else {
		cr.Spec.ForProvider.DisableExecuteAPIEndpoint = nil
	}
	if resp.EndpointConfiguration != nil {
		f5 := &svcapitypes.EndpointConfiguration{}
		if resp.EndpointConfiguration.Types != nil {
			f5f0 := []*string{}
			for _, f5f0iter := range resp.EndpointConfiguration.Types {
				var f5f0elem string
				f5f0elem = *f5f0iter
				f5f0 = append(f5f0, &f5f0elem)
			}
			f5.Types = f5f0
		}
		if resp.EndpointConfiguration.VpcEndpointIds != nil {
			f5f1 := []*string{}
			for _, f5f1iter := range resp.EndpointConfiguration.VpcEndpointIds {
				var f5f1elem string
				f5f1elem = *f5f1iter
				f5f1 = append(f5f1, &f5f1elem)
			}
			f5.VPCEndpointIDs = f5f1
		}
		cr.Spec.ForProvider.EndpointConfiguration = f5
	} else {
		cr.Spec.ForProvider.EndpointConfiguration = nil
	}
	if resp.Id != nil {
		cr.Status.AtProvider.ID = resp.Id
	} else {
		cr.Status.AtProvider.ID = nil
	}
	if resp.MinimumCompressionSize != nil {
		cr.Spec.ForProvider.MinimumCompressionSize = resp.MinimumCompressionSize
	} else {
		cr.Spec.ForProvider.MinimumCompressionSize = nil
	}
	if resp.Name != nil {
		cr.Spec.ForProvider.Name = resp.Name
	} else {
		cr.Spec.ForProvider.Name = nil
	}
	if resp.Policy != nil {
		cr.Spec.ForProvider.Policy = resp.Policy
	} else {
		cr.Spec.ForProvider.Policy = nil
	}
	if resp.Tags != nil {
		f10 := map[string]*string{}
		for f10key, f10valiter := range resp.Tags {
			var f10val string
			f10val = *f10valiter
			f10[f10key] = &f10val
		}
		cr.Spec.ForProvider.Tags = f10
	} else {
		cr.Spec.ForProvider.Tags = nil
	}
	if resp.Version != nil {
		cr.Spec.ForProvider.Version = resp.Version
	} else {
		cr.Spec.ForProvider.Version = nil
	}
	if resp.Warnings != nil {
		f12 := []*string{}
		for _, f12iter := range resp.Warnings {
			var f12elem string
			f12elem = *f12iter
			f12 = append(f12, &f12elem)
		}
		cr.Status.AtProvider.Warnings = f12
	} else {
		cr.Status.AtProvider.Warnings = nil
	}

	return cr
}

// GenerateCreateRestApiInput returns a create input.
func GenerateCreateRestApiInput(cr *svcapitypes.RestAPI) *svcsdk.CreateRestApiInput {
	res := &svcsdk.CreateRestApiInput{}

	if cr.Spec.ForProvider.APIKeySource != nil {
		res.SetApiKeySource(*cr.Spec.ForProvider.APIKeySource)
	}
	if cr.Spec.ForProvider.BinaryMediaTypes != nil {
		f1 := []*string{}
		for _, f1iter := range cr.Spec.ForProvider.BinaryMediaTypes {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetBinaryMediaTypes(f1)
	}
	if cr.Spec.ForProvider.CloneFrom != nil {
		res.SetCloneFrom(*cr.Spec.ForProvider.CloneFrom)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.DisableExecuteAPIEndpoint != nil {
		res.SetDisableExecuteApiEndpoint(*cr.Spec.ForProvider.DisableExecuteAPIEndpoint)
	}
	if cr.Spec.ForProvider.EndpointConfiguration != nil {
		f5 := &svcsdk.EndpointConfiguration{}
		if cr.Spec.ForProvider.EndpointConfiguration.Types != nil {
			f5f0 := []*string{}
			for _, f5f0iter := range cr.Spec.ForProvider.EndpointConfiguration.Types {
				var f5f0elem string
				f5f0elem = *f5f0iter
				f5f0 = append(f5f0, &f5f0elem)
			}
			f5.SetTypes(f5f0)
		}
		if cr.Spec.ForProvider.EndpointConfiguration.VPCEndpointIDs != nil {
			f5f1 := []*string{}
			for _, f5f1iter := range cr.Spec.ForProvider.EndpointConfiguration.VPCEndpointIDs {
				var f5f1elem string
				f5f1elem = *f5f1iter
				f5f1 = append(f5f1, &f5f1elem)
			}
			f5.SetVpcEndpointIds(f5f1)
		}
		res.SetEndpointConfiguration(f5)
	}
	if cr.Spec.ForProvider.MinimumCompressionSize != nil {
		res.SetMinimumCompressionSize(*cr.Spec.ForProvider.MinimumCompressionSize)
	}
	if cr.Spec.ForProvider.Name != nil {
		res.SetName(*cr.Spec.ForProvider.Name)
	}
	if cr.Spec.ForProvider.Policy != nil {
		res.SetPolicy(*cr.Spec.ForProvider.Policy)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f9 := map[string]*string{}
		for f9key, f9valiter := range cr.Spec.ForProvider.Tags {
			var f9val string
			f9val = *f9valiter
			f9[f9key] = &f9val
		}
		res.SetTags(f9)
	}
	if cr.Spec.ForProvider.Version != nil {
		res.SetVersion(*cr.Spec.ForProvider.Version)
	}

	return res
}

// GenerateUpdateRestApiInput returns an update input.
func GenerateUpdateRestApiInput(cr *svcapitypes.RestAPI) *svcsdk.UpdateRestApiInput {
	res := &svcsdk.UpdateRestApiInput{}

	return res
}

// GenerateDeleteRestApiInput returns a deletion input.
func GenerateDeleteRestApiInput(cr *svcapitypes.RestAPI) *svcsdk.DeleteRestApiInput {
	res := &svcsdk.DeleteRestApiInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "NotFoundException"
}
