/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package listener

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/elbv2"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/elbv2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeListenersInput returns input for read
// operation.
func GenerateDescribeListenersInput(cr *svcapitypes.Listener) *svcsdk.DescribeListenersInput {
	res := &svcsdk.DescribeListenersInput{}

	return res
}

// GenerateListener returns the current state in the form of *svcapitypes.Listener.
func GenerateListener(resp *svcsdk.DescribeListenersOutput) *svcapitypes.Listener {
	cr := &svcapitypes.Listener{}

	found := false
	for _, elem := range resp.Listeners {
		if elem.AlpnPolicy != nil {
			f0 := []*string{}
			for _, f0iter := range elem.AlpnPolicy {
				var f0elem string
				f0elem = *f0iter
				f0 = append(f0, &f0elem)
			}
			cr.Spec.ForProvider.AlpnPolicy = f0
		} else {
			cr.Spec.ForProvider.AlpnPolicy = nil
		}
		if elem.Certificates != nil {
			f1 := []*svcapitypes.Certificate{}
			for _, f1iter := range elem.Certificates {
				f1elem := &svcapitypes.Certificate{}
				if f1iter.CertificateArn != nil {
					f1elem.CertificateARN = f1iter.CertificateArn
				}
				if f1iter.IsDefault != nil {
					f1elem.IsDefault = f1iter.IsDefault
				}
				f1 = append(f1, f1elem)
			}
			cr.Status.AtProvider.Certificates = f1
		} else {
			cr.Status.AtProvider.Certificates = nil
		}
		if elem.DefaultActions != nil {
			f2 := []*svcapitypes.Action{}
			for _, f2iter := range elem.DefaultActions {
				f2elem := &svcapitypes.Action{}
				if f2iter.AuthenticateCognitoConfig != nil {
					f2elemf0 := &svcapitypes.AuthenticateCognitoActionConfig{}
					if f2iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
						f2elemf0f0 := map[string]*string{}
						for f2elemf0f0key, f2elemf0f0valiter := range f2iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
							var f2elemf0f0val string
							f2elemf0f0val = *f2elemf0f0valiter
							f2elemf0f0[f2elemf0f0key] = &f2elemf0f0val
						}
						f2elemf0.AuthenticationRequestExtraParams = f2elemf0f0
					}
					if f2iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
						f2elemf0.OnUnauthenticatedRequest = f2iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest
					}
					if f2iter.AuthenticateCognitoConfig.Scope != nil {
						f2elemf0.Scope = f2iter.AuthenticateCognitoConfig.Scope
					}
					if f2iter.AuthenticateCognitoConfig.SessionCookieName != nil {
						f2elemf0.SessionCookieName = f2iter.AuthenticateCognitoConfig.SessionCookieName
					}
					if f2iter.AuthenticateCognitoConfig.SessionTimeout != nil {
						f2elemf0.SessionTimeout = f2iter.AuthenticateCognitoConfig.SessionTimeout
					}
					if f2iter.AuthenticateCognitoConfig.UserPoolArn != nil {
						f2elemf0.UserPoolARN = f2iter.AuthenticateCognitoConfig.UserPoolArn
					}
					if f2iter.AuthenticateCognitoConfig.UserPoolClientId != nil {
						f2elemf0.UserPoolClientID = f2iter.AuthenticateCognitoConfig.UserPoolClientId
					}
					if f2iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
						f2elemf0.UserPoolDomain = f2iter.AuthenticateCognitoConfig.UserPoolDomain
					}
					f2elem.AuthenticateCognitoConfig = f2elemf0
				}
				if f2iter.AuthenticateOidcConfig != nil {
					f2elemf1 := &svcapitypes.AuthenticateOIDCActionConfig{}
					if f2iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams != nil {
						f2elemf1f0 := map[string]*string{}
						for f2elemf1f0key, f2elemf1f0valiter := range f2iter.AuthenticateOidcConfig.AuthenticationRequestExtraParams {
							var f2elemf1f0val string
							f2elemf1f0val = *f2elemf1f0valiter
							f2elemf1f0[f2elemf1f0key] = &f2elemf1f0val
						}
						f2elemf1.AuthenticationRequestExtraParams = f2elemf1f0
					}
					if f2iter.AuthenticateOidcConfig.AuthorizationEndpoint != nil {
						f2elemf1.AuthorizationEndpoint = f2iter.AuthenticateOidcConfig.AuthorizationEndpoint
					}
					if f2iter.AuthenticateOidcConfig.ClientId != nil {
						f2elemf1.ClientID = f2iter.AuthenticateOidcConfig.ClientId
					}
					if f2iter.AuthenticateOidcConfig.ClientSecret != nil {
						f2elemf1.ClientSecret = f2iter.AuthenticateOidcConfig.ClientSecret
					}
					if f2iter.AuthenticateOidcConfig.Issuer != nil {
						f2elemf1.Issuer = f2iter.AuthenticateOidcConfig.Issuer
					}
					if f2iter.AuthenticateOidcConfig.OnUnauthenticatedRequest != nil {
						f2elemf1.OnUnauthenticatedRequest = f2iter.AuthenticateOidcConfig.OnUnauthenticatedRequest
					}
					if f2iter.AuthenticateOidcConfig.Scope != nil {
						f2elemf1.Scope = f2iter.AuthenticateOidcConfig.Scope
					}
					if f2iter.AuthenticateOidcConfig.SessionCookieName != nil {
						f2elemf1.SessionCookieName = f2iter.AuthenticateOidcConfig.SessionCookieName
					}
					if f2iter.AuthenticateOidcConfig.SessionTimeout != nil {
						f2elemf1.SessionTimeout = f2iter.AuthenticateOidcConfig.SessionTimeout
					}
					if f2iter.AuthenticateOidcConfig.TokenEndpoint != nil {
						f2elemf1.TokenEndpoint = f2iter.AuthenticateOidcConfig.TokenEndpoint
					}
					if f2iter.AuthenticateOidcConfig.UseExistingClientSecret != nil {
						f2elemf1.UseExistingClientSecret = f2iter.AuthenticateOidcConfig.UseExistingClientSecret
					}
					if f2iter.AuthenticateOidcConfig.UserInfoEndpoint != nil {
						f2elemf1.UserInfoEndpoint = f2iter.AuthenticateOidcConfig.UserInfoEndpoint
					}
					f2elem.AuthenticateOIDCConfig = f2elemf1
				}
				if f2iter.FixedResponseConfig != nil {
					f2elemf2 := &svcapitypes.FixedResponseActionConfig{}
					if f2iter.FixedResponseConfig.ContentType != nil {
						f2elemf2.ContentType = f2iter.FixedResponseConfig.ContentType
					}
					if f2iter.FixedResponseConfig.MessageBody != nil {
						f2elemf2.MessageBody = f2iter.FixedResponseConfig.MessageBody
					}
					if f2iter.FixedResponseConfig.StatusCode != nil {
						f2elemf2.StatusCode = f2iter.FixedResponseConfig.StatusCode
					}
					f2elem.FixedResponseConfig = f2elemf2
				}
				if f2iter.ForwardConfig != nil {
					f2elemf3 := &svcapitypes.ForwardActionConfig{}
					if f2iter.ForwardConfig.TargetGroupStickinessConfig != nil {
						f2elemf3f0 := &svcapitypes.TargetGroupStickinessConfig{}
						if f2iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
							f2elemf3f0.DurationSeconds = f2iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds
						}
						if f2iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
							f2elemf3f0.Enabled = f2iter.ForwardConfig.TargetGroupStickinessConfig.Enabled
						}
						f2elemf3.TargetGroupStickinessConfig = f2elemf3f0
					}
					if f2iter.ForwardConfig.TargetGroups != nil {
						f2elemf3f1 := []*svcapitypes.TargetGroupTuple{}
						for _, f2elemf3f1iter := range f2iter.ForwardConfig.TargetGroups {
							f2elemf3f1elem := &svcapitypes.TargetGroupTuple{}
							if f2elemf3f1iter.TargetGroupArn != nil {
								f2elemf3f1elem.TargetGroupARN = f2elemf3f1iter.TargetGroupArn
							}
							if f2elemf3f1iter.Weight != nil {
								f2elemf3f1elem.Weight = f2elemf3f1iter.Weight
							}
							f2elemf3f1 = append(f2elemf3f1, f2elemf3f1elem)
						}
						f2elemf3.TargetGroups = f2elemf3f1
					}
					f2elem.ForwardConfig = f2elemf3
				}
				if f2iter.Order != nil {
					f2elem.Order = f2iter.Order
				}
				if f2iter.RedirectConfig != nil {
					f2elemf5 := &svcapitypes.RedirectActionConfig{}
					if f2iter.RedirectConfig.Host != nil {
						f2elemf5.Host = f2iter.RedirectConfig.Host
					}
					if f2iter.RedirectConfig.Path != nil {
						f2elemf5.Path = f2iter.RedirectConfig.Path
					}
					if f2iter.RedirectConfig.Port != nil {
						f2elemf5.Port = f2iter.RedirectConfig.Port
					}
					if f2iter.RedirectConfig.Protocol != nil {
						f2elemf5.Protocol = f2iter.RedirectConfig.Protocol
					}
					if f2iter.RedirectConfig.Query != nil {
						f2elemf5.Query = f2iter.RedirectConfig.Query
					}
					if f2iter.RedirectConfig.StatusCode != nil {
						f2elemf5.StatusCode = f2iter.RedirectConfig.StatusCode
					}
					f2elem.RedirectConfig = f2elemf5
				}
				if f2iter.TargetGroupArn != nil {
					f2elem.TargetGroupARN = f2iter.TargetGroupArn
				}
				if f2iter.Type != nil {
					f2elem.Type = f2iter.Type
				}
				f2 = append(f2, f2elem)
			}
			cr.Status.AtProvider.DefaultActions = f2
		} else {
			cr.Status.AtProvider.DefaultActions = nil
		}
		if elem.ListenerArn != nil {
			cr.Status.AtProvider.ListenerARN = elem.ListenerArn
		} else {
			cr.Status.AtProvider.ListenerARN = nil
		}
		if elem.LoadBalancerArn != nil {
			cr.Status.AtProvider.LoadBalancerARN = elem.LoadBalancerArn
		} else {
			cr.Status.AtProvider.LoadBalancerARN = nil
		}
		if elem.Port != nil {
			cr.Spec.ForProvider.Port = elem.Port
		} else {
			cr.Spec.ForProvider.Port = nil
		}
		if elem.Protocol != nil {
			cr.Spec.ForProvider.Protocol = elem.Protocol
		} else {
			cr.Spec.ForProvider.Protocol = nil
		}
		if elem.SslPolicy != nil {
			cr.Spec.ForProvider.SSLPolicy = elem.SslPolicy
		} else {
			cr.Spec.ForProvider.SSLPolicy = nil
		}
		found = true
		break
	}
	if !found {
		_ = found
	}

	return cr
}

// GenerateCreateListenerInput returns a create input.
func GenerateCreateListenerInput(cr *svcapitypes.Listener) *svcsdk.CreateListenerInput {
	res := &svcsdk.CreateListenerInput{}

	if cr.Spec.ForProvider.AlpnPolicy != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.AlpnPolicy {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAlpnPolicy(f0)
	}
	if cr.Spec.ForProvider.Port != nil {
		res.SetPort(*cr.Spec.ForProvider.Port)
	}
	if cr.Spec.ForProvider.Protocol != nil {
		res.SetProtocol(*cr.Spec.ForProvider.Protocol)
	}
	if cr.Spec.ForProvider.SSLPolicy != nil {
		res.SetSslPolicy(*cr.Spec.ForProvider.SSLPolicy)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range cr.Spec.ForProvider.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}

	return res
}

// GenerateModifyListenerInput returns an update input.
func GenerateModifyListenerInput(cr *svcapitypes.Listener) *svcsdk.ModifyListenerInput {
	res := &svcsdk.ModifyListenerInput{}

	if cr.Spec.ForProvider.AlpnPolicy != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.AlpnPolicy {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAlpnPolicy(f0)
	}
	if cr.Status.AtProvider.Certificates != nil {
		f1 := []*svcsdk.Certificate{}
		for _, f1iter := range cr.Status.AtProvider.Certificates {
			f1elem := &svcsdk.Certificate{}
			if f1iter.CertificateARN != nil {
				f1elem.SetCertificateArn(*f1iter.CertificateARN)
			}
			if f1iter.IsDefault != nil {
				f1elem.SetIsDefault(*f1iter.IsDefault)
			}
			f1 = append(f1, f1elem)
		}
		res.SetCertificates(f1)
	}
	if cr.Status.AtProvider.DefaultActions != nil {
		f2 := []*svcsdk.Action{}
		for _, f2iter := range cr.Status.AtProvider.DefaultActions {
			f2elem := &svcsdk.Action{}
			if f2iter.AuthenticateCognitoConfig != nil {
				f2elemf0 := &svcsdk.AuthenticateCognitoActionConfig{}
				if f2iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams != nil {
					f2elemf0f0 := map[string]*string{}
					for f2elemf0f0key, f2elemf0f0valiter := range f2iter.AuthenticateCognitoConfig.AuthenticationRequestExtraParams {
						var f2elemf0f0val string
						f2elemf0f0val = *f2elemf0f0valiter
						f2elemf0f0[f2elemf0f0key] = &f2elemf0f0val
					}
					f2elemf0.SetAuthenticationRequestExtraParams(f2elemf0f0)
				}
				if f2iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest != nil {
					f2elemf0.SetOnUnauthenticatedRequest(*f2iter.AuthenticateCognitoConfig.OnUnauthenticatedRequest)
				}
				if f2iter.AuthenticateCognitoConfig.Scope != nil {
					f2elemf0.SetScope(*f2iter.AuthenticateCognitoConfig.Scope)
				}
				if f2iter.AuthenticateCognitoConfig.SessionCookieName != nil {
					f2elemf0.SetSessionCookieName(*f2iter.AuthenticateCognitoConfig.SessionCookieName)
				}
				if f2iter.AuthenticateCognitoConfig.SessionTimeout != nil {
					f2elemf0.SetSessionTimeout(*f2iter.AuthenticateCognitoConfig.SessionTimeout)
				}
				if f2iter.AuthenticateCognitoConfig.UserPoolARN != nil {
					f2elemf0.SetUserPoolArn(*f2iter.AuthenticateCognitoConfig.UserPoolARN)
				}
				if f2iter.AuthenticateCognitoConfig.UserPoolClientID != nil {
					f2elemf0.SetUserPoolClientId(*f2iter.AuthenticateCognitoConfig.UserPoolClientID)
				}
				if f2iter.AuthenticateCognitoConfig.UserPoolDomain != nil {
					f2elemf0.SetUserPoolDomain(*f2iter.AuthenticateCognitoConfig.UserPoolDomain)
				}
				f2elem.SetAuthenticateCognitoConfig(f2elemf0)
			}
			if f2iter.AuthenticateOIDCConfig != nil {
				f2elemf1 := &svcsdk.AuthenticateOidcActionConfig{}
				if f2iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams != nil {
					f2elemf1f0 := map[string]*string{}
					for f2elemf1f0key, f2elemf1f0valiter := range f2iter.AuthenticateOIDCConfig.AuthenticationRequestExtraParams {
						var f2elemf1f0val string
						f2elemf1f0val = *f2elemf1f0valiter
						f2elemf1f0[f2elemf1f0key] = &f2elemf1f0val
					}
					f2elemf1.SetAuthenticationRequestExtraParams(f2elemf1f0)
				}
				if f2iter.AuthenticateOIDCConfig.AuthorizationEndpoint != nil {
					f2elemf1.SetAuthorizationEndpoint(*f2iter.AuthenticateOIDCConfig.AuthorizationEndpoint)
				}
				if f2iter.AuthenticateOIDCConfig.ClientID != nil {
					f2elemf1.SetClientId(*f2iter.AuthenticateOIDCConfig.ClientID)
				}
				if f2iter.AuthenticateOIDCConfig.ClientSecret != nil {
					f2elemf1.SetClientSecret(*f2iter.AuthenticateOIDCConfig.ClientSecret)
				}
				if f2iter.AuthenticateOIDCConfig.Issuer != nil {
					f2elemf1.SetIssuer(*f2iter.AuthenticateOIDCConfig.Issuer)
				}
				if f2iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest != nil {
					f2elemf1.SetOnUnauthenticatedRequest(*f2iter.AuthenticateOIDCConfig.OnUnauthenticatedRequest)
				}
				if f2iter.AuthenticateOIDCConfig.Scope != nil {
					f2elemf1.SetScope(*f2iter.AuthenticateOIDCConfig.Scope)
				}
				if f2iter.AuthenticateOIDCConfig.SessionCookieName != nil {
					f2elemf1.SetSessionCookieName(*f2iter.AuthenticateOIDCConfig.SessionCookieName)
				}
				if f2iter.AuthenticateOIDCConfig.SessionTimeout != nil {
					f2elemf1.SetSessionTimeout(*f2iter.AuthenticateOIDCConfig.SessionTimeout)
				}
				if f2iter.AuthenticateOIDCConfig.TokenEndpoint != nil {
					f2elemf1.SetTokenEndpoint(*f2iter.AuthenticateOIDCConfig.TokenEndpoint)
				}
				if f2iter.AuthenticateOIDCConfig.UseExistingClientSecret != nil {
					f2elemf1.SetUseExistingClientSecret(*f2iter.AuthenticateOIDCConfig.UseExistingClientSecret)
				}
				if f2iter.AuthenticateOIDCConfig.UserInfoEndpoint != nil {
					f2elemf1.SetUserInfoEndpoint(*f2iter.AuthenticateOIDCConfig.UserInfoEndpoint)
				}
				f2elem.SetAuthenticateOidcConfig(f2elemf1)
			}
			if f2iter.FixedResponseConfig != nil {
				f2elemf2 := &svcsdk.FixedResponseActionConfig{}
				if f2iter.FixedResponseConfig.ContentType != nil {
					f2elemf2.SetContentType(*f2iter.FixedResponseConfig.ContentType)
				}
				if f2iter.FixedResponseConfig.MessageBody != nil {
					f2elemf2.SetMessageBody(*f2iter.FixedResponseConfig.MessageBody)
				}
				if f2iter.FixedResponseConfig.StatusCode != nil {
					f2elemf2.SetStatusCode(*f2iter.FixedResponseConfig.StatusCode)
				}
				f2elem.SetFixedResponseConfig(f2elemf2)
			}
			if f2iter.ForwardConfig != nil {
				f2elemf3 := &svcsdk.ForwardActionConfig{}
				if f2iter.ForwardConfig.TargetGroupStickinessConfig != nil {
					f2elemf3f0 := &svcsdk.TargetGroupStickinessConfig{}
					if f2iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds != nil {
						f2elemf3f0.SetDurationSeconds(*f2iter.ForwardConfig.TargetGroupStickinessConfig.DurationSeconds)
					}
					if f2iter.ForwardConfig.TargetGroupStickinessConfig.Enabled != nil {
						f2elemf3f0.SetEnabled(*f2iter.ForwardConfig.TargetGroupStickinessConfig.Enabled)
					}
					f2elemf3.SetTargetGroupStickinessConfig(f2elemf3f0)
				}
				if f2iter.ForwardConfig.TargetGroups != nil {
					f2elemf3f1 := []*svcsdk.TargetGroupTuple{}
					for _, f2elemf3f1iter := range f2iter.ForwardConfig.TargetGroups {
						f2elemf3f1elem := &svcsdk.TargetGroupTuple{}
						if f2elemf3f1iter.TargetGroupARN != nil {
							f2elemf3f1elem.SetTargetGroupArn(*f2elemf3f1iter.TargetGroupARN)
						}
						if f2elemf3f1iter.Weight != nil {
							f2elemf3f1elem.SetWeight(*f2elemf3f1iter.Weight)
						}
						f2elemf3f1 = append(f2elemf3f1, f2elemf3f1elem)
					}
					f2elemf3.SetTargetGroups(f2elemf3f1)
				}
				f2elem.SetForwardConfig(f2elemf3)
			}
			if f2iter.Order != nil {
				f2elem.SetOrder(*f2iter.Order)
			}
			if f2iter.RedirectConfig != nil {
				f2elemf5 := &svcsdk.RedirectActionConfig{}
				if f2iter.RedirectConfig.Host != nil {
					f2elemf5.SetHost(*f2iter.RedirectConfig.Host)
				}
				if f2iter.RedirectConfig.Path != nil {
					f2elemf5.SetPath(*f2iter.RedirectConfig.Path)
				}
				if f2iter.RedirectConfig.Port != nil {
					f2elemf5.SetPort(*f2iter.RedirectConfig.Port)
				}
				if f2iter.RedirectConfig.Protocol != nil {
					f2elemf5.SetProtocol(*f2iter.RedirectConfig.Protocol)
				}
				if f2iter.RedirectConfig.Query != nil {
					f2elemf5.SetQuery(*f2iter.RedirectConfig.Query)
				}
				if f2iter.RedirectConfig.StatusCode != nil {
					f2elemf5.SetStatusCode(*f2iter.RedirectConfig.StatusCode)
				}
				f2elem.SetRedirectConfig(f2elemf5)
			}
			if f2iter.TargetGroupARN != nil {
				f2elem.SetTargetGroupArn(*f2iter.TargetGroupARN)
			}
			if f2iter.Type != nil {
				f2elem.SetType(*f2iter.Type)
			}
			f2 = append(f2, f2elem)
		}
		res.SetDefaultActions(f2)
	}
	if cr.Status.AtProvider.ListenerARN != nil {
		res.SetListenerArn(*cr.Status.AtProvider.ListenerARN)
	}
	if cr.Spec.ForProvider.Port != nil {
		res.SetPort(*cr.Spec.ForProvider.Port)
	}
	if cr.Spec.ForProvider.Protocol != nil {
		res.SetProtocol(*cr.Spec.ForProvider.Protocol)
	}
	if cr.Spec.ForProvider.SSLPolicy != nil {
		res.SetSslPolicy(*cr.Spec.ForProvider.SSLPolicy)
	}

	return res
}

// GenerateDeleteListenerInput returns a deletion input.
func GenerateDeleteListenerInput(cr *svcapitypes.Listener) *svcsdk.DeleteListenerInput {
	res := &svcsdk.DeleteListenerInput{}

	if cr.Status.AtProvider.ListenerARN != nil {
		res.SetListenerArn(*cr.Status.AtProvider.ListenerARN)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ListenerNotFound"
}
