/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package loadbalancer

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/elbv2"

	svcapitypes "github.com/crossplane/provider-aws/apis/elbv2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeLoadBalancersInput returns input for read
// operation.
func GenerateDescribeLoadBalancersInput(cr *svcapitypes.LoadBalancer) *svcsdk.DescribeLoadBalancersInput {
	res := &svcsdk.DescribeLoadBalancersInput{}

	if cr.Spec.ForProvider.Name != nil {
		f2 := []*string{}
		f2 = append(f2, cr.Spec.ForProvider.Name)
		res.SetNames(f2)
	}

	return res
}

// GenerateLoadBalancer returns the current state in the form of *svcapitypes.LoadBalancer.
func GenerateLoadBalancer(resp *svcsdk.DescribeLoadBalancersOutput) *svcapitypes.LoadBalancer {
	cr := &svcapitypes.LoadBalancer{}

	found := false
	for _, elem := range resp.LoadBalancers {
		if elem.CustomerOwnedIpv4Pool != nil {
			cr.Spec.ForProvider.CustomerOwnedIPv4Pool = elem.CustomerOwnedIpv4Pool
		} else {
			cr.Spec.ForProvider.CustomerOwnedIPv4Pool = nil
		}
		if elem.IpAddressType != nil {
			cr.Spec.ForProvider.IPAddressType = elem.IpAddressType
		} else {
			cr.Spec.ForProvider.IPAddressType = nil
		}
		if elem.Scheme != nil {
			cr.Spec.ForProvider.Scheme = elem.Scheme
		} else {
			cr.Spec.ForProvider.Scheme = nil
		}
		if elem.SecurityGroups != nil {
			f9 := []*string{}
			for _, f9iter := range elem.SecurityGroups {
				var f9elem string
				f9elem = *f9iter
				f9 = append(f9, &f9elem)
			}
			cr.Spec.ForProvider.SecurityGroups = f9
		} else {
			cr.Spec.ForProvider.SecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateLoadBalancerInput returns a create input.
func GenerateCreateLoadBalancerInput(cr *svcapitypes.LoadBalancer) *svcsdk.CreateLoadBalancerInput {
	res := &svcsdk.CreateLoadBalancerInput{}

	if cr.Spec.ForProvider.CustomerOwnedIPv4Pool != nil {
		res.SetCustomerOwnedIpv4Pool(*cr.Spec.ForProvider.CustomerOwnedIPv4Pool)
	}
	if cr.Spec.ForProvider.IPAddressType != nil {
		res.SetIpAddressType(*cr.Spec.ForProvider.IPAddressType)
	}
	if cr.Spec.ForProvider.Name != nil {
		res.SetName(*cr.Spec.ForProvider.Name)
	}
	if cr.Spec.ForProvider.Scheme != nil {
		res.SetScheme(*cr.Spec.ForProvider.Scheme)
	}
	if cr.Spec.ForProvider.SecurityGroups != nil {
		f4 := []*string{}
		for _, f4iter := range cr.Spec.ForProvider.SecurityGroups {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		res.SetSecurityGroups(f4)
	}
	if cr.Spec.ForProvider.SubnetMappings != nil {
		f5 := []*svcsdk.SubnetMapping{}
		for _, f5iter := range cr.Spec.ForProvider.SubnetMappings {
			f5elem := &svcsdk.SubnetMapping{}
			if f5iter.AllocationID != nil {
				f5elem.SetAllocationId(*f5iter.AllocationID)
			}
			if f5iter.IPv6Address != nil {
				f5elem.SetIPv6Address(*f5iter.IPv6Address)
			}
			if f5iter.PrivateIPv4Address != nil {
				f5elem.SetPrivateIPv4Address(*f5iter.PrivateIPv4Address)
			}
			if f5iter.SubnetID != nil {
				f5elem.SetSubnetId(*f5iter.SubnetID)
			}
			f5 = append(f5, f5elem)
		}
		res.SetSubnetMappings(f5)
	}
	if cr.Spec.ForProvider.Subnets != nil {
		f6 := []*string{}
		for _, f6iter := range cr.Spec.ForProvider.Subnets {
			var f6elem string
			f6elem = *f6iter
			f6 = append(f6, &f6elem)
		}
		res.SetSubnets(f6)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f7 := []*svcsdk.Tag{}
		for _, f7iter := range cr.Spec.ForProvider.Tags {
			f7elem := &svcsdk.Tag{}
			if f7iter.Key != nil {
				f7elem.SetKey(*f7iter.Key)
			}
			if f7iter.Value != nil {
				f7elem.SetValue(*f7iter.Value)
			}
			f7 = append(f7, f7elem)
		}
		res.SetTags(f7)
	}

	return res
}

// GenerateDeleteLoadBalancerInput returns a deletion input.
func GenerateDeleteLoadBalancerInput(cr *svcapitypes.LoadBalancer) *svcsdk.DeleteLoadBalancerInput {
	res := &svcsdk.DeleteLoadBalancerInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "LoadBalancerNotFound"
}
