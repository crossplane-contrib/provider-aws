/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package accessentry

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/eks"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/eks/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeAccessEntryInput returns input for read
// operation.
func GenerateDescribeAccessEntryInput(cr *svcapitypes.AccessEntry) *svcsdk.DescribeAccessEntryInput {
	res := &svcsdk.DescribeAccessEntryInput{}

	if cr.Spec.ForProvider.ClusterName != nil {
		res.SetClusterName(*cr.Spec.ForProvider.ClusterName)
	}
	if cr.Spec.ForProvider.PrincipalARN != nil {
		res.SetPrincipalArn(*cr.Spec.ForProvider.PrincipalARN)
	}

	return res
}

// GenerateAccessEntry returns the current state in the form of *svcapitypes.AccessEntry.
func GenerateAccessEntry(resp *svcsdk.DescribeAccessEntryOutput) *svcapitypes.AccessEntry {
	cr := &svcapitypes.AccessEntry{}

	if resp.AccessEntry.AccessEntryArn != nil {
		cr.Status.AtProvider.AccessEntryARN = resp.AccessEntry.AccessEntryArn
	} else {
		cr.Status.AtProvider.AccessEntryARN = nil
	}
	if resp.AccessEntry.ClusterName != nil {
		cr.Spec.ForProvider.ClusterName = resp.AccessEntry.ClusterName
	} else {
		cr.Spec.ForProvider.ClusterName = nil
	}
	if resp.AccessEntry.CreatedAt != nil {
		cr.Status.AtProvider.CreatedAt = &metav1.Time{*resp.AccessEntry.CreatedAt}
	} else {
		cr.Status.AtProvider.CreatedAt = nil
	}
	if resp.AccessEntry.KubernetesGroups != nil {
		f3 := []*string{}
		for _, f3iter := range resp.AccessEntry.KubernetesGroups {
			var f3elem string
			f3elem = *f3iter
			f3 = append(f3, &f3elem)
		}
		cr.Spec.ForProvider.KubernetesGroups = f3
	} else {
		cr.Spec.ForProvider.KubernetesGroups = nil
	}
	if resp.AccessEntry.ModifiedAt != nil {
		cr.Status.AtProvider.ModifiedAt = &metav1.Time{*resp.AccessEntry.ModifiedAt}
	} else {
		cr.Status.AtProvider.ModifiedAt = nil
	}
	if resp.AccessEntry.PrincipalArn != nil {
		cr.Spec.ForProvider.PrincipalARN = resp.AccessEntry.PrincipalArn
	} else {
		cr.Spec.ForProvider.PrincipalARN = nil
	}
	if resp.AccessEntry.Tags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range resp.AccessEntry.Tags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		cr.Spec.ForProvider.Tags = f6
	} else {
		cr.Spec.ForProvider.Tags = nil
	}
	if resp.AccessEntry.Type != nil {
		cr.Spec.ForProvider.Type = resp.AccessEntry.Type
	} else {
		cr.Spec.ForProvider.Type = nil
	}
	if resp.AccessEntry.Username != nil {
		cr.Spec.ForProvider.Username = resp.AccessEntry.Username
	} else {
		cr.Spec.ForProvider.Username = nil
	}

	return cr
}

// GenerateCreateAccessEntryInput returns a create input.
func GenerateCreateAccessEntryInput(cr *svcapitypes.AccessEntry) *svcsdk.CreateAccessEntryInput {
	res := &svcsdk.CreateAccessEntryInput{}

	if cr.Spec.ForProvider.ClientRequestToken != nil {
		res.SetClientRequestToken(*cr.Spec.ForProvider.ClientRequestToken)
	}
	if cr.Spec.ForProvider.ClusterName != nil {
		res.SetClusterName(*cr.Spec.ForProvider.ClusterName)
	}
	if cr.Spec.ForProvider.KubernetesGroups != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.KubernetesGroups {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetKubernetesGroups(f2)
	}
	if cr.Spec.ForProvider.PrincipalARN != nil {
		res.SetPrincipalArn(*cr.Spec.ForProvider.PrincipalARN)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f4 := map[string]*string{}
		for f4key, f4valiter := range cr.Spec.ForProvider.Tags {
			var f4val string
			f4val = *f4valiter
			f4[f4key] = &f4val
		}
		res.SetTags(f4)
	}
	if cr.Spec.ForProvider.Type != nil {
		res.SetType(*cr.Spec.ForProvider.Type)
	}
	if cr.Spec.ForProvider.Username != nil {
		res.SetUsername(*cr.Spec.ForProvider.Username)
	}

	return res
}

// GenerateUpdateAccessEntryInput returns an update input.
func GenerateUpdateAccessEntryInput(cr *svcapitypes.AccessEntry) *svcsdk.UpdateAccessEntryInput {
	res := &svcsdk.UpdateAccessEntryInput{}

	if cr.Spec.ForProvider.ClientRequestToken != nil {
		res.SetClientRequestToken(*cr.Spec.ForProvider.ClientRequestToken)
	}
	if cr.Spec.ForProvider.ClusterName != nil {
		res.SetClusterName(*cr.Spec.ForProvider.ClusterName)
	}
	if cr.Spec.ForProvider.KubernetesGroups != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.KubernetesGroups {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetKubernetesGroups(f2)
	}
	if cr.Spec.ForProvider.PrincipalARN != nil {
		res.SetPrincipalArn(*cr.Spec.ForProvider.PrincipalARN)
	}
	if cr.Spec.ForProvider.Username != nil {
		res.SetUsername(*cr.Spec.ForProvider.Username)
	}

	return res
}

// GenerateDeleteAccessEntryInput returns a deletion input.
func GenerateDeleteAccessEntryInput(cr *svcapitypes.AccessEntry) *svcsdk.DeleteAccessEntryInput {
	res := &svcsdk.DeleteAccessEntryInput{}

	if cr.Spec.ForProvider.ClusterName != nil {
		res.SetClusterName(*cr.Spec.ForProvider.ClusterName)
	}
	if cr.Spec.ForProvider.PrincipalARN != nil {
		res.SetPrincipalArn(*cr.Spec.ForProvider.PrincipalARN)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
