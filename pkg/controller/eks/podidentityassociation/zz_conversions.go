/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package podidentityassociation

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/eks"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/eks/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribePodIdentityAssociationInput returns input for read
// operation.
func GenerateDescribePodIdentityAssociationInput(cr *svcapitypes.PodIdentityAssociation) *svcsdk.DescribePodIdentityAssociationInput {
	res := &svcsdk.DescribePodIdentityAssociationInput{}

	if cr.Status.AtProvider.AssociationID != nil {
		res.SetAssociationId(*cr.Status.AtProvider.AssociationID)
	}
	if cr.Spec.ForProvider.ClusterName != nil {
		res.SetClusterName(*cr.Spec.ForProvider.ClusterName)
	}

	return res
}

// GeneratePodIdentityAssociation returns the current state in the form of *svcapitypes.PodIdentityAssociation.
func GeneratePodIdentityAssociation(resp *svcsdk.DescribePodIdentityAssociationOutput) *svcapitypes.PodIdentityAssociation {
	cr := &svcapitypes.PodIdentityAssociation{}

	if resp.Association.AssociationArn != nil {
		cr.Status.AtProvider.AssociationARN = resp.Association.AssociationArn
	} else {
		cr.Status.AtProvider.AssociationARN = nil
	}
	if resp.Association.AssociationId != nil {
		cr.Status.AtProvider.AssociationID = resp.Association.AssociationId
	} else {
		cr.Status.AtProvider.AssociationID = nil
	}
	if resp.Association.ClusterName != nil {
		cr.Spec.ForProvider.ClusterName = resp.Association.ClusterName
	} else {
		cr.Spec.ForProvider.ClusterName = nil
	}
	if resp.Association.CreatedAt != nil {
		cr.Status.AtProvider.CreatedAt = &metav1.Time{*resp.Association.CreatedAt}
	} else {
		cr.Status.AtProvider.CreatedAt = nil
	}
	if resp.Association.ModifiedAt != nil {
		cr.Status.AtProvider.ModifiedAt = &metav1.Time{*resp.Association.ModifiedAt}
	} else {
		cr.Status.AtProvider.ModifiedAt = nil
	}
	if resp.Association.Namespace != nil {
		cr.Spec.ForProvider.Namespace = resp.Association.Namespace
	} else {
		cr.Spec.ForProvider.Namespace = nil
	}
	if resp.Association.RoleArn != nil {
		cr.Spec.ForProvider.RoleARN = resp.Association.RoleArn
	} else {
		cr.Spec.ForProvider.RoleARN = nil
	}
	if resp.Association.ServiceAccount != nil {
		cr.Spec.ForProvider.ServiceAccount = resp.Association.ServiceAccount
	} else {
		cr.Spec.ForProvider.ServiceAccount = nil
	}
	if resp.Association.Tags != nil {
		f8 := map[string]*string{}
		for f8key, f8valiter := range resp.Association.Tags {
			var f8val string
			f8val = *f8valiter
			f8[f8key] = &f8val
		}
		cr.Spec.ForProvider.Tags = f8
	} else {
		cr.Spec.ForProvider.Tags = nil
	}

	return cr
}

// GenerateCreatePodIdentityAssociationInput returns a create input.
func GenerateCreatePodIdentityAssociationInput(cr *svcapitypes.PodIdentityAssociation) *svcsdk.CreatePodIdentityAssociationInput {
	res := &svcsdk.CreatePodIdentityAssociationInput{}

	if cr.Spec.ForProvider.ClientRequestToken != nil {
		res.SetClientRequestToken(*cr.Spec.ForProvider.ClientRequestToken)
	}
	if cr.Spec.ForProvider.ClusterName != nil {
		res.SetClusterName(*cr.Spec.ForProvider.ClusterName)
	}
	if cr.Spec.ForProvider.Namespace != nil {
		res.SetNamespace(*cr.Spec.ForProvider.Namespace)
	}
	if cr.Spec.ForProvider.RoleARN != nil {
		res.SetRoleArn(*cr.Spec.ForProvider.RoleARN)
	}
	if cr.Spec.ForProvider.ServiceAccount != nil {
		res.SetServiceAccount(*cr.Spec.ForProvider.ServiceAccount)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f5 := map[string]*string{}
		for f5key, f5valiter := range cr.Spec.ForProvider.Tags {
			var f5val string
			f5val = *f5valiter
			f5[f5key] = &f5val
		}
		res.SetTags(f5)
	}

	return res
}

// GenerateUpdatePodIdentityAssociationInput returns an update input.
func GenerateUpdatePodIdentityAssociationInput(cr *svcapitypes.PodIdentityAssociation) *svcsdk.UpdatePodIdentityAssociationInput {
	res := &svcsdk.UpdatePodIdentityAssociationInput{}

	if cr.Status.AtProvider.AssociationID != nil {
		res.SetAssociationId(*cr.Status.AtProvider.AssociationID)
	}
	if cr.Spec.ForProvider.ClientRequestToken != nil {
		res.SetClientRequestToken(*cr.Spec.ForProvider.ClientRequestToken)
	}
	if cr.Spec.ForProvider.ClusterName != nil {
		res.SetClusterName(*cr.Spec.ForProvider.ClusterName)
	}
	if cr.Spec.ForProvider.RoleARN != nil {
		res.SetRoleArn(*cr.Spec.ForProvider.RoleARN)
	}

	return res
}

// GenerateDeletePodIdentityAssociationInput returns a deletion input.
func GenerateDeletePodIdentityAssociationInput(cr *svcapitypes.PodIdentityAssociation) *svcsdk.DeletePodIdentityAssociationInput {
	res := &svcsdk.DeletePodIdentityAssociationInput{}

	if cr.Status.AtProvider.AssociationID != nil {
		res.SetAssociationId(*cr.Status.AtProvider.AssociationID)
	}
	if cr.Spec.ForProvider.ClusterName != nil {
		res.SetClusterName(*cr.Spec.ForProvider.ClusterName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
