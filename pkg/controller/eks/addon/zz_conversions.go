/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package addon

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/eks"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/eks/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeAddonInput returns input for read
// operation.
func GenerateDescribeAddonInput(cr *svcapitypes.Addon) *svcsdk.DescribeAddonInput {
	res := &svcsdk.DescribeAddonInput{}

	if cr.Spec.ForProvider.AddonName != nil {
		res.SetAddonName(*cr.Spec.ForProvider.AddonName)
	}

	return res
}

// GenerateAddon returns the current state in the form of *svcapitypes.Addon.
func GenerateAddon(resp *svcsdk.DescribeAddonOutput) *svcapitypes.Addon {
	cr := &svcapitypes.Addon{}

	if resp.Addon.AddonArn != nil {
		cr.Status.AtProvider.AddonARN = resp.Addon.AddonArn
	} else {
		cr.Status.AtProvider.AddonARN = nil
	}
	if resp.Addon.AddonName != nil {
		cr.Spec.ForProvider.AddonName = resp.Addon.AddonName
	} else {
		cr.Spec.ForProvider.AddonName = nil
	}
	if resp.Addon.AddonVersion != nil {
		cr.Spec.ForProvider.AddonVersion = resp.Addon.AddonVersion
	} else {
		cr.Spec.ForProvider.AddonVersion = nil
	}
	if resp.Addon.ClusterName != nil {
		cr.Status.AtProvider.ClusterName = resp.Addon.ClusterName
	} else {
		cr.Status.AtProvider.ClusterName = nil
	}
	if resp.Addon.CreatedAt != nil {
		cr.Status.AtProvider.CreatedAt = &metav1.Time{*resp.Addon.CreatedAt}
	} else {
		cr.Status.AtProvider.CreatedAt = nil
	}
	if resp.Addon.Health != nil {
		f5 := &svcapitypes.AddonHealth{}
		if resp.Addon.Health.Issues != nil {
			f5f0 := []*svcapitypes.AddonIssue{}
			for _, f5f0iter := range resp.Addon.Health.Issues {
				f5f0elem := &svcapitypes.AddonIssue{}
				if f5f0iter.Code != nil {
					f5f0elem.Code = f5f0iter.Code
				}
				if f5f0iter.Message != nil {
					f5f0elem.Message = f5f0iter.Message
				}
				if f5f0iter.ResourceIds != nil {
					f5f0elemf2 := []*string{}
					for _, f5f0elemf2iter := range f5f0iter.ResourceIds {
						var f5f0elemf2elem string
						f5f0elemf2elem = *f5f0elemf2iter
						f5f0elemf2 = append(f5f0elemf2, &f5f0elemf2elem)
					}
					f5f0elem.ResourceIDs = f5f0elemf2
				}
				f5f0 = append(f5f0, f5f0elem)
			}
			f5.Issues = f5f0
		}
		cr.Status.AtProvider.Health = f5
	} else {
		cr.Status.AtProvider.Health = nil
	}
	if resp.Addon.ModifiedAt != nil {
		cr.Status.AtProvider.ModifiedAt = &metav1.Time{*resp.Addon.ModifiedAt}
	} else {
		cr.Status.AtProvider.ModifiedAt = nil
	}
	if resp.Addon.ServiceAccountRoleArn != nil {
		cr.Spec.ForProvider.ServiceAccountRoleARN = resp.Addon.ServiceAccountRoleArn
	} else {
		cr.Spec.ForProvider.ServiceAccountRoleARN = nil
	}
	if resp.Addon.Status != nil {
		cr.Status.AtProvider.Status = resp.Addon.Status
	} else {
		cr.Status.AtProvider.Status = nil
	}
	if resp.Addon.Tags != nil {
		f9 := map[string]*string{}
		for f9key, f9valiter := range resp.Addon.Tags {
			var f9val string
			f9val = *f9valiter
			f9[f9key] = &f9val
		}
		cr.Spec.ForProvider.Tags = f9
	} else {
		cr.Spec.ForProvider.Tags = nil
	}

	return cr
}

// GenerateCreateAddonInput returns a create input.
func GenerateCreateAddonInput(cr *svcapitypes.Addon) *svcsdk.CreateAddonInput {
	res := &svcsdk.CreateAddonInput{}

	if cr.Spec.ForProvider.AddonName != nil {
		res.SetAddonName(*cr.Spec.ForProvider.AddonName)
	}
	if cr.Spec.ForProvider.AddonVersion != nil {
		res.SetAddonVersion(*cr.Spec.ForProvider.AddonVersion)
	}
	if cr.Spec.ForProvider.ResolveConflicts != nil {
		res.SetResolveConflicts(*cr.Spec.ForProvider.ResolveConflicts)
	}
	if cr.Spec.ForProvider.ServiceAccountRoleARN != nil {
		res.SetServiceAccountRoleArn(*cr.Spec.ForProvider.ServiceAccountRoleARN)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f4 := map[string]*string{}
		for f4key, f4valiter := range cr.Spec.ForProvider.Tags {
			var f4val string
			f4val = *f4valiter
			f4[f4key] = &f4val
		}
		res.SetTags(f4)
	}

	return res
}

// GenerateUpdateAddonInput returns an update input.
func GenerateUpdateAddonInput(cr *svcapitypes.Addon) *svcsdk.UpdateAddonInput {
	res := &svcsdk.UpdateAddonInput{}

	if cr.Spec.ForProvider.AddonName != nil {
		res.SetAddonName(*cr.Spec.ForProvider.AddonName)
	}
	if cr.Spec.ForProvider.AddonVersion != nil {
		res.SetAddonVersion(*cr.Spec.ForProvider.AddonVersion)
	}
	if cr.Spec.ForProvider.ResolveConflicts != nil {
		res.SetResolveConflicts(*cr.Spec.ForProvider.ResolveConflicts)
	}
	if cr.Spec.ForProvider.ServiceAccountRoleARN != nil {
		res.SetServiceAccountRoleArn(*cr.Spec.ForProvider.ServiceAccountRoleARN)
	}

	return res
}

// GenerateDeleteAddonInput returns a deletion input.
func GenerateDeleteAddonInput(cr *svcapitypes.Addon) *svcsdk.DeleteAddonInput {
	res := &svcsdk.DeleteAddonInput{}

	if cr.Spec.ForProvider.AddonName != nil {
		res.SetAddonName(*cr.Spec.ForProvider.AddonName)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
