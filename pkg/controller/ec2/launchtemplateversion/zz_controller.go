/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package launchtemplateversion

import (
	"context"

	svcapi "github.com/aws/aws-sdk-go/service/ec2"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	svcsdkapi "github.com/aws/aws-sdk-go/service/ec2/ec2iface"
	"github.com/google/go-cmp/cmp"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/meta"
	"github.com/crossplane/crossplane-runtime/pkg/reconciler/managed"
	cpresource "github.com/crossplane/crossplane-runtime/pkg/resource"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/ec2/v1alpha1"
	awsclient "github.com/crossplane-contrib/provider-aws/pkg/clients"
)

const (
	errUnexpectedObject = "managed resource is not an LaunchTemplateVersion resource"

	errCreateSession = "cannot create a new session"
	errCreate        = "cannot create LaunchTemplateVersion in AWS"
	errUpdate        = "cannot update LaunchTemplateVersion in AWS"
	errDescribe      = "failed to describe LaunchTemplateVersion"
	errDelete        = "failed to delete LaunchTemplateVersion"
)

type connector struct {
	kube client.Client
	opts []option
}

func (c *connector) Connect(ctx context.Context, mg cpresource.Managed) (managed.ExternalClient, error) {
	cr, ok := mg.(*svcapitypes.LaunchTemplateVersion)
	if !ok {
		return nil, errors.New(errUnexpectedObject)
	}
	sess, err := awsclient.GetConfigV1(ctx, c.kube, mg, cr.Spec.ForProvider.Region)
	if err != nil {
		return nil, errors.Wrap(err, errCreateSession)
	}
	return newExternal(c.kube, svcapi.New(sess), c.opts), nil
}

func (e *external) Observe(ctx context.Context, mg cpresource.Managed) (managed.ExternalObservation, error) {
	cr, ok := mg.(*svcapitypes.LaunchTemplateVersion)
	if !ok {
		return managed.ExternalObservation{}, errors.New(errUnexpectedObject)
	}
	if meta.GetExternalName(cr) == "" {
		return managed.ExternalObservation{
			ResourceExists: false,
		}, nil
	}
	input := GenerateDescribeLaunchTemplateVersionsInput(cr)
	if err := e.preObserve(ctx, cr, input); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "pre-observe failed")
	}
	resp, err := e.client.DescribeLaunchTemplateVersionsWithContext(ctx, input)
	if err != nil {
		return managed.ExternalObservation{ResourceExists: false}, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDescribe)
	}
	resp = e.filterList(cr, resp)
	if len(resp.LaunchTemplateVersions) == 0 {
		return managed.ExternalObservation{ResourceExists: false}, nil
	}
	currentSpec := cr.Spec.ForProvider.DeepCopy()
	if err := e.lateInitialize(&cr.Spec.ForProvider, resp); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "late-init failed")
	}
	GenerateLaunchTemplateVersion(resp).Status.AtProvider.DeepCopyInto(&cr.Status.AtProvider)

	upToDate, err := e.isUpToDate(cr, resp)
	if err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "isUpToDate check failed")
	}
	return e.postObserve(ctx, cr, resp, managed.ExternalObservation{
		ResourceExists:          true,
		ResourceUpToDate:        upToDate,
		ResourceLateInitialized: !cmp.Equal(&cr.Spec.ForProvider, currentSpec),
	}, nil)
}

func (e *external) Create(ctx context.Context, mg cpresource.Managed) (managed.ExternalCreation, error) {
	cr, ok := mg.(*svcapitypes.LaunchTemplateVersion)
	if !ok {
		return managed.ExternalCreation{}, errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Creating())
	input := GenerateCreateLaunchTemplateVersionInput(cr)
	if err := e.preCreate(ctx, cr, input); err != nil {
		return managed.ExternalCreation{}, errors.Wrap(err, "pre-create failed")
	}
	resp, err := e.client.CreateLaunchTemplateVersionWithContext(ctx, input)
	if err != nil {
		return managed.ExternalCreation{}, awsclient.Wrap(err, errCreate)
	}

	if resp.LaunchTemplateVersion != nil {
		f0 := &svcapitypes.LaunchTemplateVersion_SDK{}
		if resp.LaunchTemplateVersion.CreateTime != nil {
			f0.CreateTime = &metav1.Time{*resp.LaunchTemplateVersion.CreateTime}
		}
		if resp.LaunchTemplateVersion.CreatedBy != nil {
			f0.CreatedBy = resp.LaunchTemplateVersion.CreatedBy
		}
		if resp.LaunchTemplateVersion.DefaultVersion != nil {
			f0.DefaultVersion = resp.LaunchTemplateVersion.DefaultVersion
		}
		if resp.LaunchTemplateVersion.LaunchTemplateData != nil {
			f0f3 := &svcapitypes.ResponseLaunchTemplateData{}
			if resp.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings != nil {
				f0f3f0 := []*svcapitypes.LaunchTemplateBlockDeviceMapping{}
				for _, f0f3f0iter := range resp.LaunchTemplateVersion.LaunchTemplateData.BlockDeviceMappings {
					f0f3f0elem := &svcapitypes.LaunchTemplateBlockDeviceMapping{}
					if f0f3f0iter.DeviceName != nil {
						f0f3f0elem.DeviceName = f0f3f0iter.DeviceName
					}
					if f0f3f0iter.Ebs != nil {
						f0f3f0elemf1 := &svcapitypes.LaunchTemplateEBSBlockDevice{}
						if f0f3f0iter.Ebs.DeleteOnTermination != nil {
							f0f3f0elemf1.DeleteOnTermination = f0f3f0iter.Ebs.DeleteOnTermination
						}
						if f0f3f0iter.Ebs.Encrypted != nil {
							f0f3f0elemf1.Encrypted = f0f3f0iter.Ebs.Encrypted
						}
						if f0f3f0iter.Ebs.Iops != nil {
							f0f3f0elemf1.IOPS = f0f3f0iter.Ebs.Iops
						}
						if f0f3f0iter.Ebs.KmsKeyId != nil {
							f0f3f0elemf1.KMSKeyID = f0f3f0iter.Ebs.KmsKeyId
						}
						if f0f3f0iter.Ebs.SnapshotId != nil {
							f0f3f0elemf1.SnapshotID = f0f3f0iter.Ebs.SnapshotId
						}
						if f0f3f0iter.Ebs.Throughput != nil {
							f0f3f0elemf1.Throughput = f0f3f0iter.Ebs.Throughput
						}
						if f0f3f0iter.Ebs.VolumeSize != nil {
							f0f3f0elemf1.VolumeSize = f0f3f0iter.Ebs.VolumeSize
						}
						if f0f3f0iter.Ebs.VolumeType != nil {
							f0f3f0elemf1.VolumeType = f0f3f0iter.Ebs.VolumeType
						}
						f0f3f0elem.EBS = f0f3f0elemf1
					}
					if f0f3f0iter.NoDevice != nil {
						f0f3f0elem.NoDevice = f0f3f0iter.NoDevice
					}
					if f0f3f0iter.VirtualName != nil {
						f0f3f0elem.VirtualName = f0f3f0iter.VirtualName
					}
					f0f3f0 = append(f0f3f0, f0f3f0elem)
				}
				f0f3.BlockDeviceMappings = f0f3f0
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification != nil {
				f0f3f1 := &svcapitypes.LaunchTemplateCapacityReservationSpecificationResponse{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference != nil {
					f0f3f1.CapacityReservationPreference = resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget != nil {
					f0f3f1f1 := &svcapitypes.CapacityReservationTargetResponse{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
						f0f3f1f1.CapacityReservationID = resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
						f0f3f1f1.CapacityReservationResourceGroupARN = resp.LaunchTemplateVersion.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
					}
					f0f3f1.CapacityReservationTarget = f0f3f1f1
				}
				f0f3.CapacityReservationSpecification = f0f3f1
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions != nil {
				f0f3f2 := &svcapitypes.LaunchTemplateCPUOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount != nil {
					f0f3f2.CoreCount = resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.CoreCount
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore != nil {
					f0f3f2.ThreadsPerCore = resp.LaunchTemplateVersion.LaunchTemplateData.CpuOptions.ThreadsPerCore
				}
				f0f3.CPUOptions = f0f3f2
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification != nil {
				f0f3f3 := &svcapitypes.CreditSpecification{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits != nil {
					f0f3f3.CPUCredits = resp.LaunchTemplateVersion.LaunchTemplateData.CreditSpecification.CpuCredits
				}
				f0f3.CreditSpecification = f0f3f3
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination != nil {
				f0f3.DisableAPITermination = resp.LaunchTemplateVersion.LaunchTemplateData.DisableApiTermination
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized != nil {
				f0f3.EBSOptimized = resp.LaunchTemplateVersion.LaunchTemplateData.EbsOptimized
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications != nil {
				f0f3f6 := []*svcapitypes.ElasticGPUSpecificationResponse{}
				for _, f0f3f6iter := range resp.LaunchTemplateVersion.LaunchTemplateData.ElasticGpuSpecifications {
					f0f3f6elem := &svcapitypes.ElasticGPUSpecificationResponse{}
					if f0f3f6iter.Type != nil {
						f0f3f6elem.Type = f0f3f6iter.Type
					}
					f0f3f6 = append(f0f3f6, f0f3f6elem)
				}
				f0f3.ElasticGPUSpecifications = f0f3f6
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators != nil {
				f0f3f7 := []*svcapitypes.LaunchTemplateElasticInferenceAcceleratorResponse{}
				for _, f0f3f7iter := range resp.LaunchTemplateVersion.LaunchTemplateData.ElasticInferenceAccelerators {
					f0f3f7elem := &svcapitypes.LaunchTemplateElasticInferenceAcceleratorResponse{}
					if f0f3f7iter.Count != nil {
						f0f3f7elem.Count = f0f3f7iter.Count
					}
					if f0f3f7iter.Type != nil {
						f0f3f7elem.Type = f0f3f7iter.Type
					}
					f0f3f7 = append(f0f3f7, f0f3f7elem)
				}
				f0f3.ElasticInferenceAccelerators = f0f3f7
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions != nil {
				f0f3f8 := &svcapitypes.LaunchTemplateEnclaveOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled != nil {
					f0f3f8.Enabled = resp.LaunchTemplateVersion.LaunchTemplateData.EnclaveOptions.Enabled
				}
				f0f3.EnclaveOptions = f0f3f8
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions != nil {
				f0f3f9 := &svcapitypes.LaunchTemplateHibernationOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured != nil {
					f0f3f9.Configured = resp.LaunchTemplateVersion.LaunchTemplateData.HibernationOptions.Configured
				}
				f0f3.HibernationOptions = f0f3f9
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile != nil {
				f0f3f10 := &svcapitypes.LaunchTemplateIAMInstanceProfileSpecification{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn != nil {
					f0f3f10.ARN = resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Arn
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name != nil {
					f0f3f10.Name = resp.LaunchTemplateVersion.LaunchTemplateData.IamInstanceProfile.Name
				}
				f0f3.IAMInstanceProfile = f0f3f10
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.ImageId != nil {
				f0f3.ImageID = resp.LaunchTemplateVersion.LaunchTemplateData.ImageId
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior != nil {
				f0f3.InstanceInitiatedShutdownBehavior = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceInitiatedShutdownBehavior
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions != nil {
				f0f3f13 := &svcapitypes.LaunchTemplateInstanceMarketOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType != nil {
					f0f3f13.MarketType = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.MarketType
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions != nil {
					f0f3f13f1 := &svcapitypes.LaunchTemplateSpotMarketOptions{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
						f0f3f13f1.BlockDurationMinutes = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
						f0f3f13f1.InstanceInterruptionBehavior = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
						f0f3f13f1.MaxPrice = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
						f0f3f13f1.SpotInstanceType = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
						f0f3f13f1.ValidUntil = &metav1.Time{*resp.LaunchTemplateVersion.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil}
					}
					f0f3f13.SpotOptions = f0f3f13f1
				}
				f0f3.InstanceMarketOptions = f0f3f13
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements != nil {
				f0f3f14 := &svcapitypes.InstanceRequirements{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount != nil {
					f0f3f14f0 := &svcapitypes.AcceleratorCount{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max != nil {
						f0f3f14f0.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min != nil {
						f0f3f14f0.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorCount.Min
					}
					f0f3f14.AcceleratorCount = f0f3f14f0
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers != nil {
					f0f3f14f1 := []*string{}
					for _, f0f3f14f1iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorManufacturers {
						var f0f3f14f1elem string
						f0f3f14f1elem = *f0f3f14f1iter
						f0f3f14f1 = append(f0f3f14f1, &f0f3f14f1elem)
					}
					f0f3f14.AcceleratorManufacturers = f0f3f14f1
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorNames != nil {
					f0f3f14f2 := []*string{}
					for _, f0f3f14f2iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorNames {
						var f0f3f14f2elem string
						f0f3f14f2elem = *f0f3f14f2iter
						f0f3f14f2 = append(f0f3f14f2, &f0f3f14f2elem)
					}
					f0f3f14.AcceleratorNames = f0f3f14f2
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
					f0f3f14f3 := &svcapitypes.AcceleratorTotalMemoryMiB{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
						f0f3f14f3.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
						f0f3f14f3.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTotalMemoryMiB.Min
					}
					f0f3f14.AcceleratorTotalMemoryMiB = f0f3f14f3
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTypes != nil {
					f0f3f14f4 := []*string{}
					for _, f0f3f14f4iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.AcceleratorTypes {
						var f0f3f14f4elem string
						f0f3f14f4elem = *f0f3f14f4iter
						f0f3f14f4 = append(f0f3f14f4, &f0f3f14f4elem)
					}
					f0f3f14.AcceleratorTypes = f0f3f14f4
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BareMetal != nil {
					f0f3f14.BareMetal = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BareMetal
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps != nil {
					f0f3f14f6 := &svcapitypes.BaselineEBSBandwidthMbps{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Max != nil {
						f0f3f14f6.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Min != nil {
						f0f3f14f6.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BaselineEbsBandwidthMbps.Min
					}
					f0f3f14.BaselineEBSBandwidthMbps = f0f3f14f6
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BurstablePerformance != nil {
					f0f3f14.BurstablePerformance = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.BurstablePerformance
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.CpuManufacturers != nil {
					f0f3f14f8 := []*string{}
					for _, f0f3f14f8iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.CpuManufacturers {
						var f0f3f14f8elem string
						f0f3f14f8elem = *f0f3f14f8iter
						f0f3f14f8 = append(f0f3f14f8, &f0f3f14f8elem)
					}
					f0f3f14.CPUManufacturers = f0f3f14f8
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes != nil {
					f0f3f14f9 := []*string{}
					for _, f0f3f14f9iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.ExcludedInstanceTypes {
						var f0f3f14f9elem string
						f0f3f14f9elem = *f0f3f14f9iter
						f0f3f14f9 = append(f0f3f14f9, &f0f3f14f9elem)
					}
					f0f3f14.ExcludedInstanceTypes = f0f3f14f9
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.InstanceGenerations != nil {
					f0f3f14f10 := []*string{}
					for _, f0f3f14f10iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.InstanceGenerations {
						var f0f3f14f10elem string
						f0f3f14f10elem = *f0f3f14f10iter
						f0f3f14f10 = append(f0f3f14f10, &f0f3f14f10elem)
					}
					f0f3f14.InstanceGenerations = f0f3f14f10
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorage != nil {
					f0f3f14.LocalStorage = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorage
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorageTypes != nil {
					f0f3f14f12 := []*string{}
					for _, f0f3f14f12iter := range resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.LocalStorageTypes {
						var f0f3f14f12elem string
						f0f3f14f12elem = *f0f3f14f12iter
						f0f3f14f12 = append(f0f3f14f12, &f0f3f14f12elem)
					}
					f0f3f14.LocalStorageTypes = f0f3f14f12
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu != nil {
					f0f3f14f13 := &svcapitypes.MemoryGiBPerVCPU{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Max != nil {
						f0f3f14f13.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Min != nil {
						f0f3f14f13.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryGiBPerVCpu.Min
					}
					f0f3f14.MemoryGiBPerVCPU = f0f3f14f13
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB != nil {
					f0f3f14f14 := &svcapitypes.MemoryMiB{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max != nil {
						f0f3f14f14.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min != nil {
						f0f3f14f14.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.MemoryMiB.Min
					}
					f0f3f14.MemoryMiB = f0f3f14f14
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount != nil {
					f0f3f14f15 := &svcapitypes.NetworkInterfaceCount{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max != nil {
						f0f3f14f15.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min != nil {
						f0f3f14f15.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.NetworkInterfaceCount.Min
					}
					f0f3f14.NetworkInterfaceCount = f0f3f14f15
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
					f0f3f14.OnDemandMaxPricePercentageOverLowestPrice = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport != nil {
					f0f3f14.RequireHibernateSupport = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.RequireHibernateSupport
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
					f0f3f14.SpotMaxPricePercentageOverLowestPrice = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB != nil {
					f0f3f14f19 := &svcapitypes.TotalLocalStorageGB{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max != nil {
						f0f3f14f19.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min != nil {
						f0f3f14f19.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.TotalLocalStorageGB.Min
					}
					f0f3f14.TotalLocalStorageGB = f0f3f14f19
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount != nil {
					f0f3f14f20 := &svcapitypes.VCPUCountRange{}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Max != nil {
						f0f3f14f20.Max = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Max
					}
					if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Min != nil {
						f0f3f14f20.Min = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceRequirements.VCpuCount.Min
					}
					f0f3f14.VCPUCount = f0f3f14f20
				}
				f0f3.InstanceRequirements = f0f3f14
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.InstanceType != nil {
				f0f3.InstanceType = resp.LaunchTemplateVersion.LaunchTemplateData.InstanceType
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.KernelId != nil {
				f0f3.KernelID = resp.LaunchTemplateVersion.LaunchTemplateData.KernelId
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.KeyName != nil {
				f0f3.KeyName = resp.LaunchTemplateVersion.LaunchTemplateData.KeyName
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications != nil {
				f0f3f18 := []*svcapitypes.LaunchTemplateLicenseConfiguration{}
				for _, f0f3f18iter := range resp.LaunchTemplateVersion.LaunchTemplateData.LicenseSpecifications {
					f0f3f18elem := &svcapitypes.LaunchTemplateLicenseConfiguration{}
					if f0f3f18iter.LicenseConfigurationArn != nil {
						f0f3f18elem.LicenseConfigurationARN = f0f3f18iter.LicenseConfigurationArn
					}
					f0f3f18 = append(f0f3f18, f0f3f18elem)
				}
				f0f3.LicenseSpecifications = f0f3f18
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.MaintenanceOptions != nil {
				f0f3f19 := &svcapitypes.LaunchTemplateInstanceMaintenanceOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MaintenanceOptions.AutoRecovery != nil {
					f0f3f19.AutoRecovery = resp.LaunchTemplateVersion.LaunchTemplateData.MaintenanceOptions.AutoRecovery
				}
				f0f3.MaintenanceOptions = f0f3f19
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions != nil {
				f0f3f20 := &svcapitypes.LaunchTemplateInstanceMetadataOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint != nil {
					f0f3f20.HTTPEndpoint = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpEndpoint
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpProtocolIpv6 != nil {
					f0f3f20.HTTPProtocolIPv6 = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpProtocolIpv6
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit != nil {
					f0f3f20.HTTPPutResponseHopLimit = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens != nil {
					f0f3f20.HTTPTokens = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.HttpTokens
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.InstanceMetadataTags != nil {
					f0f3f20.InstanceMetadataTags = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.InstanceMetadataTags
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State != nil {
					f0f3f20.State = resp.LaunchTemplateVersion.LaunchTemplateData.MetadataOptions.State
				}
				f0f3.MetadataOptions = f0f3f20
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Monitoring != nil {
				f0f3f21 := &svcapitypes.LaunchTemplatesMonitoring{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled != nil {
					f0f3f21.Enabled = resp.LaunchTemplateVersion.LaunchTemplateData.Monitoring.Enabled
				}
				f0f3.Monitoring = f0f3f21
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces != nil {
				f0f3f22 := []*svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecification{}
				for _, f0f3f22iter := range resp.LaunchTemplateVersion.LaunchTemplateData.NetworkInterfaces {
					f0f3f22elem := &svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecification{}
					if f0f3f22iter.AssociateCarrierIpAddress != nil {
						f0f3f22elem.AssociateCarrierIPAddress = f0f3f22iter.AssociateCarrierIpAddress
					}
					if f0f3f22iter.AssociatePublicIpAddress != nil {
						f0f3f22elem.AssociatePublicIPAddress = f0f3f22iter.AssociatePublicIpAddress
					}
					if f0f3f22iter.DeleteOnTermination != nil {
						f0f3f22elem.DeleteOnTermination = f0f3f22iter.DeleteOnTermination
					}
					if f0f3f22iter.Description != nil {
						f0f3f22elem.Description = f0f3f22iter.Description
					}
					if f0f3f22iter.DeviceIndex != nil {
						f0f3f22elem.DeviceIndex = f0f3f22iter.DeviceIndex
					}
					if f0f3f22iter.Groups != nil {
						f0f3f22elemf5 := []*string{}
						for _, f0f3f22elemf5iter := range f0f3f22iter.Groups {
							var f0f3f22elemf5elem string
							f0f3f22elemf5elem = *f0f3f22elemf5iter
							f0f3f22elemf5 = append(f0f3f22elemf5, &f0f3f22elemf5elem)
						}
						f0f3f22elem.Groups = f0f3f22elemf5
					}
					if f0f3f22iter.InterfaceType != nil {
						f0f3f22elem.InterfaceType = f0f3f22iter.InterfaceType
					}
					if f0f3f22iter.Ipv4PrefixCount != nil {
						f0f3f22elem.IPv4PrefixCount = f0f3f22iter.Ipv4PrefixCount
					}
					if f0f3f22iter.Ipv4Prefixes != nil {
						f0f3f22elemf8 := []*svcapitypes.IPv4PrefixSpecificationResponse{}
						for _, f0f3f22elemf8iter := range f0f3f22iter.Ipv4Prefixes {
							f0f3f22elemf8elem := &svcapitypes.IPv4PrefixSpecificationResponse{}
							if f0f3f22elemf8iter.Ipv4Prefix != nil {
								f0f3f22elemf8elem.IPv4Prefix = f0f3f22elemf8iter.Ipv4Prefix
							}
							f0f3f22elemf8 = append(f0f3f22elemf8, f0f3f22elemf8elem)
						}
						f0f3f22elem.IPv4Prefixes = f0f3f22elemf8
					}
					if f0f3f22iter.Ipv6AddressCount != nil {
						f0f3f22elem.IPv6AddressCount = f0f3f22iter.Ipv6AddressCount
					}
					if f0f3f22iter.Ipv6Addresses != nil {
						f0f3f22elemf10 := []*svcapitypes.InstanceIPv6Address{}
						for _, f0f3f22elemf10iter := range f0f3f22iter.Ipv6Addresses {
							f0f3f22elemf10elem := &svcapitypes.InstanceIPv6Address{}
							if f0f3f22elemf10iter.Ipv6Address != nil {
								f0f3f22elemf10elem.IPv6Address = f0f3f22elemf10iter.Ipv6Address
							}
							f0f3f22elemf10 = append(f0f3f22elemf10, f0f3f22elemf10elem)
						}
						f0f3f22elem.IPv6Addresses = f0f3f22elemf10
					}
					if f0f3f22iter.Ipv6PrefixCount != nil {
						f0f3f22elem.IPv6PrefixCount = f0f3f22iter.Ipv6PrefixCount
					}
					if f0f3f22iter.Ipv6Prefixes != nil {
						f0f3f22elemf12 := []*svcapitypes.IPv6PrefixSpecificationResponse{}
						for _, f0f3f22elemf12iter := range f0f3f22iter.Ipv6Prefixes {
							f0f3f22elemf12elem := &svcapitypes.IPv6PrefixSpecificationResponse{}
							if f0f3f22elemf12iter.Ipv6Prefix != nil {
								f0f3f22elemf12elem.IPv6Prefix = f0f3f22elemf12iter.Ipv6Prefix
							}
							f0f3f22elemf12 = append(f0f3f22elemf12, f0f3f22elemf12elem)
						}
						f0f3f22elem.IPv6Prefixes = f0f3f22elemf12
					}
					if f0f3f22iter.NetworkCardIndex != nil {
						f0f3f22elem.NetworkCardIndex = f0f3f22iter.NetworkCardIndex
					}
					if f0f3f22iter.NetworkInterfaceId != nil {
						f0f3f22elem.NetworkInterfaceID = f0f3f22iter.NetworkInterfaceId
					}
					if f0f3f22iter.PrivateIpAddress != nil {
						f0f3f22elem.PrivateIPAddress = f0f3f22iter.PrivateIpAddress
					}
					if f0f3f22iter.PrivateIpAddresses != nil {
						f0f3f22elemf16 := []*svcapitypes.PrivateIPAddressSpecification{}
						for _, f0f3f22elemf16iter := range f0f3f22iter.PrivateIpAddresses {
							f0f3f22elemf16elem := &svcapitypes.PrivateIPAddressSpecification{}
							if f0f3f22elemf16iter.Primary != nil {
								f0f3f22elemf16elem.Primary = f0f3f22elemf16iter.Primary
							}
							if f0f3f22elemf16iter.PrivateIpAddress != nil {
								f0f3f22elemf16elem.PrivateIPAddress = f0f3f22elemf16iter.PrivateIpAddress
							}
							f0f3f22elemf16 = append(f0f3f22elemf16, f0f3f22elemf16elem)
						}
						f0f3f22elem.PrivateIPAddresses = f0f3f22elemf16
					}
					if f0f3f22iter.SecondaryPrivateIpAddressCount != nil {
						f0f3f22elem.SecondaryPrivateIPAddressCount = f0f3f22iter.SecondaryPrivateIpAddressCount
					}
					if f0f3f22iter.SubnetId != nil {
						f0f3f22elem.SubnetID = f0f3f22iter.SubnetId
					}
					f0f3f22 = append(f0f3f22, f0f3f22elem)
				}
				f0f3.NetworkInterfaces = f0f3f22
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.Placement != nil {
				f0f3f23 := &svcapitypes.LaunchTemplatePlacement{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity != nil {
					f0f3f23.Affinity = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Affinity
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone != nil {
					f0f3f23.AvailabilityZone = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.AvailabilityZone
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName != nil {
					f0f3f23.GroupName = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.GroupName
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId != nil {
					f0f3f23.HostID = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostId
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn != nil {
					f0f3f23.HostResourceGroupARN = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.HostResourceGroupArn
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber != nil {
					f0f3f23.PartitionNumber = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.PartitionNumber
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain != nil {
					f0f3f23.SpreadDomain = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.SpreadDomain
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy != nil {
					f0f3f23.Tenancy = resp.LaunchTemplateVersion.LaunchTemplateData.Placement.Tenancy
				}
				f0f3.Placement = f0f3f23
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions != nil {
				f0f3f24 := &svcapitypes.LaunchTemplatePrivateDNSNameOptions{}
				if resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord != nil {
					f0f3f24.EnableResourceNameDNSAAAARecord = resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.EnableResourceNameDnsAAAARecord
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.EnableResourceNameDnsARecord != nil {
					f0f3f24.EnableResourceNameDNSARecord = resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.EnableResourceNameDnsARecord
				}
				if resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.HostnameType != nil {
					f0f3f24.HostnameType = resp.LaunchTemplateVersion.LaunchTemplateData.PrivateDnsNameOptions.HostnameType
				}
				f0f3.PrivateDNSNameOptions = f0f3f24
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.RamDiskId != nil {
				f0f3.RAMDiskID = resp.LaunchTemplateVersion.LaunchTemplateData.RamDiskId
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds != nil {
				f0f3f26 := []*string{}
				for _, f0f3f26iter := range resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroupIds {
					var f0f3f26elem string
					f0f3f26elem = *f0f3f26iter
					f0f3f26 = append(f0f3f26, &f0f3f26elem)
				}
				f0f3.SecurityGroupIDs = f0f3f26
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups != nil {
				f0f3f27 := []*string{}
				for _, f0f3f27iter := range resp.LaunchTemplateVersion.LaunchTemplateData.SecurityGroups {
					var f0f3f27elem string
					f0f3f27elem = *f0f3f27iter
					f0f3f27 = append(f0f3f27, &f0f3f27elem)
				}
				f0f3.SecurityGroups = f0f3f27
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.TagSpecifications != nil {
				f0f3f28 := []*svcapitypes.LaunchTemplateTagSpecification{}
				for _, f0f3f28iter := range resp.LaunchTemplateVersion.LaunchTemplateData.TagSpecifications {
					f0f3f28elem := &svcapitypes.LaunchTemplateTagSpecification{}
					if f0f3f28iter.ResourceType != nil {
						f0f3f28elem.ResourceType = f0f3f28iter.ResourceType
					}
					if f0f3f28iter.Tags != nil {
						f0f3f28elemf1 := []*svcapitypes.Tag{}
						for _, f0f3f28elemf1iter := range f0f3f28iter.Tags {
							f0f3f28elemf1elem := &svcapitypes.Tag{}
							if f0f3f28elemf1iter.Key != nil {
								f0f3f28elemf1elem.Key = f0f3f28elemf1iter.Key
							}
							if f0f3f28elemf1iter.Value != nil {
								f0f3f28elemf1elem.Value = f0f3f28elemf1iter.Value
							}
							f0f3f28elemf1 = append(f0f3f28elemf1, f0f3f28elemf1elem)
						}
						f0f3f28elem.Tags = f0f3f28elemf1
					}
					f0f3f28 = append(f0f3f28, f0f3f28elem)
				}
				f0f3.TagSpecifications = f0f3f28
			}
			if resp.LaunchTemplateVersion.LaunchTemplateData.UserData != nil {
				f0f3.UserData = resp.LaunchTemplateVersion.LaunchTemplateData.UserData
			}
			f0.LaunchTemplateData = f0f3
		}
		if resp.LaunchTemplateVersion.LaunchTemplateId != nil {
			f0.LaunchTemplateID = resp.LaunchTemplateVersion.LaunchTemplateId
		}
		if resp.LaunchTemplateVersion.LaunchTemplateName != nil {
			f0.LaunchTemplateName = resp.LaunchTemplateVersion.LaunchTemplateName
		}
		if resp.LaunchTemplateVersion.VersionDescription != nil {
			f0.VersionDescription = resp.LaunchTemplateVersion.VersionDescription
		}
		if resp.LaunchTemplateVersion.VersionNumber != nil {
			f0.VersionNumber = resp.LaunchTemplateVersion.VersionNumber
		}
		cr.Status.AtProvider.LaunchTemplateVersion = f0
	} else {
		cr.Status.AtProvider.LaunchTemplateVersion = nil
	}
	if resp.Warning != nil {
		f1 := &svcapitypes.ValidationWarning{}
		if resp.Warning.Errors != nil {
			f1f0 := []*svcapitypes.ValidationError{}
			for _, f1f0iter := range resp.Warning.Errors {
				f1f0elem := &svcapitypes.ValidationError{}
				if f1f0iter.Code != nil {
					f1f0elem.Code = f1f0iter.Code
				}
				if f1f0iter.Message != nil {
					f1f0elem.Message = f1f0iter.Message
				}
				f1f0 = append(f1f0, f1f0elem)
			}
			f1.Errors = f1f0
		}
		cr.Status.AtProvider.Warning = f1
	} else {
		cr.Status.AtProvider.Warning = nil
	}

	return e.postCreate(ctx, cr, resp, managed.ExternalCreation{}, err)
}

func (e *external) Update(ctx context.Context, mg cpresource.Managed) (managed.ExternalUpdate, error) {
	return e.update(ctx, mg)

}

func (e *external) Delete(ctx context.Context, mg cpresource.Managed) error {
	cr, ok := mg.(*svcapitypes.LaunchTemplateVersion)
	if !ok {
		return errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Deleting())
	return e.delete(ctx, mg)

}

type option func(*external)

func newExternal(kube client.Client, client svcsdkapi.EC2API, opts []option) *external {
	e := &external{
		kube:           kube,
		client:         client,
		preObserve:     nopPreObserve,
		postObserve:    nopPostObserve,
		lateInitialize: nopLateInitialize,
		isUpToDate:     alwaysUpToDate,
		filterList:     nopFilterList,
		preCreate:      nopPreCreate,
		postCreate:     nopPostCreate,
		delete:         nopDelete,
		update:         nopUpdate,
	}
	for _, f := range opts {
		f(e)
	}
	return e
}

type external struct {
	kube           client.Client
	client         svcsdkapi.EC2API
	preObserve     func(context.Context, *svcapitypes.LaunchTemplateVersion, *svcsdk.DescribeLaunchTemplateVersionsInput) error
	postObserve    func(context.Context, *svcapitypes.LaunchTemplateVersion, *svcsdk.DescribeLaunchTemplateVersionsOutput, managed.ExternalObservation, error) (managed.ExternalObservation, error)
	filterList     func(*svcapitypes.LaunchTemplateVersion, *svcsdk.DescribeLaunchTemplateVersionsOutput) *svcsdk.DescribeLaunchTemplateVersionsOutput
	lateInitialize func(*svcapitypes.LaunchTemplateVersionParameters, *svcsdk.DescribeLaunchTemplateVersionsOutput) error
	isUpToDate     func(*svcapitypes.LaunchTemplateVersion, *svcsdk.DescribeLaunchTemplateVersionsOutput) (bool, error)
	preCreate      func(context.Context, *svcapitypes.LaunchTemplateVersion, *svcsdk.CreateLaunchTemplateVersionInput) error
	postCreate     func(context.Context, *svcapitypes.LaunchTemplateVersion, *svcsdk.CreateLaunchTemplateVersionOutput, managed.ExternalCreation, error) (managed.ExternalCreation, error)
	delete         func(context.Context, cpresource.Managed) error
	update         func(context.Context, cpresource.Managed) (managed.ExternalUpdate, error)
}

func nopPreObserve(context.Context, *svcapitypes.LaunchTemplateVersion, *svcsdk.DescribeLaunchTemplateVersionsInput) error {
	return nil
}
func nopPostObserve(_ context.Context, _ *svcapitypes.LaunchTemplateVersion, _ *svcsdk.DescribeLaunchTemplateVersionsOutput, obs managed.ExternalObservation, err error) (managed.ExternalObservation, error) {
	return obs, err
}
func nopFilterList(_ *svcapitypes.LaunchTemplateVersion, list *svcsdk.DescribeLaunchTemplateVersionsOutput) *svcsdk.DescribeLaunchTemplateVersionsOutput {
	return list
}

func nopLateInitialize(*svcapitypes.LaunchTemplateVersionParameters, *svcsdk.DescribeLaunchTemplateVersionsOutput) error {
	return nil
}
func alwaysUpToDate(*svcapitypes.LaunchTemplateVersion, *svcsdk.DescribeLaunchTemplateVersionsOutput) (bool, error) {
	return true, nil
}

func nopPreCreate(context.Context, *svcapitypes.LaunchTemplateVersion, *svcsdk.CreateLaunchTemplateVersionInput) error {
	return nil
}
func nopPostCreate(_ context.Context, _ *svcapitypes.LaunchTemplateVersion, _ *svcsdk.CreateLaunchTemplateVersionOutput, cre managed.ExternalCreation, err error) (managed.ExternalCreation, error) {
	return cre, err
}
func nopDelete(context.Context, cpresource.Managed) error {
	return nil
}
func nopUpdate(context.Context, cpresource.Managed) (managed.ExternalUpdate, error) {
	return managed.ExternalUpdate{}, nil
}
