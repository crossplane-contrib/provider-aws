/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package launchtemplateversion

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane/provider-aws/apis/ec2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeLaunchTemplateVersionsInput returns input for read
// operation.
func GenerateDescribeLaunchTemplateVersionsInput(cr *svcapitypes.LaunchTemplateVersion) *svcsdk.DescribeLaunchTemplateVersionsInput {
	res := &svcsdk.DescribeLaunchTemplateVersionsInput{}

	return res
}

// GenerateLaunchTemplateVersion returns the current state in the form of *svcapitypes.LaunchTemplateVersion.
func GenerateLaunchTemplateVersion(resp *svcsdk.DescribeLaunchTemplateVersionsOutput) *svcapitypes.LaunchTemplateVersion {
	cr := &svcapitypes.LaunchTemplateVersion{}

	found := false
	for _, elem := range resp.LaunchTemplateVersions {
		if elem.LaunchTemplateData != nil {
			f3 := &svcapitypes.RequestLaunchTemplateData{}
			if elem.LaunchTemplateData.BlockDeviceMappings != nil {
				f3f0 := []*svcapitypes.LaunchTemplateBlockDeviceMappingRequest{}
				for _, f3f0iter := range elem.LaunchTemplateData.BlockDeviceMappings {
					f3f0elem := &svcapitypes.LaunchTemplateBlockDeviceMappingRequest{}
					if f3f0iter.DeviceName != nil {
						f3f0elem.DeviceName = f3f0iter.DeviceName
					}
					if f3f0iter.Ebs != nil {
						f3f0elemf1 := &svcapitypes.LaunchTemplateEBSBlockDeviceRequest{}
						if f3f0iter.Ebs.DeleteOnTermination != nil {
							f3f0elemf1.DeleteOnTermination = f3f0iter.Ebs.DeleteOnTermination
						}
						if f3f0iter.Ebs.Encrypted != nil {
							f3f0elemf1.Encrypted = f3f0iter.Ebs.Encrypted
						}
						if f3f0iter.Ebs.Iops != nil {
							f3f0elemf1.IOPS = f3f0iter.Ebs.Iops
						}
						if f3f0iter.Ebs.KmsKeyId != nil {
							f3f0elemf1.KMSKeyID = f3f0iter.Ebs.KmsKeyId
						}
						if f3f0iter.Ebs.SnapshotId != nil {
							f3f0elemf1.SnapshotID = f3f0iter.Ebs.SnapshotId
						}
						if f3f0iter.Ebs.Throughput != nil {
							f3f0elemf1.Throughput = f3f0iter.Ebs.Throughput
						}
						if f3f0iter.Ebs.VolumeSize != nil {
							f3f0elemf1.VolumeSize = f3f0iter.Ebs.VolumeSize
						}
						if f3f0iter.Ebs.VolumeType != nil {
							f3f0elemf1.VolumeType = f3f0iter.Ebs.VolumeType
						}
						f3f0elem.EBS = f3f0elemf1
					}
					if f3f0iter.NoDevice != nil {
						f3f0elem.NoDevice = f3f0iter.NoDevice
					}
					if f3f0iter.VirtualName != nil {
						f3f0elem.VirtualName = f3f0iter.VirtualName
					}
					f3f0 = append(f3f0, f3f0elem)
				}
				f3.BlockDeviceMappings = f3f0
			}
			if elem.LaunchTemplateData.CapacityReservationSpecification != nil {
				f3f1 := &svcapitypes.LaunchTemplateCapacityReservationSpecificationRequest{}
				if elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference != nil {
					f3f1.CapacityReservationPreference = elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference
				}
				if elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget != nil {
					f3f1f1 := &svcapitypes.CapacityReservationTarget{}
					if elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId != nil {
						f3f1f1.CapacityReservationID = elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationId
					}
					if elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn != nil {
						f3f1f1.CapacityReservationResourceGroupARN = elem.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupArn
					}
					f3f1.CapacityReservationTarget = f3f1f1
				}
				f3.CapacityReservationSpecification = f3f1
			}
			if elem.LaunchTemplateData.CpuOptions != nil {
				f3f2 := &svcapitypes.LaunchTemplateCPUOptionsRequest{}
				if elem.LaunchTemplateData.CpuOptions.CoreCount != nil {
					f3f2.CoreCount = elem.LaunchTemplateData.CpuOptions.CoreCount
				}
				if elem.LaunchTemplateData.CpuOptions.ThreadsPerCore != nil {
					f3f2.ThreadsPerCore = elem.LaunchTemplateData.CpuOptions.ThreadsPerCore
				}
				f3.CPUOptions = f3f2
			}
			if elem.LaunchTemplateData.CreditSpecification != nil {
				f3f3 := &svcapitypes.CreditSpecificationRequest{}
				if elem.LaunchTemplateData.CreditSpecification.CpuCredits != nil {
					f3f3.CPUCredits = elem.LaunchTemplateData.CreditSpecification.CpuCredits
				}
				f3.CreditSpecification = f3f3
			}
			if elem.LaunchTemplateData.DisableApiTermination != nil {
				f3.DisableAPITermination = elem.LaunchTemplateData.DisableApiTermination
			}
			if elem.LaunchTemplateData.EbsOptimized != nil {
				f3.EBSOptimized = elem.LaunchTemplateData.EbsOptimized
			}
			if elem.LaunchTemplateData.ElasticGpuSpecifications != nil {
				f3f6 := []*svcapitypes.ElasticGPUSpecification{}
				for _, f3f6iter := range elem.LaunchTemplateData.ElasticGpuSpecifications {
					f3f6elem := &svcapitypes.ElasticGPUSpecification{}
					if f3f6iter.Type != nil {
						f3f6elem.Type = f3f6iter.Type
					}
					f3f6 = append(f3f6, f3f6elem)
				}
				f3.ElasticGPUSpecifications = f3f6
			}
			if elem.LaunchTemplateData.ElasticInferenceAccelerators != nil {
				f3f7 := []*svcapitypes.LaunchTemplateElasticInferenceAccelerator{}
				for _, f3f7iter := range elem.LaunchTemplateData.ElasticInferenceAccelerators {
					f3f7elem := &svcapitypes.LaunchTemplateElasticInferenceAccelerator{}
					if f3f7iter.Count != nil {
						f3f7elem.Count = f3f7iter.Count
					}
					if f3f7iter.Type != nil {
						f3f7elem.Type = f3f7iter.Type
					}
					f3f7 = append(f3f7, f3f7elem)
				}
				f3.ElasticInferenceAccelerators = f3f7
			}
			if elem.LaunchTemplateData.EnclaveOptions != nil {
				f3f8 := &svcapitypes.LaunchTemplateEnclaveOptionsRequest{}
				if elem.LaunchTemplateData.EnclaveOptions.Enabled != nil {
					f3f8.Enabled = elem.LaunchTemplateData.EnclaveOptions.Enabled
				}
				f3.EnclaveOptions = f3f8
			}
			if elem.LaunchTemplateData.HibernationOptions != nil {
				f3f9 := &svcapitypes.LaunchTemplateHibernationOptionsRequest{}
				if elem.LaunchTemplateData.HibernationOptions.Configured != nil {
					f3f9.Configured = elem.LaunchTemplateData.HibernationOptions.Configured
				}
				f3.HibernationOptions = f3f9
			}
			if elem.LaunchTemplateData.IamInstanceProfile != nil {
				f3f10 := &svcapitypes.LaunchTemplateIAMInstanceProfileSpecificationRequest{}
				if elem.LaunchTemplateData.IamInstanceProfile.Arn != nil {
					f3f10.ARN = elem.LaunchTemplateData.IamInstanceProfile.Arn
				}
				if elem.LaunchTemplateData.IamInstanceProfile.Name != nil {
					f3f10.Name = elem.LaunchTemplateData.IamInstanceProfile.Name
				}
				f3.IAMInstanceProfile = f3f10
			}
			if elem.LaunchTemplateData.ImageId != nil {
				f3.ImageID = elem.LaunchTemplateData.ImageId
			}
			if elem.LaunchTemplateData.InstanceInitiatedShutdownBehavior != nil {
				f3.InstanceInitiatedShutdownBehavior = elem.LaunchTemplateData.InstanceInitiatedShutdownBehavior
			}
			if elem.LaunchTemplateData.InstanceMarketOptions != nil {
				f3f13 := &svcapitypes.LaunchTemplateInstanceMarketOptionsRequest{}
				if elem.LaunchTemplateData.InstanceMarketOptions.MarketType != nil {
					f3f13.MarketType = elem.LaunchTemplateData.InstanceMarketOptions.MarketType
				}
				if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions != nil {
					f3f13f1 := &svcapitypes.LaunchTemplateSpotMarketOptionsRequest{}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
						f3f13f1.BlockDurationMinutes = elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes
					}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
						f3f13f1.InstanceInterruptionBehavior = elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior
					}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
						f3f13f1.MaxPrice = elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice
					}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
						f3f13f1.SpotInstanceType = elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType
					}
					if elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
						f3f13f1.ValidUntil = &metav1.Time{*elem.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil}
					}
					f3f13.SpotOptions = f3f13f1
				}
				f3.InstanceMarketOptions = f3f13
			}
			if elem.LaunchTemplateData.InstanceType != nil {
				f3.InstanceType = elem.LaunchTemplateData.InstanceType
			}
			if elem.LaunchTemplateData.KernelId != nil {
				f3.KernelID = elem.LaunchTemplateData.KernelId
			}
			if elem.LaunchTemplateData.KeyName != nil {
				f3.KeyName = elem.LaunchTemplateData.KeyName
			}
			if elem.LaunchTemplateData.LicenseSpecifications != nil {
				f3f17 := []*svcapitypes.LaunchTemplateLicenseConfigurationRequest{}
				for _, f3f17iter := range elem.LaunchTemplateData.LicenseSpecifications {
					f3f17elem := &svcapitypes.LaunchTemplateLicenseConfigurationRequest{}
					if f3f17iter.LicenseConfigurationArn != nil {
						f3f17elem.LicenseConfigurationARN = f3f17iter.LicenseConfigurationArn
					}
					f3f17 = append(f3f17, f3f17elem)
				}
				f3.LicenseSpecifications = f3f17
			}
			if elem.LaunchTemplateData.MetadataOptions != nil {
				f3f18 := &svcapitypes.LaunchTemplateInstanceMetadataOptionsRequest{}
				if elem.LaunchTemplateData.MetadataOptions.HttpEndpoint != nil {
					f3f18.HTTPEndpoint = elem.LaunchTemplateData.MetadataOptions.HttpEndpoint
				}
				if elem.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit != nil {
					f3f18.HTTPPutResponseHopLimit = elem.LaunchTemplateData.MetadataOptions.HttpPutResponseHopLimit
				}
				if elem.LaunchTemplateData.MetadataOptions.HttpTokens != nil {
					f3f18.HTTPTokens = elem.LaunchTemplateData.MetadataOptions.HttpTokens
				}
				f3.MetadataOptions = f3f18
			}
			if elem.LaunchTemplateData.Monitoring != nil {
				f3f19 := &svcapitypes.LaunchTemplatesMonitoringRequest{}
				if elem.LaunchTemplateData.Monitoring.Enabled != nil {
					f3f19.Enabled = elem.LaunchTemplateData.Monitoring.Enabled
				}
				f3.Monitoring = f3f19
			}
			if elem.LaunchTemplateData.NetworkInterfaces != nil {
				f3f20 := []*svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
				for _, f3f20iter := range elem.LaunchTemplateData.NetworkInterfaces {
					f3f20elem := &svcapitypes.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
					if f3f20iter.AssociateCarrierIpAddress != nil {
						f3f20elem.AssociateCarrierIPAddress = f3f20iter.AssociateCarrierIpAddress
					}
					if f3f20iter.AssociatePublicIpAddress != nil {
						f3f20elem.AssociatePublicIPAddress = f3f20iter.AssociatePublicIpAddress
					}
					if f3f20iter.DeleteOnTermination != nil {
						f3f20elem.DeleteOnTermination = f3f20iter.DeleteOnTermination
					}
					if f3f20iter.Description != nil {
						f3f20elem.Description = f3f20iter.Description
					}
					if f3f20iter.DeviceIndex != nil {
						f3f20elem.DeviceIndex = f3f20iter.DeviceIndex
					}
					if f3f20iter.Groups != nil {
						f3f20elemf5 := []*string{}
						for _, f3f20elemf5iter := range f3f20iter.Groups {
							var f3f20elemf5elem string
							f3f20elemf5elem = *f3f20elemf5iter
							f3f20elemf5 = append(f3f20elemf5, &f3f20elemf5elem)
						}
						f3f20elem.Groups = f3f20elemf5
					}
					if f3f20iter.InterfaceType != nil {
						f3f20elem.InterfaceType = f3f20iter.InterfaceType
					}
					if f3f20iter.Ipv6AddressCount != nil {
						f3f20elem.IPv6AddressCount = f3f20iter.Ipv6AddressCount
					}
					if f3f20iter.Ipv6Addresses != nil {
						f3f20elemf8 := []*svcapitypes.InstanceIPv6AddressRequest{}
						for _, f3f20elemf8iter := range f3f20iter.Ipv6Addresses {
							f3f20elemf8elem := &svcapitypes.InstanceIPv6AddressRequest{}
							if f3f20elemf8iter.Ipv6Address != nil {
								f3f20elemf8elem.IPv6Address = f3f20elemf8iter.Ipv6Address
							}
							f3f20elemf8 = append(f3f20elemf8, f3f20elemf8elem)
						}
						f3f20elem.IPv6Addresses = f3f20elemf8
					}
					if f3f20iter.NetworkCardIndex != nil {
						f3f20elem.NetworkCardIndex = f3f20iter.NetworkCardIndex
					}
					if f3f20iter.NetworkInterfaceId != nil {
						f3f20elem.NetworkInterfaceID = f3f20iter.NetworkInterfaceId
					}
					if f3f20iter.PrivateIpAddress != nil {
						f3f20elem.PrivateIPAddress = f3f20iter.PrivateIpAddress
					}
					if f3f20iter.PrivateIpAddresses != nil {
						f3f20elemf12 := []*svcapitypes.PrivateIPAddressSpecification{}
						for _, f3f20elemf12iter := range f3f20iter.PrivateIpAddresses {
							f3f20elemf12elem := &svcapitypes.PrivateIPAddressSpecification{}
							if f3f20elemf12iter.Primary != nil {
								f3f20elemf12elem.Primary = f3f20elemf12iter.Primary
							}
							if f3f20elemf12iter.PrivateIpAddress != nil {
								f3f20elemf12elem.PrivateIPAddress = f3f20elemf12iter.PrivateIpAddress
							}
							f3f20elemf12 = append(f3f20elemf12, f3f20elemf12elem)
						}
						f3f20elem.PrivateIPAddresses = f3f20elemf12
					}
					if f3f20iter.SecondaryPrivateIpAddressCount != nil {
						f3f20elem.SecondaryPrivateIPAddressCount = f3f20iter.SecondaryPrivateIpAddressCount
					}
					if f3f20iter.SubnetId != nil {
						f3f20elem.SubnetID = f3f20iter.SubnetId
					}
					f3f20 = append(f3f20, f3f20elem)
				}
				f3.NetworkInterfaces = f3f20
			}
			if elem.LaunchTemplateData.Placement != nil {
				f3f21 := &svcapitypes.LaunchTemplatePlacementRequest{}
				if elem.LaunchTemplateData.Placement.Affinity != nil {
					f3f21.Affinity = elem.LaunchTemplateData.Placement.Affinity
				}
				if elem.LaunchTemplateData.Placement.AvailabilityZone != nil {
					f3f21.AvailabilityZone = elem.LaunchTemplateData.Placement.AvailabilityZone
				}
				if elem.LaunchTemplateData.Placement.GroupName != nil {
					f3f21.GroupName = elem.LaunchTemplateData.Placement.GroupName
				}
				if elem.LaunchTemplateData.Placement.HostId != nil {
					f3f21.HostID = elem.LaunchTemplateData.Placement.HostId
				}
				if elem.LaunchTemplateData.Placement.HostResourceGroupArn != nil {
					f3f21.HostResourceGroupARN = elem.LaunchTemplateData.Placement.HostResourceGroupArn
				}
				if elem.LaunchTemplateData.Placement.PartitionNumber != nil {
					f3f21.PartitionNumber = elem.LaunchTemplateData.Placement.PartitionNumber
				}
				if elem.LaunchTemplateData.Placement.SpreadDomain != nil {
					f3f21.SpreadDomain = elem.LaunchTemplateData.Placement.SpreadDomain
				}
				if elem.LaunchTemplateData.Placement.Tenancy != nil {
					f3f21.Tenancy = elem.LaunchTemplateData.Placement.Tenancy
				}
				f3.Placement = f3f21
			}
			if elem.LaunchTemplateData.RamDiskId != nil {
				f3.RamDiskID = elem.LaunchTemplateData.RamDiskId
			}
			if elem.LaunchTemplateData.SecurityGroupIds != nil {
				f3f23 := []*string{}
				for _, f3f23iter := range elem.LaunchTemplateData.SecurityGroupIds {
					var f3f23elem string
					f3f23elem = *f3f23iter
					f3f23 = append(f3f23, &f3f23elem)
				}
				f3.SecurityGroupIDs = f3f23
			}
			if elem.LaunchTemplateData.SecurityGroups != nil {
				f3f24 := []*string{}
				for _, f3f24iter := range elem.LaunchTemplateData.SecurityGroups {
					var f3f24elem string
					f3f24elem = *f3f24iter
					f3f24 = append(f3f24, &f3f24elem)
				}
				f3.SecurityGroups = f3f24
			}
			if elem.LaunchTemplateData.TagSpecifications != nil {
				f3f25 := []*svcapitypes.LaunchTemplateTagSpecificationRequest{}
				for _, f3f25iter := range elem.LaunchTemplateData.TagSpecifications {
					f3f25elem := &svcapitypes.LaunchTemplateTagSpecificationRequest{}
					if f3f25iter.ResourceType != nil {
						f3f25elem.ResourceType = f3f25iter.ResourceType
					}
					if f3f25iter.Tags != nil {
						f3f25elemf1 := []*svcapitypes.Tag{}
						for _, f3f25elemf1iter := range f3f25iter.Tags {
							f3f25elemf1elem := &svcapitypes.Tag{}
							if f3f25elemf1iter.Key != nil {
								f3f25elemf1elem.Key = f3f25elemf1iter.Key
							}
							if f3f25elemf1iter.Value != nil {
								f3f25elemf1elem.Value = f3f25elemf1iter.Value
							}
							f3f25elemf1 = append(f3f25elemf1, f3f25elemf1elem)
						}
						f3f25elem.Tags = f3f25elemf1
					}
					f3f25 = append(f3f25, f3f25elem)
				}
				f3.TagSpecifications = f3f25
			}
			if elem.LaunchTemplateData.UserData != nil {
				f3.UserData = elem.LaunchTemplateData.UserData
			}
			cr.Spec.ForProvider.LaunchTemplateData = f3
		} else {
			cr.Spec.ForProvider.LaunchTemplateData = nil
		}
		if elem.VersionDescription != nil {
			cr.Spec.ForProvider.VersionDescription = elem.VersionDescription
		} else {
			cr.Spec.ForProvider.VersionDescription = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateLaunchTemplateVersionInput returns a create input.
func GenerateCreateLaunchTemplateVersionInput(cr *svcapitypes.LaunchTemplateVersion) *svcsdk.CreateLaunchTemplateVersionInput {
	res := &svcsdk.CreateLaunchTemplateVersionInput{}

	if cr.Spec.ForProvider.LaunchTemplateData != nil {
		f0 := &svcsdk.RequestLaunchTemplateData{}
		if cr.Spec.ForProvider.LaunchTemplateData.BlockDeviceMappings != nil {
			f0f0 := []*svcsdk.LaunchTemplateBlockDeviceMappingRequest{}
			for _, f0f0iter := range cr.Spec.ForProvider.LaunchTemplateData.BlockDeviceMappings {
				f0f0elem := &svcsdk.LaunchTemplateBlockDeviceMappingRequest{}
				if f0f0iter.DeviceName != nil {
					f0f0elem.SetDeviceName(*f0f0iter.DeviceName)
				}
				if f0f0iter.EBS != nil {
					f0f0elemf1 := &svcsdk.LaunchTemplateEbsBlockDeviceRequest{}
					if f0f0iter.EBS.DeleteOnTermination != nil {
						f0f0elemf1.SetDeleteOnTermination(*f0f0iter.EBS.DeleteOnTermination)
					}
					if f0f0iter.EBS.Encrypted != nil {
						f0f0elemf1.SetEncrypted(*f0f0iter.EBS.Encrypted)
					}
					if f0f0iter.EBS.IOPS != nil {
						f0f0elemf1.SetIops(*f0f0iter.EBS.IOPS)
					}
					if f0f0iter.EBS.KMSKeyID != nil {
						f0f0elemf1.SetKmsKeyId(*f0f0iter.EBS.KMSKeyID)
					}
					if f0f0iter.EBS.SnapshotID != nil {
						f0f0elemf1.SetSnapshotId(*f0f0iter.EBS.SnapshotID)
					}
					if f0f0iter.EBS.Throughput != nil {
						f0f0elemf1.SetThroughput(*f0f0iter.EBS.Throughput)
					}
					if f0f0iter.EBS.VolumeSize != nil {
						f0f0elemf1.SetVolumeSize(*f0f0iter.EBS.VolumeSize)
					}
					if f0f0iter.EBS.VolumeType != nil {
						f0f0elemf1.SetVolumeType(*f0f0iter.EBS.VolumeType)
					}
					f0f0elem.SetEbs(f0f0elemf1)
				}
				if f0f0iter.NoDevice != nil {
					f0f0elem.SetNoDevice(*f0f0iter.NoDevice)
				}
				if f0f0iter.VirtualName != nil {
					f0f0elem.SetVirtualName(*f0f0iter.VirtualName)
				}
				f0f0 = append(f0f0, f0f0elem)
			}
			f0.SetBlockDeviceMappings(f0f0)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.CapacityReservationSpecification != nil {
			f0f1 := &svcsdk.LaunchTemplateCapacityReservationSpecificationRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference != nil {
				f0f1.SetCapacityReservationPreference(*cr.Spec.ForProvider.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationPreference)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget != nil {
				f0f1f1 := &svcsdk.CapacityReservationTarget{}
				if cr.Spec.ForProvider.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID != nil {
					f0f1f1.SetCapacityReservationId(*cr.Spec.ForProvider.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationID)
				}
				if cr.Spec.ForProvider.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN != nil {
					f0f1f1.SetCapacityReservationResourceGroupArn(*cr.Spec.ForProvider.LaunchTemplateData.CapacityReservationSpecification.CapacityReservationTarget.CapacityReservationResourceGroupARN)
				}
				f0f1.SetCapacityReservationTarget(f0f1f1)
			}
			f0.SetCapacityReservationSpecification(f0f1)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.CPUOptions != nil {
			f0f2 := &svcsdk.LaunchTemplateCpuOptionsRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.CPUOptions.CoreCount != nil {
				f0f2.SetCoreCount(*cr.Spec.ForProvider.LaunchTemplateData.CPUOptions.CoreCount)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.CPUOptions.ThreadsPerCore != nil {
				f0f2.SetThreadsPerCore(*cr.Spec.ForProvider.LaunchTemplateData.CPUOptions.ThreadsPerCore)
			}
			f0.SetCpuOptions(f0f2)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.CreditSpecification != nil {
			f0f3 := &svcsdk.CreditSpecificationRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.CreditSpecification.CPUCredits != nil {
				f0f3.SetCpuCredits(*cr.Spec.ForProvider.LaunchTemplateData.CreditSpecification.CPUCredits)
			}
			f0.SetCreditSpecification(f0f3)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.DisableAPITermination != nil {
			f0.SetDisableApiTermination(*cr.Spec.ForProvider.LaunchTemplateData.DisableAPITermination)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.EBSOptimized != nil {
			f0.SetEbsOptimized(*cr.Spec.ForProvider.LaunchTemplateData.EBSOptimized)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.ElasticGPUSpecifications != nil {
			f0f6 := []*svcsdk.ElasticGpuSpecification{}
			for _, f0f6iter := range cr.Spec.ForProvider.LaunchTemplateData.ElasticGPUSpecifications {
				f0f6elem := &svcsdk.ElasticGpuSpecification{}
				if f0f6iter.Type != nil {
					f0f6elem.SetType(*f0f6iter.Type)
				}
				f0f6 = append(f0f6, f0f6elem)
			}
			f0.SetElasticGpuSpecifications(f0f6)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.ElasticInferenceAccelerators != nil {
			f0f7 := []*svcsdk.LaunchTemplateElasticInferenceAccelerator{}
			for _, f0f7iter := range cr.Spec.ForProvider.LaunchTemplateData.ElasticInferenceAccelerators {
				f0f7elem := &svcsdk.LaunchTemplateElasticInferenceAccelerator{}
				if f0f7iter.Count != nil {
					f0f7elem.SetCount(*f0f7iter.Count)
				}
				if f0f7iter.Type != nil {
					f0f7elem.SetType(*f0f7iter.Type)
				}
				f0f7 = append(f0f7, f0f7elem)
			}
			f0.SetElasticInferenceAccelerators(f0f7)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.EnclaveOptions != nil {
			f0f8 := &svcsdk.LaunchTemplateEnclaveOptionsRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.EnclaveOptions.Enabled != nil {
				f0f8.SetEnabled(*cr.Spec.ForProvider.LaunchTemplateData.EnclaveOptions.Enabled)
			}
			f0.SetEnclaveOptions(f0f8)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.HibernationOptions != nil {
			f0f9 := &svcsdk.LaunchTemplateHibernationOptionsRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.HibernationOptions.Configured != nil {
				f0f9.SetConfigured(*cr.Spec.ForProvider.LaunchTemplateData.HibernationOptions.Configured)
			}
			f0.SetHibernationOptions(f0f9)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.IAMInstanceProfile != nil {
			f0f10 := &svcsdk.LaunchTemplateIamInstanceProfileSpecificationRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.IAMInstanceProfile.ARN != nil {
				f0f10.SetArn(*cr.Spec.ForProvider.LaunchTemplateData.IAMInstanceProfile.ARN)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.IAMInstanceProfile.Name != nil {
				f0f10.SetName(*cr.Spec.ForProvider.LaunchTemplateData.IAMInstanceProfile.Name)
			}
			f0.SetIamInstanceProfile(f0f10)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.ImageID != nil {
			f0.SetImageId(*cr.Spec.ForProvider.LaunchTemplateData.ImageID)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.InstanceInitiatedShutdownBehavior != nil {
			f0.SetInstanceInitiatedShutdownBehavior(*cr.Spec.ForProvider.LaunchTemplateData.InstanceInitiatedShutdownBehavior)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions != nil {
			f0f13 := &svcsdk.LaunchTemplateInstanceMarketOptionsRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.MarketType != nil {
				f0f13.SetMarketType(*cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.MarketType)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions != nil {
				f0f13f1 := &svcsdk.LaunchTemplateSpotMarketOptionsRequest{}
				if cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes != nil {
					f0f13f1.SetBlockDurationMinutes(*cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.BlockDurationMinutes)
				}
				if cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior != nil {
					f0f13f1.SetInstanceInterruptionBehavior(*cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.InstanceInterruptionBehavior)
				}
				if cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice != nil {
					f0f13f1.SetMaxPrice(*cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.MaxPrice)
				}
				if cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType != nil {
					f0f13f1.SetSpotInstanceType(*cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.SpotInstanceType)
				}
				if cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil != nil {
					f0f13f1.SetValidUntil(cr.Spec.ForProvider.LaunchTemplateData.InstanceMarketOptions.SpotOptions.ValidUntil.Time)
				}
				f0f13.SetSpotOptions(f0f13f1)
			}
			f0.SetInstanceMarketOptions(f0f13)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.InstanceType != nil {
			f0.SetInstanceType(*cr.Spec.ForProvider.LaunchTemplateData.InstanceType)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.KernelID != nil {
			f0.SetKernelId(*cr.Spec.ForProvider.LaunchTemplateData.KernelID)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.KeyName != nil {
			f0.SetKeyName(*cr.Spec.ForProvider.LaunchTemplateData.KeyName)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.LicenseSpecifications != nil {
			f0f17 := []*svcsdk.LaunchTemplateLicenseConfigurationRequest{}
			for _, f0f17iter := range cr.Spec.ForProvider.LaunchTemplateData.LicenseSpecifications {
				f0f17elem := &svcsdk.LaunchTemplateLicenseConfigurationRequest{}
				if f0f17iter.LicenseConfigurationARN != nil {
					f0f17elem.SetLicenseConfigurationArn(*f0f17iter.LicenseConfigurationARN)
				}
				f0f17 = append(f0f17, f0f17elem)
			}
			f0.SetLicenseSpecifications(f0f17)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.MetadataOptions != nil {
			f0f18 := &svcsdk.LaunchTemplateInstanceMetadataOptionsRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.MetadataOptions.HTTPEndpoint != nil {
				f0f18.SetHttpEndpoint(*cr.Spec.ForProvider.LaunchTemplateData.MetadataOptions.HTTPEndpoint)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.MetadataOptions.HTTPPutResponseHopLimit != nil {
				f0f18.SetHttpPutResponseHopLimit(*cr.Spec.ForProvider.LaunchTemplateData.MetadataOptions.HTTPPutResponseHopLimit)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.MetadataOptions.HTTPTokens != nil {
				f0f18.SetHttpTokens(*cr.Spec.ForProvider.LaunchTemplateData.MetadataOptions.HTTPTokens)
			}
			f0.SetMetadataOptions(f0f18)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.Monitoring != nil {
			f0f19 := &svcsdk.LaunchTemplatesMonitoringRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.Monitoring.Enabled != nil {
				f0f19.SetEnabled(*cr.Spec.ForProvider.LaunchTemplateData.Monitoring.Enabled)
			}
			f0.SetMonitoring(f0f19)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.NetworkInterfaces != nil {
			f0f20 := []*svcsdk.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
			for _, f0f20iter := range cr.Spec.ForProvider.LaunchTemplateData.NetworkInterfaces {
				f0f20elem := &svcsdk.LaunchTemplateInstanceNetworkInterfaceSpecificationRequest{}
				if f0f20iter.AssociateCarrierIPAddress != nil {
					f0f20elem.SetAssociateCarrierIpAddress(*f0f20iter.AssociateCarrierIPAddress)
				}
				if f0f20iter.AssociatePublicIPAddress != nil {
					f0f20elem.SetAssociatePublicIpAddress(*f0f20iter.AssociatePublicIPAddress)
				}
				if f0f20iter.DeleteOnTermination != nil {
					f0f20elem.SetDeleteOnTermination(*f0f20iter.DeleteOnTermination)
				}
				if f0f20iter.Description != nil {
					f0f20elem.SetDescription(*f0f20iter.Description)
				}
				if f0f20iter.DeviceIndex != nil {
					f0f20elem.SetDeviceIndex(*f0f20iter.DeviceIndex)
				}
				if f0f20iter.Groups != nil {
					f0f20elemf5 := []*string{}
					for _, f0f20elemf5iter := range f0f20iter.Groups {
						var f0f20elemf5elem string
						f0f20elemf5elem = *f0f20elemf5iter
						f0f20elemf5 = append(f0f20elemf5, &f0f20elemf5elem)
					}
					f0f20elem.SetGroups(f0f20elemf5)
				}
				if f0f20iter.InterfaceType != nil {
					f0f20elem.SetInterfaceType(*f0f20iter.InterfaceType)
				}
				if f0f20iter.IPv6AddressCount != nil {
					f0f20elem.SetIpv6AddressCount(*f0f20iter.IPv6AddressCount)
				}
				if f0f20iter.IPv6Addresses != nil {
					f0f20elemf8 := []*svcsdk.InstanceIpv6AddressRequest{}
					for _, f0f20elemf8iter := range f0f20iter.IPv6Addresses {
						f0f20elemf8elem := &svcsdk.InstanceIpv6AddressRequest{}
						if f0f20elemf8iter.IPv6Address != nil {
							f0f20elemf8elem.SetIpv6Address(*f0f20elemf8iter.IPv6Address)
						}
						f0f20elemf8 = append(f0f20elemf8, f0f20elemf8elem)
					}
					f0f20elem.SetIpv6Addresses(f0f20elemf8)
				}
				if f0f20iter.NetworkCardIndex != nil {
					f0f20elem.SetNetworkCardIndex(*f0f20iter.NetworkCardIndex)
				}
				if f0f20iter.NetworkInterfaceID != nil {
					f0f20elem.SetNetworkInterfaceId(*f0f20iter.NetworkInterfaceID)
				}
				if f0f20iter.PrivateIPAddress != nil {
					f0f20elem.SetPrivateIpAddress(*f0f20iter.PrivateIPAddress)
				}
				if f0f20iter.PrivateIPAddresses != nil {
					f0f20elemf12 := []*svcsdk.PrivateIpAddressSpecification{}
					for _, f0f20elemf12iter := range f0f20iter.PrivateIPAddresses {
						f0f20elemf12elem := &svcsdk.PrivateIpAddressSpecification{}
						if f0f20elemf12iter.Primary != nil {
							f0f20elemf12elem.SetPrimary(*f0f20elemf12iter.Primary)
						}
						if f0f20elemf12iter.PrivateIPAddress != nil {
							f0f20elemf12elem.SetPrivateIpAddress(*f0f20elemf12iter.PrivateIPAddress)
						}
						f0f20elemf12 = append(f0f20elemf12, f0f20elemf12elem)
					}
					f0f20elem.SetPrivateIpAddresses(f0f20elemf12)
				}
				if f0f20iter.SecondaryPrivateIPAddressCount != nil {
					f0f20elem.SetSecondaryPrivateIpAddressCount(*f0f20iter.SecondaryPrivateIPAddressCount)
				}
				if f0f20iter.SubnetID != nil {
					f0f20elem.SetSubnetId(*f0f20iter.SubnetID)
				}
				f0f20 = append(f0f20, f0f20elem)
			}
			f0.SetNetworkInterfaces(f0f20)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.Placement != nil {
			f0f21 := &svcsdk.LaunchTemplatePlacementRequest{}
			if cr.Spec.ForProvider.LaunchTemplateData.Placement.Affinity != nil {
				f0f21.SetAffinity(*cr.Spec.ForProvider.LaunchTemplateData.Placement.Affinity)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.Placement.AvailabilityZone != nil {
				f0f21.SetAvailabilityZone(*cr.Spec.ForProvider.LaunchTemplateData.Placement.AvailabilityZone)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.Placement.GroupName != nil {
				f0f21.SetGroupName(*cr.Spec.ForProvider.LaunchTemplateData.Placement.GroupName)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.Placement.HostID != nil {
				f0f21.SetHostId(*cr.Spec.ForProvider.LaunchTemplateData.Placement.HostID)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.Placement.HostResourceGroupARN != nil {
				f0f21.SetHostResourceGroupArn(*cr.Spec.ForProvider.LaunchTemplateData.Placement.HostResourceGroupARN)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.Placement.PartitionNumber != nil {
				f0f21.SetPartitionNumber(*cr.Spec.ForProvider.LaunchTemplateData.Placement.PartitionNumber)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.Placement.SpreadDomain != nil {
				f0f21.SetSpreadDomain(*cr.Spec.ForProvider.LaunchTemplateData.Placement.SpreadDomain)
			}
			if cr.Spec.ForProvider.LaunchTemplateData.Placement.Tenancy != nil {
				f0f21.SetTenancy(*cr.Spec.ForProvider.LaunchTemplateData.Placement.Tenancy)
			}
			f0.SetPlacement(f0f21)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.RamDiskID != nil {
			f0.SetRamDiskId(*cr.Spec.ForProvider.LaunchTemplateData.RamDiskID)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.SecurityGroupIDs != nil {
			f0f23 := []*string{}
			for _, f0f23iter := range cr.Spec.ForProvider.LaunchTemplateData.SecurityGroupIDs {
				var f0f23elem string
				f0f23elem = *f0f23iter
				f0f23 = append(f0f23, &f0f23elem)
			}
			f0.SetSecurityGroupIds(f0f23)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.SecurityGroups != nil {
			f0f24 := []*string{}
			for _, f0f24iter := range cr.Spec.ForProvider.LaunchTemplateData.SecurityGroups {
				var f0f24elem string
				f0f24elem = *f0f24iter
				f0f24 = append(f0f24, &f0f24elem)
			}
			f0.SetSecurityGroups(f0f24)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.TagSpecifications != nil {
			f0f25 := []*svcsdk.LaunchTemplateTagSpecificationRequest{}
			for _, f0f25iter := range cr.Spec.ForProvider.LaunchTemplateData.TagSpecifications {
				f0f25elem := &svcsdk.LaunchTemplateTagSpecificationRequest{}
				if f0f25iter.ResourceType != nil {
					f0f25elem.SetResourceType(*f0f25iter.ResourceType)
				}
				if f0f25iter.Tags != nil {
					f0f25elemf1 := []*svcsdk.Tag{}
					for _, f0f25elemf1iter := range f0f25iter.Tags {
						f0f25elemf1elem := &svcsdk.Tag{}
						if f0f25elemf1iter.Key != nil {
							f0f25elemf1elem.SetKey(*f0f25elemf1iter.Key)
						}
						if f0f25elemf1iter.Value != nil {
							f0f25elemf1elem.SetValue(*f0f25elemf1iter.Value)
						}
						f0f25elemf1 = append(f0f25elemf1, f0f25elemf1elem)
					}
					f0f25elem.SetTags(f0f25elemf1)
				}
				f0f25 = append(f0f25, f0f25elem)
			}
			f0.SetTagSpecifications(f0f25)
		}
		if cr.Spec.ForProvider.LaunchTemplateData.UserData != nil {
			f0.SetUserData(*cr.Spec.ForProvider.LaunchTemplateData.UserData)
		}
		res.SetLaunchTemplateData(f0)
	}
	if cr.Spec.ForProvider.SourceVersion != nil {
		res.SetSourceVersion(*cr.Spec.ForProvider.SourceVersion)
	}
	if cr.Spec.ForProvider.VersionDescription != nil {
		res.SetVersionDescription(*cr.Spec.ForProvider.VersionDescription)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "InvalidLaunchTemplateId.VersionNotFound"
}
