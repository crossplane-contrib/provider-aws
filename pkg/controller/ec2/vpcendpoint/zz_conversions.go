/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package vpcendpoint

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/ec2/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeVpcEndpointsInput returns input for read
// operation.
func GenerateDescribeVpcEndpointsInput(cr *svcapitypes.VPCEndpoint) *svcsdk.DescribeVpcEndpointsInput {
	res := &svcsdk.DescribeVpcEndpointsInput{}

	if cr.Status.AtProvider.VPCEndpointID != nil {
		f4 := []*string{}
		f4 = append(f4, cr.Status.AtProvider.VPCEndpointID)
		res.SetVpcEndpointIds(f4)
	}

	return res
}

// GenerateVPCEndpoint returns the current state in the form of *svcapitypes.VPCEndpoint.
func GenerateVPCEndpoint(resp *svcsdk.DescribeVpcEndpointsOutput) *svcapitypes.VPCEndpoint {
	cr := &svcapitypes.VPCEndpoint{}

	found := false
	for _, elem := range resp.VpcEndpoints {
		if elem.CreationTimestamp != nil {
			cr.Status.AtProvider.CreationTimestamp = &metav1.Time{*elem.CreationTimestamp}
		} else {
			cr.Status.AtProvider.CreationTimestamp = nil
		}
		if elem.DnsEntries != nil {
			f1 := []*svcapitypes.DNSEntry{}
			for _, f1iter := range elem.DnsEntries {
				f1elem := &svcapitypes.DNSEntry{}
				if f1iter.DnsName != nil {
					f1elem.DNSName = f1iter.DnsName
				}
				if f1iter.HostedZoneId != nil {
					f1elem.HostedZoneID = f1iter.HostedZoneId
				}
				f1 = append(f1, f1elem)
			}
			cr.Status.AtProvider.DNSEntries = f1
		} else {
			cr.Status.AtProvider.DNSEntries = nil
		}
		if elem.DnsOptions != nil {
			f2 := &svcapitypes.DNSOptionsSpecification{}
			if elem.DnsOptions.DnsRecordIpType != nil {
				f2.DNSRecordIPType = elem.DnsOptions.DnsRecordIpType
			}
			if elem.DnsOptions.PrivateDnsOnlyForInboundResolverEndpoint != nil {
				f2.PrivateDNSOnlyForInboundResolverEndpoint = elem.DnsOptions.PrivateDnsOnlyForInboundResolverEndpoint
			}
			cr.Spec.ForProvider.DNSOptions = f2
		} else {
			cr.Spec.ForProvider.DNSOptions = nil
		}
		if elem.Groups != nil {
			f3 := []*svcapitypes.SecurityGroupIdentifier{}
			for _, f3iter := range elem.Groups {
				f3elem := &svcapitypes.SecurityGroupIdentifier{}
				if f3iter.GroupId != nil {
					f3elem.GroupID = f3iter.GroupId
				}
				if f3iter.GroupName != nil {
					f3elem.GroupName = f3iter.GroupName
				}
				f3 = append(f3, f3elem)
			}
			cr.Status.AtProvider.Groups = f3
		} else {
			cr.Status.AtProvider.Groups = nil
		}
		if elem.IpAddressType != nil {
			cr.Spec.ForProvider.IPAddressType = elem.IpAddressType
		} else {
			cr.Spec.ForProvider.IPAddressType = nil
		}
		if elem.LastError != nil {
			f5 := &svcapitypes.LastError{}
			if elem.LastError.Code != nil {
				f5.Code = elem.LastError.Code
			}
			if elem.LastError.Message != nil {
				f5.Message = elem.LastError.Message
			}
			cr.Status.AtProvider.LastError = f5
		} else {
			cr.Status.AtProvider.LastError = nil
		}
		if elem.NetworkInterfaceIds != nil {
			f6 := []*string{}
			for _, f6iter := range elem.NetworkInterfaceIds {
				var f6elem string
				f6elem = *f6iter
				f6 = append(f6, &f6elem)
			}
			cr.Status.AtProvider.NetworkInterfaceIDs = f6
		} else {
			cr.Status.AtProvider.NetworkInterfaceIDs = nil
		}
		if elem.OwnerId != nil {
			cr.Status.AtProvider.OwnerID = elem.OwnerId
		} else {
			cr.Status.AtProvider.OwnerID = nil
		}
		if elem.PolicyDocument != nil {
			cr.Spec.ForProvider.PolicyDocument = elem.PolicyDocument
		} else {
			cr.Spec.ForProvider.PolicyDocument = nil
		}
		if elem.PrivateDnsEnabled != nil {
			cr.Spec.ForProvider.PrivateDNSEnabled = elem.PrivateDnsEnabled
		} else {
			cr.Spec.ForProvider.PrivateDNSEnabled = nil
		}
		if elem.RequesterManaged != nil {
			cr.Status.AtProvider.RequesterManaged = elem.RequesterManaged
		} else {
			cr.Status.AtProvider.RequesterManaged = nil
		}
		if elem.RouteTableIds != nil {
			f11 := []*string{}
			for _, f11iter := range elem.RouteTableIds {
				var f11elem string
				f11elem = *f11iter
				f11 = append(f11, &f11elem)
			}
			cr.Status.AtProvider.RouteTableIDs = f11
		} else {
			cr.Status.AtProvider.RouteTableIDs = nil
		}
		if elem.ServiceName != nil {
			cr.Spec.ForProvider.ServiceName = elem.ServiceName
		} else {
			cr.Spec.ForProvider.ServiceName = nil
		}
		if elem.State != nil {
			cr.Status.AtProvider.State = elem.State
		} else {
			cr.Status.AtProvider.State = nil
		}
		if elem.SubnetIds != nil {
			f14 := []*string{}
			for _, f14iter := range elem.SubnetIds {
				var f14elem string
				f14elem = *f14iter
				f14 = append(f14, &f14elem)
			}
			cr.Status.AtProvider.SubnetIDs = f14
		} else {
			cr.Status.AtProvider.SubnetIDs = nil
		}
		if elem.Tags != nil {
			f15 := []*svcapitypes.Tag{}
			for _, f15iter := range elem.Tags {
				f15elem := &svcapitypes.Tag{}
				if f15iter.Key != nil {
					f15elem.Key = f15iter.Key
				}
				if f15iter.Value != nil {
					f15elem.Value = f15iter.Value
				}
				f15 = append(f15, f15elem)
			}
			cr.Status.AtProvider.Tags = f15
		} else {
			cr.Status.AtProvider.Tags = nil
		}
		if elem.VpcEndpointId != nil {
			cr.Status.AtProvider.VPCEndpointID = elem.VpcEndpointId
		} else {
			cr.Status.AtProvider.VPCEndpointID = nil
		}
		if elem.VpcEndpointType != nil {
			cr.Spec.ForProvider.VPCEndpointType = elem.VpcEndpointType
		} else {
			cr.Spec.ForProvider.VPCEndpointType = nil
		}
		if elem.VpcId != nil {
			cr.Status.AtProvider.VPCID = elem.VpcId
		} else {
			cr.Status.AtProvider.VPCID = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateVpcEndpointInput returns a create input.
func GenerateCreateVpcEndpointInput(cr *svcapitypes.VPCEndpoint) *svcsdk.CreateVpcEndpointInput {
	res := &svcsdk.CreateVpcEndpointInput{}

	if cr.Spec.ForProvider.DNSOptions != nil {
		f0 := &svcsdk.DnsOptionsSpecification{}
		if cr.Spec.ForProvider.DNSOptions.DNSRecordIPType != nil {
			f0.SetDnsRecordIpType(*cr.Spec.ForProvider.DNSOptions.DNSRecordIPType)
		}
		if cr.Spec.ForProvider.DNSOptions.PrivateDNSOnlyForInboundResolverEndpoint != nil {
			f0.SetPrivateDnsOnlyForInboundResolverEndpoint(*cr.Spec.ForProvider.DNSOptions.PrivateDNSOnlyForInboundResolverEndpoint)
		}
		res.SetDnsOptions(f0)
	}
	if cr.Spec.ForProvider.IPAddressType != nil {
		res.SetIpAddressType(*cr.Spec.ForProvider.IPAddressType)
	}
	if cr.Spec.ForProvider.PolicyDocument != nil {
		res.SetPolicyDocument(*cr.Spec.ForProvider.PolicyDocument)
	}
	if cr.Spec.ForProvider.PrivateDNSEnabled != nil {
		res.SetPrivateDnsEnabled(*cr.Spec.ForProvider.PrivateDNSEnabled)
	}
	if cr.Spec.ForProvider.ServiceName != nil {
		res.SetServiceName(*cr.Spec.ForProvider.ServiceName)
	}
	if cr.Spec.ForProvider.TagSpecifications != nil {
		f5 := []*svcsdk.TagSpecification{}
		for _, f5iter := range cr.Spec.ForProvider.TagSpecifications {
			f5elem := &svcsdk.TagSpecification{}
			if f5iter.ResourceType != nil {
				f5elem.SetResourceType(*f5iter.ResourceType)
			}
			if f5iter.Tags != nil {
				f5elemf1 := []*svcsdk.Tag{}
				for _, f5elemf1iter := range f5iter.Tags {
					f5elemf1elem := &svcsdk.Tag{}
					if f5elemf1iter.Key != nil {
						f5elemf1elem.SetKey(*f5elemf1iter.Key)
					}
					if f5elemf1iter.Value != nil {
						f5elemf1elem.SetValue(*f5elemf1iter.Value)
					}
					f5elemf1 = append(f5elemf1, f5elemf1elem)
				}
				f5elem.SetTags(f5elemf1)
			}
			f5 = append(f5, f5elem)
		}
		res.SetTagSpecifications(f5)
	}
	if cr.Spec.ForProvider.VPCEndpointType != nil {
		res.SetVpcEndpointType(*cr.Spec.ForProvider.VPCEndpointType)
	}

	return res
}

// GenerateModifyVpcEndpointInput returns an update input.
func GenerateModifyVpcEndpointInput(cr *svcapitypes.VPCEndpoint) *svcsdk.ModifyVpcEndpointInput {
	res := &svcsdk.ModifyVpcEndpointInput{}

	if cr.Spec.ForProvider.DNSOptions != nil {
		f3 := &svcsdk.DnsOptionsSpecification{}
		if cr.Spec.ForProvider.DNSOptions.DNSRecordIPType != nil {
			f3.SetDnsRecordIpType(*cr.Spec.ForProvider.DNSOptions.DNSRecordIPType)
		}
		if cr.Spec.ForProvider.DNSOptions.PrivateDNSOnlyForInboundResolverEndpoint != nil {
			f3.SetPrivateDnsOnlyForInboundResolverEndpoint(*cr.Spec.ForProvider.DNSOptions.PrivateDNSOnlyForInboundResolverEndpoint)
		}
		res.SetDnsOptions(f3)
	}
	if cr.Spec.ForProvider.IPAddressType != nil {
		res.SetIpAddressType(*cr.Spec.ForProvider.IPAddressType)
	}
	if cr.Spec.ForProvider.PolicyDocument != nil {
		res.SetPolicyDocument(*cr.Spec.ForProvider.PolicyDocument)
	}
	if cr.Spec.ForProvider.PrivateDNSEnabled != nil {
		res.SetPrivateDnsEnabled(*cr.Spec.ForProvider.PrivateDNSEnabled)
	}
	if cr.Status.AtProvider.VPCEndpointID != nil {
		res.SetVpcEndpointId(*cr.Status.AtProvider.VPCEndpointID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
