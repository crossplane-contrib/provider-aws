/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package transitgatewayroute

import (
	"context"

	svcapi "github.com/aws/aws-sdk-go/service/ec2"
	svcsdk "github.com/aws/aws-sdk-go/service/ec2"
	svcsdkapi "github.com/aws/aws-sdk-go/service/ec2/ec2iface"
	"github.com/pkg/errors"
	"sigs.k8s.io/controller-runtime/pkg/client"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/reconciler/managed"
	cpresource "github.com/crossplane/crossplane-runtime/pkg/resource"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/ec2/v1alpha1"
	awsclient "github.com/crossplane-contrib/provider-aws/pkg/clients"
)

const (
	errUnexpectedObject = "managed resource is not an TransitGatewayRoute resource"

	errCreateSession = "cannot create a new session"
	errCreate        = "cannot create TransitGatewayRoute in AWS"
	errUpdate        = "cannot update TransitGatewayRoute in AWS"
	errDescribe      = "failed to describe TransitGatewayRoute"
	errDelete        = "failed to delete TransitGatewayRoute"
)

type connector struct {
	kube client.Client
	opts []option
}

func (c *connector) Connect(ctx context.Context, mg cpresource.Managed) (managed.ExternalClient, error) {
	cr, ok := mg.(*svcapitypes.TransitGatewayRoute)
	if !ok {
		return nil, errors.New(errUnexpectedObject)
	}
	sess, err := awsclient.GetConfigV1(ctx, c.kube, mg, cr.Spec.ForProvider.Region)
	if err != nil {
		return nil, errors.Wrap(err, errCreateSession)
	}
	return newExternal(c.kube, svcapi.New(sess), c.opts), nil
}

func (e *external) Observe(ctx context.Context, mg cpresource.Managed) (managed.ExternalObservation, error) {
	return e.observe(ctx, mg)
}

func (e *external) Create(ctx context.Context, mg cpresource.Managed) (managed.ExternalCreation, error) {
	cr, ok := mg.(*svcapitypes.TransitGatewayRoute)
	if !ok {
		return managed.ExternalCreation{}, errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Creating())
	input := GenerateCreateTransitGatewayRouteInput(cr)
	if err := e.preCreate(ctx, cr, input); err != nil {
		return managed.ExternalCreation{}, errors.Wrap(err, "pre-create failed")
	}
	resp, err := e.client.CreateTransitGatewayRouteWithContext(ctx, input)
	if err != nil {
		return managed.ExternalCreation{}, awsclient.Wrap(err, errCreate)
	}

	if resp.Route.DestinationCidrBlock != nil {
		cr.Spec.ForProvider.DestinationCIDRBlock = resp.Route.DestinationCidrBlock
	} else {
		cr.Spec.ForProvider.DestinationCIDRBlock = nil
	}
	if resp.Route.PrefixListId != nil {
		cr.Status.AtProvider.PrefixListID = resp.Route.PrefixListId
	} else {
		cr.Status.AtProvider.PrefixListID = nil
	}
	if resp.Route.State != nil {
		cr.Status.AtProvider.State = resp.Route.State
	} else {
		cr.Status.AtProvider.State = nil
	}
	if resp.Route.TransitGatewayAttachments != nil {
		f3 := []*svcapitypes.TransitGatewayRouteAttachment{}
		for _, f3iter := range resp.Route.TransitGatewayAttachments {
			f3elem := &svcapitypes.TransitGatewayRouteAttachment{}
			if f3iter.ResourceId != nil {
				f3elem.ResourceID = f3iter.ResourceId
			}
			if f3iter.ResourceType != nil {
				f3elem.ResourceType = f3iter.ResourceType
			}
			if f3iter.TransitGatewayAttachmentId != nil {
				f3elem.TransitGatewayAttachmentID = f3iter.TransitGatewayAttachmentId
			}
			f3 = append(f3, f3elem)
		}
		cr.Status.AtProvider.TransitGatewayAttachments = f3
	} else {
		cr.Status.AtProvider.TransitGatewayAttachments = nil
	}
	if resp.Route.Type != nil {
		cr.Status.AtProvider.Type = resp.Route.Type
	} else {
		cr.Status.AtProvider.Type = nil
	}

	return e.postCreate(ctx, cr, resp, managed.ExternalCreation{}, err)
}

func (e *external) Update(ctx context.Context, mg cpresource.Managed) (managed.ExternalUpdate, error) {
	return e.update(ctx, mg)

}

func (e *external) Delete(ctx context.Context, mg cpresource.Managed) error {
	cr, ok := mg.(*svcapitypes.TransitGatewayRoute)
	if !ok {
		return errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Deleting())
	input := GenerateDeleteTransitGatewayRouteInput(cr)
	ignore, err := e.preDelete(ctx, cr, input)
	if err != nil {
		return errors.Wrap(err, "pre-delete failed")
	}
	if ignore {
		return nil
	}
	resp, err := e.client.DeleteTransitGatewayRouteWithContext(ctx, input)
	return e.postDelete(ctx, cr, resp, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDelete))
}

type option func(*external)

func newExternal(kube client.Client, client svcsdkapi.EC2API, opts []option) *external {
	e := &external{
		kube:       kube,
		client:     client,
		observe:    nopObserve,
		preCreate:  nopPreCreate,
		postCreate: nopPostCreate,
		preDelete:  nopPreDelete,
		postDelete: nopPostDelete,
		update:     nopUpdate,
	}
	for _, f := range opts {
		f(e)
	}
	return e
}

type external struct {
	kube       client.Client
	client     svcsdkapi.EC2API
	observe    func(context.Context, cpresource.Managed) (managed.ExternalObservation, error)
	preCreate  func(context.Context, *svcapitypes.TransitGatewayRoute, *svcsdk.CreateTransitGatewayRouteInput) error
	postCreate func(context.Context, *svcapitypes.TransitGatewayRoute, *svcsdk.CreateTransitGatewayRouteOutput, managed.ExternalCreation, error) (managed.ExternalCreation, error)
	preDelete  func(context.Context, *svcapitypes.TransitGatewayRoute, *svcsdk.DeleteTransitGatewayRouteInput) (bool, error)
	postDelete func(context.Context, *svcapitypes.TransitGatewayRoute, *svcsdk.DeleteTransitGatewayRouteOutput, error) error
	update     func(context.Context, cpresource.Managed) (managed.ExternalUpdate, error)
}

func nopObserve(context.Context, cpresource.Managed) (managed.ExternalObservation, error) {
	return managed.ExternalObservation{}, nil
}

func nopPreCreate(context.Context, *svcapitypes.TransitGatewayRoute, *svcsdk.CreateTransitGatewayRouteInput) error {
	return nil
}
func nopPostCreate(_ context.Context, _ *svcapitypes.TransitGatewayRoute, _ *svcsdk.CreateTransitGatewayRouteOutput, cre managed.ExternalCreation, err error) (managed.ExternalCreation, error) {
	return cre, err
}
func nopPreDelete(context.Context, *svcapitypes.TransitGatewayRoute, *svcsdk.DeleteTransitGatewayRouteInput) (bool, error) {
	return false, nil
}
func nopPostDelete(_ context.Context, _ *svcapitypes.TransitGatewayRoute, _ *svcsdk.DeleteTransitGatewayRouteOutput, err error) error {
	return err
}
func nopUpdate(context.Context, cpresource.Managed) (managed.ExternalUpdate, error) {
	return managed.ExternalUpdate{}, nil
}
