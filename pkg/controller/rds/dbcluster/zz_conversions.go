/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package dbcluster

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane/provider-aws/apis/rds/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeDBClustersInput returns input for read
// operation.
func GenerateDescribeDBClustersInput(cr *svcapitypes.DBCluster) *svcsdk.DescribeDBClustersInput {
	res := &svcsdk.DescribeDBClustersInput{}

	return res
}

// GenerateDBCluster returns the current state in the form of *svcapitypes.DBCluster.
func GenerateDBCluster(resp *svcsdk.DescribeDBClustersOutput) *svcapitypes.DBCluster {
	cr := &svcapitypes.DBCluster{}

	found := false
	for _, elem := range resp.DBClusters {
		if elem.ActivityStreamKinesisStreamName != nil {
			cr.Status.AtProvider.ActivityStreamKinesisStreamName = elem.ActivityStreamKinesisStreamName
		} else {
			cr.Status.AtProvider.ActivityStreamKinesisStreamName = nil
		}
		if elem.ActivityStreamKmsKeyId != nil {
			cr.Status.AtProvider.ActivityStreamKMSKeyID = elem.ActivityStreamKmsKeyId
		} else {
			cr.Status.AtProvider.ActivityStreamKMSKeyID = nil
		}
		if elem.ActivityStreamMode != nil {
			cr.Status.AtProvider.ActivityStreamMode = elem.ActivityStreamMode
		} else {
			cr.Status.AtProvider.ActivityStreamMode = nil
		}
		if elem.ActivityStreamStatus != nil {
			cr.Status.AtProvider.ActivityStreamStatus = elem.ActivityStreamStatus
		} else {
			cr.Status.AtProvider.ActivityStreamStatus = nil
		}
		if elem.AllocatedStorage != nil {
			cr.Status.AtProvider.AllocatedStorage = elem.AllocatedStorage
		} else {
			cr.Status.AtProvider.AllocatedStorage = nil
		}
		if elem.AssociatedRoles != nil {
			f5 := []*svcapitypes.DBClusterRole{}
			for _, f5iter := range elem.AssociatedRoles {
				f5elem := &svcapitypes.DBClusterRole{}
				if f5iter.FeatureName != nil {
					f5elem.FeatureName = f5iter.FeatureName
				}
				if f5iter.RoleArn != nil {
					f5elem.RoleARN = f5iter.RoleArn
				}
				if f5iter.Status != nil {
					f5elem.Status = f5iter.Status
				}
				f5 = append(f5, f5elem)
			}
			cr.Status.AtProvider.AssociatedRoles = f5
		} else {
			cr.Status.AtProvider.AssociatedRoles = nil
		}
		if elem.AvailabilityZones != nil {
			f6 := []*string{}
			for _, f6iter := range elem.AvailabilityZones {
				var f6elem string
				f6elem = *f6iter
				f6 = append(f6, &f6elem)
			}
			cr.Spec.ForProvider.AvailabilityZones = f6
		} else {
			cr.Spec.ForProvider.AvailabilityZones = nil
		}
		if elem.BacktrackConsumedChangeRecords != nil {
			cr.Status.AtProvider.BacktrackConsumedChangeRecords = elem.BacktrackConsumedChangeRecords
		} else {
			cr.Status.AtProvider.BacktrackConsumedChangeRecords = nil
		}
		if elem.BacktrackWindow != nil {
			cr.Spec.ForProvider.BacktrackWindow = elem.BacktrackWindow
		} else {
			cr.Spec.ForProvider.BacktrackWindow = nil
		}
		if elem.BackupRetentionPeriod != nil {
			cr.Spec.ForProvider.BackupRetentionPeriod = elem.BackupRetentionPeriod
		} else {
			cr.Spec.ForProvider.BackupRetentionPeriod = nil
		}
		if elem.Capacity != nil {
			cr.Status.AtProvider.Capacity = elem.Capacity
		} else {
			cr.Status.AtProvider.Capacity = nil
		}
		if elem.CharacterSetName != nil {
			cr.Spec.ForProvider.CharacterSetName = elem.CharacterSetName
		} else {
			cr.Spec.ForProvider.CharacterSetName = nil
		}
		if elem.CloneGroupId != nil {
			cr.Status.AtProvider.CloneGroupID = elem.CloneGroupId
		} else {
			cr.Status.AtProvider.CloneGroupID = nil
		}
		if elem.ClusterCreateTime != nil {
			cr.Status.AtProvider.ClusterCreateTime = &metav1.Time{*elem.ClusterCreateTime}
		} else {
			cr.Status.AtProvider.ClusterCreateTime = nil
		}
		if elem.CopyTagsToSnapshot != nil {
			cr.Spec.ForProvider.CopyTagsToSnapshot = elem.CopyTagsToSnapshot
		} else {
			cr.Spec.ForProvider.CopyTagsToSnapshot = nil
		}
		if elem.CrossAccountClone != nil {
			cr.Status.AtProvider.CrossAccountClone = elem.CrossAccountClone
		} else {
			cr.Status.AtProvider.CrossAccountClone = nil
		}
		if elem.CustomEndpoints != nil {
			f16 := []*string{}
			for _, f16iter := range elem.CustomEndpoints {
				var f16elem string
				f16elem = *f16iter
				f16 = append(f16, &f16elem)
			}
			cr.Status.AtProvider.CustomEndpoints = f16
		} else {
			cr.Status.AtProvider.CustomEndpoints = nil
		}
		if elem.DBClusterArn != nil {
			cr.Status.AtProvider.DBClusterARN = elem.DBClusterArn
		} else {
			cr.Status.AtProvider.DBClusterARN = nil
		}
		if elem.DBClusterIdentifier != nil {
			cr.Status.AtProvider.DBClusterIdentifier = elem.DBClusterIdentifier
		} else {
			cr.Status.AtProvider.DBClusterIdentifier = nil
		}
		if elem.DBClusterMembers != nil {
			f19 := []*svcapitypes.DBClusterMember{}
			for _, f19iter := range elem.DBClusterMembers {
				f19elem := &svcapitypes.DBClusterMember{}
				if f19iter.DBClusterParameterGroupStatus != nil {
					f19elem.DBClusterParameterGroupStatus = f19iter.DBClusterParameterGroupStatus
				}
				if f19iter.DBInstanceIdentifier != nil {
					f19elem.DBInstanceIdentifier = f19iter.DBInstanceIdentifier
				}
				if f19iter.IsClusterWriter != nil {
					f19elem.IsClusterWriter = f19iter.IsClusterWriter
				}
				if f19iter.PromotionTier != nil {
					f19elem.PromotionTier = f19iter.PromotionTier
				}
				f19 = append(f19, f19elem)
			}
			cr.Status.AtProvider.DBClusterMembers = f19
		} else {
			cr.Status.AtProvider.DBClusterMembers = nil
		}
		if elem.DBClusterOptionGroupMemberships != nil {
			f20 := []*svcapitypes.DBClusterOptionGroupStatus{}
			for _, f20iter := range elem.DBClusterOptionGroupMemberships {
				f20elem := &svcapitypes.DBClusterOptionGroupStatus{}
				if f20iter.DBClusterOptionGroupName != nil {
					f20elem.DBClusterOptionGroupName = f20iter.DBClusterOptionGroupName
				}
				if f20iter.Status != nil {
					f20elem.Status = f20iter.Status
				}
				f20 = append(f20, f20elem)
			}
			cr.Status.AtProvider.DBClusterOptionGroupMemberships = f20
		} else {
			cr.Status.AtProvider.DBClusterOptionGroupMemberships = nil
		}
		if elem.DBClusterParameterGroup != nil {
			cr.Status.AtProvider.DBClusterParameterGroup = elem.DBClusterParameterGroup
		} else {
			cr.Status.AtProvider.DBClusterParameterGroup = nil
		}
		if elem.DBSubnetGroup != nil {
			cr.Status.AtProvider.DBSubnetGroup = elem.DBSubnetGroup
		} else {
			cr.Status.AtProvider.DBSubnetGroup = nil
		}
		if elem.DatabaseName != nil {
			cr.Spec.ForProvider.DatabaseName = elem.DatabaseName
		} else {
			cr.Spec.ForProvider.DatabaseName = nil
		}
		if elem.DbClusterResourceId != nil {
			cr.Status.AtProvider.DBClusterResourceID = elem.DbClusterResourceId
		} else {
			cr.Status.AtProvider.DBClusterResourceID = nil
		}
		if elem.DeletionProtection != nil {
			cr.Spec.ForProvider.DeletionProtection = elem.DeletionProtection
		} else {
			cr.Spec.ForProvider.DeletionProtection = nil
		}
		if elem.DomainMemberships != nil {
			f26 := []*svcapitypes.DomainMembership{}
			for _, f26iter := range elem.DomainMemberships {
				f26elem := &svcapitypes.DomainMembership{}
				if f26iter.Domain != nil {
					f26elem.Domain = f26iter.Domain
				}
				if f26iter.FQDN != nil {
					f26elem.FQDN = f26iter.FQDN
				}
				if f26iter.IAMRoleName != nil {
					f26elem.IAMRoleName = f26iter.IAMRoleName
				}
				if f26iter.Status != nil {
					f26elem.Status = f26iter.Status
				}
				f26 = append(f26, f26elem)
			}
			cr.Status.AtProvider.DomainMemberships = f26
		} else {
			cr.Status.AtProvider.DomainMemberships = nil
		}
		if elem.EarliestBacktrackTime != nil {
			cr.Status.AtProvider.EarliestBacktrackTime = &metav1.Time{*elem.EarliestBacktrackTime}
		} else {
			cr.Status.AtProvider.EarliestBacktrackTime = nil
		}
		if elem.EarliestRestorableTime != nil {
			cr.Status.AtProvider.EarliestRestorableTime = &metav1.Time{*elem.EarliestRestorableTime}
		} else {
			cr.Status.AtProvider.EarliestRestorableTime = nil
		}
		if elem.EnabledCloudwatchLogsExports != nil {
			f29 := []*string{}
			for _, f29iter := range elem.EnabledCloudwatchLogsExports {
				var f29elem string
				f29elem = *f29iter
				f29 = append(f29, &f29elem)
			}
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = f29
		} else {
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = nil
		}
		if elem.Endpoint != nil {
			cr.Status.AtProvider.Endpoint = elem.Endpoint
		} else {
			cr.Status.AtProvider.Endpoint = nil
		}
		if elem.Engine != nil {
			cr.Spec.ForProvider.Engine = elem.Engine
		} else {
			cr.Spec.ForProvider.Engine = nil
		}
		if elem.EngineMode != nil {
			cr.Spec.ForProvider.EngineMode = elem.EngineMode
		} else {
			cr.Spec.ForProvider.EngineMode = nil
		}
		if elem.EngineVersion != nil {
			cr.Spec.ForProvider.EngineVersion = elem.EngineVersion
		} else {
			cr.Spec.ForProvider.EngineVersion = nil
		}
		if elem.GlobalWriteForwardingRequested != nil {
			cr.Status.AtProvider.GlobalWriteForwardingRequested = elem.GlobalWriteForwardingRequested
		} else {
			cr.Status.AtProvider.GlobalWriteForwardingRequested = nil
		}
		if elem.GlobalWriteForwardingStatus != nil {
			cr.Status.AtProvider.GlobalWriteForwardingStatus = elem.GlobalWriteForwardingStatus
		} else {
			cr.Status.AtProvider.GlobalWriteForwardingStatus = nil
		}
		if elem.HostedZoneId != nil {
			cr.Status.AtProvider.HostedZoneID = elem.HostedZoneId
		} else {
			cr.Status.AtProvider.HostedZoneID = nil
		}
		if elem.HttpEndpointEnabled != nil {
			cr.Status.AtProvider.HTTPEndpointEnabled = elem.HttpEndpointEnabled
		} else {
			cr.Status.AtProvider.HTTPEndpointEnabled = nil
		}
		if elem.IAMDatabaseAuthenticationEnabled != nil {
			cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = elem.IAMDatabaseAuthenticationEnabled
		} else {
			cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = nil
		}
		if elem.KmsKeyId != nil {
			cr.Spec.ForProvider.KMSKeyID = elem.KmsKeyId
		} else {
			cr.Spec.ForProvider.KMSKeyID = nil
		}
		if elem.LatestRestorableTime != nil {
			cr.Status.AtProvider.LatestRestorableTime = &metav1.Time{*elem.LatestRestorableTime}
		} else {
			cr.Status.AtProvider.LatestRestorableTime = nil
		}
		if elem.MasterUsername != nil {
			cr.Spec.ForProvider.MasterUsername = elem.MasterUsername
		} else {
			cr.Spec.ForProvider.MasterUsername = nil
		}
		if elem.MultiAZ != nil {
			cr.Status.AtProvider.MultiAZ = elem.MultiAZ
		} else {
			cr.Status.AtProvider.MultiAZ = nil
		}
		if elem.PercentProgress != nil {
			cr.Status.AtProvider.PercentProgress = elem.PercentProgress
		} else {
			cr.Status.AtProvider.PercentProgress = nil
		}
		if elem.Port != nil {
			cr.Spec.ForProvider.Port = elem.Port
		} else {
			cr.Spec.ForProvider.Port = nil
		}
		if elem.PreferredBackupWindow != nil {
			cr.Spec.ForProvider.PreferredBackupWindow = elem.PreferredBackupWindow
		} else {
			cr.Spec.ForProvider.PreferredBackupWindow = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = nil
		}
		if elem.ReadReplicaIdentifiers != nil {
			f47 := []*string{}
			for _, f47iter := range elem.ReadReplicaIdentifiers {
				var f47elem string
				f47elem = *f47iter
				f47 = append(f47, &f47elem)
			}
			cr.Status.AtProvider.ReadReplicaIdentifiers = f47
		} else {
			cr.Status.AtProvider.ReadReplicaIdentifiers = nil
		}
		if elem.ReaderEndpoint != nil {
			cr.Status.AtProvider.ReaderEndpoint = elem.ReaderEndpoint
		} else {
			cr.Status.AtProvider.ReaderEndpoint = nil
		}
		if elem.ReplicationSourceIdentifier != nil {
			cr.Spec.ForProvider.ReplicationSourceIdentifier = elem.ReplicationSourceIdentifier
		} else {
			cr.Spec.ForProvider.ReplicationSourceIdentifier = nil
		}
		if elem.ScalingConfigurationInfo != nil {
			f50 := &svcapitypes.ScalingConfigurationInfo{}
			if elem.ScalingConfigurationInfo.AutoPause != nil {
				f50.AutoPause = elem.ScalingConfigurationInfo.AutoPause
			}
			if elem.ScalingConfigurationInfo.MaxCapacity != nil {
				f50.MaxCapacity = elem.ScalingConfigurationInfo.MaxCapacity
			}
			if elem.ScalingConfigurationInfo.MinCapacity != nil {
				f50.MinCapacity = elem.ScalingConfigurationInfo.MinCapacity
			}
			if elem.ScalingConfigurationInfo.SecondsUntilAutoPause != nil {
				f50.SecondsUntilAutoPause = elem.ScalingConfigurationInfo.SecondsUntilAutoPause
			}
			if elem.ScalingConfigurationInfo.TimeoutAction != nil {
				f50.TimeoutAction = elem.ScalingConfigurationInfo.TimeoutAction
			}
			cr.Status.AtProvider.ScalingConfigurationInfo = f50
		} else {
			cr.Status.AtProvider.ScalingConfigurationInfo = nil
		}
		if elem.Status != nil {
			cr.Status.AtProvider.Status = elem.Status
		} else {
			cr.Status.AtProvider.Status = nil
		}
		if elem.StorageEncrypted != nil {
			cr.Spec.ForProvider.StorageEncrypted = elem.StorageEncrypted
		} else {
			cr.Spec.ForProvider.StorageEncrypted = nil
		}
		if elem.TagList != nil {
			f53 := []*svcapitypes.Tag{}
			for _, f53iter := range elem.TagList {
				f53elem := &svcapitypes.Tag{}
				if f53iter.Key != nil {
					f53elem.Key = f53iter.Key
				}
				if f53iter.Value != nil {
					f53elem.Value = f53iter.Value
				}
				f53 = append(f53, f53elem)
			}
			cr.Status.AtProvider.TagList = f53
		} else {
			cr.Status.AtProvider.TagList = nil
		}
		if elem.VpcSecurityGroups != nil {
			f54 := []*svcapitypes.VPCSecurityGroupMembership{}
			for _, f54iter := range elem.VpcSecurityGroups {
				f54elem := &svcapitypes.VPCSecurityGroupMembership{}
				if f54iter.Status != nil {
					f54elem.Status = f54iter.Status
				}
				if f54iter.VpcSecurityGroupId != nil {
					f54elem.VPCSecurityGroupID = f54iter.VpcSecurityGroupId
				}
				f54 = append(f54, f54elem)
			}
			cr.Status.AtProvider.VPCSecurityGroups = f54
		} else {
			cr.Status.AtProvider.VPCSecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateDBClusterInput returns a create input.
func GenerateCreateDBClusterInput(cr *svcapitypes.DBCluster) *svcsdk.CreateDBClusterInput {
	res := &svcsdk.CreateDBClusterInput{}

	if cr.Spec.ForProvider.AvailabilityZones != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.AvailabilityZones {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAvailabilityZones(f0)
	}
	if cr.Spec.ForProvider.BacktrackWindow != nil {
		res.SetBacktrackWindow(*cr.Spec.ForProvider.BacktrackWindow)
	}
	if cr.Spec.ForProvider.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*cr.Spec.ForProvider.BackupRetentionPeriod)
	}
	if cr.Spec.ForProvider.CharacterSetName != nil {
		res.SetCharacterSetName(*cr.Spec.ForProvider.CharacterSetName)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBClusterParameterGroupName != nil {
		res.SetDBClusterParameterGroupName(*cr.Spec.ForProvider.DBClusterParameterGroupName)
	}
	if cr.Spec.ForProvider.DBSubnetGroupName != nil {
		res.SetDBSubnetGroupName(*cr.Spec.ForProvider.DBSubnetGroupName)
	}
	if cr.Spec.ForProvider.DatabaseName != nil {
		res.SetDatabaseName(*cr.Spec.ForProvider.DatabaseName)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.DestinationRegion != nil {
		res.SetDestinationRegion(*cr.Spec.ForProvider.DestinationRegion)
	}
	if cr.Spec.ForProvider.Domain != nil {
		res.SetDomain(*cr.Spec.ForProvider.Domain)
	}
	if cr.Spec.ForProvider.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*cr.Spec.ForProvider.DomainIAMRoleName)
	}
	if cr.Spec.ForProvider.EnableCloudwatchLogsExports != nil {
		f12 := []*string{}
		for _, f12iter := range cr.Spec.ForProvider.EnableCloudwatchLogsExports {
			var f12elem string
			f12elem = *f12iter
			f12 = append(f12, &f12elem)
		}
		res.SetEnableCloudwatchLogsExports(f12)
	}
	if cr.Spec.ForProvider.EnableGlobalWriteForwarding != nil {
		res.SetEnableGlobalWriteForwarding(*cr.Spec.ForProvider.EnableGlobalWriteForwarding)
	}
	if cr.Spec.ForProvider.EnableHTTPEndpoint != nil {
		res.SetEnableHttpEndpoint(*cr.Spec.ForProvider.EnableHTTPEndpoint)
	}
	if cr.Spec.ForProvider.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*cr.Spec.ForProvider.EnableIAMDatabaseAuthentication)
	}
	if cr.Spec.ForProvider.Engine != nil {
		res.SetEngine(*cr.Spec.ForProvider.Engine)
	}
	if cr.Spec.ForProvider.EngineMode != nil {
		res.SetEngineMode(*cr.Spec.ForProvider.EngineMode)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.GlobalClusterIdentifier != nil {
		res.SetGlobalClusterIdentifier(*cr.Spec.ForProvider.GlobalClusterIdentifier)
	}
	if cr.Spec.ForProvider.KMSKeyID != nil {
		res.SetKmsKeyId(*cr.Spec.ForProvider.KMSKeyID)
	}
	if cr.Spec.ForProvider.MasterUsername != nil {
		res.SetMasterUsername(*cr.Spec.ForProvider.MasterUsername)
	}
	if cr.Spec.ForProvider.OptionGroupName != nil {
		res.SetOptionGroupName(*cr.Spec.ForProvider.OptionGroupName)
	}
	if cr.Spec.ForProvider.Port != nil {
		res.SetPort(*cr.Spec.ForProvider.Port)
	}
	if cr.Spec.ForProvider.PreSignedURL != nil {
		res.SetPreSignedUrl(*cr.Spec.ForProvider.PreSignedURL)
	}
	if cr.Spec.ForProvider.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*cr.Spec.ForProvider.PreferredBackupWindow)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.ReplicationSourceIdentifier != nil {
		res.SetReplicationSourceIdentifier(*cr.Spec.ForProvider.ReplicationSourceIdentifier)
	}
	if cr.Spec.ForProvider.ScalingConfiguration != nil {
		f28 := &svcsdk.ScalingConfiguration{}
		if cr.Spec.ForProvider.ScalingConfiguration.AutoPause != nil {
			f28.SetAutoPause(*cr.Spec.ForProvider.ScalingConfiguration.AutoPause)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.MaxCapacity != nil {
			f28.SetMaxCapacity(*cr.Spec.ForProvider.ScalingConfiguration.MaxCapacity)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.MinCapacity != nil {
			f28.SetMinCapacity(*cr.Spec.ForProvider.ScalingConfiguration.MinCapacity)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.SecondsUntilAutoPause != nil {
			f28.SetSecondsUntilAutoPause(*cr.Spec.ForProvider.ScalingConfiguration.SecondsUntilAutoPause)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.TimeoutAction != nil {
			f28.SetTimeoutAction(*cr.Spec.ForProvider.ScalingConfiguration.TimeoutAction)
		}
		res.SetScalingConfiguration(f28)
	}
	if cr.Spec.ForProvider.SourceRegion != nil {
		res.SetSourceRegion(*cr.Spec.ForProvider.SourceRegion)
	}
	if cr.Spec.ForProvider.StorageEncrypted != nil {
		res.SetStorageEncrypted(*cr.Spec.ForProvider.StorageEncrypted)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f31 := []*svcsdk.Tag{}
		for _, f31iter := range cr.Spec.ForProvider.Tags {
			f31elem := &svcsdk.Tag{}
			if f31iter.Key != nil {
				f31elem.SetKey(*f31iter.Key)
			}
			if f31iter.Value != nil {
				f31elem.SetValue(*f31iter.Value)
			}
			f31 = append(f31, f31elem)
		}
		res.SetTags(f31)
	}

	return res
}

// GenerateModifyDBClusterInput returns an update input.
func GenerateModifyDBClusterInput(cr *svcapitypes.DBCluster) *svcsdk.ModifyDBClusterInput {
	res := &svcsdk.ModifyDBClusterInput{}

	if cr.Spec.ForProvider.BacktrackWindow != nil {
		res.SetBacktrackWindow(*cr.Spec.ForProvider.BacktrackWindow)
	}
	if cr.Spec.ForProvider.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*cr.Spec.ForProvider.BackupRetentionPeriod)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBClusterParameterGroupName != nil {
		res.SetDBClusterParameterGroupName(*cr.Spec.ForProvider.DBClusterParameterGroupName)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.Domain != nil {
		res.SetDomain(*cr.Spec.ForProvider.Domain)
	}
	if cr.Spec.ForProvider.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*cr.Spec.ForProvider.DomainIAMRoleName)
	}
	if cr.Spec.ForProvider.EnableGlobalWriteForwarding != nil {
		res.SetEnableGlobalWriteForwarding(*cr.Spec.ForProvider.EnableGlobalWriteForwarding)
	}
	if cr.Spec.ForProvider.EnableHTTPEndpoint != nil {
		res.SetEnableHttpEndpoint(*cr.Spec.ForProvider.EnableHTTPEndpoint)
	}
	if cr.Spec.ForProvider.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*cr.Spec.ForProvider.EnableIAMDatabaseAuthentication)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.OptionGroupName != nil {
		res.SetOptionGroupName(*cr.Spec.ForProvider.OptionGroupName)
	}
	if cr.Spec.ForProvider.Port != nil {
		res.SetPort(*cr.Spec.ForProvider.Port)
	}
	if cr.Spec.ForProvider.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*cr.Spec.ForProvider.PreferredBackupWindow)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.ScalingConfiguration != nil {
		f20 := &svcsdk.ScalingConfiguration{}
		if cr.Spec.ForProvider.ScalingConfiguration.AutoPause != nil {
			f20.SetAutoPause(*cr.Spec.ForProvider.ScalingConfiguration.AutoPause)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.MaxCapacity != nil {
			f20.SetMaxCapacity(*cr.Spec.ForProvider.ScalingConfiguration.MaxCapacity)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.MinCapacity != nil {
			f20.SetMinCapacity(*cr.Spec.ForProvider.ScalingConfiguration.MinCapacity)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.SecondsUntilAutoPause != nil {
			f20.SetSecondsUntilAutoPause(*cr.Spec.ForProvider.ScalingConfiguration.SecondsUntilAutoPause)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.TimeoutAction != nil {
			f20.SetTimeoutAction(*cr.Spec.ForProvider.ScalingConfiguration.TimeoutAction)
		}
		res.SetScalingConfiguration(f20)
	}

	return res
}

// GenerateDeleteDBClusterInput returns a deletion input.
func GenerateDeleteDBClusterInput(cr *svcapitypes.DBCluster) *svcsdk.DeleteDBClusterInput {
	res := &svcsdk.DeleteDBClusterInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "DBClusterNotFoundFault"
}
