/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package dbcluster

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/rds/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeDBClustersInput returns input for read
// operation.
func GenerateDescribeDBClustersInput(cr *svcapitypes.DBCluster) *svcsdk.DescribeDBClustersInput {
	res := &svcsdk.DescribeDBClustersInput{}

	return res
}

// GenerateDBCluster returns the current state in the form of *svcapitypes.DBCluster.
func GenerateDBCluster(resp *svcsdk.DescribeDBClustersOutput) *svcapitypes.DBCluster {
	cr := &svcapitypes.DBCluster{}

	found := false
	for _, elem := range resp.DBClusters {
		if elem.ActivityStreamKinesisStreamName != nil {
			cr.Status.AtProvider.ActivityStreamKinesisStreamName = elem.ActivityStreamKinesisStreamName
		} else {
			cr.Status.AtProvider.ActivityStreamKinesisStreamName = nil
		}
		if elem.ActivityStreamKmsKeyId != nil {
			cr.Status.AtProvider.ActivityStreamKMSKeyID = elem.ActivityStreamKmsKeyId
		} else {
			cr.Status.AtProvider.ActivityStreamKMSKeyID = nil
		}
		if elem.ActivityStreamMode != nil {
			cr.Status.AtProvider.ActivityStreamMode = elem.ActivityStreamMode
		} else {
			cr.Status.AtProvider.ActivityStreamMode = nil
		}
		if elem.ActivityStreamStatus != nil {
			cr.Status.AtProvider.ActivityStreamStatus = elem.ActivityStreamStatus
		} else {
			cr.Status.AtProvider.ActivityStreamStatus = nil
		}
		if elem.AllocatedStorage != nil {
			cr.Spec.ForProvider.AllocatedStorage = elem.AllocatedStorage
		} else {
			cr.Spec.ForProvider.AllocatedStorage = nil
		}
		if elem.AssociatedRoles != nil {
			f5 := []*svcapitypes.DBClusterRole{}
			for _, f5iter := range elem.AssociatedRoles {
				f5elem := &svcapitypes.DBClusterRole{}
				if f5iter.FeatureName != nil {
					f5elem.FeatureName = f5iter.FeatureName
				}
				if f5iter.RoleArn != nil {
					f5elem.RoleARN = f5iter.RoleArn
				}
				if f5iter.Status != nil {
					f5elem.Status = f5iter.Status
				}
				f5 = append(f5, f5elem)
			}
			cr.Status.AtProvider.AssociatedRoles = f5
		} else {
			cr.Status.AtProvider.AssociatedRoles = nil
		}
		if elem.AutoMinorVersionUpgrade != nil {
			cr.Spec.ForProvider.AutoMinorVersionUpgrade = elem.AutoMinorVersionUpgrade
		} else {
			cr.Spec.ForProvider.AutoMinorVersionUpgrade = nil
		}
		if elem.AutomaticRestartTime != nil {
			cr.Status.AtProvider.AutomaticRestartTime = &metav1.Time{*elem.AutomaticRestartTime}
		} else {
			cr.Status.AtProvider.AutomaticRestartTime = nil
		}
		if elem.AvailabilityZones != nil {
			f8 := []*string{}
			for _, f8iter := range elem.AvailabilityZones {
				var f8elem string
				f8elem = *f8iter
				f8 = append(f8, &f8elem)
			}
			cr.Spec.ForProvider.AvailabilityZones = f8
		} else {
			cr.Spec.ForProvider.AvailabilityZones = nil
		}
		if elem.BacktrackConsumedChangeRecords != nil {
			cr.Status.AtProvider.BacktrackConsumedChangeRecords = elem.BacktrackConsumedChangeRecords
		} else {
			cr.Status.AtProvider.BacktrackConsumedChangeRecords = nil
		}
		if elem.BacktrackWindow != nil {
			cr.Spec.ForProvider.BacktrackWindow = elem.BacktrackWindow
		} else {
			cr.Spec.ForProvider.BacktrackWindow = nil
		}
		if elem.BackupRetentionPeriod != nil {
			cr.Spec.ForProvider.BackupRetentionPeriod = elem.BackupRetentionPeriod
		} else {
			cr.Spec.ForProvider.BackupRetentionPeriod = nil
		}
		if elem.Capacity != nil {
			cr.Status.AtProvider.Capacity = elem.Capacity
		} else {
			cr.Status.AtProvider.Capacity = nil
		}
		if elem.CharacterSetName != nil {
			cr.Spec.ForProvider.CharacterSetName = elem.CharacterSetName
		} else {
			cr.Spec.ForProvider.CharacterSetName = nil
		}
		if elem.CloneGroupId != nil {
			cr.Status.AtProvider.CloneGroupID = elem.CloneGroupId
		} else {
			cr.Status.AtProvider.CloneGroupID = nil
		}
		if elem.ClusterCreateTime != nil {
			cr.Status.AtProvider.ClusterCreateTime = &metav1.Time{*elem.ClusterCreateTime}
		} else {
			cr.Status.AtProvider.ClusterCreateTime = nil
		}
		if elem.CopyTagsToSnapshot != nil {
			cr.Spec.ForProvider.CopyTagsToSnapshot = elem.CopyTagsToSnapshot
		} else {
			cr.Spec.ForProvider.CopyTagsToSnapshot = nil
		}
		if elem.CrossAccountClone != nil {
			cr.Status.AtProvider.CrossAccountClone = elem.CrossAccountClone
		} else {
			cr.Status.AtProvider.CrossAccountClone = nil
		}
		if elem.CustomEndpoints != nil {
			f18 := []*string{}
			for _, f18iter := range elem.CustomEndpoints {
				var f18elem string
				f18elem = *f18iter
				f18 = append(f18, &f18elem)
			}
			cr.Status.AtProvider.CustomEndpoints = f18
		} else {
			cr.Status.AtProvider.CustomEndpoints = nil
		}
		if elem.DBClusterArn != nil {
			cr.Status.AtProvider.DBClusterARN = elem.DBClusterArn
		} else {
			cr.Status.AtProvider.DBClusterARN = nil
		}
		if elem.DBClusterIdentifier != nil {
			cr.Status.AtProvider.DBClusterIdentifier = elem.DBClusterIdentifier
		} else {
			cr.Status.AtProvider.DBClusterIdentifier = nil
		}
		if elem.DBClusterInstanceClass != nil {
			cr.Spec.ForProvider.DBClusterInstanceClass = elem.DBClusterInstanceClass
		} else {
			cr.Spec.ForProvider.DBClusterInstanceClass = nil
		}
		if elem.DBClusterMembers != nil {
			f22 := []*svcapitypes.DBClusterMember{}
			for _, f22iter := range elem.DBClusterMembers {
				f22elem := &svcapitypes.DBClusterMember{}
				if f22iter.DBClusterParameterGroupStatus != nil {
					f22elem.DBClusterParameterGroupStatus = f22iter.DBClusterParameterGroupStatus
				}
				if f22iter.DBInstanceIdentifier != nil {
					f22elem.DBInstanceIdentifier = f22iter.DBInstanceIdentifier
				}
				if f22iter.IsClusterWriter != nil {
					f22elem.IsClusterWriter = f22iter.IsClusterWriter
				}
				if f22iter.PromotionTier != nil {
					f22elem.PromotionTier = f22iter.PromotionTier
				}
				f22 = append(f22, f22elem)
			}
			cr.Status.AtProvider.DBClusterMembers = f22
		} else {
			cr.Status.AtProvider.DBClusterMembers = nil
		}
		if elem.DBClusterOptionGroupMemberships != nil {
			f23 := []*svcapitypes.DBClusterOptionGroupStatus{}
			for _, f23iter := range elem.DBClusterOptionGroupMemberships {
				f23elem := &svcapitypes.DBClusterOptionGroupStatus{}
				if f23iter.DBClusterOptionGroupName != nil {
					f23elem.DBClusterOptionGroupName = f23iter.DBClusterOptionGroupName
				}
				if f23iter.Status != nil {
					f23elem.Status = f23iter.Status
				}
				f23 = append(f23, f23elem)
			}
			cr.Status.AtProvider.DBClusterOptionGroupMemberships = f23
		} else {
			cr.Status.AtProvider.DBClusterOptionGroupMemberships = nil
		}
		if elem.DBClusterParameterGroup != nil {
			cr.Status.AtProvider.DBClusterParameterGroup = elem.DBClusterParameterGroup
		} else {
			cr.Status.AtProvider.DBClusterParameterGroup = nil
		}
		if elem.DBSubnetGroup != nil {
			cr.Status.AtProvider.DBSubnetGroup = elem.DBSubnetGroup
		} else {
			cr.Status.AtProvider.DBSubnetGroup = nil
		}
		if elem.DatabaseName != nil {
			cr.Spec.ForProvider.DatabaseName = elem.DatabaseName
		} else {
			cr.Spec.ForProvider.DatabaseName = nil
		}
		if elem.DbClusterResourceId != nil {
			cr.Status.AtProvider.DBClusterResourceID = elem.DbClusterResourceId
		} else {
			cr.Status.AtProvider.DBClusterResourceID = nil
		}
		if elem.DeletionProtection != nil {
			cr.Spec.ForProvider.DeletionProtection = elem.DeletionProtection
		} else {
			cr.Spec.ForProvider.DeletionProtection = nil
		}
		if elem.DomainMemberships != nil {
			f29 := []*svcapitypes.DomainMembership{}
			for _, f29iter := range elem.DomainMemberships {
				f29elem := &svcapitypes.DomainMembership{}
				if f29iter.Domain != nil {
					f29elem.Domain = f29iter.Domain
				}
				if f29iter.FQDN != nil {
					f29elem.FQDN = f29iter.FQDN
				}
				if f29iter.IAMRoleName != nil {
					f29elem.IAMRoleName = f29iter.IAMRoleName
				}
				if f29iter.Status != nil {
					f29elem.Status = f29iter.Status
				}
				f29 = append(f29, f29elem)
			}
			cr.Status.AtProvider.DomainMemberships = f29
		} else {
			cr.Status.AtProvider.DomainMemberships = nil
		}
		if elem.EarliestBacktrackTime != nil {
			cr.Status.AtProvider.EarliestBacktrackTime = &metav1.Time{*elem.EarliestBacktrackTime}
		} else {
			cr.Status.AtProvider.EarliestBacktrackTime = nil
		}
		if elem.EarliestRestorableTime != nil {
			cr.Status.AtProvider.EarliestRestorableTime = &metav1.Time{*elem.EarliestRestorableTime}
		} else {
			cr.Status.AtProvider.EarliestRestorableTime = nil
		}
		if elem.EnabledCloudwatchLogsExports != nil {
			f32 := []*string{}
			for _, f32iter := range elem.EnabledCloudwatchLogsExports {
				var f32elem string
				f32elem = *f32iter
				f32 = append(f32, &f32elem)
			}
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = f32
		} else {
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = nil
		}
		if elem.Endpoint != nil {
			cr.Status.AtProvider.Endpoint = elem.Endpoint
		} else {
			cr.Status.AtProvider.Endpoint = nil
		}
		if elem.Engine != nil {
			cr.Spec.ForProvider.Engine = elem.Engine
		} else {
			cr.Spec.ForProvider.Engine = nil
		}
		if elem.EngineMode != nil {
			cr.Spec.ForProvider.EngineMode = elem.EngineMode
		} else {
			cr.Spec.ForProvider.EngineMode = nil
		}
		if elem.EngineVersion != nil {
			cr.Spec.ForProvider.EngineVersion = elem.EngineVersion
		} else {
			cr.Spec.ForProvider.EngineVersion = nil
		}
		if elem.GlobalWriteForwardingRequested != nil {
			cr.Status.AtProvider.GlobalWriteForwardingRequested = elem.GlobalWriteForwardingRequested
		} else {
			cr.Status.AtProvider.GlobalWriteForwardingRequested = nil
		}
		if elem.GlobalWriteForwardingStatus != nil {
			cr.Status.AtProvider.GlobalWriteForwardingStatus = elem.GlobalWriteForwardingStatus
		} else {
			cr.Status.AtProvider.GlobalWriteForwardingStatus = nil
		}
		if elem.HostedZoneId != nil {
			cr.Status.AtProvider.HostedZoneID = elem.HostedZoneId
		} else {
			cr.Status.AtProvider.HostedZoneID = nil
		}
		if elem.HttpEndpointEnabled != nil {
			cr.Status.AtProvider.HTTPEndpointEnabled = elem.HttpEndpointEnabled
		} else {
			cr.Status.AtProvider.HTTPEndpointEnabled = nil
		}
		if elem.IAMDatabaseAuthenticationEnabled != nil {
			cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = elem.IAMDatabaseAuthenticationEnabled
		} else {
			cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = nil
		}
		if elem.Iops != nil {
			cr.Spec.ForProvider.IOPS = elem.Iops
		} else {
			cr.Spec.ForProvider.IOPS = nil
		}
		if elem.KmsKeyId != nil {
			cr.Spec.ForProvider.KMSKeyID = elem.KmsKeyId
		} else {
			cr.Spec.ForProvider.KMSKeyID = nil
		}
		if elem.LatestRestorableTime != nil {
			cr.Status.AtProvider.LatestRestorableTime = &metav1.Time{*elem.LatestRestorableTime}
		} else {
			cr.Status.AtProvider.LatestRestorableTime = nil
		}
		if elem.MasterUsername != nil {
			cr.Spec.ForProvider.MasterUsername = elem.MasterUsername
		} else {
			cr.Spec.ForProvider.MasterUsername = nil
		}
		if elem.MonitoringInterval != nil {
			cr.Spec.ForProvider.MonitoringInterval = elem.MonitoringInterval
		} else {
			cr.Spec.ForProvider.MonitoringInterval = nil
		}
		if elem.MonitoringRoleArn != nil {
			cr.Spec.ForProvider.MonitoringRoleARN = elem.MonitoringRoleArn
		} else {
			cr.Spec.ForProvider.MonitoringRoleARN = nil
		}
		if elem.MultiAZ != nil {
			cr.Status.AtProvider.MultiAZ = elem.MultiAZ
		} else {
			cr.Status.AtProvider.MultiAZ = nil
		}
		if elem.PercentProgress != nil {
			cr.Status.AtProvider.PercentProgress = elem.PercentProgress
		} else {
			cr.Status.AtProvider.PercentProgress = nil
		}
		if elem.PerformanceInsightsEnabled != nil {
			cr.Status.AtProvider.PerformanceInsightsEnabled = elem.PerformanceInsightsEnabled
		} else {
			cr.Status.AtProvider.PerformanceInsightsEnabled = nil
		}
		if elem.PerformanceInsightsKMSKeyId != nil {
			cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = elem.PerformanceInsightsKMSKeyId
		} else {
			cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = nil
		}
		if elem.PerformanceInsightsRetentionPeriod != nil {
			cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod = elem.PerformanceInsightsRetentionPeriod
		} else {
			cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod = nil
		}
		if elem.Port != nil {
			cr.Spec.ForProvider.Port = elem.Port
		} else {
			cr.Spec.ForProvider.Port = nil
		}
		if elem.PreferredBackupWindow != nil {
			cr.Spec.ForProvider.PreferredBackupWindow = elem.PreferredBackupWindow
		} else {
			cr.Spec.ForProvider.PreferredBackupWindow = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = nil
		}
		if elem.PubliclyAccessible != nil {
			cr.Spec.ForProvider.PubliclyAccessible = elem.PubliclyAccessible
		} else {
			cr.Spec.ForProvider.PubliclyAccessible = nil
		}
		if elem.ReadReplicaIdentifiers != nil {
			f57 := []*string{}
			for _, f57iter := range elem.ReadReplicaIdentifiers {
				var f57elem string
				f57elem = *f57iter
				f57 = append(f57, &f57elem)
			}
			cr.Status.AtProvider.ReadReplicaIdentifiers = f57
		} else {
			cr.Status.AtProvider.ReadReplicaIdentifiers = nil
		}
		if elem.ReaderEndpoint != nil {
			cr.Status.AtProvider.ReaderEndpoint = elem.ReaderEndpoint
		} else {
			cr.Status.AtProvider.ReaderEndpoint = nil
		}
		if elem.ReplicationSourceIdentifier != nil {
			cr.Spec.ForProvider.ReplicationSourceIdentifier = elem.ReplicationSourceIdentifier
		} else {
			cr.Spec.ForProvider.ReplicationSourceIdentifier = nil
		}
		if elem.ScalingConfigurationInfo != nil {
			f60 := &svcapitypes.ScalingConfigurationInfo{}
			if elem.ScalingConfigurationInfo.AutoPause != nil {
				f60.AutoPause = elem.ScalingConfigurationInfo.AutoPause
			}
			if elem.ScalingConfigurationInfo.MaxCapacity != nil {
				f60.MaxCapacity = elem.ScalingConfigurationInfo.MaxCapacity
			}
			if elem.ScalingConfigurationInfo.MinCapacity != nil {
				f60.MinCapacity = elem.ScalingConfigurationInfo.MinCapacity
			}
			if elem.ScalingConfigurationInfo.SecondsBeforeTimeout != nil {
				f60.SecondsBeforeTimeout = elem.ScalingConfigurationInfo.SecondsBeforeTimeout
			}
			if elem.ScalingConfigurationInfo.SecondsUntilAutoPause != nil {
				f60.SecondsUntilAutoPause = elem.ScalingConfigurationInfo.SecondsUntilAutoPause
			}
			if elem.ScalingConfigurationInfo.TimeoutAction != nil {
				f60.TimeoutAction = elem.ScalingConfigurationInfo.TimeoutAction
			}
			cr.Status.AtProvider.ScalingConfigurationInfo = f60
		} else {
			cr.Status.AtProvider.ScalingConfigurationInfo = nil
		}
		if elem.ServerlessV2ScalingConfiguration != nil {
			f61 := &svcapitypes.ServerlessV2ScalingConfiguration{}
			if elem.ServerlessV2ScalingConfiguration.MaxCapacity != nil {
				f61.MaxCapacity = elem.ServerlessV2ScalingConfiguration.MaxCapacity
			}
			if elem.ServerlessV2ScalingConfiguration.MinCapacity != nil {
				f61.MinCapacity = elem.ServerlessV2ScalingConfiguration.MinCapacity
			}
			cr.Spec.ForProvider.ServerlessV2ScalingConfiguration = f61
		} else {
			cr.Spec.ForProvider.ServerlessV2ScalingConfiguration = nil
		}
		if elem.Status != nil {
			cr.Status.AtProvider.Status = elem.Status
		} else {
			cr.Status.AtProvider.Status = nil
		}
		if elem.StorageEncrypted != nil {
			cr.Spec.ForProvider.StorageEncrypted = elem.StorageEncrypted
		} else {
			cr.Spec.ForProvider.StorageEncrypted = nil
		}
		if elem.StorageType != nil {
			cr.Spec.ForProvider.StorageType = elem.StorageType
		} else {
			cr.Spec.ForProvider.StorageType = nil
		}
		if elem.TagList != nil {
			f65 := []*svcapitypes.Tag{}
			for _, f65iter := range elem.TagList {
				f65elem := &svcapitypes.Tag{}
				if f65iter.Key != nil {
					f65elem.Key = f65iter.Key
				}
				if f65iter.Value != nil {
					f65elem.Value = f65iter.Value
				}
				f65 = append(f65, f65elem)
			}
			cr.Status.AtProvider.TagList = f65
		} else {
			cr.Status.AtProvider.TagList = nil
		}
		if elem.VpcSecurityGroups != nil {
			f66 := []*svcapitypes.VPCSecurityGroupMembership{}
			for _, f66iter := range elem.VpcSecurityGroups {
				f66elem := &svcapitypes.VPCSecurityGroupMembership{}
				if f66iter.Status != nil {
					f66elem.Status = f66iter.Status
				}
				if f66iter.VpcSecurityGroupId != nil {
					f66elem.VPCSecurityGroupID = f66iter.VpcSecurityGroupId
				}
				f66 = append(f66, f66elem)
			}
			cr.Status.AtProvider.VPCSecurityGroups = f66
		} else {
			cr.Status.AtProvider.VPCSecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateDBClusterInput returns a create input.
func GenerateCreateDBClusterInput(cr *svcapitypes.DBCluster) *svcsdk.CreateDBClusterInput {
	res := &svcsdk.CreateDBClusterInput{}

	if cr.Spec.ForProvider.AllocatedStorage != nil {
		res.SetAllocatedStorage(*cr.Spec.ForProvider.AllocatedStorage)
	}
	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Spec.ForProvider.AvailabilityZones != nil {
		f2 := []*string{}
		for _, f2iter := range cr.Spec.ForProvider.AvailabilityZones {
			var f2elem string
			f2elem = *f2iter
			f2 = append(f2, &f2elem)
		}
		res.SetAvailabilityZones(f2)
	}
	if cr.Spec.ForProvider.BacktrackWindow != nil {
		res.SetBacktrackWindow(*cr.Spec.ForProvider.BacktrackWindow)
	}
	if cr.Spec.ForProvider.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*cr.Spec.ForProvider.BackupRetentionPeriod)
	}
	if cr.Spec.ForProvider.CharacterSetName != nil {
		res.SetCharacterSetName(*cr.Spec.ForProvider.CharacterSetName)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBClusterInstanceClass != nil {
		res.SetDBClusterInstanceClass(*cr.Spec.ForProvider.DBClusterInstanceClass)
	}
	if cr.Spec.ForProvider.DBClusterParameterGroupName != nil {
		res.SetDBClusterParameterGroupName(*cr.Spec.ForProvider.DBClusterParameterGroupName)
	}
	if cr.Spec.ForProvider.DBSubnetGroupName != nil {
		res.SetDBSubnetGroupName(*cr.Spec.ForProvider.DBSubnetGroupName)
	}
	if cr.Spec.ForProvider.DatabaseName != nil {
		res.SetDatabaseName(*cr.Spec.ForProvider.DatabaseName)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.DestinationRegion != nil {
		res.SetDestinationRegion(*cr.Spec.ForProvider.DestinationRegion)
	}
	if cr.Spec.ForProvider.Domain != nil {
		res.SetDomain(*cr.Spec.ForProvider.Domain)
	}
	if cr.Spec.ForProvider.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*cr.Spec.ForProvider.DomainIAMRoleName)
	}
	if cr.Spec.ForProvider.EnableCloudwatchLogsExports != nil {
		f15 := []*string{}
		for _, f15iter := range cr.Spec.ForProvider.EnableCloudwatchLogsExports {
			var f15elem string
			f15elem = *f15iter
			f15 = append(f15, &f15elem)
		}
		res.SetEnableCloudwatchLogsExports(f15)
	}
	if cr.Spec.ForProvider.EnableGlobalWriteForwarding != nil {
		res.SetEnableGlobalWriteForwarding(*cr.Spec.ForProvider.EnableGlobalWriteForwarding)
	}
	if cr.Spec.ForProvider.EnableHTTPEndpoint != nil {
		res.SetEnableHttpEndpoint(*cr.Spec.ForProvider.EnableHTTPEndpoint)
	}
	if cr.Spec.ForProvider.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*cr.Spec.ForProvider.EnableIAMDatabaseAuthentication)
	}
	if cr.Spec.ForProvider.EnablePerformanceInsights != nil {
		res.SetEnablePerformanceInsights(*cr.Spec.ForProvider.EnablePerformanceInsights)
	}
	if cr.Spec.ForProvider.Engine != nil {
		res.SetEngine(*cr.Spec.ForProvider.Engine)
	}
	if cr.Spec.ForProvider.EngineMode != nil {
		res.SetEngineMode(*cr.Spec.ForProvider.EngineMode)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.GlobalClusterIdentifier != nil {
		res.SetGlobalClusterIdentifier(*cr.Spec.ForProvider.GlobalClusterIdentifier)
	}
	if cr.Spec.ForProvider.IOPS != nil {
		res.SetIops(*cr.Spec.ForProvider.IOPS)
	}
	if cr.Spec.ForProvider.KMSKeyID != nil {
		res.SetKmsKeyId(*cr.Spec.ForProvider.KMSKeyID)
	}
	if cr.Spec.ForProvider.MasterUsername != nil {
		res.SetMasterUsername(*cr.Spec.ForProvider.MasterUsername)
	}
	if cr.Spec.ForProvider.MonitoringInterval != nil {
		res.SetMonitoringInterval(*cr.Spec.ForProvider.MonitoringInterval)
	}
	if cr.Spec.ForProvider.MonitoringRoleARN != nil {
		res.SetMonitoringRoleArn(*cr.Spec.ForProvider.MonitoringRoleARN)
	}
	if cr.Spec.ForProvider.OptionGroupName != nil {
		res.SetOptionGroupName(*cr.Spec.ForProvider.OptionGroupName)
	}
	if cr.Spec.ForProvider.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*cr.Spec.ForProvider.PerformanceInsightsKMSKeyID)
	}
	if cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod != nil {
		res.SetPerformanceInsightsRetentionPeriod(*cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod)
	}
	if cr.Spec.ForProvider.Port != nil {
		res.SetPort(*cr.Spec.ForProvider.Port)
	}
	if cr.Spec.ForProvider.PreSignedURL != nil {
		res.SetPreSignedUrl(*cr.Spec.ForProvider.PreSignedURL)
	}
	if cr.Spec.ForProvider.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*cr.Spec.ForProvider.PreferredBackupWindow)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.PubliclyAccessible != nil {
		res.SetPubliclyAccessible(*cr.Spec.ForProvider.PubliclyAccessible)
	}
	if cr.Spec.ForProvider.ReplicationSourceIdentifier != nil {
		res.SetReplicationSourceIdentifier(*cr.Spec.ForProvider.ReplicationSourceIdentifier)
	}
	if cr.Spec.ForProvider.ScalingConfiguration != nil {
		f38 := &svcsdk.ScalingConfiguration{}
		if cr.Spec.ForProvider.ScalingConfiguration.AutoPause != nil {
			f38.SetAutoPause(*cr.Spec.ForProvider.ScalingConfiguration.AutoPause)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.MaxCapacity != nil {
			f38.SetMaxCapacity(*cr.Spec.ForProvider.ScalingConfiguration.MaxCapacity)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.MinCapacity != nil {
			f38.SetMinCapacity(*cr.Spec.ForProvider.ScalingConfiguration.MinCapacity)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.SecondsBeforeTimeout != nil {
			f38.SetSecondsBeforeTimeout(*cr.Spec.ForProvider.ScalingConfiguration.SecondsBeforeTimeout)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.SecondsUntilAutoPause != nil {
			f38.SetSecondsUntilAutoPause(*cr.Spec.ForProvider.ScalingConfiguration.SecondsUntilAutoPause)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.TimeoutAction != nil {
			f38.SetTimeoutAction(*cr.Spec.ForProvider.ScalingConfiguration.TimeoutAction)
		}
		res.SetScalingConfiguration(f38)
	}
	if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration != nil {
		f39 := &svcsdk.ServerlessV2ScalingConfiguration{}
		if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MaxCapacity != nil {
			f39.SetMaxCapacity(*cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MaxCapacity)
		}
		if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MinCapacity != nil {
			f39.SetMinCapacity(*cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MinCapacity)
		}
		res.SetServerlessV2ScalingConfiguration(f39)
	}
	if cr.Spec.ForProvider.SourceRegion != nil {
		res.SetSourceRegion(*cr.Spec.ForProvider.SourceRegion)
	}
	if cr.Spec.ForProvider.StorageEncrypted != nil {
		res.SetStorageEncrypted(*cr.Spec.ForProvider.StorageEncrypted)
	}
	if cr.Spec.ForProvider.StorageType != nil {
		res.SetStorageType(*cr.Spec.ForProvider.StorageType)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f43 := []*svcsdk.Tag{}
		for _, f43iter := range cr.Spec.ForProvider.Tags {
			f43elem := &svcsdk.Tag{}
			if f43iter.Key != nil {
				f43elem.SetKey(*f43iter.Key)
			}
			if f43iter.Value != nil {
				f43elem.SetValue(*f43iter.Value)
			}
			f43 = append(f43, f43elem)
		}
		res.SetTags(f43)
	}

	return res
}

// GenerateModifyDBClusterInput returns an update input.
func GenerateModifyDBClusterInput(cr *svcapitypes.DBCluster) *svcsdk.ModifyDBClusterInput {
	res := &svcsdk.ModifyDBClusterInput{}

	if cr.Spec.ForProvider.AllocatedStorage != nil {
		res.SetAllocatedStorage(*cr.Spec.ForProvider.AllocatedStorage)
	}
	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Spec.ForProvider.BacktrackWindow != nil {
		res.SetBacktrackWindow(*cr.Spec.ForProvider.BacktrackWindow)
	}
	if cr.Spec.ForProvider.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*cr.Spec.ForProvider.BackupRetentionPeriod)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBClusterInstanceClass != nil {
		res.SetDBClusterInstanceClass(*cr.Spec.ForProvider.DBClusterInstanceClass)
	}
	if cr.Spec.ForProvider.DBClusterParameterGroupName != nil {
		res.SetDBClusterParameterGroupName(*cr.Spec.ForProvider.DBClusterParameterGroupName)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.Domain != nil {
		res.SetDomain(*cr.Spec.ForProvider.Domain)
	}
	if cr.Spec.ForProvider.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*cr.Spec.ForProvider.DomainIAMRoleName)
	}
	if cr.Spec.ForProvider.EnableGlobalWriteForwarding != nil {
		res.SetEnableGlobalWriteForwarding(*cr.Spec.ForProvider.EnableGlobalWriteForwarding)
	}
	if cr.Spec.ForProvider.EnableHTTPEndpoint != nil {
		res.SetEnableHttpEndpoint(*cr.Spec.ForProvider.EnableHTTPEndpoint)
	}
	if cr.Spec.ForProvider.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*cr.Spec.ForProvider.EnableIAMDatabaseAuthentication)
	}
	if cr.Spec.ForProvider.EnablePerformanceInsights != nil {
		res.SetEnablePerformanceInsights(*cr.Spec.ForProvider.EnablePerformanceInsights)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.IOPS != nil {
		res.SetIops(*cr.Spec.ForProvider.IOPS)
	}
	if cr.Spec.ForProvider.MonitoringInterval != nil {
		res.SetMonitoringInterval(*cr.Spec.ForProvider.MonitoringInterval)
	}
	if cr.Spec.ForProvider.MonitoringRoleARN != nil {
		res.SetMonitoringRoleArn(*cr.Spec.ForProvider.MonitoringRoleARN)
	}
	if cr.Spec.ForProvider.OptionGroupName != nil {
		res.SetOptionGroupName(*cr.Spec.ForProvider.OptionGroupName)
	}
	if cr.Spec.ForProvider.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*cr.Spec.ForProvider.PerformanceInsightsKMSKeyID)
	}
	if cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod != nil {
		res.SetPerformanceInsightsRetentionPeriod(*cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod)
	}
	if cr.Spec.ForProvider.Port != nil {
		res.SetPort(*cr.Spec.ForProvider.Port)
	}
	if cr.Spec.ForProvider.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*cr.Spec.ForProvider.PreferredBackupWindow)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.ScalingConfiguration != nil {
		f29 := &svcsdk.ScalingConfiguration{}
		if cr.Spec.ForProvider.ScalingConfiguration.AutoPause != nil {
			f29.SetAutoPause(*cr.Spec.ForProvider.ScalingConfiguration.AutoPause)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.MaxCapacity != nil {
			f29.SetMaxCapacity(*cr.Spec.ForProvider.ScalingConfiguration.MaxCapacity)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.MinCapacity != nil {
			f29.SetMinCapacity(*cr.Spec.ForProvider.ScalingConfiguration.MinCapacity)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.SecondsBeforeTimeout != nil {
			f29.SetSecondsBeforeTimeout(*cr.Spec.ForProvider.ScalingConfiguration.SecondsBeforeTimeout)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.SecondsUntilAutoPause != nil {
			f29.SetSecondsUntilAutoPause(*cr.Spec.ForProvider.ScalingConfiguration.SecondsUntilAutoPause)
		}
		if cr.Spec.ForProvider.ScalingConfiguration.TimeoutAction != nil {
			f29.SetTimeoutAction(*cr.Spec.ForProvider.ScalingConfiguration.TimeoutAction)
		}
		res.SetScalingConfiguration(f29)
	}
	if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration != nil {
		f30 := &svcsdk.ServerlessV2ScalingConfiguration{}
		if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MaxCapacity != nil {
			f30.SetMaxCapacity(*cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MaxCapacity)
		}
		if cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MinCapacity != nil {
			f30.SetMinCapacity(*cr.Spec.ForProvider.ServerlessV2ScalingConfiguration.MinCapacity)
		}
		res.SetServerlessV2ScalingConfiguration(f30)
	}
	if cr.Spec.ForProvider.StorageType != nil {
		res.SetStorageType(*cr.Spec.ForProvider.StorageType)
	}

	return res
}

// GenerateDeleteDBClusterInput returns a deletion input.
func GenerateDeleteDBClusterInput(cr *svcapitypes.DBCluster) *svcsdk.DeleteDBClusterInput {
	res := &svcsdk.DeleteDBClusterInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "DBClusterNotFoundFault"
}
