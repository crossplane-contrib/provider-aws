/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package dbinstance

import (
	"context"

	svcapi "github.com/aws/aws-sdk-go/service/rds"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	svcsdkapi "github.com/aws/aws-sdk-go/service/rds/rdsiface"
	"github.com/google/go-cmp/cmp"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/meta"
	"github.com/crossplane/crossplane-runtime/pkg/reconciler/managed"
	cpresource "github.com/crossplane/crossplane-runtime/pkg/resource"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/rds/v1alpha1"
	awsclient "github.com/crossplane-contrib/provider-aws/pkg/clients"
)

const (
	errUnexpectedObject = "managed resource is not an DBInstance resource"

	errCreateSession = "cannot create a new session"
	errCreate        = "cannot create DBInstance in AWS"
	errUpdate        = "cannot update DBInstance in AWS"
	errDescribe      = "failed to describe DBInstance"
	errDelete        = "failed to delete DBInstance"
)

type connector struct {
	kube client.Client
	opts []option
}

func (c *connector) Connect(ctx context.Context, mg cpresource.Managed) (managed.ExternalClient, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return nil, errors.New(errUnexpectedObject)
	}
	sess, err := awsclient.GetConfigV1(ctx, c.kube, mg, cr.Spec.ForProvider.Region)
	if err != nil {
		return nil, errors.Wrap(err, errCreateSession)
	}
	return newExternal(c.kube, svcapi.New(sess), c.opts), nil
}

func (e *external) Observe(ctx context.Context, mg cpresource.Managed) (managed.ExternalObservation, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return managed.ExternalObservation{}, errors.New(errUnexpectedObject)
	}
	if meta.GetExternalName(cr) == "" {
		return managed.ExternalObservation{
			ResourceExists: false,
		}, nil
	}
	input := GenerateDescribeDBInstancesInput(cr)
	if err := e.preObserve(ctx, cr, input); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "pre-observe failed")
	}
	resp, err := e.client.DescribeDBInstancesWithContext(ctx, input)
	if err != nil {
		return managed.ExternalObservation{ResourceExists: false}, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDescribe)
	}
	resp = e.filterList(cr, resp)
	if len(resp.DBInstances) == 0 {
		return managed.ExternalObservation{ResourceExists: false}, nil
	}
	currentSpec := cr.Spec.ForProvider.DeepCopy()
	if err := e.lateInitialize(&cr.Spec.ForProvider, resp); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "late-init failed")
	}
	GenerateDBInstance(resp).Status.AtProvider.DeepCopyInto(&cr.Status.AtProvider)

	upToDate, err := e.isUpToDate(cr, resp)
	if err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "isUpToDate check failed")
	}
	return e.postObserve(ctx, cr, resp, managed.ExternalObservation{
		ResourceExists:          true,
		ResourceUpToDate:        upToDate,
		ResourceLateInitialized: !cmp.Equal(&cr.Spec.ForProvider, currentSpec),
	}, nil)
}

func (e *external) Create(ctx context.Context, mg cpresource.Managed) (managed.ExternalCreation, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return managed.ExternalCreation{}, errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Creating())
	input := GenerateCreateDBInstanceInput(cr)
	if err := e.preCreate(ctx, cr, input); err != nil {
		return managed.ExternalCreation{}, errors.Wrap(err, "pre-create failed")
	}
	resp, err := e.client.CreateDBInstanceWithContext(ctx, input)
	if err != nil {
		return managed.ExternalCreation{}, awsclient.Wrap(err, errCreate)
	}

	if resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded != nil {
		cr.Status.AtProvider.ActivityStreamEngineNativeAuditFieldsIncluded = resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded
	} else {
		cr.Status.AtProvider.ActivityStreamEngineNativeAuditFieldsIncluded = nil
	}
	if resp.DBInstance.ActivityStreamKinesisStreamName != nil {
		cr.Status.AtProvider.ActivityStreamKinesisStreamName = resp.DBInstance.ActivityStreamKinesisStreamName
	} else {
		cr.Status.AtProvider.ActivityStreamKinesisStreamName = nil
	}
	if resp.DBInstance.ActivityStreamKmsKeyId != nil {
		cr.Status.AtProvider.ActivityStreamKMSKeyID = resp.DBInstance.ActivityStreamKmsKeyId
	} else {
		cr.Status.AtProvider.ActivityStreamKMSKeyID = nil
	}
	if resp.DBInstance.ActivityStreamMode != nil {
		cr.Status.AtProvider.ActivityStreamMode = resp.DBInstance.ActivityStreamMode
	} else {
		cr.Status.AtProvider.ActivityStreamMode = nil
	}
	if resp.DBInstance.ActivityStreamStatus != nil {
		cr.Status.AtProvider.ActivityStreamStatus = resp.DBInstance.ActivityStreamStatus
	} else {
		cr.Status.AtProvider.ActivityStreamStatus = nil
	}
	if resp.DBInstance.AllocatedStorage != nil {
		cr.Spec.ForProvider.AllocatedStorage = resp.DBInstance.AllocatedStorage
	} else {
		cr.Spec.ForProvider.AllocatedStorage = nil
	}
	if resp.DBInstance.AssociatedRoles != nil {
		f6 := []*svcapitypes.DBInstanceRole{}
		for _, f6iter := range resp.DBInstance.AssociatedRoles {
			f6elem := &svcapitypes.DBInstanceRole{}
			if f6iter.FeatureName != nil {
				f6elem.FeatureName = f6iter.FeatureName
			}
			if f6iter.RoleArn != nil {
				f6elem.RoleARN = f6iter.RoleArn
			}
			if f6iter.Status != nil {
				f6elem.Status = f6iter.Status
			}
			f6 = append(f6, f6elem)
		}
		cr.Status.AtProvider.AssociatedRoles = f6
	} else {
		cr.Status.AtProvider.AssociatedRoles = nil
	}
	if resp.DBInstance.AutoMinorVersionUpgrade != nil {
		cr.Spec.ForProvider.AutoMinorVersionUpgrade = resp.DBInstance.AutoMinorVersionUpgrade
	} else {
		cr.Spec.ForProvider.AutoMinorVersionUpgrade = nil
	}
	if resp.DBInstance.AutomaticRestartTime != nil {
		cr.Status.AtProvider.AutomaticRestartTime = &metav1.Time{*resp.DBInstance.AutomaticRestartTime}
	} else {
		cr.Status.AtProvider.AutomaticRestartTime = nil
	}
	if resp.DBInstance.AutomationMode != nil {
		cr.Status.AtProvider.AutomationMode = resp.DBInstance.AutomationMode
	} else {
		cr.Status.AtProvider.AutomationMode = nil
	}
	if resp.DBInstance.AvailabilityZone != nil {
		cr.Spec.ForProvider.AvailabilityZone = resp.DBInstance.AvailabilityZone
	} else {
		cr.Spec.ForProvider.AvailabilityZone = nil
	}
	if resp.DBInstance.AwsBackupRecoveryPointArn != nil {
		cr.Status.AtProvider.AWSBackupRecoveryPointARN = resp.DBInstance.AwsBackupRecoveryPointArn
	} else {
		cr.Status.AtProvider.AWSBackupRecoveryPointARN = nil
	}
	if resp.DBInstance.BackupRetentionPeriod != nil {
		cr.Spec.ForProvider.BackupRetentionPeriod = resp.DBInstance.BackupRetentionPeriod
	} else {
		cr.Spec.ForProvider.BackupRetentionPeriod = nil
	}
	if resp.DBInstance.BackupTarget != nil {
		cr.Spec.ForProvider.BackupTarget = resp.DBInstance.BackupTarget
	} else {
		cr.Spec.ForProvider.BackupTarget = nil
	}
	if resp.DBInstance.CACertificateIdentifier != nil {
		cr.Status.AtProvider.CACertificateIdentifier = resp.DBInstance.CACertificateIdentifier
	} else {
		cr.Status.AtProvider.CACertificateIdentifier = nil
	}
	if resp.DBInstance.CharacterSetName != nil {
		cr.Spec.ForProvider.CharacterSetName = resp.DBInstance.CharacterSetName
	} else {
		cr.Spec.ForProvider.CharacterSetName = nil
	}
	if resp.DBInstance.CopyTagsToSnapshot != nil {
		cr.Spec.ForProvider.CopyTagsToSnapshot = resp.DBInstance.CopyTagsToSnapshot
	} else {
		cr.Spec.ForProvider.CopyTagsToSnapshot = nil
	}
	if resp.DBInstance.CustomIamInstanceProfile != nil {
		cr.Spec.ForProvider.CustomIAMInstanceProfile = resp.DBInstance.CustomIamInstanceProfile
	} else {
		cr.Spec.ForProvider.CustomIAMInstanceProfile = nil
	}
	if resp.DBInstance.CustomerOwnedIpEnabled != nil {
		cr.Status.AtProvider.CustomerOwnedIPEnabled = resp.DBInstance.CustomerOwnedIpEnabled
	} else {
		cr.Status.AtProvider.CustomerOwnedIPEnabled = nil
	}
	if resp.DBInstance.DBClusterIdentifier != nil {
		cr.Spec.ForProvider.DBClusterIdentifier = resp.DBInstance.DBClusterIdentifier
	} else {
		cr.Spec.ForProvider.DBClusterIdentifier = nil
	}
	if resp.DBInstance.DBInstanceArn != nil {
		cr.Status.AtProvider.DBInstanceARN = resp.DBInstance.DBInstanceArn
	} else {
		cr.Status.AtProvider.DBInstanceARN = nil
	}
	if resp.DBInstance.DBInstanceAutomatedBackupsReplications != nil {
		f21 := []*svcapitypes.DBInstanceAutomatedBackupsReplication{}
		for _, f21iter := range resp.DBInstance.DBInstanceAutomatedBackupsReplications {
			f21elem := &svcapitypes.DBInstanceAutomatedBackupsReplication{}
			if f21iter.DBInstanceAutomatedBackupsArn != nil {
				f21elem.DBInstanceAutomatedBackupsARN = f21iter.DBInstanceAutomatedBackupsArn
			}
			f21 = append(f21, f21elem)
		}
		cr.Status.AtProvider.DBInstanceAutomatedBackupsReplications = f21
	} else {
		cr.Status.AtProvider.DBInstanceAutomatedBackupsReplications = nil
	}
	if resp.DBInstance.DBInstanceClass != nil {
		cr.Spec.ForProvider.DBInstanceClass = resp.DBInstance.DBInstanceClass
	} else {
		cr.Spec.ForProvider.DBInstanceClass = nil
	}
	if resp.DBInstance.DBInstanceIdentifier != nil {
		cr.Status.AtProvider.DBInstanceIdentifier = resp.DBInstance.DBInstanceIdentifier
	} else {
		cr.Status.AtProvider.DBInstanceIdentifier = nil
	}
	if resp.DBInstance.DBInstanceStatus != nil {
		cr.Status.AtProvider.DBInstanceStatus = resp.DBInstance.DBInstanceStatus
	} else {
		cr.Status.AtProvider.DBInstanceStatus = nil
	}
	if resp.DBInstance.DBName != nil {
		cr.Spec.ForProvider.DBName = resp.DBInstance.DBName
	} else {
		cr.Spec.ForProvider.DBName = nil
	}
	if resp.DBInstance.DBParameterGroups != nil {
		f26 := []*svcapitypes.DBParameterGroupStatus_SDK{}
		for _, f26iter := range resp.DBInstance.DBParameterGroups {
			f26elem := &svcapitypes.DBParameterGroupStatus_SDK{}
			if f26iter.DBParameterGroupName != nil {
				f26elem.DBParameterGroupName = f26iter.DBParameterGroupName
			}
			if f26iter.ParameterApplyStatus != nil {
				f26elem.ParameterApplyStatus = f26iter.ParameterApplyStatus
			}
			f26 = append(f26, f26elem)
		}
		cr.Status.AtProvider.DBParameterGroups = f26
	} else {
		cr.Status.AtProvider.DBParameterGroups = nil
	}
	if resp.DBInstance.DBSecurityGroups != nil {
		f27 := []*svcapitypes.DBSecurityGroupMembership{}
		for _, f27iter := range resp.DBInstance.DBSecurityGroups {
			f27elem := &svcapitypes.DBSecurityGroupMembership{}
			if f27iter.DBSecurityGroupName != nil {
				f27elem.DBSecurityGroupName = f27iter.DBSecurityGroupName
			}
			if f27iter.Status != nil {
				f27elem.Status = f27iter.Status
			}
			f27 = append(f27, f27elem)
		}
		cr.Status.AtProvider.DBSecurityGroups = f27
	} else {
		cr.Status.AtProvider.DBSecurityGroups = nil
	}
	if resp.DBInstance.DBSubnetGroup != nil {
		f28 := &svcapitypes.DBSubnetGroup{}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn != nil {
			f28.DBSubnetGroupARN = resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription != nil {
			f28.DBSubnetGroupDescription = resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupName != nil {
			f28.DBSubnetGroupName = resp.DBInstance.DBSubnetGroup.DBSubnetGroupName
		}
		if resp.DBInstance.DBSubnetGroup.SubnetGroupStatus != nil {
			f28.SubnetGroupStatus = resp.DBInstance.DBSubnetGroup.SubnetGroupStatus
		}
		if resp.DBInstance.DBSubnetGroup.Subnets != nil {
			f28f4 := []*svcapitypes.Subnet{}
			for _, f28f4iter := range resp.DBInstance.DBSubnetGroup.Subnets {
				f28f4elem := &svcapitypes.Subnet{}
				if f28f4iter.SubnetAvailabilityZone != nil {
					f28f4elemf0 := &svcapitypes.AvailabilityZone{}
					if f28f4iter.SubnetAvailabilityZone.Name != nil {
						f28f4elemf0.Name = f28f4iter.SubnetAvailabilityZone.Name
					}
					f28f4elem.SubnetAvailabilityZone = f28f4elemf0
				}
				if f28f4iter.SubnetIdentifier != nil {
					f28f4elem.SubnetIdentifier = f28f4iter.SubnetIdentifier
				}
				if f28f4iter.SubnetOutpost != nil {
					f28f4elemf2 := &svcapitypes.Outpost{}
					if f28f4iter.SubnetOutpost.Arn != nil {
						f28f4elemf2.ARN = f28f4iter.SubnetOutpost.Arn
					}
					f28f4elem.SubnetOutpost = f28f4elemf2
				}
				if f28f4iter.SubnetStatus != nil {
					f28f4elem.SubnetStatus = f28f4iter.SubnetStatus
				}
				f28f4 = append(f28f4, f28f4elem)
			}
			f28.Subnets = f28f4
		}
		if resp.DBInstance.DBSubnetGroup.VpcId != nil {
			f28.VPCID = resp.DBInstance.DBSubnetGroup.VpcId
		}
		cr.Status.AtProvider.DBSubnetGroup = f28
	} else {
		cr.Status.AtProvider.DBSubnetGroup = nil
	}
	if resp.DBInstance.DbInstancePort != nil {
		cr.Status.AtProvider.DBInstancePort = resp.DBInstance.DbInstancePort
	} else {
		cr.Status.AtProvider.DBInstancePort = nil
	}
	if resp.DBInstance.DbiResourceId != nil {
		cr.Status.AtProvider.DBIResourceID = resp.DBInstance.DbiResourceId
	} else {
		cr.Status.AtProvider.DBIResourceID = nil
	}
	if resp.DBInstance.DeletionProtection != nil {
		cr.Spec.ForProvider.DeletionProtection = resp.DBInstance.DeletionProtection
	} else {
		cr.Spec.ForProvider.DeletionProtection = nil
	}
	if resp.DBInstance.DomainMemberships != nil {
		f32 := []*svcapitypes.DomainMembership{}
		for _, f32iter := range resp.DBInstance.DomainMemberships {
			f32elem := &svcapitypes.DomainMembership{}
			if f32iter.Domain != nil {
				f32elem.Domain = f32iter.Domain
			}
			if f32iter.FQDN != nil {
				f32elem.FQDN = f32iter.FQDN
			}
			if f32iter.IAMRoleName != nil {
				f32elem.IAMRoleName = f32iter.IAMRoleName
			}
			if f32iter.Status != nil {
				f32elem.Status = f32iter.Status
			}
			f32 = append(f32, f32elem)
		}
		cr.Status.AtProvider.DomainMemberships = f32
	} else {
		cr.Status.AtProvider.DomainMemberships = nil
	}
	if resp.DBInstance.EnabledCloudwatchLogsExports != nil {
		f33 := []*string{}
		for _, f33iter := range resp.DBInstance.EnabledCloudwatchLogsExports {
			var f33elem string
			f33elem = *f33iter
			f33 = append(f33, &f33elem)
		}
		cr.Status.AtProvider.EnabledCloudwatchLogsExports = f33
	} else {
		cr.Status.AtProvider.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBInstance.Endpoint != nil {
		f34 := &svcapitypes.Endpoint{}
		if resp.DBInstance.Endpoint.Address != nil {
			f34.Address = resp.DBInstance.Endpoint.Address
		}
		if resp.DBInstance.Endpoint.HostedZoneId != nil {
			f34.HostedZoneID = resp.DBInstance.Endpoint.HostedZoneId
		}
		if resp.DBInstance.Endpoint.Port != nil {
			f34.Port = resp.DBInstance.Endpoint.Port
		}
		cr.Status.AtProvider.Endpoint = f34
	} else {
		cr.Status.AtProvider.Endpoint = nil
	}
	if resp.DBInstance.Engine != nil {
		cr.Spec.ForProvider.Engine = resp.DBInstance.Engine
	} else {
		cr.Spec.ForProvider.Engine = nil
	}
	if resp.DBInstance.EngineVersion != nil {
		cr.Spec.ForProvider.EngineVersion = resp.DBInstance.EngineVersion
	} else {
		cr.Spec.ForProvider.EngineVersion = nil
	}
	if resp.DBInstance.EnhancedMonitoringResourceArn != nil {
		cr.Status.AtProvider.EnhancedMonitoringResourceARN = resp.DBInstance.EnhancedMonitoringResourceArn
	} else {
		cr.Status.AtProvider.EnhancedMonitoringResourceARN = nil
	}
	if resp.DBInstance.IAMDatabaseAuthenticationEnabled != nil {
		cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = resp.DBInstance.IAMDatabaseAuthenticationEnabled
	} else {
		cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = nil
	}
	if resp.DBInstance.InstanceCreateTime != nil {
		cr.Status.AtProvider.InstanceCreateTime = &metav1.Time{*resp.DBInstance.InstanceCreateTime}
	} else {
		cr.Status.AtProvider.InstanceCreateTime = nil
	}
	if resp.DBInstance.Iops != nil {
		cr.Spec.ForProvider.IOPS = resp.DBInstance.Iops
	} else {
		cr.Spec.ForProvider.IOPS = nil
	}
	if resp.DBInstance.KmsKeyId != nil {
		cr.Spec.ForProvider.KMSKeyID = resp.DBInstance.KmsKeyId
	} else {
		cr.Spec.ForProvider.KMSKeyID = nil
	}
	if resp.DBInstance.LatestRestorableTime != nil {
		cr.Status.AtProvider.LatestRestorableTime = &metav1.Time{*resp.DBInstance.LatestRestorableTime}
	} else {
		cr.Status.AtProvider.LatestRestorableTime = nil
	}
	if resp.DBInstance.LicenseModel != nil {
		cr.Spec.ForProvider.LicenseModel = resp.DBInstance.LicenseModel
	} else {
		cr.Spec.ForProvider.LicenseModel = nil
	}
	if resp.DBInstance.ListenerEndpoint != nil {
		f44 := &svcapitypes.Endpoint{}
		if resp.DBInstance.ListenerEndpoint.Address != nil {
			f44.Address = resp.DBInstance.ListenerEndpoint.Address
		}
		if resp.DBInstance.ListenerEndpoint.HostedZoneId != nil {
			f44.HostedZoneID = resp.DBInstance.ListenerEndpoint.HostedZoneId
		}
		if resp.DBInstance.ListenerEndpoint.Port != nil {
			f44.Port = resp.DBInstance.ListenerEndpoint.Port
		}
		cr.Status.AtProvider.ListenerEndpoint = f44
	} else {
		cr.Status.AtProvider.ListenerEndpoint = nil
	}
	if resp.DBInstance.MasterUsername != nil {
		cr.Spec.ForProvider.MasterUsername = resp.DBInstance.MasterUsername
	} else {
		cr.Spec.ForProvider.MasterUsername = nil
	}
	if resp.DBInstance.MaxAllocatedStorage != nil {
		cr.Spec.ForProvider.MaxAllocatedStorage = resp.DBInstance.MaxAllocatedStorage
	} else {
		cr.Spec.ForProvider.MaxAllocatedStorage = nil
	}
	if resp.DBInstance.MonitoringInterval != nil {
		cr.Spec.ForProvider.MonitoringInterval = resp.DBInstance.MonitoringInterval
	} else {
		cr.Spec.ForProvider.MonitoringInterval = nil
	}
	if resp.DBInstance.MonitoringRoleArn != nil {
		cr.Spec.ForProvider.MonitoringRoleARN = resp.DBInstance.MonitoringRoleArn
	} else {
		cr.Spec.ForProvider.MonitoringRoleARN = nil
	}
	if resp.DBInstance.MultiAZ != nil {
		cr.Spec.ForProvider.MultiAZ = resp.DBInstance.MultiAZ
	} else {
		cr.Spec.ForProvider.MultiAZ = nil
	}
	if resp.DBInstance.NcharCharacterSetName != nil {
		cr.Spec.ForProvider.NcharCharacterSetName = resp.DBInstance.NcharCharacterSetName
	} else {
		cr.Spec.ForProvider.NcharCharacterSetName = nil
	}
	if resp.DBInstance.OptionGroupMemberships != nil {
		f51 := []*svcapitypes.OptionGroupMembership{}
		for _, f51iter := range resp.DBInstance.OptionGroupMemberships {
			f51elem := &svcapitypes.OptionGroupMembership{}
			if f51iter.OptionGroupName != nil {
				f51elem.OptionGroupName = f51iter.OptionGroupName
			}
			if f51iter.Status != nil {
				f51elem.Status = f51iter.Status
			}
			f51 = append(f51, f51elem)
		}
		cr.Status.AtProvider.OptionGroupMemberships = f51
	} else {
		cr.Status.AtProvider.OptionGroupMemberships = nil
	}
	if resp.DBInstance.PendingModifiedValues != nil {
		f52 := &svcapitypes.PendingModifiedValues{}
		if resp.DBInstance.PendingModifiedValues.AllocatedStorage != nil {
			f52.AllocatedStorage = resp.DBInstance.PendingModifiedValues.AllocatedStorage
		}
		if resp.DBInstance.PendingModifiedValues.AutomationMode != nil {
			f52.AutomationMode = resp.DBInstance.PendingModifiedValues.AutomationMode
		}
		if resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod != nil {
			f52.BackupRetentionPeriod = resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod
		}
		if resp.DBInstance.PendingModifiedValues.CACertificateIdentifier != nil {
			f52.CACertificateIdentifier = resp.DBInstance.PendingModifiedValues.CACertificateIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceClass != nil {
			f52.DBInstanceClass = resp.DBInstance.PendingModifiedValues.DBInstanceClass
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier != nil {
			f52.DBInstanceIdentifier = resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBSubnetGroupName != nil {
			f52.DBSubnetGroupName = resp.DBInstance.PendingModifiedValues.DBSubnetGroupName
		}
		if resp.DBInstance.PendingModifiedValues.EngineVersion != nil {
			f52.EngineVersion = resp.DBInstance.PendingModifiedValues.EngineVersion
		}
		if resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
			f52.IAMDatabaseAuthenticationEnabled = resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
		}
		if resp.DBInstance.PendingModifiedValues.Iops != nil {
			f52.IOPS = resp.DBInstance.PendingModifiedValues.Iops
		}
		if resp.DBInstance.PendingModifiedValues.LicenseModel != nil {
			f52.LicenseModel = resp.DBInstance.PendingModifiedValues.LicenseModel
		}
		if resp.DBInstance.PendingModifiedValues.MasterUserPassword != nil {
			f52.MasterUserPassword = resp.DBInstance.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBInstance.PendingModifiedValues.MultiAZ != nil {
			f52.MultiAZ = resp.DBInstance.PendingModifiedValues.MultiAZ
		}
		if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f52f13 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f52f13f0 := []*string{}
				for _, f52f13f0iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
					var f52f13f0elem string
					f52f13f0elem = *f52f13f0iter
					f52f13f0 = append(f52f13f0, &f52f13f0elem)
				}
				f52f13.LogTypesToDisable = f52f13f0
			}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f52f13f1 := []*string{}
				for _, f52f13f1iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
					var f52f13f1elem string
					f52f13f1elem = *f52f13f1iter
					f52f13f1 = append(f52f13f1, &f52f13f1elem)
				}
				f52f13.LogTypesToEnable = f52f13f1
			}
			f52.PendingCloudwatchLogsExports = f52f13
		}
		if resp.DBInstance.PendingModifiedValues.Port != nil {
			f52.Port = resp.DBInstance.PendingModifiedValues.Port
		}
		if resp.DBInstance.PendingModifiedValues.ProcessorFeatures != nil {
			f52f15 := []*svcapitypes.ProcessorFeature{}
			for _, f52f15iter := range resp.DBInstance.PendingModifiedValues.ProcessorFeatures {
				f52f15elem := &svcapitypes.ProcessorFeature{}
				if f52f15iter.Name != nil {
					f52f15elem.Name = f52f15iter.Name
				}
				if f52f15iter.Value != nil {
					f52f15elem.Value = f52f15iter.Value
				}
				f52f15 = append(f52f15, f52f15elem)
			}
			f52.ProcessorFeatures = f52f15
		}
		if resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime != nil {
			f52.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime}
		}
		if resp.DBInstance.PendingModifiedValues.StorageType != nil {
			f52.StorageType = resp.DBInstance.PendingModifiedValues.StorageType
		}
		cr.Status.AtProvider.PendingModifiedValues = f52
	} else {
		cr.Status.AtProvider.PendingModifiedValues = nil
	}
	if resp.DBInstance.PerformanceInsightsEnabled != nil {
		cr.Status.AtProvider.PerformanceInsightsEnabled = resp.DBInstance.PerformanceInsightsEnabled
	} else {
		cr.Status.AtProvider.PerformanceInsightsEnabled = nil
	}
	if resp.DBInstance.PerformanceInsightsKMSKeyId != nil {
		cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = resp.DBInstance.PerformanceInsightsKMSKeyId
	} else {
		cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = nil
	}
	if resp.DBInstance.PerformanceInsightsRetentionPeriod != nil {
		cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod = resp.DBInstance.PerformanceInsightsRetentionPeriod
	} else {
		cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod = nil
	}
	if resp.DBInstance.PreferredBackupWindow != nil {
		cr.Spec.ForProvider.PreferredBackupWindow = resp.DBInstance.PreferredBackupWindow
	} else {
		cr.Spec.ForProvider.PreferredBackupWindow = nil
	}
	if resp.DBInstance.PreferredMaintenanceWindow != nil {
		cr.Spec.ForProvider.PreferredMaintenanceWindow = resp.DBInstance.PreferredMaintenanceWindow
	} else {
		cr.Spec.ForProvider.PreferredMaintenanceWindow = nil
	}
	if resp.DBInstance.ProcessorFeatures != nil {
		f58 := []*svcapitypes.ProcessorFeature{}
		for _, f58iter := range resp.DBInstance.ProcessorFeatures {
			f58elem := &svcapitypes.ProcessorFeature{}
			if f58iter.Name != nil {
				f58elem.Name = f58iter.Name
			}
			if f58iter.Value != nil {
				f58elem.Value = f58iter.Value
			}
			f58 = append(f58, f58elem)
		}
		cr.Spec.ForProvider.ProcessorFeatures = f58
	} else {
		cr.Spec.ForProvider.ProcessorFeatures = nil
	}
	if resp.DBInstance.PromotionTier != nil {
		cr.Spec.ForProvider.PromotionTier = resp.DBInstance.PromotionTier
	} else {
		cr.Spec.ForProvider.PromotionTier = nil
	}
	if resp.DBInstance.PubliclyAccessible != nil {
		cr.Spec.ForProvider.PubliclyAccessible = resp.DBInstance.PubliclyAccessible
	} else {
		cr.Spec.ForProvider.PubliclyAccessible = nil
	}
	if resp.DBInstance.ReadReplicaDBClusterIdentifiers != nil {
		f61 := []*string{}
		for _, f61iter := range resp.DBInstance.ReadReplicaDBClusterIdentifiers {
			var f61elem string
			f61elem = *f61iter
			f61 = append(f61, &f61elem)
		}
		cr.Status.AtProvider.ReadReplicaDBClusterIdentifiers = f61
	} else {
		cr.Status.AtProvider.ReadReplicaDBClusterIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaDBInstanceIdentifiers != nil {
		f62 := []*string{}
		for _, f62iter := range resp.DBInstance.ReadReplicaDBInstanceIdentifiers {
			var f62elem string
			f62elem = *f62iter
			f62 = append(f62, &f62elem)
		}
		cr.Status.AtProvider.ReadReplicaDBInstanceIdentifiers = f62
	} else {
		cr.Status.AtProvider.ReadReplicaDBInstanceIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier != nil {
		cr.Status.AtProvider.ReadReplicaSourceDBInstanceIdentifier = resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier
	} else {
		cr.Status.AtProvider.ReadReplicaSourceDBInstanceIdentifier = nil
	}
	if resp.DBInstance.ReplicaMode != nil {
		cr.Status.AtProvider.ReplicaMode = resp.DBInstance.ReplicaMode
	} else {
		cr.Status.AtProvider.ReplicaMode = nil
	}
	if resp.DBInstance.ResumeFullAutomationModeTime != nil {
		cr.Status.AtProvider.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.ResumeFullAutomationModeTime}
	} else {
		cr.Status.AtProvider.ResumeFullAutomationModeTime = nil
	}
	if resp.DBInstance.SecondaryAvailabilityZone != nil {
		cr.Status.AtProvider.SecondaryAvailabilityZone = resp.DBInstance.SecondaryAvailabilityZone
	} else {
		cr.Status.AtProvider.SecondaryAvailabilityZone = nil
	}
	if resp.DBInstance.StatusInfos != nil {
		f67 := []*svcapitypes.DBInstanceStatusInfo{}
		for _, f67iter := range resp.DBInstance.StatusInfos {
			f67elem := &svcapitypes.DBInstanceStatusInfo{}
			if f67iter.Message != nil {
				f67elem.Message = f67iter.Message
			}
			if f67iter.Normal != nil {
				f67elem.Normal = f67iter.Normal
			}
			if f67iter.Status != nil {
				f67elem.Status = f67iter.Status
			}
			if f67iter.StatusType != nil {
				f67elem.StatusType = f67iter.StatusType
			}
			f67 = append(f67, f67elem)
		}
		cr.Status.AtProvider.StatusInfos = f67
	} else {
		cr.Status.AtProvider.StatusInfos = nil
	}
	if resp.DBInstance.StorageEncrypted != nil {
		cr.Spec.ForProvider.StorageEncrypted = resp.DBInstance.StorageEncrypted
	} else {
		cr.Spec.ForProvider.StorageEncrypted = nil
	}
	if resp.DBInstance.StorageType != nil {
		cr.Spec.ForProvider.StorageType = resp.DBInstance.StorageType
	} else {
		cr.Spec.ForProvider.StorageType = nil
	}
	if resp.DBInstance.TagList != nil {
		f70 := []*svcapitypes.Tag{}
		for _, f70iter := range resp.DBInstance.TagList {
			f70elem := &svcapitypes.Tag{}
			if f70iter.Key != nil {
				f70elem.Key = f70iter.Key
			}
			if f70iter.Value != nil {
				f70elem.Value = f70iter.Value
			}
			f70 = append(f70, f70elem)
		}
		cr.Status.AtProvider.TagList = f70
	} else {
		cr.Status.AtProvider.TagList = nil
	}
	if resp.DBInstance.TdeCredentialArn != nil {
		cr.Spec.ForProvider.TDECredentialARN = resp.DBInstance.TdeCredentialArn
	} else {
		cr.Spec.ForProvider.TDECredentialARN = nil
	}
	if resp.DBInstance.Timezone != nil {
		cr.Spec.ForProvider.Timezone = resp.DBInstance.Timezone
	} else {
		cr.Spec.ForProvider.Timezone = nil
	}
	if resp.DBInstance.VpcSecurityGroups != nil {
		f73 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f73iter := range resp.DBInstance.VpcSecurityGroups {
			f73elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f73iter.Status != nil {
				f73elem.Status = f73iter.Status
			}
			if f73iter.VpcSecurityGroupId != nil {
				f73elem.VPCSecurityGroupID = f73iter.VpcSecurityGroupId
			}
			f73 = append(f73, f73elem)
		}
		cr.Status.AtProvider.VPCSecurityGroups = f73
	} else {
		cr.Status.AtProvider.VPCSecurityGroups = nil
	}

	return e.postCreate(ctx, cr, resp, managed.ExternalCreation{}, err)
}

func (e *external) Update(ctx context.Context, mg cpresource.Managed) (managed.ExternalUpdate, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return managed.ExternalUpdate{}, errors.New(errUnexpectedObject)
	}
	input := GenerateModifyDBInstanceInput(cr)
	if err := e.preUpdate(ctx, cr, input); err != nil {
		return managed.ExternalUpdate{}, errors.Wrap(err, "pre-update failed")
	}
	resp, err := e.client.ModifyDBInstanceWithContext(ctx, input)
	return e.postUpdate(ctx, cr, resp, managed.ExternalUpdate{}, awsclient.Wrap(err, errUpdate))
}

func (e *external) Delete(ctx context.Context, mg cpresource.Managed) error {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Deleting())
	input := GenerateDeleteDBInstanceInput(cr)
	ignore, err := e.preDelete(ctx, cr, input)
	if err != nil {
		return errors.Wrap(err, "pre-delete failed")
	}
	if ignore {
		return nil
	}
	resp, err := e.client.DeleteDBInstanceWithContext(ctx, input)
	return e.postDelete(ctx, cr, resp, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDelete))
}

type option func(*external)

func newExternal(kube client.Client, client svcsdkapi.RDSAPI, opts []option) *external {
	e := &external{
		kube:           kube,
		client:         client,
		preObserve:     nopPreObserve,
		postObserve:    nopPostObserve,
		lateInitialize: nopLateInitialize,
		isUpToDate:     alwaysUpToDate,
		filterList:     nopFilterList,
		preCreate:      nopPreCreate,
		postCreate:     nopPostCreate,
		preDelete:      nopPreDelete,
		postDelete:     nopPostDelete,
		preUpdate:      nopPreUpdate,
		postUpdate:     nopPostUpdate,
	}
	for _, f := range opts {
		f(e)
	}
	return e
}

type external struct {
	kube           client.Client
	client         svcsdkapi.RDSAPI
	preObserve     func(context.Context, *svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesInput) error
	postObserve    func(context.Context, *svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput, managed.ExternalObservation, error) (managed.ExternalObservation, error)
	filterList     func(*svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput) *svcsdk.DescribeDBInstancesOutput
	lateInitialize func(*svcapitypes.DBInstanceParameters, *svcsdk.DescribeDBInstancesOutput) error
	isUpToDate     func(*svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput) (bool, error)
	preCreate      func(context.Context, *svcapitypes.DBInstance, *svcsdk.CreateDBInstanceInput) error
	postCreate     func(context.Context, *svcapitypes.DBInstance, *svcsdk.CreateDBInstanceOutput, managed.ExternalCreation, error) (managed.ExternalCreation, error)
	preDelete      func(context.Context, *svcapitypes.DBInstance, *svcsdk.DeleteDBInstanceInput) (bool, error)
	postDelete     func(context.Context, *svcapitypes.DBInstance, *svcsdk.DeleteDBInstanceOutput, error) error
	preUpdate      func(context.Context, *svcapitypes.DBInstance, *svcsdk.ModifyDBInstanceInput) error
	postUpdate     func(context.Context, *svcapitypes.DBInstance, *svcsdk.ModifyDBInstanceOutput, managed.ExternalUpdate, error) (managed.ExternalUpdate, error)
}

func nopPreObserve(context.Context, *svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesInput) error {
	return nil
}
func nopPostObserve(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.DescribeDBInstancesOutput, obs managed.ExternalObservation, err error) (managed.ExternalObservation, error) {
	return obs, err
}
func nopFilterList(_ *svcapitypes.DBInstance, list *svcsdk.DescribeDBInstancesOutput) *svcsdk.DescribeDBInstancesOutput {
	return list
}

func nopLateInitialize(*svcapitypes.DBInstanceParameters, *svcsdk.DescribeDBInstancesOutput) error {
	return nil
}
func alwaysUpToDate(*svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput) (bool, error) {
	return true, nil
}

func nopPreCreate(context.Context, *svcapitypes.DBInstance, *svcsdk.CreateDBInstanceInput) error {
	return nil
}
func nopPostCreate(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.CreateDBInstanceOutput, cre managed.ExternalCreation, err error) (managed.ExternalCreation, error) {
	return cre, err
}
func nopPreDelete(context.Context, *svcapitypes.DBInstance, *svcsdk.DeleteDBInstanceInput) (bool, error) {
	return false, nil
}
func nopPostDelete(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.DeleteDBInstanceOutput, err error) error {
	return err
}
func nopPreUpdate(context.Context, *svcapitypes.DBInstance, *svcsdk.ModifyDBInstanceInput) error {
	return nil
}
func nopPostUpdate(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.ModifyDBInstanceOutput, upd managed.ExternalUpdate, err error) (managed.ExternalUpdate, error) {
	return upd, err
}
