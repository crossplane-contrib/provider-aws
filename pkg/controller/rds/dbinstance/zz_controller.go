/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package dbinstance

import (
	"context"

	svcapi "github.com/aws/aws-sdk-go/service/rds"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	svcsdkapi "github.com/aws/aws-sdk-go/service/rds/rdsiface"
	"github.com/google/go-cmp/cmp"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/meta"
	"github.com/crossplane/crossplane-runtime/pkg/reconciler/managed"
	cpresource "github.com/crossplane/crossplane-runtime/pkg/resource"

	svcapitypes "github.com/crossplane/provider-aws/apis/rds/v1alpha1"
	awsclient "github.com/crossplane/provider-aws/pkg/clients"
)

const (
	errUnexpectedObject = "managed resource is not an DBInstance resource"

	errCreateSession = "cannot create a new session"
	errCreate        = "cannot create DBInstance in AWS"
	errUpdate        = "cannot update DBInstance in AWS"
	errDescribe      = "failed to describe DBInstance"
	errDelete        = "failed to delete DBInstance"
)

type connector struct {
	kube client.Client
	opts []option
}

func (c *connector) Connect(ctx context.Context, mg cpresource.Managed) (managed.ExternalClient, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return nil, errors.New(errUnexpectedObject)
	}
	sess, err := awsclient.GetConfigV1(ctx, c.kube, mg, cr.Spec.ForProvider.Region)
	if err != nil {
		return nil, errors.Wrap(err, errCreateSession)
	}
	return newExternal(c.kube, svcapi.New(sess), c.opts), nil
}

func (e *external) Observe(ctx context.Context, mg cpresource.Managed) (managed.ExternalObservation, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return managed.ExternalObservation{}, errors.New(errUnexpectedObject)
	}
	if meta.GetExternalName(cr) == "" {
		return managed.ExternalObservation{
			ResourceExists: false,
		}, nil
	}
	input := GenerateDescribeDBInstancesInput(cr)
	if err := e.preObserve(ctx, cr, input); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "pre-observe failed")
	}
	resp, err := e.client.DescribeDBInstancesWithContext(ctx, input)
	if err != nil {
		return managed.ExternalObservation{ResourceExists: false}, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDescribe)
	}
	resp = e.filterList(cr, resp)
	if len(resp.DBInstances) == 0 {
		return managed.ExternalObservation{ResourceExists: false}, nil
	}
	currentSpec := cr.Spec.ForProvider.DeepCopy()
	if err := e.lateInitialize(&cr.Spec.ForProvider, resp); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "late-init failed")
	}
	GenerateDBInstance(resp).Status.AtProvider.DeepCopyInto(&cr.Status.AtProvider)

	upToDate, err := e.isUpToDate(cr, resp)
	if err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "isUpToDate check failed")
	}
	return e.postObserve(ctx, cr, resp, managed.ExternalObservation{
		ResourceExists:          true,
		ResourceUpToDate:        upToDate,
		ResourceLateInitialized: !cmp.Equal(&cr.Spec.ForProvider, currentSpec),
	}, nil)
}

func (e *external) Create(ctx context.Context, mg cpresource.Managed) (managed.ExternalCreation, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return managed.ExternalCreation{}, errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Creating())
	input := GenerateCreateDBInstanceInput(cr)
	if err := e.preCreate(ctx, cr, input); err != nil {
		return managed.ExternalCreation{}, errors.Wrap(err, "pre-create failed")
	}
	resp, err := e.client.CreateDBInstanceWithContext(ctx, input)
	if err != nil {
		return managed.ExternalCreation{}, awsclient.Wrap(err, errCreate)
	}

	if resp.DBInstance.AssociatedRoles != nil {
		f1 := []*svcapitypes.DBInstanceRole{}
		for _, f1iter := range resp.DBInstance.AssociatedRoles {
			f1elem := &svcapitypes.DBInstanceRole{}
			if f1iter.FeatureName != nil {
				f1elem.FeatureName = f1iter.FeatureName
			}
			if f1iter.RoleArn != nil {
				f1elem.RoleARN = f1iter.RoleArn
			}
			if f1iter.Status != nil {
				f1elem.Status = f1iter.Status
			}
			f1 = append(f1, f1elem)
		}
		cr.Status.AtProvider.AssociatedRoles = f1
	} else {
		cr.Status.AtProvider.AssociatedRoles = nil
	}
	if resp.DBInstance.CACertificateIdentifier != nil {
		cr.Status.AtProvider.CACertificateIdentifier = resp.DBInstance.CACertificateIdentifier
	} else {
		cr.Status.AtProvider.CACertificateIdentifier = nil
	}
	if resp.DBInstance.CustomerOwnedIpEnabled != nil {
		cr.Status.AtProvider.CustomerOwnedIPEnabled = resp.DBInstance.CustomerOwnedIpEnabled
	} else {
		cr.Status.AtProvider.CustomerOwnedIPEnabled = nil
	}
	if resp.DBInstance.DBInstanceArn != nil {
		cr.Status.AtProvider.DBInstanceARN = resp.DBInstance.DBInstanceArn
	} else {
		cr.Status.AtProvider.DBInstanceARN = nil
	}
	if resp.DBInstance.DBInstanceAutomatedBackupsReplications != nil {
		f11 := []*svcapitypes.DBInstanceAutomatedBackupsReplication{}
		for _, f11iter := range resp.DBInstance.DBInstanceAutomatedBackupsReplications {
			f11elem := &svcapitypes.DBInstanceAutomatedBackupsReplication{}
			if f11iter.DBInstanceAutomatedBackupsArn != nil {
				f11elem.DBInstanceAutomatedBackupsARN = f11iter.DBInstanceAutomatedBackupsArn
			}
			f11 = append(f11, f11elem)
		}
		cr.Status.AtProvider.DBInstanceAutomatedBackupsReplications = f11
	} else {
		cr.Status.AtProvider.DBInstanceAutomatedBackupsReplications = nil
	}
	if resp.DBInstance.DBInstanceIdentifier != nil {
		cr.Status.AtProvider.DBInstanceIdentifier = resp.DBInstance.DBInstanceIdentifier
	} else {
		cr.Status.AtProvider.DBInstanceIdentifier = nil
	}
	if resp.DBInstance.DBInstanceStatus != nil {
		cr.Status.AtProvider.DBInstanceStatus = resp.DBInstance.DBInstanceStatus
	} else {
		cr.Status.AtProvider.DBInstanceStatus = nil
	}
	if resp.DBInstance.DBParameterGroups != nil {
		f16 := []*svcapitypes.DBParameterGroupStatus_SDK{}
		for _, f16iter := range resp.DBInstance.DBParameterGroups {
			f16elem := &svcapitypes.DBParameterGroupStatus_SDK{}
			if f16iter.DBParameterGroupName != nil {
				f16elem.DBParameterGroupName = f16iter.DBParameterGroupName
			}
			if f16iter.ParameterApplyStatus != nil {
				f16elem.ParameterApplyStatus = f16iter.ParameterApplyStatus
			}
			f16 = append(f16, f16elem)
		}
		cr.Status.AtProvider.DBParameterGroups = f16
	} else {
		cr.Status.AtProvider.DBParameterGroups = nil
	}
	if resp.DBInstance.DBSecurityGroups != nil {
		f17 := []*svcapitypes.DBSecurityGroupMembership{}
		for _, f17iter := range resp.DBInstance.DBSecurityGroups {
			f17elem := &svcapitypes.DBSecurityGroupMembership{}
			if f17iter.DBSecurityGroupName != nil {
				f17elem.DBSecurityGroupName = f17iter.DBSecurityGroupName
			}
			if f17iter.Status != nil {
				f17elem.Status = f17iter.Status
			}
			f17 = append(f17, f17elem)
		}
		cr.Status.AtProvider.DBSecurityGroups = f17
	} else {
		cr.Status.AtProvider.DBSecurityGroups = nil
	}
	if resp.DBInstance.DBSubnetGroup != nil {
		f18 := &svcapitypes.DBSubnetGroup{}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn != nil {
			f18.DBSubnetGroupARN = resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription != nil {
			f18.DBSubnetGroupDescription = resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupName != nil {
			f18.DBSubnetGroupName = resp.DBInstance.DBSubnetGroup.DBSubnetGroupName
		}
		if resp.DBInstance.DBSubnetGroup.SubnetGroupStatus != nil {
			f18.SubnetGroupStatus = resp.DBInstance.DBSubnetGroup.SubnetGroupStatus
		}
		if resp.DBInstance.DBSubnetGroup.Subnets != nil {
			f18f4 := []*svcapitypes.Subnet{}
			for _, f18f4iter := range resp.DBInstance.DBSubnetGroup.Subnets {
				f18f4elem := &svcapitypes.Subnet{}
				if f18f4iter.SubnetAvailabilityZone != nil {
					f18f4elemf0 := &svcapitypes.AvailabilityZone{}
					if f18f4iter.SubnetAvailabilityZone.Name != nil {
						f18f4elemf0.Name = f18f4iter.SubnetAvailabilityZone.Name
					}
					f18f4elem.SubnetAvailabilityZone = f18f4elemf0
				}
				if f18f4iter.SubnetIdentifier != nil {
					f18f4elem.SubnetIdentifier = f18f4iter.SubnetIdentifier
				}
				if f18f4iter.SubnetOutpost != nil {
					f18f4elemf2 := &svcapitypes.Outpost{}
					if f18f4iter.SubnetOutpost.Arn != nil {
						f18f4elemf2.ARN = f18f4iter.SubnetOutpost.Arn
					}
					f18f4elem.SubnetOutpost = f18f4elemf2
				}
				if f18f4iter.SubnetStatus != nil {
					f18f4elem.SubnetStatus = f18f4iter.SubnetStatus
				}
				f18f4 = append(f18f4, f18f4elem)
			}
			f18.Subnets = f18f4
		}
		if resp.DBInstance.DBSubnetGroup.VpcId != nil {
			f18.VPCID = resp.DBInstance.DBSubnetGroup.VpcId
		}
		cr.Status.AtProvider.DBSubnetGroup = f18
	} else {
		cr.Status.AtProvider.DBSubnetGroup = nil
	}
	if resp.DBInstance.DbInstancePort != nil {
		cr.Status.AtProvider.DBInstancePort = resp.DBInstance.DbInstancePort
	} else {
		cr.Status.AtProvider.DBInstancePort = nil
	}
	if resp.DBInstance.DbiResourceId != nil {
		cr.Status.AtProvider.DBIResourceID = resp.DBInstance.DbiResourceId
	} else {
		cr.Status.AtProvider.DBIResourceID = nil
	}
	if resp.DBInstance.DomainMemberships != nil {
		f22 := []*svcapitypes.DomainMembership{}
		for _, f22iter := range resp.DBInstance.DomainMemberships {
			f22elem := &svcapitypes.DomainMembership{}
			if f22iter.Domain != nil {
				f22elem.Domain = f22iter.Domain
			}
			if f22iter.FQDN != nil {
				f22elem.FQDN = f22iter.FQDN
			}
			if f22iter.IAMRoleName != nil {
				f22elem.IAMRoleName = f22iter.IAMRoleName
			}
			if f22iter.Status != nil {
				f22elem.Status = f22iter.Status
			}
			f22 = append(f22, f22elem)
		}
		cr.Status.AtProvider.DomainMemberships = f22
	} else {
		cr.Status.AtProvider.DomainMemberships = nil
	}
	if resp.DBInstance.EnabledCloudwatchLogsExports != nil {
		f23 := []*string{}
		for _, f23iter := range resp.DBInstance.EnabledCloudwatchLogsExports {
			var f23elem string
			f23elem = *f23iter
			f23 = append(f23, &f23elem)
		}
		cr.Status.AtProvider.EnabledCloudwatchLogsExports = f23
	} else {
		cr.Status.AtProvider.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBInstance.Endpoint != nil {
		f24 := &svcapitypes.Endpoint{}
		if resp.DBInstance.Endpoint.Address != nil {
			f24.Address = resp.DBInstance.Endpoint.Address
		}
		if resp.DBInstance.Endpoint.HostedZoneId != nil {
			f24.HostedZoneID = resp.DBInstance.Endpoint.HostedZoneId
		}
		if resp.DBInstance.Endpoint.Port != nil {
			f24.Port = resp.DBInstance.Endpoint.Port
		}
		cr.Status.AtProvider.Endpoint = f24
	} else {
		cr.Status.AtProvider.Endpoint = nil
	}
	if resp.DBInstance.EnhancedMonitoringResourceArn != nil {
		cr.Status.AtProvider.EnhancedMonitoringResourceARN = resp.DBInstance.EnhancedMonitoringResourceArn
	} else {
		cr.Status.AtProvider.EnhancedMonitoringResourceARN = nil
	}
	if resp.DBInstance.IAMDatabaseAuthenticationEnabled != nil {
		cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = resp.DBInstance.IAMDatabaseAuthenticationEnabled
	} else {
		cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = nil
	}
	if resp.DBInstance.InstanceCreateTime != nil {
		cr.Status.AtProvider.InstanceCreateTime = &metav1.Time{*resp.DBInstance.InstanceCreateTime}
	} else {
		cr.Status.AtProvider.InstanceCreateTime = nil
	}
	if resp.DBInstance.LatestRestorableTime != nil {
		cr.Status.AtProvider.LatestRestorableTime = &metav1.Time{*resp.DBInstance.LatestRestorableTime}
	} else {
		cr.Status.AtProvider.LatestRestorableTime = nil
	}
	if resp.DBInstance.ListenerEndpoint != nil {
		f34 := &svcapitypes.Endpoint{}
		if resp.DBInstance.ListenerEndpoint.Address != nil {
			f34.Address = resp.DBInstance.ListenerEndpoint.Address
		}
		if resp.DBInstance.ListenerEndpoint.HostedZoneId != nil {
			f34.HostedZoneID = resp.DBInstance.ListenerEndpoint.HostedZoneId
		}
		if resp.DBInstance.ListenerEndpoint.Port != nil {
			f34.Port = resp.DBInstance.ListenerEndpoint.Port
		}
		cr.Status.AtProvider.ListenerEndpoint = f34
	} else {
		cr.Status.AtProvider.ListenerEndpoint = nil
	}
	if resp.DBInstance.OptionGroupMemberships != nil {
		f41 := []*svcapitypes.OptionGroupMembership{}
		for _, f41iter := range resp.DBInstance.OptionGroupMemberships {
			f41elem := &svcapitypes.OptionGroupMembership{}
			if f41iter.OptionGroupName != nil {
				f41elem.OptionGroupName = f41iter.OptionGroupName
			}
			if f41iter.Status != nil {
				f41elem.Status = f41iter.Status
			}
			f41 = append(f41, f41elem)
		}
		cr.Status.AtProvider.OptionGroupMemberships = f41
	} else {
		cr.Status.AtProvider.OptionGroupMemberships = nil
	}
	if resp.DBInstance.PendingModifiedValues != nil {
		f42 := &svcapitypes.PendingModifiedValues{}
		if resp.DBInstance.PendingModifiedValues.AllocatedStorage != nil {
			f42.AllocatedStorage = resp.DBInstance.PendingModifiedValues.AllocatedStorage
		}
		if resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod != nil {
			f42.BackupRetentionPeriod = resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod
		}
		if resp.DBInstance.PendingModifiedValues.CACertificateIdentifier != nil {
			f42.CACertificateIdentifier = resp.DBInstance.PendingModifiedValues.CACertificateIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceClass != nil {
			f42.DBInstanceClass = resp.DBInstance.PendingModifiedValues.DBInstanceClass
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier != nil {
			f42.DBInstanceIdentifier = resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBSubnetGroupName != nil {
			f42.DBSubnetGroupName = resp.DBInstance.PendingModifiedValues.DBSubnetGroupName
		}
		if resp.DBInstance.PendingModifiedValues.EngineVersion != nil {
			f42.EngineVersion = resp.DBInstance.PendingModifiedValues.EngineVersion
		}
		if resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
			f42.IAMDatabaseAuthenticationEnabled = resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
		}
		if resp.DBInstance.PendingModifiedValues.Iops != nil {
			f42.IOPS = resp.DBInstance.PendingModifiedValues.Iops
		}
		if resp.DBInstance.PendingModifiedValues.LicenseModel != nil {
			f42.LicenseModel = resp.DBInstance.PendingModifiedValues.LicenseModel
		}
		if resp.DBInstance.PendingModifiedValues.MasterUserPassword != nil {
			f42.MasterUserPassword = resp.DBInstance.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBInstance.PendingModifiedValues.MultiAZ != nil {
			f42.MultiAZ = resp.DBInstance.PendingModifiedValues.MultiAZ
		}
		if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f42f12 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f42f12f0 := []*string{}
				for _, f42f12f0iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
					var f42f12f0elem string
					f42f12f0elem = *f42f12f0iter
					f42f12f0 = append(f42f12f0, &f42f12f0elem)
				}
				f42f12.LogTypesToDisable = f42f12f0
			}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f42f12f1 := []*string{}
				for _, f42f12f1iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
					var f42f12f1elem string
					f42f12f1elem = *f42f12f1iter
					f42f12f1 = append(f42f12f1, &f42f12f1elem)
				}
				f42f12.LogTypesToEnable = f42f12f1
			}
			f42.PendingCloudwatchLogsExports = f42f12
		}
		if resp.DBInstance.PendingModifiedValues.Port != nil {
			f42.Port = resp.DBInstance.PendingModifiedValues.Port
		}
		if resp.DBInstance.PendingModifiedValues.ProcessorFeatures != nil {
			f42f14 := []*svcapitypes.ProcessorFeature{}
			for _, f42f14iter := range resp.DBInstance.PendingModifiedValues.ProcessorFeatures {
				f42f14elem := &svcapitypes.ProcessorFeature{}
				if f42f14iter.Name != nil {
					f42f14elem.Name = f42f14iter.Name
				}
				if f42f14iter.Value != nil {
					f42f14elem.Value = f42f14iter.Value
				}
				f42f14 = append(f42f14, f42f14elem)
			}
			f42.ProcessorFeatures = f42f14
		}
		if resp.DBInstance.PendingModifiedValues.StorageType != nil {
			f42.StorageType = resp.DBInstance.PendingModifiedValues.StorageType
		}
		cr.Status.AtProvider.PendingModifiedValues = f42
	} else {
		cr.Status.AtProvider.PendingModifiedValues = nil
	}
	if resp.DBInstance.PerformanceInsightsEnabled != nil {
		cr.Status.AtProvider.PerformanceInsightsEnabled = resp.DBInstance.PerformanceInsightsEnabled
	} else {
		cr.Status.AtProvider.PerformanceInsightsEnabled = nil
	}
	if resp.DBInstance.ReadReplicaDBClusterIdentifiers != nil {
		f51 := []*string{}
		for _, f51iter := range resp.DBInstance.ReadReplicaDBClusterIdentifiers {
			var f51elem string
			f51elem = *f51iter
			f51 = append(f51, &f51elem)
		}
		cr.Status.AtProvider.ReadReplicaDBClusterIdentifiers = f51
	} else {
		cr.Status.AtProvider.ReadReplicaDBClusterIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaDBInstanceIdentifiers != nil {
		f52 := []*string{}
		for _, f52iter := range resp.DBInstance.ReadReplicaDBInstanceIdentifiers {
			var f52elem string
			f52elem = *f52iter
			f52 = append(f52, &f52elem)
		}
		cr.Status.AtProvider.ReadReplicaDBInstanceIdentifiers = f52
	} else {
		cr.Status.AtProvider.ReadReplicaDBInstanceIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier != nil {
		cr.Status.AtProvider.ReadReplicaSourceDBInstanceIdentifier = resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier
	} else {
		cr.Status.AtProvider.ReadReplicaSourceDBInstanceIdentifier = nil
	}
	if resp.DBInstance.ReplicaMode != nil {
		cr.Status.AtProvider.ReplicaMode = resp.DBInstance.ReplicaMode
	} else {
		cr.Status.AtProvider.ReplicaMode = nil
	}
	if resp.DBInstance.SecondaryAvailabilityZone != nil {
		cr.Status.AtProvider.SecondaryAvailabilityZone = resp.DBInstance.SecondaryAvailabilityZone
	} else {
		cr.Status.AtProvider.SecondaryAvailabilityZone = nil
	}
	if resp.DBInstance.StatusInfos != nil {
		f56 := []*svcapitypes.DBInstanceStatusInfo{}
		for _, f56iter := range resp.DBInstance.StatusInfos {
			f56elem := &svcapitypes.DBInstanceStatusInfo{}
			if f56iter.Message != nil {
				f56elem.Message = f56iter.Message
			}
			if f56iter.Normal != nil {
				f56elem.Normal = f56iter.Normal
			}
			if f56iter.Status != nil {
				f56elem.Status = f56iter.Status
			}
			if f56iter.StatusType != nil {
				f56elem.StatusType = f56iter.StatusType
			}
			f56 = append(f56, f56elem)
		}
		cr.Status.AtProvider.StatusInfos = f56
	} else {
		cr.Status.AtProvider.StatusInfos = nil
	}
	if resp.DBInstance.TagList != nil {
		f59 := []*svcapitypes.Tag{}
		for _, f59iter := range resp.DBInstance.TagList {
			f59elem := &svcapitypes.Tag{}
			if f59iter.Key != nil {
				f59elem.Key = f59iter.Key
			}
			if f59iter.Value != nil {
				f59elem.Value = f59iter.Value
			}
			f59 = append(f59, f59elem)
		}
		cr.Status.AtProvider.TagList = f59
	} else {
		cr.Status.AtProvider.TagList = nil
	}
	if resp.DBInstance.VpcSecurityGroups != nil {
		f62 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f62iter := range resp.DBInstance.VpcSecurityGroups {
			f62elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f62iter.Status != nil {
				f62elem.Status = f62iter.Status
			}
			if f62iter.VpcSecurityGroupId != nil {
				f62elem.VPCSecurityGroupID = f62iter.VpcSecurityGroupId
			}
			f62 = append(f62, f62elem)
		}
		cr.Status.AtProvider.VPCSecurityGroups = f62
	} else {
		cr.Status.AtProvider.VPCSecurityGroups = nil
	}

	return e.postCreate(ctx, cr, resp, managed.ExternalCreation{}, err)
}

func (e *external) Update(ctx context.Context, mg cpresource.Managed) (managed.ExternalUpdate, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return managed.ExternalUpdate{}, errors.New(errUnexpectedObject)
	}
	input := GenerateModifyDBInstanceInput(cr)
	if err := e.preUpdate(ctx, cr, input); err != nil {
		return managed.ExternalUpdate{}, errors.Wrap(err, "pre-update failed")
	}
	resp, err := e.client.ModifyDBInstanceWithContext(ctx, input)
	return e.postUpdate(ctx, cr, resp, managed.ExternalUpdate{}, awsclient.Wrap(err, errUpdate))
}

func (e *external) Delete(ctx context.Context, mg cpresource.Managed) error {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Deleting())
	input := GenerateDeleteDBInstanceInput(cr)
	ignore, err := e.preDelete(ctx, cr, input)
	if err != nil {
		return errors.Wrap(err, "pre-delete failed")
	}
	if ignore {
		return nil
	}
	resp, err := e.client.DeleteDBInstanceWithContext(ctx, input)
	return e.postDelete(ctx, cr, resp, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDelete))
}

type option func(*external)

func newExternal(kube client.Client, client svcsdkapi.RDSAPI, opts []option) *external {
	e := &external{
		kube:           kube,
		client:         client,
		preObserve:     nopPreObserve,
		postObserve:    nopPostObserve,
		lateInitialize: nopLateInitialize,
		isUpToDate:     alwaysUpToDate,
		filterList:     nopFilterList,
		preCreate:      nopPreCreate,
		postCreate:     nopPostCreate,
		preDelete:      nopPreDelete,
		postDelete:     nopPostDelete,
		preUpdate:      nopPreUpdate,
		postUpdate:     nopPostUpdate,
	}
	for _, f := range opts {
		f(e)
	}
	return e
}

type external struct {
	kube           client.Client
	client         svcsdkapi.RDSAPI
	preObserve     func(context.Context, *svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesInput) error
	postObserve    func(context.Context, *svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput, managed.ExternalObservation, error) (managed.ExternalObservation, error)
	filterList     func(*svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput) *svcsdk.DescribeDBInstancesOutput
	lateInitialize func(*svcapitypes.DBInstanceParameters, *svcsdk.DescribeDBInstancesOutput) error
	isUpToDate     func(*svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput) (bool, error)
	preCreate      func(context.Context, *svcapitypes.DBInstance, *svcsdk.CreateDBInstanceInput) error
	postCreate     func(context.Context, *svcapitypes.DBInstance, *svcsdk.CreateDBInstanceOutput, managed.ExternalCreation, error) (managed.ExternalCreation, error)
	preDelete      func(context.Context, *svcapitypes.DBInstance, *svcsdk.DeleteDBInstanceInput) (bool, error)
	postDelete     func(context.Context, *svcapitypes.DBInstance, *svcsdk.DeleteDBInstanceOutput, error) error
	preUpdate      func(context.Context, *svcapitypes.DBInstance, *svcsdk.ModifyDBInstanceInput) error
	postUpdate     func(context.Context, *svcapitypes.DBInstance, *svcsdk.ModifyDBInstanceOutput, managed.ExternalUpdate, error) (managed.ExternalUpdate, error)
}

func nopPreObserve(context.Context, *svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesInput) error {
	return nil
}
func nopPostObserve(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.DescribeDBInstancesOutput, obs managed.ExternalObservation, err error) (managed.ExternalObservation, error) {
	return obs, err
}
func nopFilterList(_ *svcapitypes.DBInstance, list *svcsdk.DescribeDBInstancesOutput) *svcsdk.DescribeDBInstancesOutput {
	return list
}

func nopLateInitialize(*svcapitypes.DBInstanceParameters, *svcsdk.DescribeDBInstancesOutput) error {
	return nil
}
func alwaysUpToDate(*svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput) (bool, error) {
	return true, nil
}

func nopPreCreate(context.Context, *svcapitypes.DBInstance, *svcsdk.CreateDBInstanceInput) error {
	return nil
}
func nopPostCreate(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.CreateDBInstanceOutput, cre managed.ExternalCreation, err error) (managed.ExternalCreation, error) {
	return cre, err
}
func nopPreDelete(context.Context, *svcapitypes.DBInstance, *svcsdk.DeleteDBInstanceInput) (bool, error) {
	return false, nil
}
func nopPostDelete(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.DeleteDBInstanceOutput, err error) error {
	return err
}
func nopPreUpdate(context.Context, *svcapitypes.DBInstance, *svcsdk.ModifyDBInstanceInput) error {
	return nil
}
func nopPostUpdate(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.ModifyDBInstanceOutput, upd managed.ExternalUpdate, err error) (managed.ExternalUpdate, error) {
	return upd, err
}
