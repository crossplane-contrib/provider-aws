/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package dbinstance

import (
	"context"

	svcapi "github.com/aws/aws-sdk-go/service/rds"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	svcsdkapi "github.com/aws/aws-sdk-go/service/rds/rdsiface"
	"github.com/google/go-cmp/cmp"
	"github.com/pkg/errors"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"sigs.k8s.io/controller-runtime/pkg/client"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	"github.com/crossplane/crossplane-runtime/pkg/meta"
	"github.com/crossplane/crossplane-runtime/pkg/reconciler/managed"
	cpresource "github.com/crossplane/crossplane-runtime/pkg/resource"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/rds/v1alpha1"
	awsclient "github.com/crossplane-contrib/provider-aws/pkg/clients"
)

const (
	errUnexpectedObject = "managed resource is not an DBInstance resource"

	errCreateSession = "cannot create a new session"
	errCreate        = "cannot create DBInstance in AWS"
	errUpdate        = "cannot update DBInstance in AWS"
	errDescribe      = "failed to describe DBInstance"
	errDelete        = "failed to delete DBInstance"
)

type connector struct {
	kube client.Client
	opts []option
}

func (c *connector) Connect(ctx context.Context, mg cpresource.Managed) (managed.ExternalClient, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return nil, errors.New(errUnexpectedObject)
	}
	sess, err := awsclient.GetConfigV1(ctx, c.kube, mg, cr.Spec.ForProvider.Region)
	if err != nil {
		return nil, errors.Wrap(err, errCreateSession)
	}
	return newExternal(c.kube, svcapi.New(sess), c.opts), nil
}

func (e *external) Observe(ctx context.Context, mg cpresource.Managed) (managed.ExternalObservation, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return managed.ExternalObservation{}, errors.New(errUnexpectedObject)
	}
	if meta.GetExternalName(cr) == "" {
		return managed.ExternalObservation{
			ResourceExists: false,
		}, nil
	}
	input := GenerateDescribeDBInstancesInput(cr)
	if err := e.preObserve(ctx, cr, input); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "pre-observe failed")
	}
	resp, err := e.client.DescribeDBInstancesWithContext(ctx, input)
	if err != nil {
		return managed.ExternalObservation{ResourceExists: false}, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDescribe)
	}
	resp = e.filterList(cr, resp)
	if len(resp.DBInstances) == 0 {
		return managed.ExternalObservation{ResourceExists: false}, nil
	}
	currentSpec := cr.Spec.ForProvider.DeepCopy()
	if err := e.lateInitialize(&cr.Spec.ForProvider, resp); err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "late-init failed")
	}
	GenerateDBInstance(resp).Status.AtProvider.DeepCopyInto(&cr.Status.AtProvider)

	upToDate, err := e.isUpToDate(cr, resp)
	if err != nil {
		return managed.ExternalObservation{}, errors.Wrap(err, "isUpToDate check failed")
	}
	return e.postObserve(ctx, cr, resp, managed.ExternalObservation{
		ResourceExists:          true,
		ResourceUpToDate:        upToDate,
		ResourceLateInitialized: !cmp.Equal(&cr.Spec.ForProvider, currentSpec),
	}, nil)
}

func (e *external) Create(ctx context.Context, mg cpresource.Managed) (managed.ExternalCreation, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return managed.ExternalCreation{}, errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Creating())
	input := GenerateCreateDBInstanceInput(cr)
	if err := e.preCreate(ctx, cr, input); err != nil {
		return managed.ExternalCreation{}, errors.Wrap(err, "pre-create failed")
	}
	resp, err := e.client.CreateDBInstanceWithContext(ctx, input)
	if err != nil {
		return managed.ExternalCreation{}, awsclient.Wrap(err, errCreate)
	}

	if resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded != nil {
		cr.Status.AtProvider.ActivityStreamEngineNativeAuditFieldsIncluded = resp.DBInstance.ActivityStreamEngineNativeAuditFieldsIncluded
	} else {
		cr.Status.AtProvider.ActivityStreamEngineNativeAuditFieldsIncluded = nil
	}
	if resp.DBInstance.ActivityStreamKinesisStreamName != nil {
		cr.Status.AtProvider.ActivityStreamKinesisStreamName = resp.DBInstance.ActivityStreamKinesisStreamName
	} else {
		cr.Status.AtProvider.ActivityStreamKinesisStreamName = nil
	}
	if resp.DBInstance.ActivityStreamKmsKeyId != nil {
		cr.Status.AtProvider.ActivityStreamKMSKeyID = resp.DBInstance.ActivityStreamKmsKeyId
	} else {
		cr.Status.AtProvider.ActivityStreamKMSKeyID = nil
	}
	if resp.DBInstance.ActivityStreamMode != nil {
		cr.Status.AtProvider.ActivityStreamMode = resp.DBInstance.ActivityStreamMode
	} else {
		cr.Status.AtProvider.ActivityStreamMode = nil
	}
	if resp.DBInstance.ActivityStreamPolicyStatus != nil {
		cr.Status.AtProvider.ActivityStreamPolicyStatus = resp.DBInstance.ActivityStreamPolicyStatus
	} else {
		cr.Status.AtProvider.ActivityStreamPolicyStatus = nil
	}
	if resp.DBInstance.ActivityStreamStatus != nil {
		cr.Status.AtProvider.ActivityStreamStatus = resp.DBInstance.ActivityStreamStatus
	} else {
		cr.Status.AtProvider.ActivityStreamStatus = nil
	}
	if resp.DBInstance.AllocatedStorage != nil {
		cr.Spec.ForProvider.AllocatedStorage = resp.DBInstance.AllocatedStorage
	} else {
		cr.Spec.ForProvider.AllocatedStorage = nil
	}
	if resp.DBInstance.AssociatedRoles != nil {
		f7 := []*svcapitypes.DBInstanceRole{}
		for _, f7iter := range resp.DBInstance.AssociatedRoles {
			f7elem := &svcapitypes.DBInstanceRole{}
			if f7iter.FeatureName != nil {
				f7elem.FeatureName = f7iter.FeatureName
			}
			if f7iter.RoleArn != nil {
				f7elem.RoleARN = f7iter.RoleArn
			}
			if f7iter.Status != nil {
				f7elem.Status = f7iter.Status
			}
			f7 = append(f7, f7elem)
		}
		cr.Status.AtProvider.AssociatedRoles = f7
	} else {
		cr.Status.AtProvider.AssociatedRoles = nil
	}
	if resp.DBInstance.AutoMinorVersionUpgrade != nil {
		cr.Spec.ForProvider.AutoMinorVersionUpgrade = resp.DBInstance.AutoMinorVersionUpgrade
	} else {
		cr.Spec.ForProvider.AutoMinorVersionUpgrade = nil
	}
	if resp.DBInstance.AutomaticRestartTime != nil {
		cr.Status.AtProvider.AutomaticRestartTime = &metav1.Time{*resp.DBInstance.AutomaticRestartTime}
	} else {
		cr.Status.AtProvider.AutomaticRestartTime = nil
	}
	if resp.DBInstance.AutomationMode != nil {
		cr.Status.AtProvider.AutomationMode = resp.DBInstance.AutomationMode
	} else {
		cr.Status.AtProvider.AutomationMode = nil
	}
	if resp.DBInstance.AvailabilityZone != nil {
		cr.Spec.ForProvider.AvailabilityZone = resp.DBInstance.AvailabilityZone
	} else {
		cr.Spec.ForProvider.AvailabilityZone = nil
	}
	if resp.DBInstance.AwsBackupRecoveryPointArn != nil {
		cr.Status.AtProvider.AWSBackupRecoveryPointARN = resp.DBInstance.AwsBackupRecoveryPointArn
	} else {
		cr.Status.AtProvider.AWSBackupRecoveryPointARN = nil
	}
	if resp.DBInstance.BackupRetentionPeriod != nil {
		cr.Spec.ForProvider.BackupRetentionPeriod = resp.DBInstance.BackupRetentionPeriod
	} else {
		cr.Spec.ForProvider.BackupRetentionPeriod = nil
	}
	if resp.DBInstance.BackupTarget != nil {
		cr.Spec.ForProvider.BackupTarget = resp.DBInstance.BackupTarget
	} else {
		cr.Spec.ForProvider.BackupTarget = nil
	}
	if resp.DBInstance.CACertificateIdentifier != nil {
		cr.Spec.ForProvider.CACertificateIdentifier = resp.DBInstance.CACertificateIdentifier
	} else {
		cr.Spec.ForProvider.CACertificateIdentifier = nil
	}
	if resp.DBInstance.CertificateDetails != nil {
		f16 := &svcapitypes.CertificateDetails{}
		if resp.DBInstance.CertificateDetails.CAIdentifier != nil {
			f16.CAIdentifier = resp.DBInstance.CertificateDetails.CAIdentifier
		}
		if resp.DBInstance.CertificateDetails.ValidTill != nil {
			f16.ValidTill = &metav1.Time{*resp.DBInstance.CertificateDetails.ValidTill}
		}
		cr.Status.AtProvider.CertificateDetails = f16
	} else {
		cr.Status.AtProvider.CertificateDetails = nil
	}
	if resp.DBInstance.CharacterSetName != nil {
		cr.Spec.ForProvider.CharacterSetName = resp.DBInstance.CharacterSetName
	} else {
		cr.Spec.ForProvider.CharacterSetName = nil
	}
	if resp.DBInstance.CopyTagsToSnapshot != nil {
		cr.Spec.ForProvider.CopyTagsToSnapshot = resp.DBInstance.CopyTagsToSnapshot
	} else {
		cr.Spec.ForProvider.CopyTagsToSnapshot = nil
	}
	if resp.DBInstance.CustomIamInstanceProfile != nil {
		cr.Spec.ForProvider.CustomIAMInstanceProfile = resp.DBInstance.CustomIamInstanceProfile
	} else {
		cr.Spec.ForProvider.CustomIAMInstanceProfile = nil
	}
	if resp.DBInstance.CustomerOwnedIpEnabled != nil {
		cr.Status.AtProvider.CustomerOwnedIPEnabled = resp.DBInstance.CustomerOwnedIpEnabled
	} else {
		cr.Status.AtProvider.CustomerOwnedIPEnabled = nil
	}
	if resp.DBInstance.DBClusterIdentifier != nil {
		cr.Spec.ForProvider.DBClusterIdentifier = resp.DBInstance.DBClusterIdentifier
	} else {
		cr.Spec.ForProvider.DBClusterIdentifier = nil
	}
	if resp.DBInstance.DBInstanceArn != nil {
		cr.Status.AtProvider.DBInstanceARN = resp.DBInstance.DBInstanceArn
	} else {
		cr.Status.AtProvider.DBInstanceARN = nil
	}
	if resp.DBInstance.DBInstanceAutomatedBackupsReplications != nil {
		f23 := []*svcapitypes.DBInstanceAutomatedBackupsReplication{}
		for _, f23iter := range resp.DBInstance.DBInstanceAutomatedBackupsReplications {
			f23elem := &svcapitypes.DBInstanceAutomatedBackupsReplication{}
			if f23iter.DBInstanceAutomatedBackupsArn != nil {
				f23elem.DBInstanceAutomatedBackupsARN = f23iter.DBInstanceAutomatedBackupsArn
			}
			f23 = append(f23, f23elem)
		}
		cr.Status.AtProvider.DBInstanceAutomatedBackupsReplications = f23
	} else {
		cr.Status.AtProvider.DBInstanceAutomatedBackupsReplications = nil
	}
	if resp.DBInstance.DBInstanceClass != nil {
		cr.Spec.ForProvider.DBInstanceClass = resp.DBInstance.DBInstanceClass
	} else {
		cr.Spec.ForProvider.DBInstanceClass = nil
	}
	if resp.DBInstance.DBInstanceIdentifier != nil {
		cr.Status.AtProvider.DBInstanceIdentifier = resp.DBInstance.DBInstanceIdentifier
	} else {
		cr.Status.AtProvider.DBInstanceIdentifier = nil
	}
	if resp.DBInstance.DBInstanceStatus != nil {
		cr.Status.AtProvider.DBInstanceStatus = resp.DBInstance.DBInstanceStatus
	} else {
		cr.Status.AtProvider.DBInstanceStatus = nil
	}
	if resp.DBInstance.DBName != nil {
		cr.Spec.ForProvider.DBName = resp.DBInstance.DBName
	} else {
		cr.Spec.ForProvider.DBName = nil
	}
	if resp.DBInstance.DBParameterGroups != nil {
		f28 := []*svcapitypes.DBParameterGroupStatus_SDK{}
		for _, f28iter := range resp.DBInstance.DBParameterGroups {
			f28elem := &svcapitypes.DBParameterGroupStatus_SDK{}
			if f28iter.DBParameterGroupName != nil {
				f28elem.DBParameterGroupName = f28iter.DBParameterGroupName
			}
			if f28iter.ParameterApplyStatus != nil {
				f28elem.ParameterApplyStatus = f28iter.ParameterApplyStatus
			}
			f28 = append(f28, f28elem)
		}
		cr.Status.AtProvider.DBParameterGroups = f28
	} else {
		cr.Status.AtProvider.DBParameterGroups = nil
	}
	if resp.DBInstance.DBSecurityGroups != nil {
		f29 := []*svcapitypes.DBSecurityGroupMembership{}
		for _, f29iter := range resp.DBInstance.DBSecurityGroups {
			f29elem := &svcapitypes.DBSecurityGroupMembership{}
			if f29iter.DBSecurityGroupName != nil {
				f29elem.DBSecurityGroupName = f29iter.DBSecurityGroupName
			}
			if f29iter.Status != nil {
				f29elem.Status = f29iter.Status
			}
			f29 = append(f29, f29elem)
		}
		cr.Status.AtProvider.DBSecurityGroups = f29
	} else {
		cr.Status.AtProvider.DBSecurityGroups = nil
	}
	if resp.DBInstance.DBSubnetGroup != nil {
		f30 := &svcapitypes.DBSubnetGroup{}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn != nil {
			f30.DBSubnetGroupARN = resp.DBInstance.DBSubnetGroup.DBSubnetGroupArn
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription != nil {
			f30.DBSubnetGroupDescription = resp.DBInstance.DBSubnetGroup.DBSubnetGroupDescription
		}
		if resp.DBInstance.DBSubnetGroup.DBSubnetGroupName != nil {
			f30.DBSubnetGroupName = resp.DBInstance.DBSubnetGroup.DBSubnetGroupName
		}
		if resp.DBInstance.DBSubnetGroup.SubnetGroupStatus != nil {
			f30.SubnetGroupStatus = resp.DBInstance.DBSubnetGroup.SubnetGroupStatus
		}
		if resp.DBInstance.DBSubnetGroup.Subnets != nil {
			f30f4 := []*svcapitypes.Subnet{}
			for _, f30f4iter := range resp.DBInstance.DBSubnetGroup.Subnets {
				f30f4elem := &svcapitypes.Subnet{}
				if f30f4iter.SubnetAvailabilityZone != nil {
					f30f4elemf0 := &svcapitypes.AvailabilityZone{}
					if f30f4iter.SubnetAvailabilityZone.Name != nil {
						f30f4elemf0.Name = f30f4iter.SubnetAvailabilityZone.Name
					}
					f30f4elem.SubnetAvailabilityZone = f30f4elemf0
				}
				if f30f4iter.SubnetIdentifier != nil {
					f30f4elem.SubnetIdentifier = f30f4iter.SubnetIdentifier
				}
				if f30f4iter.SubnetOutpost != nil {
					f30f4elemf2 := &svcapitypes.Outpost{}
					if f30f4iter.SubnetOutpost.Arn != nil {
						f30f4elemf2.ARN = f30f4iter.SubnetOutpost.Arn
					}
					f30f4elem.SubnetOutpost = f30f4elemf2
				}
				if f30f4iter.SubnetStatus != nil {
					f30f4elem.SubnetStatus = f30f4iter.SubnetStatus
				}
				f30f4 = append(f30f4, f30f4elem)
			}
			f30.Subnets = f30f4
		}
		if resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes != nil {
			f30f5 := []*string{}
			for _, f30f5iter := range resp.DBInstance.DBSubnetGroup.SupportedNetworkTypes {
				var f30f5elem string
				f30f5elem = *f30f5iter
				f30f5 = append(f30f5, &f30f5elem)
			}
			f30.SupportedNetworkTypes = f30f5
		}
		if resp.DBInstance.DBSubnetGroup.VpcId != nil {
			f30.VPCID = resp.DBInstance.DBSubnetGroup.VpcId
		}
		cr.Status.AtProvider.DBSubnetGroup = f30
	} else {
		cr.Status.AtProvider.DBSubnetGroup = nil
	}
	if resp.DBInstance.DBSystemId != nil {
		cr.Status.AtProvider.DBSystemID = resp.DBInstance.DBSystemId
	} else {
		cr.Status.AtProvider.DBSystemID = nil
	}
	if resp.DBInstance.DbInstancePort != nil {
		cr.Status.AtProvider.DBInstancePort = resp.DBInstance.DbInstancePort
	} else {
		cr.Status.AtProvider.DBInstancePort = nil
	}
	if resp.DBInstance.DbiResourceId != nil {
		cr.Status.AtProvider.DBIResourceID = resp.DBInstance.DbiResourceId
	} else {
		cr.Status.AtProvider.DBIResourceID = nil
	}
	if resp.DBInstance.DeletionProtection != nil {
		cr.Spec.ForProvider.DeletionProtection = resp.DBInstance.DeletionProtection
	} else {
		cr.Spec.ForProvider.DeletionProtection = nil
	}
	if resp.DBInstance.DomainMemberships != nil {
		f35 := []*svcapitypes.DomainMembership{}
		for _, f35iter := range resp.DBInstance.DomainMemberships {
			f35elem := &svcapitypes.DomainMembership{}
			if f35iter.Domain != nil {
				f35elem.Domain = f35iter.Domain
			}
			if f35iter.FQDN != nil {
				f35elem.FQDN = f35iter.FQDN
			}
			if f35iter.IAMRoleName != nil {
				f35elem.IAMRoleName = f35iter.IAMRoleName
			}
			if f35iter.Status != nil {
				f35elem.Status = f35iter.Status
			}
			f35 = append(f35, f35elem)
		}
		cr.Status.AtProvider.DomainMemberships = f35
	} else {
		cr.Status.AtProvider.DomainMemberships = nil
	}
	if resp.DBInstance.EnabledCloudwatchLogsExports != nil {
		f36 := []*string{}
		for _, f36iter := range resp.DBInstance.EnabledCloudwatchLogsExports {
			var f36elem string
			f36elem = *f36iter
			f36 = append(f36, &f36elem)
		}
		cr.Status.AtProvider.EnabledCloudwatchLogsExports = f36
	} else {
		cr.Status.AtProvider.EnabledCloudwatchLogsExports = nil
	}
	if resp.DBInstance.Endpoint != nil {
		f37 := &svcapitypes.Endpoint{}
		if resp.DBInstance.Endpoint.Address != nil {
			f37.Address = resp.DBInstance.Endpoint.Address
		}
		if resp.DBInstance.Endpoint.HostedZoneId != nil {
			f37.HostedZoneID = resp.DBInstance.Endpoint.HostedZoneId
		}
		if resp.DBInstance.Endpoint.Port != nil {
			f37.Port = resp.DBInstance.Endpoint.Port
		}
		cr.Status.AtProvider.Endpoint = f37
	} else {
		cr.Status.AtProvider.Endpoint = nil
	}
	if resp.DBInstance.Engine != nil {
		cr.Spec.ForProvider.Engine = resp.DBInstance.Engine
	} else {
		cr.Spec.ForProvider.Engine = nil
	}
	if resp.DBInstance.EngineVersion != nil {
		cr.Status.AtProvider.EngineVersion = resp.DBInstance.EngineVersion
	} else {
		cr.Status.AtProvider.EngineVersion = nil
	}
	if resp.DBInstance.EnhancedMonitoringResourceArn != nil {
		cr.Status.AtProvider.EnhancedMonitoringResourceARN = resp.DBInstance.EnhancedMonitoringResourceArn
	} else {
		cr.Status.AtProvider.EnhancedMonitoringResourceARN = nil
	}
	if resp.DBInstance.IAMDatabaseAuthenticationEnabled != nil {
		cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = resp.DBInstance.IAMDatabaseAuthenticationEnabled
	} else {
		cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = nil
	}
	if resp.DBInstance.InstanceCreateTime != nil {
		cr.Status.AtProvider.InstanceCreateTime = &metav1.Time{*resp.DBInstance.InstanceCreateTime}
	} else {
		cr.Status.AtProvider.InstanceCreateTime = nil
	}
	if resp.DBInstance.Iops != nil {
		cr.Spec.ForProvider.IOPS = resp.DBInstance.Iops
	} else {
		cr.Spec.ForProvider.IOPS = nil
	}
	if resp.DBInstance.KmsKeyId != nil {
		cr.Spec.ForProvider.KMSKeyID = resp.DBInstance.KmsKeyId
	} else {
		cr.Spec.ForProvider.KMSKeyID = nil
	}
	if resp.DBInstance.LatestRestorableTime != nil {
		cr.Status.AtProvider.LatestRestorableTime = &metav1.Time{*resp.DBInstance.LatestRestorableTime}
	} else {
		cr.Status.AtProvider.LatestRestorableTime = nil
	}
	if resp.DBInstance.LicenseModel != nil {
		cr.Spec.ForProvider.LicenseModel = resp.DBInstance.LicenseModel
	} else {
		cr.Spec.ForProvider.LicenseModel = nil
	}
	if resp.DBInstance.ListenerEndpoint != nil {
		f47 := &svcapitypes.Endpoint{}
		if resp.DBInstance.ListenerEndpoint.Address != nil {
			f47.Address = resp.DBInstance.ListenerEndpoint.Address
		}
		if resp.DBInstance.ListenerEndpoint.HostedZoneId != nil {
			f47.HostedZoneID = resp.DBInstance.ListenerEndpoint.HostedZoneId
		}
		if resp.DBInstance.ListenerEndpoint.Port != nil {
			f47.Port = resp.DBInstance.ListenerEndpoint.Port
		}
		cr.Status.AtProvider.ListenerEndpoint = f47
	} else {
		cr.Status.AtProvider.ListenerEndpoint = nil
	}
	if resp.DBInstance.MasterUserSecret != nil {
		f48 := &svcapitypes.MasterUserSecret{}
		if resp.DBInstance.MasterUserSecret.KmsKeyId != nil {
			f48.KMSKeyID = resp.DBInstance.MasterUserSecret.KmsKeyId
		}
		if resp.DBInstance.MasterUserSecret.SecretArn != nil {
			f48.SecretARN = resp.DBInstance.MasterUserSecret.SecretArn
		}
		if resp.DBInstance.MasterUserSecret.SecretStatus != nil {
			f48.SecretStatus = resp.DBInstance.MasterUserSecret.SecretStatus
		}
		cr.Status.AtProvider.MasterUserSecret = f48
	} else {
		cr.Status.AtProvider.MasterUserSecret = nil
	}
	if resp.DBInstance.MasterUsername != nil {
		cr.Spec.ForProvider.MasterUsername = resp.DBInstance.MasterUsername
	} else {
		cr.Spec.ForProvider.MasterUsername = nil
	}
	if resp.DBInstance.MaxAllocatedStorage != nil {
		cr.Spec.ForProvider.MaxAllocatedStorage = resp.DBInstance.MaxAllocatedStorage
	} else {
		cr.Spec.ForProvider.MaxAllocatedStorage = nil
	}
	if resp.DBInstance.MonitoringInterval != nil {
		cr.Spec.ForProvider.MonitoringInterval = resp.DBInstance.MonitoringInterval
	} else {
		cr.Spec.ForProvider.MonitoringInterval = nil
	}
	if resp.DBInstance.MonitoringRoleArn != nil {
		cr.Spec.ForProvider.MonitoringRoleARN = resp.DBInstance.MonitoringRoleArn
	} else {
		cr.Spec.ForProvider.MonitoringRoleARN = nil
	}
	if resp.DBInstance.MultiAZ != nil {
		cr.Spec.ForProvider.MultiAZ = resp.DBInstance.MultiAZ
	} else {
		cr.Spec.ForProvider.MultiAZ = nil
	}
	if resp.DBInstance.NcharCharacterSetName != nil {
		cr.Spec.ForProvider.NcharCharacterSetName = resp.DBInstance.NcharCharacterSetName
	} else {
		cr.Spec.ForProvider.NcharCharacterSetName = nil
	}
	if resp.DBInstance.NetworkType != nil {
		cr.Spec.ForProvider.NetworkType = resp.DBInstance.NetworkType
	} else {
		cr.Spec.ForProvider.NetworkType = nil
	}
	if resp.DBInstance.OptionGroupMemberships != nil {
		f56 := []*svcapitypes.OptionGroupMembership{}
		for _, f56iter := range resp.DBInstance.OptionGroupMemberships {
			f56elem := &svcapitypes.OptionGroupMembership{}
			if f56iter.OptionGroupName != nil {
				f56elem.OptionGroupName = f56iter.OptionGroupName
			}
			if f56iter.Status != nil {
				f56elem.Status = f56iter.Status
			}
			f56 = append(f56, f56elem)
		}
		cr.Status.AtProvider.OptionGroupMemberships = f56
	} else {
		cr.Status.AtProvider.OptionGroupMemberships = nil
	}
	if resp.DBInstance.PendingModifiedValues != nil {
		f57 := &svcapitypes.PendingModifiedValues{}
		if resp.DBInstance.PendingModifiedValues.AllocatedStorage != nil {
			f57.AllocatedStorage = resp.DBInstance.PendingModifiedValues.AllocatedStorage
		}
		if resp.DBInstance.PendingModifiedValues.AutomationMode != nil {
			f57.AutomationMode = resp.DBInstance.PendingModifiedValues.AutomationMode
		}
		if resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod != nil {
			f57.BackupRetentionPeriod = resp.DBInstance.PendingModifiedValues.BackupRetentionPeriod
		}
		if resp.DBInstance.PendingModifiedValues.CACertificateIdentifier != nil {
			f57.CACertificateIdentifier = resp.DBInstance.PendingModifiedValues.CACertificateIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceClass != nil {
			f57.DBInstanceClass = resp.DBInstance.PendingModifiedValues.DBInstanceClass
		}
		if resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier != nil {
			f57.DBInstanceIdentifier = resp.DBInstance.PendingModifiedValues.DBInstanceIdentifier
		}
		if resp.DBInstance.PendingModifiedValues.DBSubnetGroupName != nil {
			f57.DBSubnetGroupName = resp.DBInstance.PendingModifiedValues.DBSubnetGroupName
		}
		if resp.DBInstance.PendingModifiedValues.EngineVersion != nil {
			f57.EngineVersion = resp.DBInstance.PendingModifiedValues.EngineVersion
		}
		if resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
			f57.IAMDatabaseAuthenticationEnabled = resp.DBInstance.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
		}
		if resp.DBInstance.PendingModifiedValues.Iops != nil {
			f57.IOPS = resp.DBInstance.PendingModifiedValues.Iops
		}
		if resp.DBInstance.PendingModifiedValues.LicenseModel != nil {
			f57.LicenseModel = resp.DBInstance.PendingModifiedValues.LicenseModel
		}
		if resp.DBInstance.PendingModifiedValues.MasterUserPassword != nil {
			f57.MasterUserPassword = resp.DBInstance.PendingModifiedValues.MasterUserPassword
		}
		if resp.DBInstance.PendingModifiedValues.MultiAZ != nil {
			f57.MultiAZ = resp.DBInstance.PendingModifiedValues.MultiAZ
		}
		if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
			f57f13 := &svcapitypes.PendingCloudwatchLogsExports{}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
				f57f13f0 := []*string{}
				for _, f57f13f0iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
					var f57f13f0elem string
					f57f13f0elem = *f57f13f0iter
					f57f13f0 = append(f57f13f0, &f57f13f0elem)
				}
				f57f13.LogTypesToDisable = f57f13f0
			}
			if resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
				f57f13f1 := []*string{}
				for _, f57f13f1iter := range resp.DBInstance.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
					var f57f13f1elem string
					f57f13f1elem = *f57f13f1iter
					f57f13f1 = append(f57f13f1, &f57f13f1elem)
				}
				f57f13.LogTypesToEnable = f57f13f1
			}
			f57.PendingCloudwatchLogsExports = f57f13
		}
		if resp.DBInstance.PendingModifiedValues.Port != nil {
			f57.Port = resp.DBInstance.PendingModifiedValues.Port
		}
		if resp.DBInstance.PendingModifiedValues.ProcessorFeatures != nil {
			f57f15 := []*svcapitypes.ProcessorFeature{}
			for _, f57f15iter := range resp.DBInstance.PendingModifiedValues.ProcessorFeatures {
				f57f15elem := &svcapitypes.ProcessorFeature{}
				if f57f15iter.Name != nil {
					f57f15elem.Name = f57f15iter.Name
				}
				if f57f15iter.Value != nil {
					f57f15elem.Value = f57f15iter.Value
				}
				f57f15 = append(f57f15, f57f15elem)
			}
			f57.ProcessorFeatures = f57f15
		}
		if resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime != nil {
			f57.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.PendingModifiedValues.ResumeFullAutomationModeTime}
		}
		if resp.DBInstance.PendingModifiedValues.StorageThroughput != nil {
			f57.StorageThroughput = resp.DBInstance.PendingModifiedValues.StorageThroughput
		}
		if resp.DBInstance.PendingModifiedValues.StorageType != nil {
			f57.StorageType = resp.DBInstance.PendingModifiedValues.StorageType
		}
		cr.Status.AtProvider.PendingModifiedValues = f57
	} else {
		cr.Status.AtProvider.PendingModifiedValues = nil
	}
	if resp.DBInstance.PerformanceInsightsEnabled != nil {
		cr.Status.AtProvider.PerformanceInsightsEnabled = resp.DBInstance.PerformanceInsightsEnabled
	} else {
		cr.Status.AtProvider.PerformanceInsightsEnabled = nil
	}
	if resp.DBInstance.PerformanceInsightsKMSKeyId != nil {
		cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = resp.DBInstance.PerformanceInsightsKMSKeyId
	} else {
		cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = nil
	}
	if resp.DBInstance.PerformanceInsightsRetentionPeriod != nil {
		cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod = resp.DBInstance.PerformanceInsightsRetentionPeriod
	} else {
		cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod = nil
	}
	if resp.DBInstance.PreferredBackupWindow != nil {
		cr.Spec.ForProvider.PreferredBackupWindow = resp.DBInstance.PreferredBackupWindow
	} else {
		cr.Spec.ForProvider.PreferredBackupWindow = nil
	}
	if resp.DBInstance.PreferredMaintenanceWindow != nil {
		cr.Spec.ForProvider.PreferredMaintenanceWindow = resp.DBInstance.PreferredMaintenanceWindow
	} else {
		cr.Spec.ForProvider.PreferredMaintenanceWindow = nil
	}
	if resp.DBInstance.ProcessorFeatures != nil {
		f63 := []*svcapitypes.ProcessorFeature{}
		for _, f63iter := range resp.DBInstance.ProcessorFeatures {
			f63elem := &svcapitypes.ProcessorFeature{}
			if f63iter.Name != nil {
				f63elem.Name = f63iter.Name
			}
			if f63iter.Value != nil {
				f63elem.Value = f63iter.Value
			}
			f63 = append(f63, f63elem)
		}
		cr.Spec.ForProvider.ProcessorFeatures = f63
	} else {
		cr.Spec.ForProvider.ProcessorFeatures = nil
	}
	if resp.DBInstance.PromotionTier != nil {
		cr.Spec.ForProvider.PromotionTier = resp.DBInstance.PromotionTier
	} else {
		cr.Spec.ForProvider.PromotionTier = nil
	}
	if resp.DBInstance.PubliclyAccessible != nil {
		cr.Spec.ForProvider.PubliclyAccessible = resp.DBInstance.PubliclyAccessible
	} else {
		cr.Spec.ForProvider.PubliclyAccessible = nil
	}
	if resp.DBInstance.ReadReplicaDBClusterIdentifiers != nil {
		f66 := []*string{}
		for _, f66iter := range resp.DBInstance.ReadReplicaDBClusterIdentifiers {
			var f66elem string
			f66elem = *f66iter
			f66 = append(f66, &f66elem)
		}
		cr.Status.AtProvider.ReadReplicaDBClusterIdentifiers = f66
	} else {
		cr.Status.AtProvider.ReadReplicaDBClusterIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaDBInstanceIdentifiers != nil {
		f67 := []*string{}
		for _, f67iter := range resp.DBInstance.ReadReplicaDBInstanceIdentifiers {
			var f67elem string
			f67elem = *f67iter
			f67 = append(f67, &f67elem)
		}
		cr.Status.AtProvider.ReadReplicaDBInstanceIdentifiers = f67
	} else {
		cr.Status.AtProvider.ReadReplicaDBInstanceIdentifiers = nil
	}
	if resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier != nil {
		cr.Status.AtProvider.ReadReplicaSourceDBInstanceIdentifier = resp.DBInstance.ReadReplicaSourceDBInstanceIdentifier
	} else {
		cr.Status.AtProvider.ReadReplicaSourceDBInstanceIdentifier = nil
	}
	if resp.DBInstance.ReplicaMode != nil {
		cr.Status.AtProvider.ReplicaMode = resp.DBInstance.ReplicaMode
	} else {
		cr.Status.AtProvider.ReplicaMode = nil
	}
	if resp.DBInstance.ResumeFullAutomationModeTime != nil {
		cr.Status.AtProvider.ResumeFullAutomationModeTime = &metav1.Time{*resp.DBInstance.ResumeFullAutomationModeTime}
	} else {
		cr.Status.AtProvider.ResumeFullAutomationModeTime = nil
	}
	if resp.DBInstance.SecondaryAvailabilityZone != nil {
		cr.Status.AtProvider.SecondaryAvailabilityZone = resp.DBInstance.SecondaryAvailabilityZone
	} else {
		cr.Status.AtProvider.SecondaryAvailabilityZone = nil
	}
	if resp.DBInstance.StatusInfos != nil {
		f72 := []*svcapitypes.DBInstanceStatusInfo{}
		for _, f72iter := range resp.DBInstance.StatusInfos {
			f72elem := &svcapitypes.DBInstanceStatusInfo{}
			if f72iter.Message != nil {
				f72elem.Message = f72iter.Message
			}
			if f72iter.Normal != nil {
				f72elem.Normal = f72iter.Normal
			}
			if f72iter.Status != nil {
				f72elem.Status = f72iter.Status
			}
			if f72iter.StatusType != nil {
				f72elem.StatusType = f72iter.StatusType
			}
			f72 = append(f72, f72elem)
		}
		cr.Status.AtProvider.StatusInfos = f72
	} else {
		cr.Status.AtProvider.StatusInfos = nil
	}
	if resp.DBInstance.StorageEncrypted != nil {
		cr.Spec.ForProvider.StorageEncrypted = resp.DBInstance.StorageEncrypted
	} else {
		cr.Spec.ForProvider.StorageEncrypted = nil
	}
	if resp.DBInstance.StorageThroughput != nil {
		cr.Spec.ForProvider.StorageThroughput = resp.DBInstance.StorageThroughput
	} else {
		cr.Spec.ForProvider.StorageThroughput = nil
	}
	if resp.DBInstance.StorageType != nil {
		cr.Spec.ForProvider.StorageType = resp.DBInstance.StorageType
	} else {
		cr.Spec.ForProvider.StorageType = nil
	}
	if resp.DBInstance.TagList != nil {
		f76 := []*svcapitypes.Tag{}
		for _, f76iter := range resp.DBInstance.TagList {
			f76elem := &svcapitypes.Tag{}
			if f76iter.Key != nil {
				f76elem.Key = f76iter.Key
			}
			if f76iter.Value != nil {
				f76elem.Value = f76iter.Value
			}
			f76 = append(f76, f76elem)
		}
		cr.Status.AtProvider.TagList = f76
	} else {
		cr.Status.AtProvider.TagList = nil
	}
	if resp.DBInstance.TdeCredentialArn != nil {
		cr.Spec.ForProvider.TDECredentialARN = resp.DBInstance.TdeCredentialArn
	} else {
		cr.Spec.ForProvider.TDECredentialARN = nil
	}
	if resp.DBInstance.Timezone != nil {
		cr.Spec.ForProvider.Timezone = resp.DBInstance.Timezone
	} else {
		cr.Spec.ForProvider.Timezone = nil
	}
	if resp.DBInstance.VpcSecurityGroups != nil {
		f79 := []*svcapitypes.VPCSecurityGroupMembership{}
		for _, f79iter := range resp.DBInstance.VpcSecurityGroups {
			f79elem := &svcapitypes.VPCSecurityGroupMembership{}
			if f79iter.Status != nil {
				f79elem.Status = f79iter.Status
			}
			if f79iter.VpcSecurityGroupId != nil {
				f79elem.VPCSecurityGroupID = f79iter.VpcSecurityGroupId
			}
			f79 = append(f79, f79elem)
		}
		cr.Status.AtProvider.VPCSecurityGroups = f79
	} else {
		cr.Status.AtProvider.VPCSecurityGroups = nil
	}

	return e.postCreate(ctx, cr, resp, managed.ExternalCreation{}, err)
}

func (e *external) Update(ctx context.Context, mg cpresource.Managed) (managed.ExternalUpdate, error) {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return managed.ExternalUpdate{}, errors.New(errUnexpectedObject)
	}
	input := GenerateModifyDBInstanceInput(cr)
	if err := e.preUpdate(ctx, cr, input); err != nil {
		return managed.ExternalUpdate{}, errors.Wrap(err, "pre-update failed")
	}
	resp, err := e.client.ModifyDBInstanceWithContext(ctx, input)
	return e.postUpdate(ctx, cr, resp, managed.ExternalUpdate{}, awsclient.Wrap(err, errUpdate))
}

func (e *external) Delete(ctx context.Context, mg cpresource.Managed) error {
	cr, ok := mg.(*svcapitypes.DBInstance)
	if !ok {
		return errors.New(errUnexpectedObject)
	}
	cr.Status.SetConditions(xpv1.Deleting())
	input := GenerateDeleteDBInstanceInput(cr)
	ignore, err := e.preDelete(ctx, cr, input)
	if err != nil {
		return errors.Wrap(err, "pre-delete failed")
	}
	if ignore {
		return nil
	}
	resp, err := e.client.DeleteDBInstanceWithContext(ctx, input)
	return e.postDelete(ctx, cr, resp, awsclient.Wrap(cpresource.Ignore(IsNotFound, err), errDelete))
}

type option func(*external)

func newExternal(kube client.Client, client svcsdkapi.RDSAPI, opts []option) *external {
	e := &external{
		kube:           kube,
		client:         client,
		preObserve:     nopPreObserve,
		postObserve:    nopPostObserve,
		lateInitialize: nopLateInitialize,
		isUpToDate:     alwaysUpToDate,
		filterList:     nopFilterList,
		preCreate:      nopPreCreate,
		postCreate:     nopPostCreate,
		preDelete:      nopPreDelete,
		postDelete:     nopPostDelete,
		preUpdate:      nopPreUpdate,
		postUpdate:     nopPostUpdate,
	}
	for _, f := range opts {
		f(e)
	}
	return e
}

type external struct {
	kube           client.Client
	client         svcsdkapi.RDSAPI
	preObserve     func(context.Context, *svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesInput) error
	postObserve    func(context.Context, *svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput, managed.ExternalObservation, error) (managed.ExternalObservation, error)
	filterList     func(*svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput) *svcsdk.DescribeDBInstancesOutput
	lateInitialize func(*svcapitypes.DBInstanceParameters, *svcsdk.DescribeDBInstancesOutput) error
	isUpToDate     func(*svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput) (bool, error)
	preCreate      func(context.Context, *svcapitypes.DBInstance, *svcsdk.CreateDBInstanceInput) error
	postCreate     func(context.Context, *svcapitypes.DBInstance, *svcsdk.CreateDBInstanceOutput, managed.ExternalCreation, error) (managed.ExternalCreation, error)
	preDelete      func(context.Context, *svcapitypes.DBInstance, *svcsdk.DeleteDBInstanceInput) (bool, error)
	postDelete     func(context.Context, *svcapitypes.DBInstance, *svcsdk.DeleteDBInstanceOutput, error) error
	preUpdate      func(context.Context, *svcapitypes.DBInstance, *svcsdk.ModifyDBInstanceInput) error
	postUpdate     func(context.Context, *svcapitypes.DBInstance, *svcsdk.ModifyDBInstanceOutput, managed.ExternalUpdate, error) (managed.ExternalUpdate, error)
}

func nopPreObserve(context.Context, *svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesInput) error {
	return nil
}
func nopPostObserve(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.DescribeDBInstancesOutput, obs managed.ExternalObservation, err error) (managed.ExternalObservation, error) {
	return obs, err
}
func nopFilterList(_ *svcapitypes.DBInstance, list *svcsdk.DescribeDBInstancesOutput) *svcsdk.DescribeDBInstancesOutput {
	return list
}

func nopLateInitialize(*svcapitypes.DBInstanceParameters, *svcsdk.DescribeDBInstancesOutput) error {
	return nil
}
func alwaysUpToDate(*svcapitypes.DBInstance, *svcsdk.DescribeDBInstancesOutput) (bool, error) {
	return true, nil
}

func nopPreCreate(context.Context, *svcapitypes.DBInstance, *svcsdk.CreateDBInstanceInput) error {
	return nil
}
func nopPostCreate(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.CreateDBInstanceOutput, cre managed.ExternalCreation, err error) (managed.ExternalCreation, error) {
	return cre, err
}
func nopPreDelete(context.Context, *svcapitypes.DBInstance, *svcsdk.DeleteDBInstanceInput) (bool, error) {
	return false, nil
}
func nopPostDelete(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.DeleteDBInstanceOutput, err error) error {
	return err
}
func nopPreUpdate(context.Context, *svcapitypes.DBInstance, *svcsdk.ModifyDBInstanceInput) error {
	return nil
}
func nopPostUpdate(_ context.Context, _ *svcapitypes.DBInstance, _ *svcsdk.ModifyDBInstanceOutput, upd managed.ExternalUpdate, err error) (managed.ExternalUpdate, error) {
	return upd, err
}
