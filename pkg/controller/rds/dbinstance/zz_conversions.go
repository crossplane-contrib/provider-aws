/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package dbinstance

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/rds"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/rds/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeDBInstancesInput returns input for read
// operation.
func GenerateDescribeDBInstancesInput(cr *svcapitypes.DBInstance) *svcsdk.DescribeDBInstancesInput {
	res := &svcsdk.DescribeDBInstancesInput{}

	if cr.Status.AtProvider.DBInstanceIdentifier != nil {
		res.SetDBInstanceIdentifier(*cr.Status.AtProvider.DBInstanceIdentifier)
	}

	return res
}

// GenerateDBInstance returns the current state in the form of *svcapitypes.DBInstance.
func GenerateDBInstance(resp *svcsdk.DescribeDBInstancesOutput) *svcapitypes.DBInstance {
	cr := &svcapitypes.DBInstance{}

	found := false
	for _, elem := range resp.DBInstances {
		if elem.ActivityStreamEngineNativeAuditFieldsIncluded != nil {
			cr.Status.AtProvider.ActivityStreamEngineNativeAuditFieldsIncluded = elem.ActivityStreamEngineNativeAuditFieldsIncluded
		} else {
			cr.Status.AtProvider.ActivityStreamEngineNativeAuditFieldsIncluded = nil
		}
		if elem.ActivityStreamKinesisStreamName != nil {
			cr.Status.AtProvider.ActivityStreamKinesisStreamName = elem.ActivityStreamKinesisStreamName
		} else {
			cr.Status.AtProvider.ActivityStreamKinesisStreamName = nil
		}
		if elem.ActivityStreamKmsKeyId != nil {
			cr.Status.AtProvider.ActivityStreamKMSKeyID = elem.ActivityStreamKmsKeyId
		} else {
			cr.Status.AtProvider.ActivityStreamKMSKeyID = nil
		}
		if elem.ActivityStreamMode != nil {
			cr.Status.AtProvider.ActivityStreamMode = elem.ActivityStreamMode
		} else {
			cr.Status.AtProvider.ActivityStreamMode = nil
		}
		if elem.ActivityStreamStatus != nil {
			cr.Status.AtProvider.ActivityStreamStatus = elem.ActivityStreamStatus
		} else {
			cr.Status.AtProvider.ActivityStreamStatus = nil
		}
		if elem.AllocatedStorage != nil {
			cr.Spec.ForProvider.AllocatedStorage = elem.AllocatedStorage
		} else {
			cr.Spec.ForProvider.AllocatedStorage = nil
		}
		if elem.AssociatedRoles != nil {
			f6 := []*svcapitypes.DBInstanceRole{}
			for _, f6iter := range elem.AssociatedRoles {
				f6elem := &svcapitypes.DBInstanceRole{}
				if f6iter.FeatureName != nil {
					f6elem.FeatureName = f6iter.FeatureName
				}
				if f6iter.RoleArn != nil {
					f6elem.RoleARN = f6iter.RoleArn
				}
				if f6iter.Status != nil {
					f6elem.Status = f6iter.Status
				}
				f6 = append(f6, f6elem)
			}
			cr.Status.AtProvider.AssociatedRoles = f6
		} else {
			cr.Status.AtProvider.AssociatedRoles = nil
		}
		if elem.AutoMinorVersionUpgrade != nil {
			cr.Spec.ForProvider.AutoMinorVersionUpgrade = elem.AutoMinorVersionUpgrade
		} else {
			cr.Spec.ForProvider.AutoMinorVersionUpgrade = nil
		}
		if elem.AutomaticRestartTime != nil {
			cr.Status.AtProvider.AutomaticRestartTime = &metav1.Time{*elem.AutomaticRestartTime}
		} else {
			cr.Status.AtProvider.AutomaticRestartTime = nil
		}
		if elem.AutomationMode != nil {
			cr.Status.AtProvider.AutomationMode = elem.AutomationMode
		} else {
			cr.Status.AtProvider.AutomationMode = nil
		}
		if elem.AvailabilityZone != nil {
			cr.Spec.ForProvider.AvailabilityZone = elem.AvailabilityZone
		} else {
			cr.Spec.ForProvider.AvailabilityZone = nil
		}
		if elem.AwsBackupRecoveryPointArn != nil {
			cr.Status.AtProvider.AWSBackupRecoveryPointARN = elem.AwsBackupRecoveryPointArn
		} else {
			cr.Status.AtProvider.AWSBackupRecoveryPointARN = nil
		}
		if elem.BackupRetentionPeriod != nil {
			cr.Spec.ForProvider.BackupRetentionPeriod = elem.BackupRetentionPeriod
		} else {
			cr.Spec.ForProvider.BackupRetentionPeriod = nil
		}
		if elem.BackupTarget != nil {
			cr.Spec.ForProvider.BackupTarget = elem.BackupTarget
		} else {
			cr.Spec.ForProvider.BackupTarget = nil
		}
		if elem.CACertificateIdentifier != nil {
			cr.Status.AtProvider.CACertificateIdentifier = elem.CACertificateIdentifier
		} else {
			cr.Status.AtProvider.CACertificateIdentifier = nil
		}
		if elem.CharacterSetName != nil {
			cr.Spec.ForProvider.CharacterSetName = elem.CharacterSetName
		} else {
			cr.Spec.ForProvider.CharacterSetName = nil
		}
		if elem.CopyTagsToSnapshot != nil {
			cr.Spec.ForProvider.CopyTagsToSnapshot = elem.CopyTagsToSnapshot
		} else {
			cr.Spec.ForProvider.CopyTagsToSnapshot = nil
		}
		if elem.CustomIamInstanceProfile != nil {
			cr.Spec.ForProvider.CustomIAMInstanceProfile = elem.CustomIamInstanceProfile
		} else {
			cr.Spec.ForProvider.CustomIAMInstanceProfile = nil
		}
		if elem.CustomerOwnedIpEnabled != nil {
			cr.Status.AtProvider.CustomerOwnedIPEnabled = elem.CustomerOwnedIpEnabled
		} else {
			cr.Status.AtProvider.CustomerOwnedIPEnabled = nil
		}
		if elem.DBClusterIdentifier != nil {
			cr.Spec.ForProvider.DBClusterIdentifier = elem.DBClusterIdentifier
		} else {
			cr.Spec.ForProvider.DBClusterIdentifier = nil
		}
		if elem.DBInstanceArn != nil {
			cr.Status.AtProvider.DBInstanceARN = elem.DBInstanceArn
		} else {
			cr.Status.AtProvider.DBInstanceARN = nil
		}
		if elem.DBInstanceAutomatedBackupsReplications != nil {
			f21 := []*svcapitypes.DBInstanceAutomatedBackupsReplication{}
			for _, f21iter := range elem.DBInstanceAutomatedBackupsReplications {
				f21elem := &svcapitypes.DBInstanceAutomatedBackupsReplication{}
				if f21iter.DBInstanceAutomatedBackupsArn != nil {
					f21elem.DBInstanceAutomatedBackupsARN = f21iter.DBInstanceAutomatedBackupsArn
				}
				f21 = append(f21, f21elem)
			}
			cr.Status.AtProvider.DBInstanceAutomatedBackupsReplications = f21
		} else {
			cr.Status.AtProvider.DBInstanceAutomatedBackupsReplications = nil
		}
		if elem.DBInstanceClass != nil {
			cr.Spec.ForProvider.DBInstanceClass = elem.DBInstanceClass
		} else {
			cr.Spec.ForProvider.DBInstanceClass = nil
		}
		if elem.DBInstanceIdentifier != nil {
			cr.Status.AtProvider.DBInstanceIdentifier = elem.DBInstanceIdentifier
		} else {
			cr.Status.AtProvider.DBInstanceIdentifier = nil
		}
		if elem.DBInstanceStatus != nil {
			cr.Status.AtProvider.DBInstanceStatus = elem.DBInstanceStatus
		} else {
			cr.Status.AtProvider.DBInstanceStatus = nil
		}
		if elem.DBName != nil {
			cr.Spec.ForProvider.DBName = elem.DBName
		} else {
			cr.Spec.ForProvider.DBName = nil
		}
		if elem.DBParameterGroups != nil {
			f26 := []*svcapitypes.DBParameterGroupStatus_SDK{}
			for _, f26iter := range elem.DBParameterGroups {
				f26elem := &svcapitypes.DBParameterGroupStatus_SDK{}
				if f26iter.DBParameterGroupName != nil {
					f26elem.DBParameterGroupName = f26iter.DBParameterGroupName
				}
				if f26iter.ParameterApplyStatus != nil {
					f26elem.ParameterApplyStatus = f26iter.ParameterApplyStatus
				}
				f26 = append(f26, f26elem)
			}
			cr.Status.AtProvider.DBParameterGroups = f26
		} else {
			cr.Status.AtProvider.DBParameterGroups = nil
		}
		if elem.DBSecurityGroups != nil {
			f27 := []*svcapitypes.DBSecurityGroupMembership{}
			for _, f27iter := range elem.DBSecurityGroups {
				f27elem := &svcapitypes.DBSecurityGroupMembership{}
				if f27iter.DBSecurityGroupName != nil {
					f27elem.DBSecurityGroupName = f27iter.DBSecurityGroupName
				}
				if f27iter.Status != nil {
					f27elem.Status = f27iter.Status
				}
				f27 = append(f27, f27elem)
			}
			cr.Status.AtProvider.DBSecurityGroups = f27
		} else {
			cr.Status.AtProvider.DBSecurityGroups = nil
		}
		if elem.DBSubnetGroup != nil {
			f28 := &svcapitypes.DBSubnetGroup{}
			if elem.DBSubnetGroup.DBSubnetGroupArn != nil {
				f28.DBSubnetGroupARN = elem.DBSubnetGroup.DBSubnetGroupArn
			}
			if elem.DBSubnetGroup.DBSubnetGroupDescription != nil {
				f28.DBSubnetGroupDescription = elem.DBSubnetGroup.DBSubnetGroupDescription
			}
			if elem.DBSubnetGroup.DBSubnetGroupName != nil {
				f28.DBSubnetGroupName = elem.DBSubnetGroup.DBSubnetGroupName
			}
			if elem.DBSubnetGroup.SubnetGroupStatus != nil {
				f28.SubnetGroupStatus = elem.DBSubnetGroup.SubnetGroupStatus
			}
			if elem.DBSubnetGroup.Subnets != nil {
				f28f4 := []*svcapitypes.Subnet{}
				for _, f28f4iter := range elem.DBSubnetGroup.Subnets {
					f28f4elem := &svcapitypes.Subnet{}
					if f28f4iter.SubnetAvailabilityZone != nil {
						f28f4elemf0 := &svcapitypes.AvailabilityZone{}
						if f28f4iter.SubnetAvailabilityZone.Name != nil {
							f28f4elemf0.Name = f28f4iter.SubnetAvailabilityZone.Name
						}
						f28f4elem.SubnetAvailabilityZone = f28f4elemf0
					}
					if f28f4iter.SubnetIdentifier != nil {
						f28f4elem.SubnetIdentifier = f28f4iter.SubnetIdentifier
					}
					if f28f4iter.SubnetOutpost != nil {
						f28f4elemf2 := &svcapitypes.Outpost{}
						if f28f4iter.SubnetOutpost.Arn != nil {
							f28f4elemf2.ARN = f28f4iter.SubnetOutpost.Arn
						}
						f28f4elem.SubnetOutpost = f28f4elemf2
					}
					if f28f4iter.SubnetStatus != nil {
						f28f4elem.SubnetStatus = f28f4iter.SubnetStatus
					}
					f28f4 = append(f28f4, f28f4elem)
				}
				f28.Subnets = f28f4
			}
			if elem.DBSubnetGroup.VpcId != nil {
				f28.VPCID = elem.DBSubnetGroup.VpcId
			}
			cr.Status.AtProvider.DBSubnetGroup = f28
		} else {
			cr.Status.AtProvider.DBSubnetGroup = nil
		}
		if elem.DbInstancePort != nil {
			cr.Status.AtProvider.DBInstancePort = elem.DbInstancePort
		} else {
			cr.Status.AtProvider.DBInstancePort = nil
		}
		if elem.DbiResourceId != nil {
			cr.Status.AtProvider.DBIResourceID = elem.DbiResourceId
		} else {
			cr.Status.AtProvider.DBIResourceID = nil
		}
		if elem.DeletionProtection != nil {
			cr.Spec.ForProvider.DeletionProtection = elem.DeletionProtection
		} else {
			cr.Spec.ForProvider.DeletionProtection = nil
		}
		if elem.DomainMemberships != nil {
			f32 := []*svcapitypes.DomainMembership{}
			for _, f32iter := range elem.DomainMemberships {
				f32elem := &svcapitypes.DomainMembership{}
				if f32iter.Domain != nil {
					f32elem.Domain = f32iter.Domain
				}
				if f32iter.FQDN != nil {
					f32elem.FQDN = f32iter.FQDN
				}
				if f32iter.IAMRoleName != nil {
					f32elem.IAMRoleName = f32iter.IAMRoleName
				}
				if f32iter.Status != nil {
					f32elem.Status = f32iter.Status
				}
				f32 = append(f32, f32elem)
			}
			cr.Status.AtProvider.DomainMemberships = f32
		} else {
			cr.Status.AtProvider.DomainMemberships = nil
		}
		if elem.EnabledCloudwatchLogsExports != nil {
			f33 := []*string{}
			for _, f33iter := range elem.EnabledCloudwatchLogsExports {
				var f33elem string
				f33elem = *f33iter
				f33 = append(f33, &f33elem)
			}
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = f33
		} else {
			cr.Status.AtProvider.EnabledCloudwatchLogsExports = nil
		}
		if elem.Endpoint != nil {
			f34 := &svcapitypes.Endpoint{}
			if elem.Endpoint.Address != nil {
				f34.Address = elem.Endpoint.Address
			}
			if elem.Endpoint.HostedZoneId != nil {
				f34.HostedZoneID = elem.Endpoint.HostedZoneId
			}
			if elem.Endpoint.Port != nil {
				f34.Port = elem.Endpoint.Port
			}
			cr.Status.AtProvider.Endpoint = f34
		} else {
			cr.Status.AtProvider.Endpoint = nil
		}
		if elem.Engine != nil {
			cr.Spec.ForProvider.Engine = elem.Engine
		} else {
			cr.Spec.ForProvider.Engine = nil
		}
		if elem.EngineVersion != nil {
			cr.Spec.ForProvider.EngineVersion = elem.EngineVersion
		} else {
			cr.Spec.ForProvider.EngineVersion = nil
		}
		if elem.EnhancedMonitoringResourceArn != nil {
			cr.Status.AtProvider.EnhancedMonitoringResourceARN = elem.EnhancedMonitoringResourceArn
		} else {
			cr.Status.AtProvider.EnhancedMonitoringResourceARN = nil
		}
		if elem.IAMDatabaseAuthenticationEnabled != nil {
			cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = elem.IAMDatabaseAuthenticationEnabled
		} else {
			cr.Status.AtProvider.IAMDatabaseAuthenticationEnabled = nil
		}
		if elem.InstanceCreateTime != nil {
			cr.Status.AtProvider.InstanceCreateTime = &metav1.Time{*elem.InstanceCreateTime}
		} else {
			cr.Status.AtProvider.InstanceCreateTime = nil
		}
		if elem.Iops != nil {
			cr.Spec.ForProvider.IOPS = elem.Iops
		} else {
			cr.Spec.ForProvider.IOPS = nil
		}
		if elem.KmsKeyId != nil {
			cr.Spec.ForProvider.KMSKeyID = elem.KmsKeyId
		} else {
			cr.Spec.ForProvider.KMSKeyID = nil
		}
		if elem.LatestRestorableTime != nil {
			cr.Status.AtProvider.LatestRestorableTime = &metav1.Time{*elem.LatestRestorableTime}
		} else {
			cr.Status.AtProvider.LatestRestorableTime = nil
		}
		if elem.LicenseModel != nil {
			cr.Spec.ForProvider.LicenseModel = elem.LicenseModel
		} else {
			cr.Spec.ForProvider.LicenseModel = nil
		}
		if elem.ListenerEndpoint != nil {
			f44 := &svcapitypes.Endpoint{}
			if elem.ListenerEndpoint.Address != nil {
				f44.Address = elem.ListenerEndpoint.Address
			}
			if elem.ListenerEndpoint.HostedZoneId != nil {
				f44.HostedZoneID = elem.ListenerEndpoint.HostedZoneId
			}
			if elem.ListenerEndpoint.Port != nil {
				f44.Port = elem.ListenerEndpoint.Port
			}
			cr.Status.AtProvider.ListenerEndpoint = f44
		} else {
			cr.Status.AtProvider.ListenerEndpoint = nil
		}
		if elem.MasterUsername != nil {
			cr.Spec.ForProvider.MasterUsername = elem.MasterUsername
		} else {
			cr.Spec.ForProvider.MasterUsername = nil
		}
		if elem.MaxAllocatedStorage != nil {
			cr.Spec.ForProvider.MaxAllocatedStorage = elem.MaxAllocatedStorage
		} else {
			cr.Spec.ForProvider.MaxAllocatedStorage = nil
		}
		if elem.MonitoringInterval != nil {
			cr.Spec.ForProvider.MonitoringInterval = elem.MonitoringInterval
		} else {
			cr.Spec.ForProvider.MonitoringInterval = nil
		}
		if elem.MonitoringRoleArn != nil {
			cr.Spec.ForProvider.MonitoringRoleARN = elem.MonitoringRoleArn
		} else {
			cr.Spec.ForProvider.MonitoringRoleARN = nil
		}
		if elem.MultiAZ != nil {
			cr.Spec.ForProvider.MultiAZ = elem.MultiAZ
		} else {
			cr.Spec.ForProvider.MultiAZ = nil
		}
		if elem.NcharCharacterSetName != nil {
			cr.Spec.ForProvider.NcharCharacterSetName = elem.NcharCharacterSetName
		} else {
			cr.Spec.ForProvider.NcharCharacterSetName = nil
		}
		if elem.OptionGroupMemberships != nil {
			f51 := []*svcapitypes.OptionGroupMembership{}
			for _, f51iter := range elem.OptionGroupMemberships {
				f51elem := &svcapitypes.OptionGroupMembership{}
				if f51iter.OptionGroupName != nil {
					f51elem.OptionGroupName = f51iter.OptionGroupName
				}
				if f51iter.Status != nil {
					f51elem.Status = f51iter.Status
				}
				f51 = append(f51, f51elem)
			}
			cr.Status.AtProvider.OptionGroupMemberships = f51
		} else {
			cr.Status.AtProvider.OptionGroupMemberships = nil
		}
		if elem.PendingModifiedValues != nil {
			f52 := &svcapitypes.PendingModifiedValues{}
			if elem.PendingModifiedValues.AllocatedStorage != nil {
				f52.AllocatedStorage = elem.PendingModifiedValues.AllocatedStorage
			}
			if elem.PendingModifiedValues.AutomationMode != nil {
				f52.AutomationMode = elem.PendingModifiedValues.AutomationMode
			}
			if elem.PendingModifiedValues.BackupRetentionPeriod != nil {
				f52.BackupRetentionPeriod = elem.PendingModifiedValues.BackupRetentionPeriod
			}
			if elem.PendingModifiedValues.CACertificateIdentifier != nil {
				f52.CACertificateIdentifier = elem.PendingModifiedValues.CACertificateIdentifier
			}
			if elem.PendingModifiedValues.DBInstanceClass != nil {
				f52.DBInstanceClass = elem.PendingModifiedValues.DBInstanceClass
			}
			if elem.PendingModifiedValues.DBInstanceIdentifier != nil {
				f52.DBInstanceIdentifier = elem.PendingModifiedValues.DBInstanceIdentifier
			}
			if elem.PendingModifiedValues.DBSubnetGroupName != nil {
				f52.DBSubnetGroupName = elem.PendingModifiedValues.DBSubnetGroupName
			}
			if elem.PendingModifiedValues.EngineVersion != nil {
				f52.EngineVersion = elem.PendingModifiedValues.EngineVersion
			}
			if elem.PendingModifiedValues.IAMDatabaseAuthenticationEnabled != nil {
				f52.IAMDatabaseAuthenticationEnabled = elem.PendingModifiedValues.IAMDatabaseAuthenticationEnabled
			}
			if elem.PendingModifiedValues.Iops != nil {
				f52.IOPS = elem.PendingModifiedValues.Iops
			}
			if elem.PendingModifiedValues.LicenseModel != nil {
				f52.LicenseModel = elem.PendingModifiedValues.LicenseModel
			}
			if elem.PendingModifiedValues.MasterUserPassword != nil {
				f52.MasterUserPassword = elem.PendingModifiedValues.MasterUserPassword
			}
			if elem.PendingModifiedValues.MultiAZ != nil {
				f52.MultiAZ = elem.PendingModifiedValues.MultiAZ
			}
			if elem.PendingModifiedValues.PendingCloudwatchLogsExports != nil {
				f52f13 := &svcapitypes.PendingCloudwatchLogsExports{}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable != nil {
					f52f13f0 := []*string{}
					for _, f52f13f0iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToDisable {
						var f52f13f0elem string
						f52f13f0elem = *f52f13f0iter
						f52f13f0 = append(f52f13f0, &f52f13f0elem)
					}
					f52f13.LogTypesToDisable = f52f13f0
				}
				if elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable != nil {
					f52f13f1 := []*string{}
					for _, f52f13f1iter := range elem.PendingModifiedValues.PendingCloudwatchLogsExports.LogTypesToEnable {
						var f52f13f1elem string
						f52f13f1elem = *f52f13f1iter
						f52f13f1 = append(f52f13f1, &f52f13f1elem)
					}
					f52f13.LogTypesToEnable = f52f13f1
				}
				f52.PendingCloudwatchLogsExports = f52f13
			}
			if elem.PendingModifiedValues.Port != nil {
				f52.Port = elem.PendingModifiedValues.Port
			}
			if elem.PendingModifiedValues.ProcessorFeatures != nil {
				f52f15 := []*svcapitypes.ProcessorFeature{}
				for _, f52f15iter := range elem.PendingModifiedValues.ProcessorFeatures {
					f52f15elem := &svcapitypes.ProcessorFeature{}
					if f52f15iter.Name != nil {
						f52f15elem.Name = f52f15iter.Name
					}
					if f52f15iter.Value != nil {
						f52f15elem.Value = f52f15iter.Value
					}
					f52f15 = append(f52f15, f52f15elem)
				}
				f52.ProcessorFeatures = f52f15
			}
			if elem.PendingModifiedValues.ResumeFullAutomationModeTime != nil {
				f52.ResumeFullAutomationModeTime = &metav1.Time{*elem.PendingModifiedValues.ResumeFullAutomationModeTime}
			}
			if elem.PendingModifiedValues.StorageType != nil {
				f52.StorageType = elem.PendingModifiedValues.StorageType
			}
			cr.Status.AtProvider.PendingModifiedValues = f52
		} else {
			cr.Status.AtProvider.PendingModifiedValues = nil
		}
		if elem.PerformanceInsightsEnabled != nil {
			cr.Status.AtProvider.PerformanceInsightsEnabled = elem.PerformanceInsightsEnabled
		} else {
			cr.Status.AtProvider.PerformanceInsightsEnabled = nil
		}
		if elem.PerformanceInsightsKMSKeyId != nil {
			cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = elem.PerformanceInsightsKMSKeyId
		} else {
			cr.Spec.ForProvider.PerformanceInsightsKMSKeyID = nil
		}
		if elem.PerformanceInsightsRetentionPeriod != nil {
			cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod = elem.PerformanceInsightsRetentionPeriod
		} else {
			cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod = nil
		}
		if elem.PreferredBackupWindow != nil {
			cr.Spec.ForProvider.PreferredBackupWindow = elem.PreferredBackupWindow
		} else {
			cr.Spec.ForProvider.PreferredBackupWindow = nil
		}
		if elem.PreferredMaintenanceWindow != nil {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = elem.PreferredMaintenanceWindow
		} else {
			cr.Spec.ForProvider.PreferredMaintenanceWindow = nil
		}
		if elem.ProcessorFeatures != nil {
			f58 := []*svcapitypes.ProcessorFeature{}
			for _, f58iter := range elem.ProcessorFeatures {
				f58elem := &svcapitypes.ProcessorFeature{}
				if f58iter.Name != nil {
					f58elem.Name = f58iter.Name
				}
				if f58iter.Value != nil {
					f58elem.Value = f58iter.Value
				}
				f58 = append(f58, f58elem)
			}
			cr.Spec.ForProvider.ProcessorFeatures = f58
		} else {
			cr.Spec.ForProvider.ProcessorFeatures = nil
		}
		if elem.PromotionTier != nil {
			cr.Spec.ForProvider.PromotionTier = elem.PromotionTier
		} else {
			cr.Spec.ForProvider.PromotionTier = nil
		}
		if elem.PubliclyAccessible != nil {
			cr.Spec.ForProvider.PubliclyAccessible = elem.PubliclyAccessible
		} else {
			cr.Spec.ForProvider.PubliclyAccessible = nil
		}
		if elem.ReadReplicaDBClusterIdentifiers != nil {
			f61 := []*string{}
			for _, f61iter := range elem.ReadReplicaDBClusterIdentifiers {
				var f61elem string
				f61elem = *f61iter
				f61 = append(f61, &f61elem)
			}
			cr.Status.AtProvider.ReadReplicaDBClusterIdentifiers = f61
		} else {
			cr.Status.AtProvider.ReadReplicaDBClusterIdentifiers = nil
		}
		if elem.ReadReplicaDBInstanceIdentifiers != nil {
			f62 := []*string{}
			for _, f62iter := range elem.ReadReplicaDBInstanceIdentifiers {
				var f62elem string
				f62elem = *f62iter
				f62 = append(f62, &f62elem)
			}
			cr.Status.AtProvider.ReadReplicaDBInstanceIdentifiers = f62
		} else {
			cr.Status.AtProvider.ReadReplicaDBInstanceIdentifiers = nil
		}
		if elem.ReadReplicaSourceDBInstanceIdentifier != nil {
			cr.Status.AtProvider.ReadReplicaSourceDBInstanceIdentifier = elem.ReadReplicaSourceDBInstanceIdentifier
		} else {
			cr.Status.AtProvider.ReadReplicaSourceDBInstanceIdentifier = nil
		}
		if elem.ReplicaMode != nil {
			cr.Status.AtProvider.ReplicaMode = elem.ReplicaMode
		} else {
			cr.Status.AtProvider.ReplicaMode = nil
		}
		if elem.ResumeFullAutomationModeTime != nil {
			cr.Status.AtProvider.ResumeFullAutomationModeTime = &metav1.Time{*elem.ResumeFullAutomationModeTime}
		} else {
			cr.Status.AtProvider.ResumeFullAutomationModeTime = nil
		}
		if elem.SecondaryAvailabilityZone != nil {
			cr.Status.AtProvider.SecondaryAvailabilityZone = elem.SecondaryAvailabilityZone
		} else {
			cr.Status.AtProvider.SecondaryAvailabilityZone = nil
		}
		if elem.StatusInfos != nil {
			f67 := []*svcapitypes.DBInstanceStatusInfo{}
			for _, f67iter := range elem.StatusInfos {
				f67elem := &svcapitypes.DBInstanceStatusInfo{}
				if f67iter.Message != nil {
					f67elem.Message = f67iter.Message
				}
				if f67iter.Normal != nil {
					f67elem.Normal = f67iter.Normal
				}
				if f67iter.Status != nil {
					f67elem.Status = f67iter.Status
				}
				if f67iter.StatusType != nil {
					f67elem.StatusType = f67iter.StatusType
				}
				f67 = append(f67, f67elem)
			}
			cr.Status.AtProvider.StatusInfos = f67
		} else {
			cr.Status.AtProvider.StatusInfos = nil
		}
		if elem.StorageEncrypted != nil {
			cr.Spec.ForProvider.StorageEncrypted = elem.StorageEncrypted
		} else {
			cr.Spec.ForProvider.StorageEncrypted = nil
		}
		if elem.StorageType != nil {
			cr.Spec.ForProvider.StorageType = elem.StorageType
		} else {
			cr.Spec.ForProvider.StorageType = nil
		}
		if elem.TagList != nil {
			f70 := []*svcapitypes.Tag{}
			for _, f70iter := range elem.TagList {
				f70elem := &svcapitypes.Tag{}
				if f70iter.Key != nil {
					f70elem.Key = f70iter.Key
				}
				if f70iter.Value != nil {
					f70elem.Value = f70iter.Value
				}
				f70 = append(f70, f70elem)
			}
			cr.Status.AtProvider.TagList = f70
		} else {
			cr.Status.AtProvider.TagList = nil
		}
		if elem.TdeCredentialArn != nil {
			cr.Spec.ForProvider.TDECredentialARN = elem.TdeCredentialArn
		} else {
			cr.Spec.ForProvider.TDECredentialARN = nil
		}
		if elem.Timezone != nil {
			cr.Spec.ForProvider.Timezone = elem.Timezone
		} else {
			cr.Spec.ForProvider.Timezone = nil
		}
		if elem.VpcSecurityGroups != nil {
			f73 := []*svcapitypes.VPCSecurityGroupMembership{}
			for _, f73iter := range elem.VpcSecurityGroups {
				f73elem := &svcapitypes.VPCSecurityGroupMembership{}
				if f73iter.Status != nil {
					f73elem.Status = f73iter.Status
				}
				if f73iter.VpcSecurityGroupId != nil {
					f73elem.VPCSecurityGroupID = f73iter.VpcSecurityGroupId
				}
				f73 = append(f73, f73elem)
			}
			cr.Status.AtProvider.VPCSecurityGroups = f73
		} else {
			cr.Status.AtProvider.VPCSecurityGroups = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateDBInstanceInput returns a create input.
func GenerateCreateDBInstanceInput(cr *svcapitypes.DBInstance) *svcsdk.CreateDBInstanceInput {
	res := &svcsdk.CreateDBInstanceInput{}

	if cr.Spec.ForProvider.AllocatedStorage != nil {
		res.SetAllocatedStorage(*cr.Spec.ForProvider.AllocatedStorage)
	}
	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Spec.ForProvider.AvailabilityZone != nil {
		res.SetAvailabilityZone(*cr.Spec.ForProvider.AvailabilityZone)
	}
	if cr.Spec.ForProvider.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*cr.Spec.ForProvider.BackupRetentionPeriod)
	}
	if cr.Spec.ForProvider.BackupTarget != nil {
		res.SetBackupTarget(*cr.Spec.ForProvider.BackupTarget)
	}
	if cr.Spec.ForProvider.CharacterSetName != nil {
		res.SetCharacterSetName(*cr.Spec.ForProvider.CharacterSetName)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.CustomIAMInstanceProfile != nil {
		res.SetCustomIamInstanceProfile(*cr.Spec.ForProvider.CustomIAMInstanceProfile)
	}
	if cr.Spec.ForProvider.DBClusterIdentifier != nil {
		res.SetDBClusterIdentifier(*cr.Spec.ForProvider.DBClusterIdentifier)
	}
	if cr.Spec.ForProvider.DBInstanceClass != nil {
		res.SetDBInstanceClass(*cr.Spec.ForProvider.DBInstanceClass)
	}
	if cr.Spec.ForProvider.DBName != nil {
		res.SetDBName(*cr.Spec.ForProvider.DBName)
	}
	if cr.Spec.ForProvider.DBParameterGroupName != nil {
		res.SetDBParameterGroupName(*cr.Spec.ForProvider.DBParameterGroupName)
	}
	if cr.Spec.ForProvider.DBSubnetGroupName != nil {
		res.SetDBSubnetGroupName(*cr.Spec.ForProvider.DBSubnetGroupName)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.Domain != nil {
		res.SetDomain(*cr.Spec.ForProvider.Domain)
	}
	if cr.Spec.ForProvider.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*cr.Spec.ForProvider.DomainIAMRoleName)
	}
	if cr.Spec.ForProvider.EnableCloudwatchLogsExports != nil {
		f16 := []*string{}
		for _, f16iter := range cr.Spec.ForProvider.EnableCloudwatchLogsExports {
			var f16elem string
			f16elem = *f16iter
			f16 = append(f16, &f16elem)
		}
		res.SetEnableCloudwatchLogsExports(f16)
	}
	if cr.Spec.ForProvider.EnableCustomerOwnedIP != nil {
		res.SetEnableCustomerOwnedIp(*cr.Spec.ForProvider.EnableCustomerOwnedIP)
	}
	if cr.Spec.ForProvider.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*cr.Spec.ForProvider.EnableIAMDatabaseAuthentication)
	}
	if cr.Spec.ForProvider.EnablePerformanceInsights != nil {
		res.SetEnablePerformanceInsights(*cr.Spec.ForProvider.EnablePerformanceInsights)
	}
	if cr.Spec.ForProvider.Engine != nil {
		res.SetEngine(*cr.Spec.ForProvider.Engine)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.IOPS != nil {
		res.SetIops(*cr.Spec.ForProvider.IOPS)
	}
	if cr.Spec.ForProvider.KMSKeyID != nil {
		res.SetKmsKeyId(*cr.Spec.ForProvider.KMSKeyID)
	}
	if cr.Spec.ForProvider.LicenseModel != nil {
		res.SetLicenseModel(*cr.Spec.ForProvider.LicenseModel)
	}
	if cr.Spec.ForProvider.MasterUsername != nil {
		res.SetMasterUsername(*cr.Spec.ForProvider.MasterUsername)
	}
	if cr.Spec.ForProvider.MaxAllocatedStorage != nil {
		res.SetMaxAllocatedStorage(*cr.Spec.ForProvider.MaxAllocatedStorage)
	}
	if cr.Spec.ForProvider.MonitoringInterval != nil {
		res.SetMonitoringInterval(*cr.Spec.ForProvider.MonitoringInterval)
	}
	if cr.Spec.ForProvider.MonitoringRoleARN != nil {
		res.SetMonitoringRoleArn(*cr.Spec.ForProvider.MonitoringRoleARN)
	}
	if cr.Spec.ForProvider.MultiAZ != nil {
		res.SetMultiAZ(*cr.Spec.ForProvider.MultiAZ)
	}
	if cr.Spec.ForProvider.NcharCharacterSetName != nil {
		res.SetNcharCharacterSetName(*cr.Spec.ForProvider.NcharCharacterSetName)
	}
	if cr.Spec.ForProvider.OptionGroupName != nil {
		res.SetOptionGroupName(*cr.Spec.ForProvider.OptionGroupName)
	}
	if cr.Spec.ForProvider.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*cr.Spec.ForProvider.PerformanceInsightsKMSKeyID)
	}
	if cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod != nil {
		res.SetPerformanceInsightsRetentionPeriod(*cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod)
	}
	if cr.Spec.ForProvider.Port != nil {
		res.SetPort(*cr.Spec.ForProvider.Port)
	}
	if cr.Spec.ForProvider.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*cr.Spec.ForProvider.PreferredBackupWindow)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.ProcessorFeatures != nil {
		f37 := []*svcsdk.ProcessorFeature{}
		for _, f37iter := range cr.Spec.ForProvider.ProcessorFeatures {
			f37elem := &svcsdk.ProcessorFeature{}
			if f37iter.Name != nil {
				f37elem.SetName(*f37iter.Name)
			}
			if f37iter.Value != nil {
				f37elem.SetValue(*f37iter.Value)
			}
			f37 = append(f37, f37elem)
		}
		res.SetProcessorFeatures(f37)
	}
	if cr.Spec.ForProvider.PromotionTier != nil {
		res.SetPromotionTier(*cr.Spec.ForProvider.PromotionTier)
	}
	if cr.Spec.ForProvider.PubliclyAccessible != nil {
		res.SetPubliclyAccessible(*cr.Spec.ForProvider.PubliclyAccessible)
	}
	if cr.Spec.ForProvider.StorageEncrypted != nil {
		res.SetStorageEncrypted(*cr.Spec.ForProvider.StorageEncrypted)
	}
	if cr.Spec.ForProvider.StorageType != nil {
		res.SetStorageType(*cr.Spec.ForProvider.StorageType)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f42 := []*svcsdk.Tag{}
		for _, f42iter := range cr.Spec.ForProvider.Tags {
			f42elem := &svcsdk.Tag{}
			if f42iter.Key != nil {
				f42elem.SetKey(*f42iter.Key)
			}
			if f42iter.Value != nil {
				f42elem.SetValue(*f42iter.Value)
			}
			f42 = append(f42, f42elem)
		}
		res.SetTags(f42)
	}
	if cr.Spec.ForProvider.TDECredentialARN != nil {
		res.SetTdeCredentialArn(*cr.Spec.ForProvider.TDECredentialARN)
	}
	if cr.Spec.ForProvider.TDECredentialPassword != nil {
		res.SetTdeCredentialPassword(*cr.Spec.ForProvider.TDECredentialPassword)
	}
	if cr.Spec.ForProvider.Timezone != nil {
		res.SetTimezone(*cr.Spec.ForProvider.Timezone)
	}

	return res
}

// GenerateModifyDBInstanceInput returns an update input.
func GenerateModifyDBInstanceInput(cr *svcapitypes.DBInstance) *svcsdk.ModifyDBInstanceInput {
	res := &svcsdk.ModifyDBInstanceInput{}

	if cr.Spec.ForProvider.AllocatedStorage != nil {
		res.SetAllocatedStorage(*cr.Spec.ForProvider.AllocatedStorage)
	}
	if cr.Spec.ForProvider.AutoMinorVersionUpgrade != nil {
		res.SetAutoMinorVersionUpgrade(*cr.Spec.ForProvider.AutoMinorVersionUpgrade)
	}
	if cr.Status.AtProvider.AutomationMode != nil {
		res.SetAutomationMode(*cr.Status.AtProvider.AutomationMode)
	}
	if cr.Status.AtProvider.AWSBackupRecoveryPointARN != nil {
		res.SetAwsBackupRecoveryPointArn(*cr.Status.AtProvider.AWSBackupRecoveryPointARN)
	}
	if cr.Spec.ForProvider.BackupRetentionPeriod != nil {
		res.SetBackupRetentionPeriod(*cr.Spec.ForProvider.BackupRetentionPeriod)
	}
	if cr.Status.AtProvider.CACertificateIdentifier != nil {
		res.SetCACertificateIdentifier(*cr.Status.AtProvider.CACertificateIdentifier)
	}
	if cr.Spec.ForProvider.CopyTagsToSnapshot != nil {
		res.SetCopyTagsToSnapshot(*cr.Spec.ForProvider.CopyTagsToSnapshot)
	}
	if cr.Spec.ForProvider.DBInstanceClass != nil {
		res.SetDBInstanceClass(*cr.Spec.ForProvider.DBInstanceClass)
	}
	if cr.Spec.ForProvider.DBParameterGroupName != nil {
		res.SetDBParameterGroupName(*cr.Spec.ForProvider.DBParameterGroupName)
	}
	if cr.Spec.ForProvider.DeletionProtection != nil {
		res.SetDeletionProtection(*cr.Spec.ForProvider.DeletionProtection)
	}
	if cr.Spec.ForProvider.Domain != nil {
		res.SetDomain(*cr.Spec.ForProvider.Domain)
	}
	if cr.Spec.ForProvider.DomainIAMRoleName != nil {
		res.SetDomainIAMRoleName(*cr.Spec.ForProvider.DomainIAMRoleName)
	}
	if cr.Spec.ForProvider.EnableCustomerOwnedIP != nil {
		res.SetEnableCustomerOwnedIp(*cr.Spec.ForProvider.EnableCustomerOwnedIP)
	}
	if cr.Spec.ForProvider.EnableIAMDatabaseAuthentication != nil {
		res.SetEnableIAMDatabaseAuthentication(*cr.Spec.ForProvider.EnableIAMDatabaseAuthentication)
	}
	if cr.Spec.ForProvider.EnablePerformanceInsights != nil {
		res.SetEnablePerformanceInsights(*cr.Spec.ForProvider.EnablePerformanceInsights)
	}
	if cr.Spec.ForProvider.EngineVersion != nil {
		res.SetEngineVersion(*cr.Spec.ForProvider.EngineVersion)
	}
	if cr.Spec.ForProvider.IOPS != nil {
		res.SetIops(*cr.Spec.ForProvider.IOPS)
	}
	if cr.Spec.ForProvider.LicenseModel != nil {
		res.SetLicenseModel(*cr.Spec.ForProvider.LicenseModel)
	}
	if cr.Spec.ForProvider.MaxAllocatedStorage != nil {
		res.SetMaxAllocatedStorage(*cr.Spec.ForProvider.MaxAllocatedStorage)
	}
	if cr.Spec.ForProvider.MonitoringInterval != nil {
		res.SetMonitoringInterval(*cr.Spec.ForProvider.MonitoringInterval)
	}
	if cr.Spec.ForProvider.MonitoringRoleARN != nil {
		res.SetMonitoringRoleArn(*cr.Spec.ForProvider.MonitoringRoleARN)
	}
	if cr.Spec.ForProvider.MultiAZ != nil {
		res.SetMultiAZ(*cr.Spec.ForProvider.MultiAZ)
	}
	if cr.Spec.ForProvider.OptionGroupName != nil {
		res.SetOptionGroupName(*cr.Spec.ForProvider.OptionGroupName)
	}
	if cr.Spec.ForProvider.PerformanceInsightsKMSKeyID != nil {
		res.SetPerformanceInsightsKMSKeyId(*cr.Spec.ForProvider.PerformanceInsightsKMSKeyID)
	}
	if cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod != nil {
		res.SetPerformanceInsightsRetentionPeriod(*cr.Spec.ForProvider.PerformanceInsightsRetentionPeriod)
	}
	if cr.Spec.ForProvider.PreferredBackupWindow != nil {
		res.SetPreferredBackupWindow(*cr.Spec.ForProvider.PreferredBackupWindow)
	}
	if cr.Spec.ForProvider.PreferredMaintenanceWindow != nil {
		res.SetPreferredMaintenanceWindow(*cr.Spec.ForProvider.PreferredMaintenanceWindow)
	}
	if cr.Spec.ForProvider.ProcessorFeatures != nil {
		f33 := []*svcsdk.ProcessorFeature{}
		for _, f33iter := range cr.Spec.ForProvider.ProcessorFeatures {
			f33elem := &svcsdk.ProcessorFeature{}
			if f33iter.Name != nil {
				f33elem.SetName(*f33iter.Name)
			}
			if f33iter.Value != nil {
				f33elem.SetValue(*f33iter.Value)
			}
			f33 = append(f33, f33elem)
		}
		res.SetProcessorFeatures(f33)
	}
	if cr.Spec.ForProvider.PromotionTier != nil {
		res.SetPromotionTier(*cr.Spec.ForProvider.PromotionTier)
	}
	if cr.Spec.ForProvider.PubliclyAccessible != nil {
		res.SetPubliclyAccessible(*cr.Spec.ForProvider.PubliclyAccessible)
	}
	if cr.Status.AtProvider.ReplicaMode != nil {
		res.SetReplicaMode(*cr.Status.AtProvider.ReplicaMode)
	}
	if cr.Spec.ForProvider.StorageType != nil {
		res.SetStorageType(*cr.Spec.ForProvider.StorageType)
	}
	if cr.Spec.ForProvider.TDECredentialARN != nil {
		res.SetTdeCredentialArn(*cr.Spec.ForProvider.TDECredentialARN)
	}
	if cr.Spec.ForProvider.TDECredentialPassword != nil {
		res.SetTdeCredentialPassword(*cr.Spec.ForProvider.TDECredentialPassword)
	}

	return res
}

// GenerateDeleteDBInstanceInput returns a deletion input.
func GenerateDeleteDBInstanceInput(cr *svcapitypes.DBInstance) *svcsdk.DeleteDBInstanceInput {
	res := &svcsdk.DeleteDBInstanceInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "DBInstanceNotFound"
}
