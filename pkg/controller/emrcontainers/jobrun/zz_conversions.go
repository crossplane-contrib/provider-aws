/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package jobrun

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/emrcontainers"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/emrcontainers/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeJobRunInput returns input for read
// operation.
func GenerateDescribeJobRunInput(cr *svcapitypes.JobRun) *svcsdk.DescribeJobRunInput {
	res := &svcsdk.DescribeJobRunInput{}

	if cr.Status.AtProvider.ID != nil {
		res.SetId(*cr.Status.AtProvider.ID)
	}
	if cr.Status.AtProvider.VirtualClusterID != nil {
		res.SetVirtualClusterId(*cr.Status.AtProvider.VirtualClusterID)
	}

	return res
}

// GenerateJobRun returns the current state in the form of *svcapitypes.JobRun.
func GenerateJobRun(resp *svcsdk.DescribeJobRunOutput) *svcapitypes.JobRun {
	cr := &svcapitypes.JobRun{}

	if resp.JobRun.Arn != nil {
		cr.Status.AtProvider.ARN = resp.JobRun.Arn
	} else {
		cr.Status.AtProvider.ARN = nil
	}
	if resp.JobRun.ExecutionRoleArn != nil {
		cr.Spec.ForProvider.ExecutionRoleARN = resp.JobRun.ExecutionRoleArn
	} else {
		cr.Spec.ForProvider.ExecutionRoleARN = nil
	}
	if resp.JobRun.FailureReason != nil {
		cr.Status.AtProvider.FailureReason = resp.JobRun.FailureReason
	} else {
		cr.Status.AtProvider.FailureReason = nil
	}
	if resp.JobRun.Id != nil {
		cr.Status.AtProvider.ID = resp.JobRun.Id
	} else {
		cr.Status.AtProvider.ID = nil
	}
	if resp.JobRun.JobDriver != nil {
		f8 := &svcapitypes.JobDriver{}
		if resp.JobRun.JobDriver.SparkSqlJobDriver != nil {
			f8f0 := &svcapitypes.SparkSQLJobDriver{}
			if resp.JobRun.JobDriver.SparkSqlJobDriver.EntryPoint != nil {
				f8f0.EntryPoint = resp.JobRun.JobDriver.SparkSqlJobDriver.EntryPoint
			}
			if resp.JobRun.JobDriver.SparkSqlJobDriver.SparkSqlParameters != nil {
				f8f0.SparkSQLParameters = resp.JobRun.JobDriver.SparkSqlJobDriver.SparkSqlParameters
			}
			f8.SparkSQLJobDriver = f8f0
		}
		if resp.JobRun.JobDriver.SparkSubmitJobDriver != nil {
			f8f1 := &svcapitypes.SparkSubmitJobDriver{}
			if resp.JobRun.JobDriver.SparkSubmitJobDriver.EntryPoint != nil {
				f8f1.EntryPoint = resp.JobRun.JobDriver.SparkSubmitJobDriver.EntryPoint
			}
			if resp.JobRun.JobDriver.SparkSubmitJobDriver.EntryPointArguments != nil {
				f8f1f1 := []*string{}
				for _, f8f1f1iter := range resp.JobRun.JobDriver.SparkSubmitJobDriver.EntryPointArguments {
					var f8f1f1elem string
					f8f1f1elem = *f8f1f1iter
					f8f1f1 = append(f8f1f1, &f8f1f1elem)
				}
				f8f1.EntryPointArguments = f8f1f1
			}
			if resp.JobRun.JobDriver.SparkSubmitJobDriver.SparkSubmitParameters != nil {
				f8f1.SparkSubmitParameters = resp.JobRun.JobDriver.SparkSubmitJobDriver.SparkSubmitParameters
			}
			f8.SparkSubmitJobDriver = f8f1
		}
		cr.Spec.ForProvider.JobDriver = f8
	} else {
		cr.Spec.ForProvider.JobDriver = nil
	}
	if resp.JobRun.Name != nil {
		cr.Status.AtProvider.Name = resp.JobRun.Name
	} else {
		cr.Status.AtProvider.Name = nil
	}
	if resp.JobRun.ReleaseLabel != nil {
		cr.Spec.ForProvider.ReleaseLabel = resp.JobRun.ReleaseLabel
	} else {
		cr.Spec.ForProvider.ReleaseLabel = nil
	}
	if resp.JobRun.RetryPolicyConfiguration != nil {
		f11 := &svcapitypes.RetryPolicyConfiguration{}
		if resp.JobRun.RetryPolicyConfiguration.MaxAttempts != nil {
			f11.MaxAttempts = resp.JobRun.RetryPolicyConfiguration.MaxAttempts
		}
		cr.Spec.ForProvider.RetryPolicyConfiguration = f11
	} else {
		cr.Spec.ForProvider.RetryPolicyConfiguration = nil
	}
	if resp.JobRun.State != nil {
		cr.Status.AtProvider.State = resp.JobRun.State
	} else {
		cr.Status.AtProvider.State = nil
	}
	if resp.JobRun.StateDetails != nil {
		cr.Status.AtProvider.StateDetails = resp.JobRun.StateDetails
	} else {
		cr.Status.AtProvider.StateDetails = nil
	}
	if resp.JobRun.Tags != nil {
		f15 := map[string]*string{}
		for f15key, f15valiter := range resp.JobRun.Tags {
			var f15val string
			f15val = *f15valiter
			f15[f15key] = &f15val
		}
		cr.Spec.ForProvider.Tags = f15
	} else {
		cr.Spec.ForProvider.Tags = nil
	}
	if resp.JobRun.VirtualClusterId != nil {
		cr.Status.AtProvider.VirtualClusterID = resp.JobRun.VirtualClusterId
	} else {
		cr.Status.AtProvider.VirtualClusterID = nil
	}

	return cr
}

// GenerateStartJobRunInput returns a create input.
func GenerateStartJobRunInput(cr *svcapitypes.JobRun) *svcsdk.StartJobRunInput {
	res := &svcsdk.StartJobRunInput{}

	if cr.Spec.ForProvider.ExecutionRoleARN != nil {
		res.SetExecutionRoleArn(*cr.Spec.ForProvider.ExecutionRoleARN)
	}
	if cr.Spec.ForProvider.JobDriver != nil {
		f1 := &svcsdk.JobDriver{}
		if cr.Spec.ForProvider.JobDriver.SparkSQLJobDriver != nil {
			f1f0 := &svcsdk.SparkSqlJobDriver{}
			if cr.Spec.ForProvider.JobDriver.SparkSQLJobDriver.EntryPoint != nil {
				f1f0.SetEntryPoint(*cr.Spec.ForProvider.JobDriver.SparkSQLJobDriver.EntryPoint)
			}
			if cr.Spec.ForProvider.JobDriver.SparkSQLJobDriver.SparkSQLParameters != nil {
				f1f0.SetSparkSqlParameters(*cr.Spec.ForProvider.JobDriver.SparkSQLJobDriver.SparkSQLParameters)
			}
			f1.SetSparkSqlJobDriver(f1f0)
		}
		if cr.Spec.ForProvider.JobDriver.SparkSubmitJobDriver != nil {
			f1f1 := &svcsdk.SparkSubmitJobDriver{}
			if cr.Spec.ForProvider.JobDriver.SparkSubmitJobDriver.EntryPoint != nil {
				f1f1.SetEntryPoint(*cr.Spec.ForProvider.JobDriver.SparkSubmitJobDriver.EntryPoint)
			}
			if cr.Spec.ForProvider.JobDriver.SparkSubmitJobDriver.EntryPointArguments != nil {
				f1f1f1 := []*string{}
				for _, f1f1f1iter := range cr.Spec.ForProvider.JobDriver.SparkSubmitJobDriver.EntryPointArguments {
					var f1f1f1elem string
					f1f1f1elem = *f1f1f1iter
					f1f1f1 = append(f1f1f1, &f1f1f1elem)
				}
				f1f1.SetEntryPointArguments(f1f1f1)
			}
			if cr.Spec.ForProvider.JobDriver.SparkSubmitJobDriver.SparkSubmitParameters != nil {
				f1f1.SetSparkSubmitParameters(*cr.Spec.ForProvider.JobDriver.SparkSubmitJobDriver.SparkSubmitParameters)
			}
			f1.SetSparkSubmitJobDriver(f1f1)
		}
		res.SetJobDriver(f1)
	}
	if cr.Spec.ForProvider.JobTemplateID != nil {
		res.SetJobTemplateId(*cr.Spec.ForProvider.JobTemplateID)
	}
	if cr.Spec.ForProvider.JobTemplateParameters != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range cr.Spec.ForProvider.JobTemplateParameters {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		res.SetJobTemplateParameters(f3)
	}
	if cr.Spec.ForProvider.ReleaseLabel != nil {
		res.SetReleaseLabel(*cr.Spec.ForProvider.ReleaseLabel)
	}
	if cr.Spec.ForProvider.RetryPolicyConfiguration != nil {
		f5 := &svcsdk.RetryPolicyConfiguration{}
		if cr.Spec.ForProvider.RetryPolicyConfiguration.MaxAttempts != nil {
			f5.SetMaxAttempts(*cr.Spec.ForProvider.RetryPolicyConfiguration.MaxAttempts)
		}
		res.SetRetryPolicyConfiguration(f5)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f6 := map[string]*string{}
		for f6key, f6valiter := range cr.Spec.ForProvider.Tags {
			var f6val string
			f6val = *f6valiter
			f6[f6key] = &f6val
		}
		res.SetTags(f6)
	}

	return res
}

// GenerateCancelJobRunInput returns a deletion input.
func GenerateCancelJobRunInput(cr *svcapitypes.JobRun) *svcsdk.CancelJobRunInput {
	res := &svcsdk.CancelJobRunInput{}

	if cr.Status.AtProvider.ID != nil {
		res.SetId(*cr.Status.AtProvider.ID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
