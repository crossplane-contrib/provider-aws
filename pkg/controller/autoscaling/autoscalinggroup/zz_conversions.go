/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package autoscalinggroup

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/autoscaling"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/autoscaling/v1beta1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeAutoScalingGroupsInput returns input for read
// operation.
func GenerateDescribeAutoScalingGroupsInput(cr *svcapitypes.AutoScalingGroup) *svcsdk.DescribeAutoScalingGroupsInput {
	res := &svcsdk.DescribeAutoScalingGroupsInput{}

	if cr.Status.AtProvider.AutoScalingGroupName != nil {
		f0 := []*string{}
		f0 = append(f0, cr.Status.AtProvider.AutoScalingGroupName)
		res.SetAutoScalingGroupNames(f0)
	}

	return res
}

// GenerateAutoScalingGroup returns the current state in the form of *svcapitypes.AutoScalingGroup.
func GenerateAutoScalingGroup(resp *svcsdk.DescribeAutoScalingGroupsOutput) *svcapitypes.AutoScalingGroup {
	cr := &svcapitypes.AutoScalingGroup{}

	found := false
	for _, elem := range resp.AutoScalingGroups {
		if elem.AutoScalingGroupARN != nil {
			cr.Status.AtProvider.AutoScalingGroupARN = elem.AutoScalingGroupARN
		} else {
			cr.Status.AtProvider.AutoScalingGroupARN = nil
		}
		if elem.AutoScalingGroupName != nil {
			cr.Status.AtProvider.AutoScalingGroupName = elem.AutoScalingGroupName
		} else {
			cr.Status.AtProvider.AutoScalingGroupName = nil
		}
		if elem.AvailabilityZones != nil {
			f2 := []*string{}
			for _, f2iter := range elem.AvailabilityZones {
				var f2elem string
				f2elem = *f2iter
				f2 = append(f2, &f2elem)
			}
			cr.Spec.ForProvider.AvailabilityZones = f2
		} else {
			cr.Spec.ForProvider.AvailabilityZones = nil
		}
		if elem.CapacityRebalance != nil {
			cr.Spec.ForProvider.CapacityRebalance = elem.CapacityRebalance
		} else {
			cr.Spec.ForProvider.CapacityRebalance = nil
		}
		if elem.Context != nil {
			cr.Spec.ForProvider.Context = elem.Context
		} else {
			cr.Spec.ForProvider.Context = nil
		}
		if elem.DefaultCooldown != nil {
			cr.Spec.ForProvider.DefaultCooldown = elem.DefaultCooldown
		} else {
			cr.Spec.ForProvider.DefaultCooldown = nil
		}
		if elem.DefaultInstanceWarmup != nil {
			cr.Spec.ForProvider.DefaultInstanceWarmup = elem.DefaultInstanceWarmup
		} else {
			cr.Spec.ForProvider.DefaultInstanceWarmup = nil
		}
		if elem.DesiredCapacity != nil {
			cr.Spec.ForProvider.DesiredCapacity = elem.DesiredCapacity
		} else {
			cr.Spec.ForProvider.DesiredCapacity = nil
		}
		if elem.DesiredCapacityType != nil {
			cr.Spec.ForProvider.DesiredCapacityType = elem.DesiredCapacityType
		} else {
			cr.Spec.ForProvider.DesiredCapacityType = nil
		}
		if elem.EnabledMetrics != nil {
			f10 := []*svcapitypes.EnabledMetric{}
			for _, f10iter := range elem.EnabledMetrics {
				f10elem := &svcapitypes.EnabledMetric{}
				if f10iter.Granularity != nil {
					f10elem.Granularity = f10iter.Granularity
				}
				if f10iter.Metric != nil {
					f10elem.Metric = f10iter.Metric
				}
				f10 = append(f10, f10elem)
			}
			cr.Status.AtProvider.EnabledMetrics = f10
		} else {
			cr.Status.AtProvider.EnabledMetrics = nil
		}
		if elem.HealthCheckGracePeriod != nil {
			cr.Spec.ForProvider.HealthCheckGracePeriod = elem.HealthCheckGracePeriod
		} else {
			cr.Spec.ForProvider.HealthCheckGracePeriod = nil
		}
		if elem.HealthCheckType != nil {
			cr.Spec.ForProvider.HealthCheckType = elem.HealthCheckType
		} else {
			cr.Spec.ForProvider.HealthCheckType = nil
		}
		if elem.InstanceMaintenancePolicy != nil {
			f13 := &svcapitypes.InstanceMaintenancePolicy{}
			if elem.InstanceMaintenancePolicy.MaxHealthyPercentage != nil {
				f13.MaxHealthyPercentage = elem.InstanceMaintenancePolicy.MaxHealthyPercentage
			}
			if elem.InstanceMaintenancePolicy.MinHealthyPercentage != nil {
				f13.MinHealthyPercentage = elem.InstanceMaintenancePolicy.MinHealthyPercentage
			}
			cr.Spec.ForProvider.InstanceMaintenancePolicy = f13
		} else {
			cr.Spec.ForProvider.InstanceMaintenancePolicy = nil
		}
		if elem.Instances != nil {
			f14 := []*svcapitypes.Instance{}
			for _, f14iter := range elem.Instances {
				f14elem := &svcapitypes.Instance{}
				if f14iter.AvailabilityZone != nil {
					f14elem.AvailabilityZone = f14iter.AvailabilityZone
				}
				if f14iter.HealthStatus != nil {
					f14elem.HealthStatus = f14iter.HealthStatus
				}
				if f14iter.InstanceId != nil {
					f14elem.InstanceID = f14iter.InstanceId
				}
				if f14iter.InstanceType != nil {
					f14elem.InstanceType = f14iter.InstanceType
				}
				if f14iter.LaunchConfigurationName != nil {
					f14elem.LaunchConfigurationName = f14iter.LaunchConfigurationName
				}
				if f14iter.LaunchTemplate != nil {
					f14elemf5 := &svcapitypes.LaunchTemplateSpecification{}
					if f14iter.LaunchTemplate.LaunchTemplateId != nil {
						f14elemf5.LaunchTemplateID = f14iter.LaunchTemplate.LaunchTemplateId
					}
					if f14iter.LaunchTemplate.LaunchTemplateName != nil {
						f14elemf5.LaunchTemplateName = f14iter.LaunchTemplate.LaunchTemplateName
					}
					if f14iter.LaunchTemplate.Version != nil {
						f14elemf5.Version = f14iter.LaunchTemplate.Version
					}
					f14elem.LaunchTemplate = f14elemf5
				}
				if f14iter.LifecycleState != nil {
					f14elem.LifecycleState = f14iter.LifecycleState
				}
				if f14iter.ProtectedFromScaleIn != nil {
					f14elem.ProtectedFromScaleIn = f14iter.ProtectedFromScaleIn
				}
				if f14iter.WeightedCapacity != nil {
					f14elem.WeightedCapacity = f14iter.WeightedCapacity
				}
				f14 = append(f14, f14elem)
			}
			cr.Status.AtProvider.Instances = f14
		} else {
			cr.Status.AtProvider.Instances = nil
		}
		if elem.LaunchConfigurationName != nil {
			cr.Spec.ForProvider.LaunchConfigurationName = elem.LaunchConfigurationName
		} else {
			cr.Spec.ForProvider.LaunchConfigurationName = nil
		}
		if elem.LaunchTemplate != nil {
			f16 := &svcapitypes.LaunchTemplateSpecification{}
			if elem.LaunchTemplate.LaunchTemplateId != nil {
				f16.LaunchTemplateID = elem.LaunchTemplate.LaunchTemplateId
			}
			if elem.LaunchTemplate.LaunchTemplateName != nil {
				f16.LaunchTemplateName = elem.LaunchTemplate.LaunchTemplateName
			}
			if elem.LaunchTemplate.Version != nil {
				f16.Version = elem.LaunchTemplate.Version
			}
			cr.Spec.ForProvider.LaunchTemplate = f16
		} else {
			cr.Spec.ForProvider.LaunchTemplate = nil
		}
		if elem.LoadBalancerNames != nil {
			f17 := []*string{}
			for _, f17iter := range elem.LoadBalancerNames {
				var f17elem string
				f17elem = *f17iter
				f17 = append(f17, &f17elem)
			}
			cr.Spec.ForProvider.LoadBalancerNames = f17
		} else {
			cr.Spec.ForProvider.LoadBalancerNames = nil
		}
		if elem.MaxInstanceLifetime != nil {
			cr.Spec.ForProvider.MaxInstanceLifetime = elem.MaxInstanceLifetime
		} else {
			cr.Spec.ForProvider.MaxInstanceLifetime = nil
		}
		if elem.MaxSize != nil {
			cr.Spec.ForProvider.MaxSize = elem.MaxSize
		} else {
			cr.Spec.ForProvider.MaxSize = nil
		}
		if elem.MinSize != nil {
			cr.Spec.ForProvider.MinSize = elem.MinSize
		} else {
			cr.Spec.ForProvider.MinSize = nil
		}
		if elem.MixedInstancesPolicy != nil {
			f21 := &svcapitypes.MixedInstancesPolicy{}
			if elem.MixedInstancesPolicy.InstancesDistribution != nil {
				f21f0 := &svcapitypes.InstancesDistribution{}
				if elem.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy != nil {
					f21f0.OnDemandAllocationStrategy = elem.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity != nil {
					f21f0.OnDemandBaseCapacity = elem.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity != nil {
					f21f0.OnDemandPercentageAboveBaseCapacity = elem.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy != nil {
					f21f0.SpotAllocationStrategy = elem.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools != nil {
					f21f0.SpotInstancePools = elem.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools
				}
				if elem.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice != nil {
					f21f0.SpotMaxPrice = elem.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice
				}
				f21.InstancesDistribution = f21f0
			}
			if elem.MixedInstancesPolicy.LaunchTemplate != nil {
				f21f1 := &svcapitypes.LaunchTemplate{}
				if elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification != nil {
					f21f1f0 := &svcapitypes.LaunchTemplateSpecification{}
					if elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateId != nil {
						f21f1f0.LaunchTemplateID = elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateId
					}
					if elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName != nil {
						f21f1f0.LaunchTemplateName = elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName
					}
					if elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version != nil {
						f21f1f0.Version = elem.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version
					}
					f21f1.LaunchTemplateSpecification = f21f1f0
				}
				if elem.MixedInstancesPolicy.LaunchTemplate.Overrides != nil {
					f21f1f1 := []*svcapitypes.LaunchTemplateOverrides{}
					for _, f21f1f1iter := range elem.MixedInstancesPolicy.LaunchTemplate.Overrides {
						f21f1f1elem := &svcapitypes.LaunchTemplateOverrides{}
						if f21f1f1iter.InstanceRequirements != nil {
							f21f1f1elemf0 := &svcapitypes.InstanceRequirements{}
							if f21f1f1iter.InstanceRequirements.AcceleratorCount != nil {
								f21f1f1elemf0f0 := &svcapitypes.AcceleratorCountRequest{}
								if f21f1f1iter.InstanceRequirements.AcceleratorCount.Max != nil {
									f21f1f1elemf0f0.Max = f21f1f1iter.InstanceRequirements.AcceleratorCount.Max
								}
								if f21f1f1iter.InstanceRequirements.AcceleratorCount.Min != nil {
									f21f1f1elemf0f0.Min = f21f1f1iter.InstanceRequirements.AcceleratorCount.Min
								}
								f21f1f1elemf0.AcceleratorCount = f21f1f1elemf0f0
							}
							if f21f1f1iter.InstanceRequirements.AcceleratorManufacturers != nil {
								f21f1f1elemf0f1 := []*string{}
								for _, f21f1f1elemf0f1iter := range f21f1f1iter.InstanceRequirements.AcceleratorManufacturers {
									var f21f1f1elemf0f1elem string
									f21f1f1elemf0f1elem = *f21f1f1elemf0f1iter
									f21f1f1elemf0f1 = append(f21f1f1elemf0f1, &f21f1f1elemf0f1elem)
								}
								f21f1f1elemf0.AcceleratorManufacturers = f21f1f1elemf0f1
							}
							if f21f1f1iter.InstanceRequirements.AcceleratorNames != nil {
								f21f1f1elemf0f2 := []*string{}
								for _, f21f1f1elemf0f2iter := range f21f1f1iter.InstanceRequirements.AcceleratorNames {
									var f21f1f1elemf0f2elem string
									f21f1f1elemf0f2elem = *f21f1f1elemf0f2iter
									f21f1f1elemf0f2 = append(f21f1f1elemf0f2, &f21f1f1elemf0f2elem)
								}
								f21f1f1elemf0.AcceleratorNames = f21f1f1elemf0f2
							}
							if f21f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
								f21f1f1elemf0f3 := &svcapitypes.AcceleratorTotalMemoryMiBRequest{}
								if f21f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
									f21f1f1elemf0f3.Max = f21f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Max
								}
								if f21f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
									f21f1f1elemf0f3.Min = f21f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Min
								}
								f21f1f1elemf0.AcceleratorTotalMemoryMiB = f21f1f1elemf0f3
							}
							if f21f1f1iter.InstanceRequirements.AcceleratorTypes != nil {
								f21f1f1elemf0f4 := []*string{}
								for _, f21f1f1elemf0f4iter := range f21f1f1iter.InstanceRequirements.AcceleratorTypes {
									var f21f1f1elemf0f4elem string
									f21f1f1elemf0f4elem = *f21f1f1elemf0f4iter
									f21f1f1elemf0f4 = append(f21f1f1elemf0f4, &f21f1f1elemf0f4elem)
								}
								f21f1f1elemf0.AcceleratorTypes = f21f1f1elemf0f4
							}
							if f21f1f1iter.InstanceRequirements.AllowedInstanceTypes != nil {
								f21f1f1elemf0f5 := []*string{}
								for _, f21f1f1elemf0f5iter := range f21f1f1iter.InstanceRequirements.AllowedInstanceTypes {
									var f21f1f1elemf0f5elem string
									f21f1f1elemf0f5elem = *f21f1f1elemf0f5iter
									f21f1f1elemf0f5 = append(f21f1f1elemf0f5, &f21f1f1elemf0f5elem)
								}
								f21f1f1elemf0.AllowedInstanceTypes = f21f1f1elemf0f5
							}
							if f21f1f1iter.InstanceRequirements.BareMetal != nil {
								f21f1f1elemf0.BareMetal = f21f1f1iter.InstanceRequirements.BareMetal
							}
							if f21f1f1iter.InstanceRequirements.BaselineEbsBandwidthMbps != nil {
								f21f1f1elemf0f7 := &svcapitypes.BaselineEBSBandwidthMbpsRequest{}
								if f21f1f1iter.InstanceRequirements.BaselineEbsBandwidthMbps.Max != nil {
									f21f1f1elemf0f7.Max = f21f1f1iter.InstanceRequirements.BaselineEbsBandwidthMbps.Max
								}
								if f21f1f1iter.InstanceRequirements.BaselineEbsBandwidthMbps.Min != nil {
									f21f1f1elemf0f7.Min = f21f1f1iter.InstanceRequirements.BaselineEbsBandwidthMbps.Min
								}
								f21f1f1elemf0.BaselineEBSBandwidthMbps = f21f1f1elemf0f7
							}
							if f21f1f1iter.InstanceRequirements.BurstablePerformance != nil {
								f21f1f1elemf0.BurstablePerformance = f21f1f1iter.InstanceRequirements.BurstablePerformance
							}
							if f21f1f1iter.InstanceRequirements.CpuManufacturers != nil {
								f21f1f1elemf0f9 := []*string{}
								for _, f21f1f1elemf0f9iter := range f21f1f1iter.InstanceRequirements.CpuManufacturers {
									var f21f1f1elemf0f9elem string
									f21f1f1elemf0f9elem = *f21f1f1elemf0f9iter
									f21f1f1elemf0f9 = append(f21f1f1elemf0f9, &f21f1f1elemf0f9elem)
								}
								f21f1f1elemf0.CPUManufacturers = f21f1f1elemf0f9
							}
							if f21f1f1iter.InstanceRequirements.ExcludedInstanceTypes != nil {
								f21f1f1elemf0f10 := []*string{}
								for _, f21f1f1elemf0f10iter := range f21f1f1iter.InstanceRequirements.ExcludedInstanceTypes {
									var f21f1f1elemf0f10elem string
									f21f1f1elemf0f10elem = *f21f1f1elemf0f10iter
									f21f1f1elemf0f10 = append(f21f1f1elemf0f10, &f21f1f1elemf0f10elem)
								}
								f21f1f1elemf0.ExcludedInstanceTypes = f21f1f1elemf0f10
							}
							if f21f1f1iter.InstanceRequirements.InstanceGenerations != nil {
								f21f1f1elemf0f11 := []*string{}
								for _, f21f1f1elemf0f11iter := range f21f1f1iter.InstanceRequirements.InstanceGenerations {
									var f21f1f1elemf0f11elem string
									f21f1f1elemf0f11elem = *f21f1f1elemf0f11iter
									f21f1f1elemf0f11 = append(f21f1f1elemf0f11, &f21f1f1elemf0f11elem)
								}
								f21f1f1elemf0.InstanceGenerations = f21f1f1elemf0f11
							}
							if f21f1f1iter.InstanceRequirements.LocalStorage != nil {
								f21f1f1elemf0.LocalStorage = f21f1f1iter.InstanceRequirements.LocalStorage
							}
							if f21f1f1iter.InstanceRequirements.LocalStorageTypes != nil {
								f21f1f1elemf0f13 := []*string{}
								for _, f21f1f1elemf0f13iter := range f21f1f1iter.InstanceRequirements.LocalStorageTypes {
									var f21f1f1elemf0f13elem string
									f21f1f1elemf0f13elem = *f21f1f1elemf0f13iter
									f21f1f1elemf0f13 = append(f21f1f1elemf0f13, &f21f1f1elemf0f13elem)
								}
								f21f1f1elemf0.LocalStorageTypes = f21f1f1elemf0f13
							}
							if f21f1f1iter.InstanceRequirements.MemoryGiBPerVCpu != nil {
								f21f1f1elemf0f14 := &svcapitypes.MemoryGiBPerVCPURequest{}
								if f21f1f1iter.InstanceRequirements.MemoryGiBPerVCpu.Max != nil {
									f21f1f1elemf0f14.Max = f21f1f1iter.InstanceRequirements.MemoryGiBPerVCpu.Max
								}
								if f21f1f1iter.InstanceRequirements.MemoryGiBPerVCpu.Min != nil {
									f21f1f1elemf0f14.Min = f21f1f1iter.InstanceRequirements.MemoryGiBPerVCpu.Min
								}
								f21f1f1elemf0.MemoryGiBPerVCPU = f21f1f1elemf0f14
							}
							if f21f1f1iter.InstanceRequirements.MemoryMiB != nil {
								f21f1f1elemf0f15 := &svcapitypes.MemoryMiBRequest{}
								if f21f1f1iter.InstanceRequirements.MemoryMiB.Max != nil {
									f21f1f1elemf0f15.Max = f21f1f1iter.InstanceRequirements.MemoryMiB.Max
								}
								if f21f1f1iter.InstanceRequirements.MemoryMiB.Min != nil {
									f21f1f1elemf0f15.Min = f21f1f1iter.InstanceRequirements.MemoryMiB.Min
								}
								f21f1f1elemf0.MemoryMiB = f21f1f1elemf0f15
							}
							if f21f1f1iter.InstanceRequirements.NetworkBandwidthGbps != nil {
								f21f1f1elemf0f16 := &svcapitypes.NetworkBandwidthGbpsRequest{}
								if f21f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Max != nil {
									f21f1f1elemf0f16.Max = f21f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Max
								}
								if f21f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Min != nil {
									f21f1f1elemf0f16.Min = f21f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Min
								}
								f21f1f1elemf0.NetworkBandwidthGbps = f21f1f1elemf0f16
							}
							if f21f1f1iter.InstanceRequirements.NetworkInterfaceCount != nil {
								f21f1f1elemf0f17 := &svcapitypes.NetworkInterfaceCountRequest{}
								if f21f1f1iter.InstanceRequirements.NetworkInterfaceCount.Max != nil {
									f21f1f1elemf0f17.Max = f21f1f1iter.InstanceRequirements.NetworkInterfaceCount.Max
								}
								if f21f1f1iter.InstanceRequirements.NetworkInterfaceCount.Min != nil {
									f21f1f1elemf0f17.Min = f21f1f1iter.InstanceRequirements.NetworkInterfaceCount.Min
								}
								f21f1f1elemf0.NetworkInterfaceCount = f21f1f1elemf0f17
							}
							if f21f1f1iter.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
								f21f1f1elemf0.OnDemandMaxPricePercentageOverLowestPrice = f21f1f1iter.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice
							}
							if f21f1f1iter.InstanceRequirements.RequireHibernateSupport != nil {
								f21f1f1elemf0.RequireHibernateSupport = f21f1f1iter.InstanceRequirements.RequireHibernateSupport
							}
							if f21f1f1iter.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
								f21f1f1elemf0.SpotMaxPricePercentageOverLowestPrice = f21f1f1iter.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice
							}
							if f21f1f1iter.InstanceRequirements.TotalLocalStorageGB != nil {
								f21f1f1elemf0f21 := &svcapitypes.TotalLocalStorageGBRequest{}
								if f21f1f1iter.InstanceRequirements.TotalLocalStorageGB.Max != nil {
									f21f1f1elemf0f21.Max = f21f1f1iter.InstanceRequirements.TotalLocalStorageGB.Max
								}
								if f21f1f1iter.InstanceRequirements.TotalLocalStorageGB.Min != nil {
									f21f1f1elemf0f21.Min = f21f1f1iter.InstanceRequirements.TotalLocalStorageGB.Min
								}
								f21f1f1elemf0.TotalLocalStorageGB = f21f1f1elemf0f21
							}
							if f21f1f1iter.InstanceRequirements.VCpuCount != nil {
								f21f1f1elemf0f22 := &svcapitypes.VCPUCountRequest{}
								if f21f1f1iter.InstanceRequirements.VCpuCount.Max != nil {
									f21f1f1elemf0f22.Max = f21f1f1iter.InstanceRequirements.VCpuCount.Max
								}
								if f21f1f1iter.InstanceRequirements.VCpuCount.Min != nil {
									f21f1f1elemf0f22.Min = f21f1f1iter.InstanceRequirements.VCpuCount.Min
								}
								f21f1f1elemf0.VCPUCount = f21f1f1elemf0f22
							}
							f21f1f1elem.InstanceRequirements = f21f1f1elemf0
						}
						if f21f1f1iter.InstanceType != nil {
							f21f1f1elem.InstanceType = f21f1f1iter.InstanceType
						}
						if f21f1f1iter.LaunchTemplateSpecification != nil {
							f21f1f1elemf2 := &svcapitypes.LaunchTemplateSpecification{}
							if f21f1f1iter.LaunchTemplateSpecification.LaunchTemplateId != nil {
								f21f1f1elemf2.LaunchTemplateID = f21f1f1iter.LaunchTemplateSpecification.LaunchTemplateId
							}
							if f21f1f1iter.LaunchTemplateSpecification.LaunchTemplateName != nil {
								f21f1f1elemf2.LaunchTemplateName = f21f1f1iter.LaunchTemplateSpecification.LaunchTemplateName
							}
							if f21f1f1iter.LaunchTemplateSpecification.Version != nil {
								f21f1f1elemf2.Version = f21f1f1iter.LaunchTemplateSpecification.Version
							}
							f21f1f1elem.LaunchTemplateSpecification = f21f1f1elemf2
						}
						if f21f1f1iter.WeightedCapacity != nil {
							f21f1f1elem.WeightedCapacity = f21f1f1iter.WeightedCapacity
						}
						f21f1f1 = append(f21f1f1, f21f1f1elem)
					}
					f21f1.Overrides = f21f1f1
				}
				f21.LaunchTemplate = f21f1
			}
			cr.Spec.ForProvider.MixedInstancesPolicy = f21
		} else {
			cr.Spec.ForProvider.MixedInstancesPolicy = nil
		}
		if elem.NewInstancesProtectedFromScaleIn != nil {
			cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn = elem.NewInstancesProtectedFromScaleIn
		} else {
			cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn = nil
		}
		if elem.PlacementGroup != nil {
			cr.Spec.ForProvider.PlacementGroup = elem.PlacementGroup
		} else {
			cr.Spec.ForProvider.PlacementGroup = nil
		}
		if elem.PredictedCapacity != nil {
			cr.Status.AtProvider.PredictedCapacity = elem.PredictedCapacity
		} else {
			cr.Status.AtProvider.PredictedCapacity = nil
		}
		if elem.ServiceLinkedRoleARN != nil {
			cr.Spec.ForProvider.ServiceLinkedRoleARN = elem.ServiceLinkedRoleARN
		} else {
			cr.Spec.ForProvider.ServiceLinkedRoleARN = nil
		}
		if elem.Status != nil {
			cr.Status.AtProvider.Status = elem.Status
		} else {
			cr.Status.AtProvider.Status = nil
		}
		if elem.SuspendedProcesses != nil {
			f27 := []*svcapitypes.SuspendedProcess{}
			for _, f27iter := range elem.SuspendedProcesses {
				f27elem := &svcapitypes.SuspendedProcess{}
				if f27iter.ProcessName != nil {
					f27elem.ProcessName = f27iter.ProcessName
				}
				if f27iter.SuspensionReason != nil {
					f27elem.SuspensionReason = f27iter.SuspensionReason
				}
				f27 = append(f27, f27elem)
			}
			cr.Status.AtProvider.SuspendedProcesses = f27
		} else {
			cr.Status.AtProvider.SuspendedProcesses = nil
		}
		if elem.Tags != nil {
			f28 := []*svcapitypes.Tag{}
			for _, f28iter := range elem.Tags {
				f28elem := &svcapitypes.Tag{}
				if f28iter.Key != nil {
					f28elem.Key = f28iter.Key
				}
				if f28iter.PropagateAtLaunch != nil {
					f28elem.PropagateAtLaunch = f28iter.PropagateAtLaunch
				}
				if f28iter.ResourceId != nil {
					f28elem.ResourceID = f28iter.ResourceId
				}
				if f28iter.ResourceType != nil {
					f28elem.ResourceType = f28iter.ResourceType
				}
				if f28iter.Value != nil {
					f28elem.Value = f28iter.Value
				}
				f28 = append(f28, f28elem)
			}
			cr.Spec.ForProvider.Tags = f28
		} else {
			cr.Spec.ForProvider.Tags = nil
		}
		if elem.TargetGroupARNs != nil {
			f29 := []*string{}
			for _, f29iter := range elem.TargetGroupARNs {
				var f29elem string
				f29elem = *f29iter
				f29 = append(f29, &f29elem)
			}
			cr.Spec.ForProvider.TargetGroupARNs = f29
		} else {
			cr.Spec.ForProvider.TargetGroupARNs = nil
		}
		if elem.TerminationPolicies != nil {
			f30 := []*string{}
			for _, f30iter := range elem.TerminationPolicies {
				var f30elem string
				f30elem = *f30iter
				f30 = append(f30, &f30elem)
			}
			cr.Spec.ForProvider.TerminationPolicies = f30
		} else {
			cr.Spec.ForProvider.TerminationPolicies = nil
		}
		if elem.TrafficSources != nil {
			f31 := []*svcapitypes.TrafficSourceIdentifier{}
			for _, f31iter := range elem.TrafficSources {
				f31elem := &svcapitypes.TrafficSourceIdentifier{}
				if f31iter.Identifier != nil {
					f31elem.Identifier = f31iter.Identifier
				}
				if f31iter.Type != nil {
					f31elem.Type = f31iter.Type
				}
				f31 = append(f31, f31elem)
			}
			cr.Status.AtProvider.TrafficSources = f31
		} else {
			cr.Status.AtProvider.TrafficSources = nil
		}
		if elem.VPCZoneIdentifier != nil {
			cr.Spec.ForProvider.VPCZoneIdentifier = elem.VPCZoneIdentifier
		} else {
			cr.Spec.ForProvider.VPCZoneIdentifier = nil
		}
		if elem.WarmPoolConfiguration != nil {
			f33 := &svcapitypes.WarmPoolConfiguration{}
			if elem.WarmPoolConfiguration.InstanceReusePolicy != nil {
				f33f0 := &svcapitypes.InstanceReusePolicy{}
				if elem.WarmPoolConfiguration.InstanceReusePolicy.ReuseOnScaleIn != nil {
					f33f0.ReuseOnScaleIn = elem.WarmPoolConfiguration.InstanceReusePolicy.ReuseOnScaleIn
				}
				f33.InstanceReusePolicy = f33f0
			}
			if elem.WarmPoolConfiguration.MaxGroupPreparedCapacity != nil {
				f33.MaxGroupPreparedCapacity = elem.WarmPoolConfiguration.MaxGroupPreparedCapacity
			}
			if elem.WarmPoolConfiguration.MinSize != nil {
				f33.MinSize = elem.WarmPoolConfiguration.MinSize
			}
			if elem.WarmPoolConfiguration.PoolState != nil {
				f33.PoolState = elem.WarmPoolConfiguration.PoolState
			}
			if elem.WarmPoolConfiguration.Status != nil {
				f33.Status = elem.WarmPoolConfiguration.Status
			}
			cr.Status.AtProvider.WarmPoolConfiguration = f33
		} else {
			cr.Status.AtProvider.WarmPoolConfiguration = nil
		}
		if elem.WarmPoolSize != nil {
			cr.Status.AtProvider.WarmPoolSize = elem.WarmPoolSize
		} else {
			cr.Status.AtProvider.WarmPoolSize = nil
		}
		found = true
		break
	}
	if !found {
		return cr
	}

	return cr
}

// GenerateCreateAutoScalingGroupInput returns a create input.
func GenerateCreateAutoScalingGroupInput(cr *svcapitypes.AutoScalingGroup) *svcsdk.CreateAutoScalingGroupInput {
	res := &svcsdk.CreateAutoScalingGroupInput{}

	if cr.Spec.ForProvider.AvailabilityZones != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.AvailabilityZones {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAvailabilityZones(f0)
	}
	if cr.Spec.ForProvider.CapacityRebalance != nil {
		res.SetCapacityRebalance(*cr.Spec.ForProvider.CapacityRebalance)
	}
	if cr.Spec.ForProvider.Context != nil {
		res.SetContext(*cr.Spec.ForProvider.Context)
	}
	if cr.Spec.ForProvider.DefaultCooldown != nil {
		res.SetDefaultCooldown(*cr.Spec.ForProvider.DefaultCooldown)
	}
	if cr.Spec.ForProvider.DefaultInstanceWarmup != nil {
		res.SetDefaultInstanceWarmup(*cr.Spec.ForProvider.DefaultInstanceWarmup)
	}
	if cr.Spec.ForProvider.DesiredCapacity != nil {
		res.SetDesiredCapacity(*cr.Spec.ForProvider.DesiredCapacity)
	}
	if cr.Spec.ForProvider.DesiredCapacityType != nil {
		res.SetDesiredCapacityType(*cr.Spec.ForProvider.DesiredCapacityType)
	}
	if cr.Spec.ForProvider.HealthCheckGracePeriod != nil {
		res.SetHealthCheckGracePeriod(*cr.Spec.ForProvider.HealthCheckGracePeriod)
	}
	if cr.Spec.ForProvider.HealthCheckType != nil {
		res.SetHealthCheckType(*cr.Spec.ForProvider.HealthCheckType)
	}
	if cr.Spec.ForProvider.InstanceID != nil {
		res.SetInstanceId(*cr.Spec.ForProvider.InstanceID)
	}
	if cr.Spec.ForProvider.InstanceMaintenancePolicy != nil {
		f10 := &svcsdk.InstanceMaintenancePolicy{}
		if cr.Spec.ForProvider.InstanceMaintenancePolicy.MaxHealthyPercentage != nil {
			f10.SetMaxHealthyPercentage(*cr.Spec.ForProvider.InstanceMaintenancePolicy.MaxHealthyPercentage)
		}
		if cr.Spec.ForProvider.InstanceMaintenancePolicy.MinHealthyPercentage != nil {
			f10.SetMinHealthyPercentage(*cr.Spec.ForProvider.InstanceMaintenancePolicy.MinHealthyPercentage)
		}
		res.SetInstanceMaintenancePolicy(f10)
	}
	if cr.Spec.ForProvider.LaunchConfigurationName != nil {
		res.SetLaunchConfigurationName(*cr.Spec.ForProvider.LaunchConfigurationName)
	}
	if cr.Spec.ForProvider.LaunchTemplate != nil {
		f12 := &svcsdk.LaunchTemplateSpecification{}
		if cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateID != nil {
			f12.SetLaunchTemplateId(*cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateID)
		}
		if cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateName != nil {
			f12.SetLaunchTemplateName(*cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateName)
		}
		if cr.Spec.ForProvider.LaunchTemplate.Version != nil {
			f12.SetVersion(*cr.Spec.ForProvider.LaunchTemplate.Version)
		}
		res.SetLaunchTemplate(f12)
	}
	if cr.Spec.ForProvider.LifecycleHookSpecificationList != nil {
		f13 := []*svcsdk.LifecycleHookSpecification{}
		for _, f13iter := range cr.Spec.ForProvider.LifecycleHookSpecificationList {
			f13elem := &svcsdk.LifecycleHookSpecification{}
			if f13iter.DefaultResult != nil {
				f13elem.SetDefaultResult(*f13iter.DefaultResult)
			}
			if f13iter.HeartbeatTimeout != nil {
				f13elem.SetHeartbeatTimeout(*f13iter.HeartbeatTimeout)
			}
			if f13iter.LifecycleHookName != nil {
				f13elem.SetLifecycleHookName(*f13iter.LifecycleHookName)
			}
			if f13iter.LifecycleTransition != nil {
				f13elem.SetLifecycleTransition(*f13iter.LifecycleTransition)
			}
			if f13iter.NotificationMetadata != nil {
				f13elem.SetNotificationMetadata(*f13iter.NotificationMetadata)
			}
			if f13iter.NotificationTargetARN != nil {
				f13elem.SetNotificationTargetARN(*f13iter.NotificationTargetARN)
			}
			if f13iter.RoleARN != nil {
				f13elem.SetRoleARN(*f13iter.RoleARN)
			}
			f13 = append(f13, f13elem)
		}
		res.SetLifecycleHookSpecificationList(f13)
	}
	if cr.Spec.ForProvider.LoadBalancerNames != nil {
		f14 := []*string{}
		for _, f14iter := range cr.Spec.ForProvider.LoadBalancerNames {
			var f14elem string
			f14elem = *f14iter
			f14 = append(f14, &f14elem)
		}
		res.SetLoadBalancerNames(f14)
	}
	if cr.Spec.ForProvider.MaxInstanceLifetime != nil {
		res.SetMaxInstanceLifetime(*cr.Spec.ForProvider.MaxInstanceLifetime)
	}
	if cr.Spec.ForProvider.MaxSize != nil {
		res.SetMaxSize(*cr.Spec.ForProvider.MaxSize)
	}
	if cr.Spec.ForProvider.MinSize != nil {
		res.SetMinSize(*cr.Spec.ForProvider.MinSize)
	}
	if cr.Spec.ForProvider.MixedInstancesPolicy != nil {
		f18 := &svcsdk.MixedInstancesPolicy{}
		if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution != nil {
			f18f0 := &svcsdk.InstancesDistribution{}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy != nil {
				f18f0.SetOnDemandAllocationStrategy(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity != nil {
				f18f0.SetOnDemandBaseCapacity(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity != nil {
				f18f0.SetOnDemandPercentageAboveBaseCapacity(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy != nil {
				f18f0.SetSpotAllocationStrategy(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools != nil {
				f18f0.SetSpotInstancePools(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice != nil {
				f18f0.SetSpotMaxPrice(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice)
			}
			f18.SetInstancesDistribution(f18f0)
		}
		if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate != nil {
			f18f1 := &svcsdk.LaunchTemplate{}
			if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification != nil {
				f18f1f0 := &svcsdk.LaunchTemplateSpecification{}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateID != nil {
					f18f1f0.SetLaunchTemplateId(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateID)
				}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName != nil {
					f18f1f0.SetLaunchTemplateName(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName)
				}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version != nil {
					f18f1f0.SetVersion(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version)
				}
				f18f1.SetLaunchTemplateSpecification(f18f1f0)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.Overrides != nil {
				f18f1f1 := []*svcsdk.LaunchTemplateOverrides{}
				for _, f18f1f1iter := range cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.Overrides {
					f18f1f1elem := &svcsdk.LaunchTemplateOverrides{}
					if f18f1f1iter.InstanceRequirements != nil {
						f18f1f1elemf0 := &svcsdk.InstanceRequirements{}
						if f18f1f1iter.InstanceRequirements.AcceleratorCount != nil {
							f18f1f1elemf0f0 := &svcsdk.AcceleratorCountRequest{}
							if f18f1f1iter.InstanceRequirements.AcceleratorCount.Max != nil {
								f18f1f1elemf0f0.SetMax(*f18f1f1iter.InstanceRequirements.AcceleratorCount.Max)
							}
							if f18f1f1iter.InstanceRequirements.AcceleratorCount.Min != nil {
								f18f1f1elemf0f0.SetMin(*f18f1f1iter.InstanceRequirements.AcceleratorCount.Min)
							}
							f18f1f1elemf0.SetAcceleratorCount(f18f1f1elemf0f0)
						}
						if f18f1f1iter.InstanceRequirements.AcceleratorManufacturers != nil {
							f18f1f1elemf0f1 := []*string{}
							for _, f18f1f1elemf0f1iter := range f18f1f1iter.InstanceRequirements.AcceleratorManufacturers {
								var f18f1f1elemf0f1elem string
								f18f1f1elemf0f1elem = *f18f1f1elemf0f1iter
								f18f1f1elemf0f1 = append(f18f1f1elemf0f1, &f18f1f1elemf0f1elem)
							}
							f18f1f1elemf0.SetAcceleratorManufacturers(f18f1f1elemf0f1)
						}
						if f18f1f1iter.InstanceRequirements.AcceleratorNames != nil {
							f18f1f1elemf0f2 := []*string{}
							for _, f18f1f1elemf0f2iter := range f18f1f1iter.InstanceRequirements.AcceleratorNames {
								var f18f1f1elemf0f2elem string
								f18f1f1elemf0f2elem = *f18f1f1elemf0f2iter
								f18f1f1elemf0f2 = append(f18f1f1elemf0f2, &f18f1f1elemf0f2elem)
							}
							f18f1f1elemf0.SetAcceleratorNames(f18f1f1elemf0f2)
						}
						if f18f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
							f18f1f1elemf0f3 := &svcsdk.AcceleratorTotalMemoryMiBRequest{}
							if f18f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
								f18f1f1elemf0f3.SetMax(*f18f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Max)
							}
							if f18f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
								f18f1f1elemf0f3.SetMin(*f18f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Min)
							}
							f18f1f1elemf0.SetAcceleratorTotalMemoryMiB(f18f1f1elemf0f3)
						}
						if f18f1f1iter.InstanceRequirements.AcceleratorTypes != nil {
							f18f1f1elemf0f4 := []*string{}
							for _, f18f1f1elemf0f4iter := range f18f1f1iter.InstanceRequirements.AcceleratorTypes {
								var f18f1f1elemf0f4elem string
								f18f1f1elemf0f4elem = *f18f1f1elemf0f4iter
								f18f1f1elemf0f4 = append(f18f1f1elemf0f4, &f18f1f1elemf0f4elem)
							}
							f18f1f1elemf0.SetAcceleratorTypes(f18f1f1elemf0f4)
						}
						if f18f1f1iter.InstanceRequirements.AllowedInstanceTypes != nil {
							f18f1f1elemf0f5 := []*string{}
							for _, f18f1f1elemf0f5iter := range f18f1f1iter.InstanceRequirements.AllowedInstanceTypes {
								var f18f1f1elemf0f5elem string
								f18f1f1elemf0f5elem = *f18f1f1elemf0f5iter
								f18f1f1elemf0f5 = append(f18f1f1elemf0f5, &f18f1f1elemf0f5elem)
							}
							f18f1f1elemf0.SetAllowedInstanceTypes(f18f1f1elemf0f5)
						}
						if f18f1f1iter.InstanceRequirements.BareMetal != nil {
							f18f1f1elemf0.SetBareMetal(*f18f1f1iter.InstanceRequirements.BareMetal)
						}
						if f18f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps != nil {
							f18f1f1elemf0f7 := &svcsdk.BaselineEbsBandwidthMbpsRequest{}
							if f18f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps.Max != nil {
								f18f1f1elemf0f7.SetMax(*f18f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps.Max)
							}
							if f18f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps.Min != nil {
								f18f1f1elemf0f7.SetMin(*f18f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps.Min)
							}
							f18f1f1elemf0.SetBaselineEbsBandwidthMbps(f18f1f1elemf0f7)
						}
						if f18f1f1iter.InstanceRequirements.BurstablePerformance != nil {
							f18f1f1elemf0.SetBurstablePerformance(*f18f1f1iter.InstanceRequirements.BurstablePerformance)
						}
						if f18f1f1iter.InstanceRequirements.CPUManufacturers != nil {
							f18f1f1elemf0f9 := []*string{}
							for _, f18f1f1elemf0f9iter := range f18f1f1iter.InstanceRequirements.CPUManufacturers {
								var f18f1f1elemf0f9elem string
								f18f1f1elemf0f9elem = *f18f1f1elemf0f9iter
								f18f1f1elemf0f9 = append(f18f1f1elemf0f9, &f18f1f1elemf0f9elem)
							}
							f18f1f1elemf0.SetCpuManufacturers(f18f1f1elemf0f9)
						}
						if f18f1f1iter.InstanceRequirements.ExcludedInstanceTypes != nil {
							f18f1f1elemf0f10 := []*string{}
							for _, f18f1f1elemf0f10iter := range f18f1f1iter.InstanceRequirements.ExcludedInstanceTypes {
								var f18f1f1elemf0f10elem string
								f18f1f1elemf0f10elem = *f18f1f1elemf0f10iter
								f18f1f1elemf0f10 = append(f18f1f1elemf0f10, &f18f1f1elemf0f10elem)
							}
							f18f1f1elemf0.SetExcludedInstanceTypes(f18f1f1elemf0f10)
						}
						if f18f1f1iter.InstanceRequirements.InstanceGenerations != nil {
							f18f1f1elemf0f11 := []*string{}
							for _, f18f1f1elemf0f11iter := range f18f1f1iter.InstanceRequirements.InstanceGenerations {
								var f18f1f1elemf0f11elem string
								f18f1f1elemf0f11elem = *f18f1f1elemf0f11iter
								f18f1f1elemf0f11 = append(f18f1f1elemf0f11, &f18f1f1elemf0f11elem)
							}
							f18f1f1elemf0.SetInstanceGenerations(f18f1f1elemf0f11)
						}
						if f18f1f1iter.InstanceRequirements.LocalStorage != nil {
							f18f1f1elemf0.SetLocalStorage(*f18f1f1iter.InstanceRequirements.LocalStorage)
						}
						if f18f1f1iter.InstanceRequirements.LocalStorageTypes != nil {
							f18f1f1elemf0f13 := []*string{}
							for _, f18f1f1elemf0f13iter := range f18f1f1iter.InstanceRequirements.LocalStorageTypes {
								var f18f1f1elemf0f13elem string
								f18f1f1elemf0f13elem = *f18f1f1elemf0f13iter
								f18f1f1elemf0f13 = append(f18f1f1elemf0f13, &f18f1f1elemf0f13elem)
							}
							f18f1f1elemf0.SetLocalStorageTypes(f18f1f1elemf0f13)
						}
						if f18f1f1iter.InstanceRequirements.MemoryGiBPerVCPU != nil {
							f18f1f1elemf0f14 := &svcsdk.MemoryGiBPerVCpuRequest{}
							if f18f1f1iter.InstanceRequirements.MemoryGiBPerVCPU.Max != nil {
								f18f1f1elemf0f14.SetMax(*f18f1f1iter.InstanceRequirements.MemoryGiBPerVCPU.Max)
							}
							if f18f1f1iter.InstanceRequirements.MemoryGiBPerVCPU.Min != nil {
								f18f1f1elemf0f14.SetMin(*f18f1f1iter.InstanceRequirements.MemoryGiBPerVCPU.Min)
							}
							f18f1f1elemf0.SetMemoryGiBPerVCpu(f18f1f1elemf0f14)
						}
						if f18f1f1iter.InstanceRequirements.MemoryMiB != nil {
							f18f1f1elemf0f15 := &svcsdk.MemoryMiBRequest{}
							if f18f1f1iter.InstanceRequirements.MemoryMiB.Max != nil {
								f18f1f1elemf0f15.SetMax(*f18f1f1iter.InstanceRequirements.MemoryMiB.Max)
							}
							if f18f1f1iter.InstanceRequirements.MemoryMiB.Min != nil {
								f18f1f1elemf0f15.SetMin(*f18f1f1iter.InstanceRequirements.MemoryMiB.Min)
							}
							f18f1f1elemf0.SetMemoryMiB(f18f1f1elemf0f15)
						}
						if f18f1f1iter.InstanceRequirements.NetworkBandwidthGbps != nil {
							f18f1f1elemf0f16 := &svcsdk.NetworkBandwidthGbpsRequest{}
							if f18f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Max != nil {
								f18f1f1elemf0f16.SetMax(*f18f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Max)
							}
							if f18f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Min != nil {
								f18f1f1elemf0f16.SetMin(*f18f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Min)
							}
							f18f1f1elemf0.SetNetworkBandwidthGbps(f18f1f1elemf0f16)
						}
						if f18f1f1iter.InstanceRequirements.NetworkInterfaceCount != nil {
							f18f1f1elemf0f17 := &svcsdk.NetworkInterfaceCountRequest{}
							if f18f1f1iter.InstanceRequirements.NetworkInterfaceCount.Max != nil {
								f18f1f1elemf0f17.SetMax(*f18f1f1iter.InstanceRequirements.NetworkInterfaceCount.Max)
							}
							if f18f1f1iter.InstanceRequirements.NetworkInterfaceCount.Min != nil {
								f18f1f1elemf0f17.SetMin(*f18f1f1iter.InstanceRequirements.NetworkInterfaceCount.Min)
							}
							f18f1f1elemf0.SetNetworkInterfaceCount(f18f1f1elemf0f17)
						}
						if f18f1f1iter.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
							f18f1f1elemf0.SetOnDemandMaxPricePercentageOverLowestPrice(*f18f1f1iter.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice)
						}
						if f18f1f1iter.InstanceRequirements.RequireHibernateSupport != nil {
							f18f1f1elemf0.SetRequireHibernateSupport(*f18f1f1iter.InstanceRequirements.RequireHibernateSupport)
						}
						if f18f1f1iter.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
							f18f1f1elemf0.SetSpotMaxPricePercentageOverLowestPrice(*f18f1f1iter.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice)
						}
						if f18f1f1iter.InstanceRequirements.TotalLocalStorageGB != nil {
							f18f1f1elemf0f21 := &svcsdk.TotalLocalStorageGBRequest{}
							if f18f1f1iter.InstanceRequirements.TotalLocalStorageGB.Max != nil {
								f18f1f1elemf0f21.SetMax(*f18f1f1iter.InstanceRequirements.TotalLocalStorageGB.Max)
							}
							if f18f1f1iter.InstanceRequirements.TotalLocalStorageGB.Min != nil {
								f18f1f1elemf0f21.SetMin(*f18f1f1iter.InstanceRequirements.TotalLocalStorageGB.Min)
							}
							f18f1f1elemf0.SetTotalLocalStorageGB(f18f1f1elemf0f21)
						}
						if f18f1f1iter.InstanceRequirements.VCPUCount != nil {
							f18f1f1elemf0f22 := &svcsdk.VCpuCountRequest{}
							if f18f1f1iter.InstanceRequirements.VCPUCount.Max != nil {
								f18f1f1elemf0f22.SetMax(*f18f1f1iter.InstanceRequirements.VCPUCount.Max)
							}
							if f18f1f1iter.InstanceRequirements.VCPUCount.Min != nil {
								f18f1f1elemf0f22.SetMin(*f18f1f1iter.InstanceRequirements.VCPUCount.Min)
							}
							f18f1f1elemf0.SetVCpuCount(f18f1f1elemf0f22)
						}
						f18f1f1elem.SetInstanceRequirements(f18f1f1elemf0)
					}
					if f18f1f1iter.InstanceType != nil {
						f18f1f1elem.SetInstanceType(*f18f1f1iter.InstanceType)
					}
					if f18f1f1iter.LaunchTemplateSpecification != nil {
						f18f1f1elemf2 := &svcsdk.LaunchTemplateSpecification{}
						if f18f1f1iter.LaunchTemplateSpecification.LaunchTemplateID != nil {
							f18f1f1elemf2.SetLaunchTemplateId(*f18f1f1iter.LaunchTemplateSpecification.LaunchTemplateID)
						}
						if f18f1f1iter.LaunchTemplateSpecification.LaunchTemplateName != nil {
							f18f1f1elemf2.SetLaunchTemplateName(*f18f1f1iter.LaunchTemplateSpecification.LaunchTemplateName)
						}
						if f18f1f1iter.LaunchTemplateSpecification.Version != nil {
							f18f1f1elemf2.SetVersion(*f18f1f1iter.LaunchTemplateSpecification.Version)
						}
						f18f1f1elem.SetLaunchTemplateSpecification(f18f1f1elemf2)
					}
					if f18f1f1iter.WeightedCapacity != nil {
						f18f1f1elem.SetWeightedCapacity(*f18f1f1iter.WeightedCapacity)
					}
					f18f1f1 = append(f18f1f1, f18f1f1elem)
				}
				f18f1.SetOverrides(f18f1f1)
			}
			f18.SetLaunchTemplate(f18f1)
		}
		res.SetMixedInstancesPolicy(f18)
	}
	if cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn != nil {
		res.SetNewInstancesProtectedFromScaleIn(*cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn)
	}
	if cr.Spec.ForProvider.PlacementGroup != nil {
		res.SetPlacementGroup(*cr.Spec.ForProvider.PlacementGroup)
	}
	if cr.Spec.ForProvider.ServiceLinkedRoleARN != nil {
		res.SetServiceLinkedRoleARN(*cr.Spec.ForProvider.ServiceLinkedRoleARN)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f22 := []*svcsdk.Tag{}
		for _, f22iter := range cr.Spec.ForProvider.Tags {
			f22elem := &svcsdk.Tag{}
			if f22iter.Key != nil {
				f22elem.SetKey(*f22iter.Key)
			}
			if f22iter.PropagateAtLaunch != nil {
				f22elem.SetPropagateAtLaunch(*f22iter.PropagateAtLaunch)
			}
			if f22iter.ResourceID != nil {
				f22elem.SetResourceId(*f22iter.ResourceID)
			}
			if f22iter.ResourceType != nil {
				f22elem.SetResourceType(*f22iter.ResourceType)
			}
			if f22iter.Value != nil {
				f22elem.SetValue(*f22iter.Value)
			}
			f22 = append(f22, f22elem)
		}
		res.SetTags(f22)
	}
	if cr.Spec.ForProvider.TargetGroupARNs != nil {
		f23 := []*string{}
		for _, f23iter := range cr.Spec.ForProvider.TargetGroupARNs {
			var f23elem string
			f23elem = *f23iter
			f23 = append(f23, &f23elem)
		}
		res.SetTargetGroupARNs(f23)
	}
	if cr.Spec.ForProvider.TerminationPolicies != nil {
		f24 := []*string{}
		for _, f24iter := range cr.Spec.ForProvider.TerminationPolicies {
			var f24elem string
			f24elem = *f24iter
			f24 = append(f24, &f24elem)
		}
		res.SetTerminationPolicies(f24)
	}
	if cr.Spec.ForProvider.VPCZoneIdentifier != nil {
		res.SetVPCZoneIdentifier(*cr.Spec.ForProvider.VPCZoneIdentifier)
	}

	return res
}

// GenerateUpdateAutoScalingGroupInput returns an update input.
func GenerateUpdateAutoScalingGroupInput(cr *svcapitypes.AutoScalingGroup) *svcsdk.UpdateAutoScalingGroupInput {
	res := &svcsdk.UpdateAutoScalingGroupInput{}

	if cr.Status.AtProvider.AutoScalingGroupName != nil {
		res.SetAutoScalingGroupName(*cr.Status.AtProvider.AutoScalingGroupName)
	}
	if cr.Spec.ForProvider.AvailabilityZones != nil {
		f1 := []*string{}
		for _, f1iter := range cr.Spec.ForProvider.AvailabilityZones {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetAvailabilityZones(f1)
	}
	if cr.Spec.ForProvider.CapacityRebalance != nil {
		res.SetCapacityRebalance(*cr.Spec.ForProvider.CapacityRebalance)
	}
	if cr.Spec.ForProvider.Context != nil {
		res.SetContext(*cr.Spec.ForProvider.Context)
	}
	if cr.Spec.ForProvider.DefaultCooldown != nil {
		res.SetDefaultCooldown(*cr.Spec.ForProvider.DefaultCooldown)
	}
	if cr.Spec.ForProvider.DefaultInstanceWarmup != nil {
		res.SetDefaultInstanceWarmup(*cr.Spec.ForProvider.DefaultInstanceWarmup)
	}
	if cr.Spec.ForProvider.DesiredCapacity != nil {
		res.SetDesiredCapacity(*cr.Spec.ForProvider.DesiredCapacity)
	}
	if cr.Spec.ForProvider.DesiredCapacityType != nil {
		res.SetDesiredCapacityType(*cr.Spec.ForProvider.DesiredCapacityType)
	}
	if cr.Spec.ForProvider.HealthCheckGracePeriod != nil {
		res.SetHealthCheckGracePeriod(*cr.Spec.ForProvider.HealthCheckGracePeriod)
	}
	if cr.Spec.ForProvider.HealthCheckType != nil {
		res.SetHealthCheckType(*cr.Spec.ForProvider.HealthCheckType)
	}
	if cr.Spec.ForProvider.InstanceMaintenancePolicy != nil {
		f10 := &svcsdk.InstanceMaintenancePolicy{}
		if cr.Spec.ForProvider.InstanceMaintenancePolicy.MaxHealthyPercentage != nil {
			f10.SetMaxHealthyPercentage(*cr.Spec.ForProvider.InstanceMaintenancePolicy.MaxHealthyPercentage)
		}
		if cr.Spec.ForProvider.InstanceMaintenancePolicy.MinHealthyPercentage != nil {
			f10.SetMinHealthyPercentage(*cr.Spec.ForProvider.InstanceMaintenancePolicy.MinHealthyPercentage)
		}
		res.SetInstanceMaintenancePolicy(f10)
	}
	if cr.Spec.ForProvider.LaunchConfigurationName != nil {
		res.SetLaunchConfigurationName(*cr.Spec.ForProvider.LaunchConfigurationName)
	}
	if cr.Spec.ForProvider.LaunchTemplate != nil {
		f12 := &svcsdk.LaunchTemplateSpecification{}
		if cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateID != nil {
			f12.SetLaunchTemplateId(*cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateID)
		}
		if cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateName != nil {
			f12.SetLaunchTemplateName(*cr.Spec.ForProvider.LaunchTemplate.LaunchTemplateName)
		}
		if cr.Spec.ForProvider.LaunchTemplate.Version != nil {
			f12.SetVersion(*cr.Spec.ForProvider.LaunchTemplate.Version)
		}
		res.SetLaunchTemplate(f12)
	}
	if cr.Spec.ForProvider.MaxInstanceLifetime != nil {
		res.SetMaxInstanceLifetime(*cr.Spec.ForProvider.MaxInstanceLifetime)
	}
	if cr.Spec.ForProvider.MaxSize != nil {
		res.SetMaxSize(*cr.Spec.ForProvider.MaxSize)
	}
	if cr.Spec.ForProvider.MinSize != nil {
		res.SetMinSize(*cr.Spec.ForProvider.MinSize)
	}
	if cr.Spec.ForProvider.MixedInstancesPolicy != nil {
		f16 := &svcsdk.MixedInstancesPolicy{}
		if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution != nil {
			f16f0 := &svcsdk.InstancesDistribution{}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy != nil {
				f16f0.SetOnDemandAllocationStrategy(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandAllocationStrategy)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity != nil {
				f16f0.SetOnDemandBaseCapacity(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandBaseCapacity)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity != nil {
				f16f0.SetOnDemandPercentageAboveBaseCapacity(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.OnDemandPercentageAboveBaseCapacity)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy != nil {
				f16f0.SetSpotAllocationStrategy(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotAllocationStrategy)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools != nil {
				f16f0.SetSpotInstancePools(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotInstancePools)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice != nil {
				f16f0.SetSpotMaxPrice(*cr.Spec.ForProvider.MixedInstancesPolicy.InstancesDistribution.SpotMaxPrice)
			}
			f16.SetInstancesDistribution(f16f0)
		}
		if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate != nil {
			f16f1 := &svcsdk.LaunchTemplate{}
			if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification != nil {
				f16f1f0 := &svcsdk.LaunchTemplateSpecification{}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateID != nil {
					f16f1f0.SetLaunchTemplateId(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateID)
				}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName != nil {
					f16f1f0.SetLaunchTemplateName(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.LaunchTemplateName)
				}
				if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version != nil {
					f16f1f0.SetVersion(*cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.LaunchTemplateSpecification.Version)
				}
				f16f1.SetLaunchTemplateSpecification(f16f1f0)
			}
			if cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.Overrides != nil {
				f16f1f1 := []*svcsdk.LaunchTemplateOverrides{}
				for _, f16f1f1iter := range cr.Spec.ForProvider.MixedInstancesPolicy.LaunchTemplate.Overrides {
					f16f1f1elem := &svcsdk.LaunchTemplateOverrides{}
					if f16f1f1iter.InstanceRequirements != nil {
						f16f1f1elemf0 := &svcsdk.InstanceRequirements{}
						if f16f1f1iter.InstanceRequirements.AcceleratorCount != nil {
							f16f1f1elemf0f0 := &svcsdk.AcceleratorCountRequest{}
							if f16f1f1iter.InstanceRequirements.AcceleratorCount.Max != nil {
								f16f1f1elemf0f0.SetMax(*f16f1f1iter.InstanceRequirements.AcceleratorCount.Max)
							}
							if f16f1f1iter.InstanceRequirements.AcceleratorCount.Min != nil {
								f16f1f1elemf0f0.SetMin(*f16f1f1iter.InstanceRequirements.AcceleratorCount.Min)
							}
							f16f1f1elemf0.SetAcceleratorCount(f16f1f1elemf0f0)
						}
						if f16f1f1iter.InstanceRequirements.AcceleratorManufacturers != nil {
							f16f1f1elemf0f1 := []*string{}
							for _, f16f1f1elemf0f1iter := range f16f1f1iter.InstanceRequirements.AcceleratorManufacturers {
								var f16f1f1elemf0f1elem string
								f16f1f1elemf0f1elem = *f16f1f1elemf0f1iter
								f16f1f1elemf0f1 = append(f16f1f1elemf0f1, &f16f1f1elemf0f1elem)
							}
							f16f1f1elemf0.SetAcceleratorManufacturers(f16f1f1elemf0f1)
						}
						if f16f1f1iter.InstanceRequirements.AcceleratorNames != nil {
							f16f1f1elemf0f2 := []*string{}
							for _, f16f1f1elemf0f2iter := range f16f1f1iter.InstanceRequirements.AcceleratorNames {
								var f16f1f1elemf0f2elem string
								f16f1f1elemf0f2elem = *f16f1f1elemf0f2iter
								f16f1f1elemf0f2 = append(f16f1f1elemf0f2, &f16f1f1elemf0f2elem)
							}
							f16f1f1elemf0.SetAcceleratorNames(f16f1f1elemf0f2)
						}
						if f16f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB != nil {
							f16f1f1elemf0f3 := &svcsdk.AcceleratorTotalMemoryMiBRequest{}
							if f16f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Max != nil {
								f16f1f1elemf0f3.SetMax(*f16f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Max)
							}
							if f16f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Min != nil {
								f16f1f1elemf0f3.SetMin(*f16f1f1iter.InstanceRequirements.AcceleratorTotalMemoryMiB.Min)
							}
							f16f1f1elemf0.SetAcceleratorTotalMemoryMiB(f16f1f1elemf0f3)
						}
						if f16f1f1iter.InstanceRequirements.AcceleratorTypes != nil {
							f16f1f1elemf0f4 := []*string{}
							for _, f16f1f1elemf0f4iter := range f16f1f1iter.InstanceRequirements.AcceleratorTypes {
								var f16f1f1elemf0f4elem string
								f16f1f1elemf0f4elem = *f16f1f1elemf0f4iter
								f16f1f1elemf0f4 = append(f16f1f1elemf0f4, &f16f1f1elemf0f4elem)
							}
							f16f1f1elemf0.SetAcceleratorTypes(f16f1f1elemf0f4)
						}
						if f16f1f1iter.InstanceRequirements.AllowedInstanceTypes != nil {
							f16f1f1elemf0f5 := []*string{}
							for _, f16f1f1elemf0f5iter := range f16f1f1iter.InstanceRequirements.AllowedInstanceTypes {
								var f16f1f1elemf0f5elem string
								f16f1f1elemf0f5elem = *f16f1f1elemf0f5iter
								f16f1f1elemf0f5 = append(f16f1f1elemf0f5, &f16f1f1elemf0f5elem)
							}
							f16f1f1elemf0.SetAllowedInstanceTypes(f16f1f1elemf0f5)
						}
						if f16f1f1iter.InstanceRequirements.BareMetal != nil {
							f16f1f1elemf0.SetBareMetal(*f16f1f1iter.InstanceRequirements.BareMetal)
						}
						if f16f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps != nil {
							f16f1f1elemf0f7 := &svcsdk.BaselineEbsBandwidthMbpsRequest{}
							if f16f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps.Max != nil {
								f16f1f1elemf0f7.SetMax(*f16f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps.Max)
							}
							if f16f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps.Min != nil {
								f16f1f1elemf0f7.SetMin(*f16f1f1iter.InstanceRequirements.BaselineEBSBandwidthMbps.Min)
							}
							f16f1f1elemf0.SetBaselineEbsBandwidthMbps(f16f1f1elemf0f7)
						}
						if f16f1f1iter.InstanceRequirements.BurstablePerformance != nil {
							f16f1f1elemf0.SetBurstablePerformance(*f16f1f1iter.InstanceRequirements.BurstablePerformance)
						}
						if f16f1f1iter.InstanceRequirements.CPUManufacturers != nil {
							f16f1f1elemf0f9 := []*string{}
							for _, f16f1f1elemf0f9iter := range f16f1f1iter.InstanceRequirements.CPUManufacturers {
								var f16f1f1elemf0f9elem string
								f16f1f1elemf0f9elem = *f16f1f1elemf0f9iter
								f16f1f1elemf0f9 = append(f16f1f1elemf0f9, &f16f1f1elemf0f9elem)
							}
							f16f1f1elemf0.SetCpuManufacturers(f16f1f1elemf0f9)
						}
						if f16f1f1iter.InstanceRequirements.ExcludedInstanceTypes != nil {
							f16f1f1elemf0f10 := []*string{}
							for _, f16f1f1elemf0f10iter := range f16f1f1iter.InstanceRequirements.ExcludedInstanceTypes {
								var f16f1f1elemf0f10elem string
								f16f1f1elemf0f10elem = *f16f1f1elemf0f10iter
								f16f1f1elemf0f10 = append(f16f1f1elemf0f10, &f16f1f1elemf0f10elem)
							}
							f16f1f1elemf0.SetExcludedInstanceTypes(f16f1f1elemf0f10)
						}
						if f16f1f1iter.InstanceRequirements.InstanceGenerations != nil {
							f16f1f1elemf0f11 := []*string{}
							for _, f16f1f1elemf0f11iter := range f16f1f1iter.InstanceRequirements.InstanceGenerations {
								var f16f1f1elemf0f11elem string
								f16f1f1elemf0f11elem = *f16f1f1elemf0f11iter
								f16f1f1elemf0f11 = append(f16f1f1elemf0f11, &f16f1f1elemf0f11elem)
							}
							f16f1f1elemf0.SetInstanceGenerations(f16f1f1elemf0f11)
						}
						if f16f1f1iter.InstanceRequirements.LocalStorage != nil {
							f16f1f1elemf0.SetLocalStorage(*f16f1f1iter.InstanceRequirements.LocalStorage)
						}
						if f16f1f1iter.InstanceRequirements.LocalStorageTypes != nil {
							f16f1f1elemf0f13 := []*string{}
							for _, f16f1f1elemf0f13iter := range f16f1f1iter.InstanceRequirements.LocalStorageTypes {
								var f16f1f1elemf0f13elem string
								f16f1f1elemf0f13elem = *f16f1f1elemf0f13iter
								f16f1f1elemf0f13 = append(f16f1f1elemf0f13, &f16f1f1elemf0f13elem)
							}
							f16f1f1elemf0.SetLocalStorageTypes(f16f1f1elemf0f13)
						}
						if f16f1f1iter.InstanceRequirements.MemoryGiBPerVCPU != nil {
							f16f1f1elemf0f14 := &svcsdk.MemoryGiBPerVCpuRequest{}
							if f16f1f1iter.InstanceRequirements.MemoryGiBPerVCPU.Max != nil {
								f16f1f1elemf0f14.SetMax(*f16f1f1iter.InstanceRequirements.MemoryGiBPerVCPU.Max)
							}
							if f16f1f1iter.InstanceRequirements.MemoryGiBPerVCPU.Min != nil {
								f16f1f1elemf0f14.SetMin(*f16f1f1iter.InstanceRequirements.MemoryGiBPerVCPU.Min)
							}
							f16f1f1elemf0.SetMemoryGiBPerVCpu(f16f1f1elemf0f14)
						}
						if f16f1f1iter.InstanceRequirements.MemoryMiB != nil {
							f16f1f1elemf0f15 := &svcsdk.MemoryMiBRequest{}
							if f16f1f1iter.InstanceRequirements.MemoryMiB.Max != nil {
								f16f1f1elemf0f15.SetMax(*f16f1f1iter.InstanceRequirements.MemoryMiB.Max)
							}
							if f16f1f1iter.InstanceRequirements.MemoryMiB.Min != nil {
								f16f1f1elemf0f15.SetMin(*f16f1f1iter.InstanceRequirements.MemoryMiB.Min)
							}
							f16f1f1elemf0.SetMemoryMiB(f16f1f1elemf0f15)
						}
						if f16f1f1iter.InstanceRequirements.NetworkBandwidthGbps != nil {
							f16f1f1elemf0f16 := &svcsdk.NetworkBandwidthGbpsRequest{}
							if f16f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Max != nil {
								f16f1f1elemf0f16.SetMax(*f16f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Max)
							}
							if f16f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Min != nil {
								f16f1f1elemf0f16.SetMin(*f16f1f1iter.InstanceRequirements.NetworkBandwidthGbps.Min)
							}
							f16f1f1elemf0.SetNetworkBandwidthGbps(f16f1f1elemf0f16)
						}
						if f16f1f1iter.InstanceRequirements.NetworkInterfaceCount != nil {
							f16f1f1elemf0f17 := &svcsdk.NetworkInterfaceCountRequest{}
							if f16f1f1iter.InstanceRequirements.NetworkInterfaceCount.Max != nil {
								f16f1f1elemf0f17.SetMax(*f16f1f1iter.InstanceRequirements.NetworkInterfaceCount.Max)
							}
							if f16f1f1iter.InstanceRequirements.NetworkInterfaceCount.Min != nil {
								f16f1f1elemf0f17.SetMin(*f16f1f1iter.InstanceRequirements.NetworkInterfaceCount.Min)
							}
							f16f1f1elemf0.SetNetworkInterfaceCount(f16f1f1elemf0f17)
						}
						if f16f1f1iter.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice != nil {
							f16f1f1elemf0.SetOnDemandMaxPricePercentageOverLowestPrice(*f16f1f1iter.InstanceRequirements.OnDemandMaxPricePercentageOverLowestPrice)
						}
						if f16f1f1iter.InstanceRequirements.RequireHibernateSupport != nil {
							f16f1f1elemf0.SetRequireHibernateSupport(*f16f1f1iter.InstanceRequirements.RequireHibernateSupport)
						}
						if f16f1f1iter.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice != nil {
							f16f1f1elemf0.SetSpotMaxPricePercentageOverLowestPrice(*f16f1f1iter.InstanceRequirements.SpotMaxPricePercentageOverLowestPrice)
						}
						if f16f1f1iter.InstanceRequirements.TotalLocalStorageGB != nil {
							f16f1f1elemf0f21 := &svcsdk.TotalLocalStorageGBRequest{}
							if f16f1f1iter.InstanceRequirements.TotalLocalStorageGB.Max != nil {
								f16f1f1elemf0f21.SetMax(*f16f1f1iter.InstanceRequirements.TotalLocalStorageGB.Max)
							}
							if f16f1f1iter.InstanceRequirements.TotalLocalStorageGB.Min != nil {
								f16f1f1elemf0f21.SetMin(*f16f1f1iter.InstanceRequirements.TotalLocalStorageGB.Min)
							}
							f16f1f1elemf0.SetTotalLocalStorageGB(f16f1f1elemf0f21)
						}
						if f16f1f1iter.InstanceRequirements.VCPUCount != nil {
							f16f1f1elemf0f22 := &svcsdk.VCpuCountRequest{}
							if f16f1f1iter.InstanceRequirements.VCPUCount.Max != nil {
								f16f1f1elemf0f22.SetMax(*f16f1f1iter.InstanceRequirements.VCPUCount.Max)
							}
							if f16f1f1iter.InstanceRequirements.VCPUCount.Min != nil {
								f16f1f1elemf0f22.SetMin(*f16f1f1iter.InstanceRequirements.VCPUCount.Min)
							}
							f16f1f1elemf0.SetVCpuCount(f16f1f1elemf0f22)
						}
						f16f1f1elem.SetInstanceRequirements(f16f1f1elemf0)
					}
					if f16f1f1iter.InstanceType != nil {
						f16f1f1elem.SetInstanceType(*f16f1f1iter.InstanceType)
					}
					if f16f1f1iter.LaunchTemplateSpecification != nil {
						f16f1f1elemf2 := &svcsdk.LaunchTemplateSpecification{}
						if f16f1f1iter.LaunchTemplateSpecification.LaunchTemplateID != nil {
							f16f1f1elemf2.SetLaunchTemplateId(*f16f1f1iter.LaunchTemplateSpecification.LaunchTemplateID)
						}
						if f16f1f1iter.LaunchTemplateSpecification.LaunchTemplateName != nil {
							f16f1f1elemf2.SetLaunchTemplateName(*f16f1f1iter.LaunchTemplateSpecification.LaunchTemplateName)
						}
						if f16f1f1iter.LaunchTemplateSpecification.Version != nil {
							f16f1f1elemf2.SetVersion(*f16f1f1iter.LaunchTemplateSpecification.Version)
						}
						f16f1f1elem.SetLaunchTemplateSpecification(f16f1f1elemf2)
					}
					if f16f1f1iter.WeightedCapacity != nil {
						f16f1f1elem.SetWeightedCapacity(*f16f1f1iter.WeightedCapacity)
					}
					f16f1f1 = append(f16f1f1, f16f1f1elem)
				}
				f16f1.SetOverrides(f16f1f1)
			}
			f16.SetLaunchTemplate(f16f1)
		}
		res.SetMixedInstancesPolicy(f16)
	}
	if cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn != nil {
		res.SetNewInstancesProtectedFromScaleIn(*cr.Spec.ForProvider.NewInstancesProtectedFromScaleIn)
	}
	if cr.Spec.ForProvider.PlacementGroup != nil {
		res.SetPlacementGroup(*cr.Spec.ForProvider.PlacementGroup)
	}
	if cr.Spec.ForProvider.ServiceLinkedRoleARN != nil {
		res.SetServiceLinkedRoleARN(*cr.Spec.ForProvider.ServiceLinkedRoleARN)
	}
	if cr.Spec.ForProvider.TerminationPolicies != nil {
		f20 := []*string{}
		for _, f20iter := range cr.Spec.ForProvider.TerminationPolicies {
			var f20elem string
			f20elem = *f20iter
			f20 = append(f20, &f20elem)
		}
		res.SetTerminationPolicies(f20)
	}
	if cr.Spec.ForProvider.VPCZoneIdentifier != nil {
		res.SetVPCZoneIdentifier(*cr.Spec.ForProvider.VPCZoneIdentifier)
	}

	return res
}

// GenerateDeleteAutoScalingGroupInput returns a deletion input.
func GenerateDeleteAutoScalingGroupInput(cr *svcapitypes.AutoScalingGroup) *svcsdk.DeleteAutoScalingGroupInput {
	res := &svcsdk.DeleteAutoScalingGroupInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
