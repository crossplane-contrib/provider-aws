/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package workteam

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeWorkteamInput returns input for read
// operation.
func GenerateDescribeWorkteamInput(cr *svcapitypes.Workteam) *svcsdk.DescribeWorkteamInput {
	res := preGenerateDescribeWorkteamInput(cr, &svcsdk.DescribeWorkteamInput{})

	if cr.Spec.ForProvider.WorkteamName != nil {
		res.SetWorkteamName(*cr.Spec.ForProvider.WorkteamName)
	}

	return postGenerateDescribeWorkteamInput(cr, res)
}

// GenerateWorkteam returns the current state in the form of *svcapitypes.Workteam.
func GenerateWorkteam(resp *svcsdk.DescribeWorkteamOutput) *svcapitypes.Workteam {
	cr := &svcapitypes.Workteam{}

	if resp.Workteam.WorkteamArn != nil {
		cr.Status.AtProvider.WorkteamARN = resp.Workteam.WorkteamArn
	}

	return cr
}

// GenerateCreateWorkteamInput returns a create input.
func GenerateCreateWorkteamInput(cr *svcapitypes.Workteam) *svcsdk.CreateWorkteamInput {
	res := preGenerateCreateWorkteamInput(cr, &svcsdk.CreateWorkteamInput{})

	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.MemberDefinitions != nil {
		f1 := []*svcsdk.MemberDefinition{}
		for _, f1iter := range cr.Spec.ForProvider.MemberDefinitions {
			f1elem := &svcsdk.MemberDefinition{}
			if f1iter.CognitoMemberDefinition != nil {
				f1elemf0 := &svcsdk.CognitoMemberDefinition{}
				if f1iter.CognitoMemberDefinition.ClientID != nil {
					f1elemf0.SetClientId(*f1iter.CognitoMemberDefinition.ClientID)
				}
				if f1iter.CognitoMemberDefinition.UserGroup != nil {
					f1elemf0.SetUserGroup(*f1iter.CognitoMemberDefinition.UserGroup)
				}
				if f1iter.CognitoMemberDefinition.UserPool != nil {
					f1elemf0.SetUserPool(*f1iter.CognitoMemberDefinition.UserPool)
				}
				f1elem.SetCognitoMemberDefinition(f1elemf0)
			}
			if f1iter.OidcMemberDefinition != nil {
				f1elemf1 := &svcsdk.OidcMemberDefinition{}
				if f1iter.OidcMemberDefinition.Groups != nil {
					f1elemf1f0 := []*string{}
					for _, f1elemf1f0iter := range f1iter.OidcMemberDefinition.Groups {
						var f1elemf1f0elem string
						f1elemf1f0elem = *f1elemf1f0iter
						f1elemf1f0 = append(f1elemf1f0, &f1elemf1f0elem)
					}
					f1elemf1.SetGroups(f1elemf1f0)
				}
				f1elem.SetOidcMemberDefinition(f1elemf1)
			}
			f1 = append(f1, f1elem)
		}
		res.SetMemberDefinitions(f1)
	}
	if cr.Spec.ForProvider.NotificationConfiguration != nil {
		f2 := &svcsdk.NotificationConfiguration{}
		if cr.Spec.ForProvider.NotificationConfiguration.NotificationTopicARN != nil {
			f2.SetNotificationTopicArn(*cr.Spec.ForProvider.NotificationConfiguration.NotificationTopicARN)
		}
		res.SetNotificationConfiguration(f2)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f3 := []*svcsdk.Tag{}
		for _, f3iter := range cr.Spec.ForProvider.Tags {
			f3elem := &svcsdk.Tag{}
			if f3iter.Key != nil {
				f3elem.SetKey(*f3iter.Key)
			}
			if f3iter.Value != nil {
				f3elem.SetValue(*f3iter.Value)
			}
			f3 = append(f3, f3elem)
		}
		res.SetTags(f3)
	}
	if cr.Spec.ForProvider.WorkforceName != nil {
		res.SetWorkforceName(*cr.Spec.ForProvider.WorkforceName)
	}
	if cr.Spec.ForProvider.WorkteamName != nil {
		res.SetWorkteamName(*cr.Spec.ForProvider.WorkteamName)
	}

	return postGenerateCreateWorkteamInput(cr, res)
}

// GenerateDeleteWorkteamInput returns a deletion input.
func GenerateDeleteWorkteamInput(cr *svcapitypes.Workteam) *svcsdk.DeleteWorkteamInput {
	res := preGenerateDeleteWorkteamInput(cr, &svcsdk.DeleteWorkteamInput{})

	if cr.Spec.ForProvider.WorkteamName != nil {
		res.SetWorkteamName(*cr.Spec.ForProvider.WorkteamName)
	}

	return postGenerateDeleteWorkteamInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
