/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package endpointconfig

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeEndpointConfigInput returns input for read
// operation.
func GenerateDescribeEndpointConfigInput(cr *svcapitypes.EndpointConfig) *svcsdk.DescribeEndpointConfigInput {
	res := preGenerateDescribeEndpointConfigInput(cr, &svcsdk.DescribeEndpointConfigInput{})

	if cr.Spec.ForProvider.EndpointConfigName != nil {
		res.SetEndpointConfigName(*cr.Spec.ForProvider.EndpointConfigName)
	}

	return postGenerateDescribeEndpointConfigInput(cr, res)
}

// GenerateEndpointConfig returns the current state in the form of *svcapitypes.EndpointConfig.
func GenerateEndpointConfig(resp *svcsdk.DescribeEndpointConfigOutput) *svcapitypes.EndpointConfig {
	cr := &svcapitypes.EndpointConfig{}

	if resp.EndpointConfigArn != nil {
		cr.Status.AtProvider.EndpointConfigARN = resp.EndpointConfigArn
	}

	return cr
}

// GenerateCreateEndpointConfigInput returns a create input.
func GenerateCreateEndpointConfigInput(cr *svcapitypes.EndpointConfig) *svcsdk.CreateEndpointConfigInput {
	res := preGenerateCreateEndpointConfigInput(cr, &svcsdk.CreateEndpointConfigInput{})

	if cr.Spec.ForProvider.DataCaptureConfig != nil {
		f0 := &svcsdk.DataCaptureConfig{}
		if cr.Spec.ForProvider.DataCaptureConfig.CaptureContentTypeHeader != nil {
			f0f0 := &svcsdk.CaptureContentTypeHeader{}
			if cr.Spec.ForProvider.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes != nil {
				f0f0f0 := []*string{}
				for _, f0f0f0iter := range cr.Spec.ForProvider.DataCaptureConfig.CaptureContentTypeHeader.CsvContentTypes {
					var f0f0f0elem string
					f0f0f0elem = *f0f0f0iter
					f0f0f0 = append(f0f0f0, &f0f0f0elem)
				}
				f0f0.SetCsvContentTypes(f0f0f0)
			}
			if cr.Spec.ForProvider.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes != nil {
				f0f0f1 := []*string{}
				for _, f0f0f1iter := range cr.Spec.ForProvider.DataCaptureConfig.CaptureContentTypeHeader.JSONContentTypes {
					var f0f0f1elem string
					f0f0f1elem = *f0f0f1iter
					f0f0f1 = append(f0f0f1, &f0f0f1elem)
				}
				f0f0.SetJsonContentTypes(f0f0f1)
			}
			f0.SetCaptureContentTypeHeader(f0f0)
		}
		if cr.Spec.ForProvider.DataCaptureConfig.CaptureOptions != nil {
			f0f1 := []*svcsdk.CaptureOption{}
			for _, f0f1iter := range cr.Spec.ForProvider.DataCaptureConfig.CaptureOptions {
				f0f1elem := &svcsdk.CaptureOption{}
				if f0f1iter.CaptureMode != nil {
					f0f1elem.SetCaptureMode(*f0f1iter.CaptureMode)
				}
				f0f1 = append(f0f1, f0f1elem)
			}
			f0.SetCaptureOptions(f0f1)
		}
		if cr.Spec.ForProvider.DataCaptureConfig.DestinationS3URI != nil {
			f0.SetDestinationS3Uri(*cr.Spec.ForProvider.DataCaptureConfig.DestinationS3URI)
		}
		if cr.Spec.ForProvider.DataCaptureConfig.EnableCapture != nil {
			f0.SetEnableCapture(*cr.Spec.ForProvider.DataCaptureConfig.EnableCapture)
		}
		if cr.Spec.ForProvider.DataCaptureConfig.InitialSamplingPercentage != nil {
			f0.SetInitialSamplingPercentage(*cr.Spec.ForProvider.DataCaptureConfig.InitialSamplingPercentage)
		}
		if cr.Spec.ForProvider.DataCaptureConfig.KMSKeyID != nil {
			f0.SetKmsKeyId(*cr.Spec.ForProvider.DataCaptureConfig.KMSKeyID)
		}
		res.SetDataCaptureConfig(f0)
	}
	if cr.Spec.ForProvider.EndpointConfigName != nil {
		res.SetEndpointConfigName(*cr.Spec.ForProvider.EndpointConfigName)
	}
	if cr.Spec.ForProvider.KMSKeyID != nil {
		res.SetKmsKeyId(*cr.Spec.ForProvider.KMSKeyID)
	}
	if cr.Spec.ForProvider.ProductionVariants != nil {
		f3 := []*svcsdk.ProductionVariant{}
		for _, f3iter := range cr.Spec.ForProvider.ProductionVariants {
			f3elem := &svcsdk.ProductionVariant{}
			if f3iter.AcceleratorType != nil {
				f3elem.SetAcceleratorType(*f3iter.AcceleratorType)
			}
			if f3iter.InitialInstanceCount != nil {
				f3elem.SetInitialInstanceCount(*f3iter.InitialInstanceCount)
			}
			if f3iter.InitialVariantWeight != nil {
				f3elem.SetInitialVariantWeight(*f3iter.InitialVariantWeight)
			}
			if f3iter.InstanceType != nil {
				f3elem.SetInstanceType(*f3iter.InstanceType)
			}
			if f3iter.ModelName != nil {
				f3elem.SetModelName(*f3iter.ModelName)
			}
			if f3iter.VariantName != nil {
				f3elem.SetVariantName(*f3iter.VariantName)
			}
			f3 = append(f3, f3elem)
		}
		res.SetProductionVariants(f3)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f4 := []*svcsdk.Tag{}
		for _, f4iter := range cr.Spec.ForProvider.Tags {
			f4elem := &svcsdk.Tag{}
			if f4iter.Key != nil {
				f4elem.SetKey(*f4iter.Key)
			}
			if f4iter.Value != nil {
				f4elem.SetValue(*f4iter.Value)
			}
			f4 = append(f4, f4elem)
		}
		res.SetTags(f4)
	}

	return postGenerateCreateEndpointConfigInput(cr, res)
}

// GenerateDeleteEndpointConfigInput returns a deletion input.
func GenerateDeleteEndpointConfigInput(cr *svcapitypes.EndpointConfig) *svcsdk.DeleteEndpointConfigInput {
	res := preGenerateDeleteEndpointConfigInput(cr, &svcsdk.DeleteEndpointConfigInput{})

	if cr.Spec.ForProvider.EndpointConfigName != nil {
		res.SetEndpointConfigName(*cr.Spec.ForProvider.EndpointConfigName)
	}

	return postGenerateDeleteEndpointConfigInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
