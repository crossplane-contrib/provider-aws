/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package algorithm

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeAlgorithmInput returns input for read
// operation.
func GenerateDescribeAlgorithmInput(cr *svcapitypes.Algorithm) *svcsdk.DescribeAlgorithmInput {
	res := preGenerateDescribeAlgorithmInput(cr, &svcsdk.DescribeAlgorithmInput{})

	if cr.Spec.ForProvider.AlgorithmName != nil {
		res.SetAlgorithmName(*cr.Spec.ForProvider.AlgorithmName)
	}

	return postGenerateDescribeAlgorithmInput(cr, res)
}

// GenerateAlgorithm returns the current state in the form of *svcapitypes.Algorithm.
func GenerateAlgorithm(resp *svcsdk.DescribeAlgorithmOutput) *svcapitypes.Algorithm {
	cr := &svcapitypes.Algorithm{}

	if resp.AlgorithmArn != nil {
		cr.Status.AtProvider.AlgorithmARN = resp.AlgorithmArn
	}

	return cr
}

// GenerateCreateAlgorithmInput returns a create input.
func GenerateCreateAlgorithmInput(cr *svcapitypes.Algorithm) *svcsdk.CreateAlgorithmInput {
	res := preGenerateCreateAlgorithmInput(cr, &svcsdk.CreateAlgorithmInput{})

	if cr.Spec.ForProvider.AlgorithmDescription != nil {
		res.SetAlgorithmDescription(*cr.Spec.ForProvider.AlgorithmDescription)
	}
	if cr.Spec.ForProvider.AlgorithmName != nil {
		res.SetAlgorithmName(*cr.Spec.ForProvider.AlgorithmName)
	}
	if cr.Spec.ForProvider.CertifyForMarketplace != nil {
		res.SetCertifyForMarketplace(*cr.Spec.ForProvider.CertifyForMarketplace)
	}
	if cr.Spec.ForProvider.InferenceSpecification != nil {
		f3 := &svcsdk.InferenceSpecification{}
		if cr.Spec.ForProvider.InferenceSpecification.Containers != nil {
			f3f0 := []*svcsdk.ModelPackageContainerDefinition{}
			for _, f3f0iter := range cr.Spec.ForProvider.InferenceSpecification.Containers {
				f3f0elem := &svcsdk.ModelPackageContainerDefinition{}
				if f3f0iter.ContainerHostname != nil {
					f3f0elem.SetContainerHostname(*f3f0iter.ContainerHostname)
				}
				if f3f0iter.Image != nil {
					f3f0elem.SetImage(*f3f0iter.Image)
				}
				if f3f0iter.ImageDigest != nil {
					f3f0elem.SetImageDigest(*f3f0iter.ImageDigest)
				}
				if f3f0iter.ModelDataURL != nil {
					f3f0elem.SetModelDataUrl(*f3f0iter.ModelDataURL)
				}
				if f3f0iter.ProductID != nil {
					f3f0elem.SetProductId(*f3f0iter.ProductID)
				}
				f3f0 = append(f3f0, f3f0elem)
			}
			f3.SetContainers(f3f0)
		}
		if cr.Spec.ForProvider.InferenceSpecification.SupportedContentTypes != nil {
			f3f1 := []*string{}
			for _, f3f1iter := range cr.Spec.ForProvider.InferenceSpecification.SupportedContentTypes {
				var f3f1elem string
				f3f1elem = *f3f1iter
				f3f1 = append(f3f1, &f3f1elem)
			}
			f3.SetSupportedContentTypes(f3f1)
		}
		if cr.Spec.ForProvider.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes != nil {
			f3f2 := []*string{}
			for _, f3f2iter := range cr.Spec.ForProvider.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes {
				var f3f2elem string
				f3f2elem = *f3f2iter
				f3f2 = append(f3f2, &f3f2elem)
			}
			f3.SetSupportedRealtimeInferenceInstanceTypes(f3f2)
		}
		if cr.Spec.ForProvider.InferenceSpecification.SupportedResponseMIMETypes != nil {
			f3f3 := []*string{}
			for _, f3f3iter := range cr.Spec.ForProvider.InferenceSpecification.SupportedResponseMIMETypes {
				var f3f3elem string
				f3f3elem = *f3f3iter
				f3f3 = append(f3f3, &f3f3elem)
			}
			f3.SetSupportedResponseMIMETypes(f3f3)
		}
		if cr.Spec.ForProvider.InferenceSpecification.SupportedTransformInstanceTypes != nil {
			f3f4 := []*string{}
			for _, f3f4iter := range cr.Spec.ForProvider.InferenceSpecification.SupportedTransformInstanceTypes {
				var f3f4elem string
				f3f4elem = *f3f4iter
				f3f4 = append(f3f4, &f3f4elem)
			}
			f3.SetSupportedTransformInstanceTypes(f3f4)
		}
		res.SetInferenceSpecification(f3)
	}
	if cr.Spec.ForProvider.TrainingSpecification != nil {
		f4 := &svcsdk.TrainingSpecification{}
		if cr.Spec.ForProvider.TrainingSpecification.MetricDefinitions != nil {
			f4f0 := []*svcsdk.MetricDefinition{}
			for _, f4f0iter := range cr.Spec.ForProvider.TrainingSpecification.MetricDefinitions {
				f4f0elem := &svcsdk.MetricDefinition{}
				if f4f0iter.Name != nil {
					f4f0elem.SetName(*f4f0iter.Name)
				}
				if f4f0iter.Regex != nil {
					f4f0elem.SetRegex(*f4f0iter.Regex)
				}
				f4f0 = append(f4f0, f4f0elem)
			}
			f4.SetMetricDefinitions(f4f0)
		}
		if cr.Spec.ForProvider.TrainingSpecification.SupportedHyperParameters != nil {
			f4f1 := []*svcsdk.HyperParameterSpecification{}
			for _, f4f1iter := range cr.Spec.ForProvider.TrainingSpecification.SupportedHyperParameters {
				f4f1elem := &svcsdk.HyperParameterSpecification{}
				if f4f1iter.DefaultValue != nil {
					f4f1elem.SetDefaultValue(*f4f1iter.DefaultValue)
				}
				if f4f1iter.Description != nil {
					f4f1elem.SetDescription(*f4f1iter.Description)
				}
				if f4f1iter.IsRequired != nil {
					f4f1elem.SetIsRequired(*f4f1iter.IsRequired)
				}
				if f4f1iter.IsTunable != nil {
					f4f1elem.SetIsTunable(*f4f1iter.IsTunable)
				}
				if f4f1iter.Name != nil {
					f4f1elem.SetName(*f4f1iter.Name)
				}
				if f4f1iter.Range != nil {
					f4f1elemf5 := &svcsdk.ParameterRange{}
					if f4f1iter.Range.CategoricalParameterRangeSpecification != nil {
						f4f1elemf5f0 := &svcsdk.CategoricalParameterRangeSpecification{}
						if f4f1iter.Range.CategoricalParameterRangeSpecification.Values != nil {
							f4f1elemf5f0f0 := []*string{}
							for _, f4f1elemf5f0f0iter := range f4f1iter.Range.CategoricalParameterRangeSpecification.Values {
								var f4f1elemf5f0f0elem string
								f4f1elemf5f0f0elem = *f4f1elemf5f0f0iter
								f4f1elemf5f0f0 = append(f4f1elemf5f0f0, &f4f1elemf5f0f0elem)
							}
							f4f1elemf5f0.SetValues(f4f1elemf5f0f0)
						}
						f4f1elemf5.SetCategoricalParameterRangeSpecification(f4f1elemf5f0)
					}
					if f4f1iter.Range.ContinuousParameterRangeSpecification != nil {
						f4f1elemf5f1 := &svcsdk.ContinuousParameterRangeSpecification{}
						if f4f1iter.Range.ContinuousParameterRangeSpecification.MaxValue != nil {
							f4f1elemf5f1.SetMaxValue(*f4f1iter.Range.ContinuousParameterRangeSpecification.MaxValue)
						}
						if f4f1iter.Range.ContinuousParameterRangeSpecification.MinValue != nil {
							f4f1elemf5f1.SetMinValue(*f4f1iter.Range.ContinuousParameterRangeSpecification.MinValue)
						}
						f4f1elemf5.SetContinuousParameterRangeSpecification(f4f1elemf5f1)
					}
					if f4f1iter.Range.IntegerParameterRangeSpecification != nil {
						f4f1elemf5f2 := &svcsdk.IntegerParameterRangeSpecification{}
						if f4f1iter.Range.IntegerParameterRangeSpecification.MaxValue != nil {
							f4f1elemf5f2.SetMaxValue(*f4f1iter.Range.IntegerParameterRangeSpecification.MaxValue)
						}
						if f4f1iter.Range.IntegerParameterRangeSpecification.MinValue != nil {
							f4f1elemf5f2.SetMinValue(*f4f1iter.Range.IntegerParameterRangeSpecification.MinValue)
						}
						f4f1elemf5.SetIntegerParameterRangeSpecification(f4f1elemf5f2)
					}
					f4f1elem.SetRange(f4f1elemf5)
				}
				if f4f1iter.Type != nil {
					f4f1elem.SetType(*f4f1iter.Type)
				}
				f4f1 = append(f4f1, f4f1elem)
			}
			f4.SetSupportedHyperParameters(f4f1)
		}
		if cr.Spec.ForProvider.TrainingSpecification.SupportedTrainingInstanceTypes != nil {
			f4f2 := []*string{}
			for _, f4f2iter := range cr.Spec.ForProvider.TrainingSpecification.SupportedTrainingInstanceTypes {
				var f4f2elem string
				f4f2elem = *f4f2iter
				f4f2 = append(f4f2, &f4f2elem)
			}
			f4.SetSupportedTrainingInstanceTypes(f4f2)
		}
		if cr.Spec.ForProvider.TrainingSpecification.SupportedTuningJobObjectiveMetrics != nil {
			f4f3 := []*svcsdk.HyperParameterTuningJobObjective{}
			for _, f4f3iter := range cr.Spec.ForProvider.TrainingSpecification.SupportedTuningJobObjectiveMetrics {
				f4f3elem := &svcsdk.HyperParameterTuningJobObjective{}
				if f4f3iter.MetricName != nil {
					f4f3elem.SetMetricName(*f4f3iter.MetricName)
				}
				if f4f3iter.Type != nil {
					f4f3elem.SetType(*f4f3iter.Type)
				}
				f4f3 = append(f4f3, f4f3elem)
			}
			f4.SetSupportedTuningJobObjectiveMetrics(f4f3)
		}
		if cr.Spec.ForProvider.TrainingSpecification.SupportsDistributedTraining != nil {
			f4.SetSupportsDistributedTraining(*cr.Spec.ForProvider.TrainingSpecification.SupportsDistributedTraining)
		}
		if cr.Spec.ForProvider.TrainingSpecification.TrainingChannels != nil {
			f4f5 := []*svcsdk.ChannelSpecification{}
			for _, f4f5iter := range cr.Spec.ForProvider.TrainingSpecification.TrainingChannels {
				f4f5elem := &svcsdk.ChannelSpecification{}
				if f4f5iter.Description != nil {
					f4f5elem.SetDescription(*f4f5iter.Description)
				}
				if f4f5iter.IsRequired != nil {
					f4f5elem.SetIsRequired(*f4f5iter.IsRequired)
				}
				if f4f5iter.Name != nil {
					f4f5elem.SetName(*f4f5iter.Name)
				}
				if f4f5iter.SupportedCompressionTypes != nil {
					f4f5elemf3 := []*string{}
					for _, f4f5elemf3iter := range f4f5iter.SupportedCompressionTypes {
						var f4f5elemf3elem string
						f4f5elemf3elem = *f4f5elemf3iter
						f4f5elemf3 = append(f4f5elemf3, &f4f5elemf3elem)
					}
					f4f5elem.SetSupportedCompressionTypes(f4f5elemf3)
				}
				if f4f5iter.SupportedContentTypes != nil {
					f4f5elemf4 := []*string{}
					for _, f4f5elemf4iter := range f4f5iter.SupportedContentTypes {
						var f4f5elemf4elem string
						f4f5elemf4elem = *f4f5elemf4iter
						f4f5elemf4 = append(f4f5elemf4, &f4f5elemf4elem)
					}
					f4f5elem.SetSupportedContentTypes(f4f5elemf4)
				}
				if f4f5iter.SupportedInputModes != nil {
					f4f5elemf5 := []*string{}
					for _, f4f5elemf5iter := range f4f5iter.SupportedInputModes {
						var f4f5elemf5elem string
						f4f5elemf5elem = *f4f5elemf5iter
						f4f5elemf5 = append(f4f5elemf5, &f4f5elemf5elem)
					}
					f4f5elem.SetSupportedInputModes(f4f5elemf5)
				}
				f4f5 = append(f4f5, f4f5elem)
			}
			f4.SetTrainingChannels(f4f5)
		}
		if cr.Spec.ForProvider.TrainingSpecification.TrainingImage != nil {
			f4.SetTrainingImage(*cr.Spec.ForProvider.TrainingSpecification.TrainingImage)
		}
		if cr.Spec.ForProvider.TrainingSpecification.TrainingImageDigest != nil {
			f4.SetTrainingImageDigest(*cr.Spec.ForProvider.TrainingSpecification.TrainingImageDigest)
		}
		res.SetTrainingSpecification(f4)
	}
	if cr.Spec.ForProvider.ValidationSpecification != nil {
		f5 := &svcsdk.AlgorithmValidationSpecification{}
		if cr.Spec.ForProvider.ValidationSpecification.ValidationProfiles != nil {
			f5f0 := []*svcsdk.AlgorithmValidationProfile{}
			for _, f5f0iter := range cr.Spec.ForProvider.ValidationSpecification.ValidationProfiles {
				f5f0elem := &svcsdk.AlgorithmValidationProfile{}
				if f5f0iter.ProfileName != nil {
					f5f0elem.SetProfileName(*f5f0iter.ProfileName)
				}
				if f5f0iter.TrainingJobDefinition != nil {
					f5f0elemf1 := &svcsdk.TrainingJobDefinition{}
					if f5f0iter.TrainingJobDefinition.HyperParameters != nil {
						f5f0elemf1f0 := map[string]*string{}
						for f5f0elemf1f0key, f5f0elemf1f0valiter := range f5f0iter.TrainingJobDefinition.HyperParameters {
							var f5f0elemf1f0val string
							f5f0elemf1f0val = *f5f0elemf1f0valiter
							f5f0elemf1f0[f5f0elemf1f0key] = &f5f0elemf1f0val
						}
						f5f0elemf1.SetHyperParameters(f5f0elemf1f0)
					}
					if f5f0iter.TrainingJobDefinition.InputDataConfig != nil {
						f5f0elemf1f1 := []*svcsdk.Channel{}
						for _, f5f0elemf1f1iter := range f5f0iter.TrainingJobDefinition.InputDataConfig {
							f5f0elemf1f1elem := &svcsdk.Channel{}
							if f5f0elemf1f1iter.ChannelName != nil {
								f5f0elemf1f1elem.SetChannelName(*f5f0elemf1f1iter.ChannelName)
							}
							if f5f0elemf1f1iter.CompressionType != nil {
								f5f0elemf1f1elem.SetCompressionType(*f5f0elemf1f1iter.CompressionType)
							}
							if f5f0elemf1f1iter.ContentType != nil {
								f5f0elemf1f1elem.SetContentType(*f5f0elemf1f1iter.ContentType)
							}
							if f5f0elemf1f1iter.DataSource != nil {
								f5f0elemf1f1elemf3 := &svcsdk.DataSource{}
								if f5f0elemf1f1iter.DataSource.FileSystemDataSource != nil {
									f5f0elemf1f1elemf3f0 := &svcsdk.FileSystemDataSource{}
									if f5f0elemf1f1iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
										f5f0elemf1f1elemf3f0.SetDirectoryPath(*f5f0elemf1f1iter.DataSource.FileSystemDataSource.DirectoryPath)
									}
									if f5f0elemf1f1iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
										f5f0elemf1f1elemf3f0.SetFileSystemAccessMode(*f5f0elemf1f1iter.DataSource.FileSystemDataSource.FileSystemAccessMode)
									}
									if f5f0elemf1f1iter.DataSource.FileSystemDataSource.FileSystemID != nil {
										f5f0elemf1f1elemf3f0.SetFileSystemId(*f5f0elemf1f1iter.DataSource.FileSystemDataSource.FileSystemID)
									}
									if f5f0elemf1f1iter.DataSource.FileSystemDataSource.FileSystemType != nil {
										f5f0elemf1f1elemf3f0.SetFileSystemType(*f5f0elemf1f1iter.DataSource.FileSystemDataSource.FileSystemType)
									}
									f5f0elemf1f1elemf3.SetFileSystemDataSource(f5f0elemf1f1elemf3f0)
								}
								if f5f0elemf1f1iter.DataSource.S3DataSource != nil {
									f5f0elemf1f1elemf3f1 := &svcsdk.S3DataSource{}
									if f5f0elemf1f1iter.DataSource.S3DataSource.AttributeNames != nil {
										f5f0elemf1f1elemf3f1f0 := []*string{}
										for _, f5f0elemf1f1elemf3f1f0iter := range f5f0elemf1f1iter.DataSource.S3DataSource.AttributeNames {
											var f5f0elemf1f1elemf3f1f0elem string
											f5f0elemf1f1elemf3f1f0elem = *f5f0elemf1f1elemf3f1f0iter
											f5f0elemf1f1elemf3f1f0 = append(f5f0elemf1f1elemf3f1f0, &f5f0elemf1f1elemf3f1f0elem)
										}
										f5f0elemf1f1elemf3f1.SetAttributeNames(f5f0elemf1f1elemf3f1f0)
									}
									if f5f0elemf1f1iter.DataSource.S3DataSource.S3DataDistributionType != nil {
										f5f0elemf1f1elemf3f1.SetS3DataDistributionType(*f5f0elemf1f1iter.DataSource.S3DataSource.S3DataDistributionType)
									}
									if f5f0elemf1f1iter.DataSource.S3DataSource.S3DataType != nil {
										f5f0elemf1f1elemf3f1.SetS3DataType(*f5f0elemf1f1iter.DataSource.S3DataSource.S3DataType)
									}
									if f5f0elemf1f1iter.DataSource.S3DataSource.S3URI != nil {
										f5f0elemf1f1elemf3f1.SetS3Uri(*f5f0elemf1f1iter.DataSource.S3DataSource.S3URI)
									}
									f5f0elemf1f1elemf3.SetS3DataSource(f5f0elemf1f1elemf3f1)
								}
								f5f0elemf1f1elem.SetDataSource(f5f0elemf1f1elemf3)
							}
							if f5f0elemf1f1iter.InputMode != nil {
								f5f0elemf1f1elem.SetInputMode(*f5f0elemf1f1iter.InputMode)
							}
							if f5f0elemf1f1iter.RecordWrapperType != nil {
								f5f0elemf1f1elem.SetRecordWrapperType(*f5f0elemf1f1iter.RecordWrapperType)
							}
							if f5f0elemf1f1iter.ShuffleConfig != nil {
								f5f0elemf1f1elemf6 := &svcsdk.ShuffleConfig{}
								if f5f0elemf1f1iter.ShuffleConfig.Seed != nil {
									f5f0elemf1f1elemf6.SetSeed(*f5f0elemf1f1iter.ShuffleConfig.Seed)
								}
								f5f0elemf1f1elem.SetShuffleConfig(f5f0elemf1f1elemf6)
							}
							f5f0elemf1f1 = append(f5f0elemf1f1, f5f0elemf1f1elem)
						}
						f5f0elemf1.SetInputDataConfig(f5f0elemf1f1)
					}
					if f5f0iter.TrainingJobDefinition.OutputDataConfig != nil {
						f5f0elemf1f2 := &svcsdk.OutputDataConfig{}
						if f5f0iter.TrainingJobDefinition.OutputDataConfig.KMSKeyID != nil {
							f5f0elemf1f2.SetKmsKeyId(*f5f0iter.TrainingJobDefinition.OutputDataConfig.KMSKeyID)
						}
						if f5f0iter.TrainingJobDefinition.OutputDataConfig.S3OutputPath != nil {
							f5f0elemf1f2.SetS3OutputPath(*f5f0iter.TrainingJobDefinition.OutputDataConfig.S3OutputPath)
						}
						f5f0elemf1.SetOutputDataConfig(f5f0elemf1f2)
					}
					if f5f0iter.TrainingJobDefinition.ResourceConfig != nil {
						f5f0elemf1f3 := &svcsdk.ResourceConfig{}
						if f5f0iter.TrainingJobDefinition.ResourceConfig.InstanceCount != nil {
							f5f0elemf1f3.SetInstanceCount(*f5f0iter.TrainingJobDefinition.ResourceConfig.InstanceCount)
						}
						if f5f0iter.TrainingJobDefinition.ResourceConfig.InstanceType != nil {
							f5f0elemf1f3.SetInstanceType(*f5f0iter.TrainingJobDefinition.ResourceConfig.InstanceType)
						}
						if f5f0iter.TrainingJobDefinition.ResourceConfig.VolumeKMSKeyID != nil {
							f5f0elemf1f3.SetVolumeKmsKeyId(*f5f0iter.TrainingJobDefinition.ResourceConfig.VolumeKMSKeyID)
						}
						if f5f0iter.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB != nil {
							f5f0elemf1f3.SetVolumeSizeInGB(*f5f0iter.TrainingJobDefinition.ResourceConfig.VolumeSizeInGB)
						}
						f5f0elemf1.SetResourceConfig(f5f0elemf1f3)
					}
					if f5f0iter.TrainingJobDefinition.StoppingCondition != nil {
						f5f0elemf1f4 := &svcsdk.StoppingCondition{}
						if f5f0iter.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
							f5f0elemf1f4.SetMaxRuntimeInSeconds(*f5f0iter.TrainingJobDefinition.StoppingCondition.MaxRuntimeInSeconds)
						}
						if f5f0iter.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds != nil {
							f5f0elemf1f4.SetMaxWaitTimeInSeconds(*f5f0iter.TrainingJobDefinition.StoppingCondition.MaxWaitTimeInSeconds)
						}
						f5f0elemf1.SetStoppingCondition(f5f0elemf1f4)
					}
					if f5f0iter.TrainingJobDefinition.TrainingInputMode != nil {
						f5f0elemf1.SetTrainingInputMode(*f5f0iter.TrainingJobDefinition.TrainingInputMode)
					}
					f5f0elem.SetTrainingJobDefinition(f5f0elemf1)
				}
				if f5f0iter.TransformJobDefinition != nil {
					f5f0elemf2 := &svcsdk.TransformJobDefinition{}
					if f5f0iter.TransformJobDefinition.BatchStrategy != nil {
						f5f0elemf2.SetBatchStrategy(*f5f0iter.TransformJobDefinition.BatchStrategy)
					}
					if f5f0iter.TransformJobDefinition.Environment != nil {
						f5f0elemf2f1 := map[string]*string{}
						for f5f0elemf2f1key, f5f0elemf2f1valiter := range f5f0iter.TransformJobDefinition.Environment {
							var f5f0elemf2f1val string
							f5f0elemf2f1val = *f5f0elemf2f1valiter
							f5f0elemf2f1[f5f0elemf2f1key] = &f5f0elemf2f1val
						}
						f5f0elemf2.SetEnvironment(f5f0elemf2f1)
					}
					if f5f0iter.TransformJobDefinition.MaxConcurrentTransforms != nil {
						f5f0elemf2.SetMaxConcurrentTransforms(*f5f0iter.TransformJobDefinition.MaxConcurrentTransforms)
					}
					if f5f0iter.TransformJobDefinition.MaxPayloadInMB != nil {
						f5f0elemf2.SetMaxPayloadInMB(*f5f0iter.TransformJobDefinition.MaxPayloadInMB)
					}
					if f5f0iter.TransformJobDefinition.TransformInput != nil {
						f5f0elemf2f4 := &svcsdk.TransformInput{}
						if f5f0iter.TransformJobDefinition.TransformInput.CompressionType != nil {
							f5f0elemf2f4.SetCompressionType(*f5f0iter.TransformJobDefinition.TransformInput.CompressionType)
						}
						if f5f0iter.TransformJobDefinition.TransformInput.ContentType != nil {
							f5f0elemf2f4.SetContentType(*f5f0iter.TransformJobDefinition.TransformInput.ContentType)
						}
						if f5f0iter.TransformJobDefinition.TransformInput.DataSource != nil {
							f5f0elemf2f4f2 := &svcsdk.TransformDataSource{}
							if f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource != nil {
								f5f0elemf2f4f2f0 := &svcsdk.TransformS3DataSource{}
								if f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType != nil {
									f5f0elemf2f4f2f0.SetS3DataType(*f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType)
								}
								if f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI != nil {
									f5f0elemf2f4f2f0.SetS3Uri(*f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI)
								}
								f5f0elemf2f4f2.SetS3DataSource(f5f0elemf2f4f2f0)
							}
							f5f0elemf2f4.SetDataSource(f5f0elemf2f4f2)
						}
						if f5f0iter.TransformJobDefinition.TransformInput.SplitType != nil {
							f5f0elemf2f4.SetSplitType(*f5f0iter.TransformJobDefinition.TransformInput.SplitType)
						}
						f5f0elemf2.SetTransformInput(f5f0elemf2f4)
					}
					if f5f0iter.TransformJobDefinition.TransformOutput != nil {
						f5f0elemf2f5 := &svcsdk.TransformOutput{}
						if f5f0iter.TransformJobDefinition.TransformOutput.Accept != nil {
							f5f0elemf2f5.SetAccept(*f5f0iter.TransformJobDefinition.TransformOutput.Accept)
						}
						if f5f0iter.TransformJobDefinition.TransformOutput.AssembleWith != nil {
							f5f0elemf2f5.SetAssembleWith(*f5f0iter.TransformJobDefinition.TransformOutput.AssembleWith)
						}
						if f5f0iter.TransformJobDefinition.TransformOutput.KMSKeyID != nil {
							f5f0elemf2f5.SetKmsKeyId(*f5f0iter.TransformJobDefinition.TransformOutput.KMSKeyID)
						}
						if f5f0iter.TransformJobDefinition.TransformOutput.S3OutputPath != nil {
							f5f0elemf2f5.SetS3OutputPath(*f5f0iter.TransformJobDefinition.TransformOutput.S3OutputPath)
						}
						f5f0elemf2.SetTransformOutput(f5f0elemf2f5)
					}
					if f5f0iter.TransformJobDefinition.TransformResources != nil {
						f5f0elemf2f6 := &svcsdk.TransformResources{}
						if f5f0iter.TransformJobDefinition.TransformResources.InstanceCount != nil {
							f5f0elemf2f6.SetInstanceCount(*f5f0iter.TransformJobDefinition.TransformResources.InstanceCount)
						}
						if f5f0iter.TransformJobDefinition.TransformResources.InstanceType != nil {
							f5f0elemf2f6.SetInstanceType(*f5f0iter.TransformJobDefinition.TransformResources.InstanceType)
						}
						if f5f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID != nil {
							f5f0elemf2f6.SetVolumeKmsKeyId(*f5f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID)
						}
						f5f0elemf2.SetTransformResources(f5f0elemf2f6)
					}
					f5f0elem.SetTransformJobDefinition(f5f0elemf2)
				}
				f5f0 = append(f5f0, f5f0elem)
			}
			f5.SetValidationProfiles(f5f0)
		}
		if cr.Spec.ForProvider.ValidationSpecification.ValidationRole != nil {
			f5.SetValidationRole(*cr.Spec.ForProvider.ValidationSpecification.ValidationRole)
		}
		res.SetValidationSpecification(f5)
	}

	return postGenerateCreateAlgorithmInput(cr, res)
}

// GenerateDeleteAlgorithmInput returns a deletion input.
func GenerateDeleteAlgorithmInput(cr *svcapitypes.Algorithm) *svcsdk.DeleteAlgorithmInput {
	res := preGenerateDeleteAlgorithmInput(cr, &svcsdk.DeleteAlgorithmInput{})

	if cr.Spec.ForProvider.AlgorithmName != nil {
		res.SetAlgorithmName(*cr.Spec.ForProvider.AlgorithmName)
	}

	return postGenerateDeleteAlgorithmInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
