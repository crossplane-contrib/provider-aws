/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package modelpackage

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeModelPackageInput returns input for read
// operation.
func GenerateDescribeModelPackageInput(cr *svcapitypes.ModelPackage) *svcsdk.DescribeModelPackageInput {
	res := preGenerateDescribeModelPackageInput(cr, &svcsdk.DescribeModelPackageInput{})

	if cr.Spec.ForProvider.ModelPackageName != nil {
		res.SetModelPackageName(*cr.Spec.ForProvider.ModelPackageName)
	}

	return postGenerateDescribeModelPackageInput(cr, res)
}

// GenerateModelPackage returns the current state in the form of *svcapitypes.ModelPackage.
func GenerateModelPackage(resp *svcsdk.DescribeModelPackageOutput) *svcapitypes.ModelPackage {
	cr := &svcapitypes.ModelPackage{}

	if resp.ModelPackageArn != nil {
		cr.Status.AtProvider.ModelPackageARN = resp.ModelPackageArn
	}

	return cr
}

// GenerateCreateModelPackageInput returns a create input.
func GenerateCreateModelPackageInput(cr *svcapitypes.ModelPackage) *svcsdk.CreateModelPackageInput {
	res := preGenerateCreateModelPackageInput(cr, &svcsdk.CreateModelPackageInput{})

	if cr.Spec.ForProvider.CertifyForMarketplace != nil {
		res.SetCertifyForMarketplace(*cr.Spec.ForProvider.CertifyForMarketplace)
	}
	if cr.Spec.ForProvider.InferenceSpecification != nil {
		f1 := &svcsdk.InferenceSpecification{}
		if cr.Spec.ForProvider.InferenceSpecification.Containers != nil {
			f1f0 := []*svcsdk.ModelPackageContainerDefinition{}
			for _, f1f0iter := range cr.Spec.ForProvider.InferenceSpecification.Containers {
				f1f0elem := &svcsdk.ModelPackageContainerDefinition{}
				if f1f0iter.ContainerHostname != nil {
					f1f0elem.SetContainerHostname(*f1f0iter.ContainerHostname)
				}
				if f1f0iter.Image != nil {
					f1f0elem.SetImage(*f1f0iter.Image)
				}
				if f1f0iter.ImageDigest != nil {
					f1f0elem.SetImageDigest(*f1f0iter.ImageDigest)
				}
				if f1f0iter.ModelDataURL != nil {
					f1f0elem.SetModelDataUrl(*f1f0iter.ModelDataURL)
				}
				if f1f0iter.ProductID != nil {
					f1f0elem.SetProductId(*f1f0iter.ProductID)
				}
				f1f0 = append(f1f0, f1f0elem)
			}
			f1.SetContainers(f1f0)
		}
		if cr.Spec.ForProvider.InferenceSpecification.SupportedContentTypes != nil {
			f1f1 := []*string{}
			for _, f1f1iter := range cr.Spec.ForProvider.InferenceSpecification.SupportedContentTypes {
				var f1f1elem string
				f1f1elem = *f1f1iter
				f1f1 = append(f1f1, &f1f1elem)
			}
			f1.SetSupportedContentTypes(f1f1)
		}
		if cr.Spec.ForProvider.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes != nil {
			f1f2 := []*string{}
			for _, f1f2iter := range cr.Spec.ForProvider.InferenceSpecification.SupportedRealtimeInferenceInstanceTypes {
				var f1f2elem string
				f1f2elem = *f1f2iter
				f1f2 = append(f1f2, &f1f2elem)
			}
			f1.SetSupportedRealtimeInferenceInstanceTypes(f1f2)
		}
		if cr.Spec.ForProvider.InferenceSpecification.SupportedResponseMIMETypes != nil {
			f1f3 := []*string{}
			for _, f1f3iter := range cr.Spec.ForProvider.InferenceSpecification.SupportedResponseMIMETypes {
				var f1f3elem string
				f1f3elem = *f1f3iter
				f1f3 = append(f1f3, &f1f3elem)
			}
			f1.SetSupportedResponseMIMETypes(f1f3)
		}
		if cr.Spec.ForProvider.InferenceSpecification.SupportedTransformInstanceTypes != nil {
			f1f4 := []*string{}
			for _, f1f4iter := range cr.Spec.ForProvider.InferenceSpecification.SupportedTransformInstanceTypes {
				var f1f4elem string
				f1f4elem = *f1f4iter
				f1f4 = append(f1f4, &f1f4elem)
			}
			f1.SetSupportedTransformInstanceTypes(f1f4)
		}
		res.SetInferenceSpecification(f1)
	}
	if cr.Spec.ForProvider.ModelPackageDescription != nil {
		res.SetModelPackageDescription(*cr.Spec.ForProvider.ModelPackageDescription)
	}
	if cr.Spec.ForProvider.ModelPackageName != nil {
		res.SetModelPackageName(*cr.Spec.ForProvider.ModelPackageName)
	}
	if cr.Spec.ForProvider.SourceAlgorithmSpecification != nil {
		f4 := &svcsdk.SourceAlgorithmSpecification{}
		if cr.Spec.ForProvider.SourceAlgorithmSpecification.SourceAlgorithms != nil {
			f4f0 := []*svcsdk.SourceAlgorithm{}
			for _, f4f0iter := range cr.Spec.ForProvider.SourceAlgorithmSpecification.SourceAlgorithms {
				f4f0elem := &svcsdk.SourceAlgorithm{}
				if f4f0iter.AlgorithmName != nil {
					f4f0elem.SetAlgorithmName(*f4f0iter.AlgorithmName)
				}
				if f4f0iter.ModelDataURL != nil {
					f4f0elem.SetModelDataUrl(*f4f0iter.ModelDataURL)
				}
				f4f0 = append(f4f0, f4f0elem)
			}
			f4.SetSourceAlgorithms(f4f0)
		}
		res.SetSourceAlgorithmSpecification(f4)
	}
	if cr.Spec.ForProvider.ValidationSpecification != nil {
		f5 := &svcsdk.ModelPackageValidationSpecification{}
		if cr.Spec.ForProvider.ValidationSpecification.ValidationProfiles != nil {
			f5f0 := []*svcsdk.ModelPackageValidationProfile{}
			for _, f5f0iter := range cr.Spec.ForProvider.ValidationSpecification.ValidationProfiles {
				f5f0elem := &svcsdk.ModelPackageValidationProfile{}
				if f5f0iter.ProfileName != nil {
					f5f0elem.SetProfileName(*f5f0iter.ProfileName)
				}
				if f5f0iter.TransformJobDefinition != nil {
					f5f0elemf1 := &svcsdk.TransformJobDefinition{}
					if f5f0iter.TransformJobDefinition.BatchStrategy != nil {
						f5f0elemf1.SetBatchStrategy(*f5f0iter.TransformJobDefinition.BatchStrategy)
					}
					if f5f0iter.TransformJobDefinition.Environment != nil {
						f5f0elemf1f1 := map[string]*string{}
						for f5f0elemf1f1key, f5f0elemf1f1valiter := range f5f0iter.TransformJobDefinition.Environment {
							var f5f0elemf1f1val string
							f5f0elemf1f1val = *f5f0elemf1f1valiter
							f5f0elemf1f1[f5f0elemf1f1key] = &f5f0elemf1f1val
						}
						f5f0elemf1.SetEnvironment(f5f0elemf1f1)
					}
					if f5f0iter.TransformJobDefinition.MaxConcurrentTransforms != nil {
						f5f0elemf1.SetMaxConcurrentTransforms(*f5f0iter.TransformJobDefinition.MaxConcurrentTransforms)
					}
					if f5f0iter.TransformJobDefinition.MaxPayloadInMB != nil {
						f5f0elemf1.SetMaxPayloadInMB(*f5f0iter.TransformJobDefinition.MaxPayloadInMB)
					}
					if f5f0iter.TransformJobDefinition.TransformInput != nil {
						f5f0elemf1f4 := &svcsdk.TransformInput{}
						if f5f0iter.TransformJobDefinition.TransformInput.CompressionType != nil {
							f5f0elemf1f4.SetCompressionType(*f5f0iter.TransformJobDefinition.TransformInput.CompressionType)
						}
						if f5f0iter.TransformJobDefinition.TransformInput.ContentType != nil {
							f5f0elemf1f4.SetContentType(*f5f0iter.TransformJobDefinition.TransformInput.ContentType)
						}
						if f5f0iter.TransformJobDefinition.TransformInput.DataSource != nil {
							f5f0elemf1f4f2 := &svcsdk.TransformDataSource{}
							if f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource != nil {
								f5f0elemf1f4f2f0 := &svcsdk.TransformS3DataSource{}
								if f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType != nil {
									f5f0elemf1f4f2f0.SetS3DataType(*f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3DataType)
								}
								if f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI != nil {
									f5f0elemf1f4f2f0.SetS3Uri(*f5f0iter.TransformJobDefinition.TransformInput.DataSource.S3DataSource.S3URI)
								}
								f5f0elemf1f4f2.SetS3DataSource(f5f0elemf1f4f2f0)
							}
							f5f0elemf1f4.SetDataSource(f5f0elemf1f4f2)
						}
						if f5f0iter.TransformJobDefinition.TransformInput.SplitType != nil {
							f5f0elemf1f4.SetSplitType(*f5f0iter.TransformJobDefinition.TransformInput.SplitType)
						}
						f5f0elemf1.SetTransformInput(f5f0elemf1f4)
					}
					if f5f0iter.TransformJobDefinition.TransformOutput != nil {
						f5f0elemf1f5 := &svcsdk.TransformOutput{}
						if f5f0iter.TransformJobDefinition.TransformOutput.Accept != nil {
							f5f0elemf1f5.SetAccept(*f5f0iter.TransformJobDefinition.TransformOutput.Accept)
						}
						if f5f0iter.TransformJobDefinition.TransformOutput.AssembleWith != nil {
							f5f0elemf1f5.SetAssembleWith(*f5f0iter.TransformJobDefinition.TransformOutput.AssembleWith)
						}
						if f5f0iter.TransformJobDefinition.TransformOutput.KMSKeyID != nil {
							f5f0elemf1f5.SetKmsKeyId(*f5f0iter.TransformJobDefinition.TransformOutput.KMSKeyID)
						}
						if f5f0iter.TransformJobDefinition.TransformOutput.S3OutputPath != nil {
							f5f0elemf1f5.SetS3OutputPath(*f5f0iter.TransformJobDefinition.TransformOutput.S3OutputPath)
						}
						f5f0elemf1.SetTransformOutput(f5f0elemf1f5)
					}
					if f5f0iter.TransformJobDefinition.TransformResources != nil {
						f5f0elemf1f6 := &svcsdk.TransformResources{}
						if f5f0iter.TransformJobDefinition.TransformResources.InstanceCount != nil {
							f5f0elemf1f6.SetInstanceCount(*f5f0iter.TransformJobDefinition.TransformResources.InstanceCount)
						}
						if f5f0iter.TransformJobDefinition.TransformResources.InstanceType != nil {
							f5f0elemf1f6.SetInstanceType(*f5f0iter.TransformJobDefinition.TransformResources.InstanceType)
						}
						if f5f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID != nil {
							f5f0elemf1f6.SetVolumeKmsKeyId(*f5f0iter.TransformJobDefinition.TransformResources.VolumeKMSKeyID)
						}
						f5f0elemf1.SetTransformResources(f5f0elemf1f6)
					}
					f5f0elem.SetTransformJobDefinition(f5f0elemf1)
				}
				f5f0 = append(f5f0, f5f0elem)
			}
			f5.SetValidationProfiles(f5f0)
		}
		if cr.Spec.ForProvider.ValidationSpecification.ValidationRole != nil {
			f5.SetValidationRole(*cr.Spec.ForProvider.ValidationSpecification.ValidationRole)
		}
		res.SetValidationSpecification(f5)
	}

	return postGenerateCreateModelPackageInput(cr, res)
}

// GenerateDeleteModelPackageInput returns a deletion input.
func GenerateDeleteModelPackageInput(cr *svcapitypes.ModelPackage) *svcsdk.DeleteModelPackageInput {
	res := preGenerateDeleteModelPackageInput(cr, &svcsdk.DeleteModelPackageInput{})

	if cr.Spec.ForProvider.ModelPackageName != nil {
		res.SetModelPackageName(*cr.Spec.ForProvider.ModelPackageName)
	}

	return postGenerateDeleteModelPackageInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
