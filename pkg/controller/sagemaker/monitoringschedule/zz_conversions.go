/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package monitoringschedule

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeMonitoringScheduleInput returns input for read
// operation.
func GenerateDescribeMonitoringScheduleInput(cr *svcapitypes.MonitoringSchedule) *svcsdk.DescribeMonitoringScheduleInput {
	res := preGenerateDescribeMonitoringScheduleInput(cr, &svcsdk.DescribeMonitoringScheduleInput{})

	if cr.Spec.ForProvider.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*cr.Spec.ForProvider.MonitoringScheduleName)
	}

	return postGenerateDescribeMonitoringScheduleInput(cr, res)
}

// GenerateMonitoringSchedule returns the current state in the form of *svcapitypes.MonitoringSchedule.
func GenerateMonitoringSchedule(resp *svcsdk.DescribeMonitoringScheduleOutput) *svcapitypes.MonitoringSchedule {
	cr := &svcapitypes.MonitoringSchedule{}

	if resp.MonitoringScheduleArn != nil {
		cr.Status.AtProvider.MonitoringScheduleARN = resp.MonitoringScheduleArn
	}

	return cr
}

// GenerateCreateMonitoringScheduleInput returns a create input.
func GenerateCreateMonitoringScheduleInput(cr *svcapitypes.MonitoringSchedule) *svcsdk.CreateMonitoringScheduleInput {
	res := preGenerateCreateMonitoringScheduleInput(cr, &svcsdk.CreateMonitoringScheduleInput{})

	if cr.Spec.ForProvider.MonitoringScheduleConfig != nil {
		f0 := &svcsdk.MonitoringScheduleConfig{}
		if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition != nil {
			f0f0 := &svcsdk.MonitoringJobDefinition{}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig != nil {
				f0f0f0 := &svcsdk.MonitoringBaselineConfig{}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource != nil {
					f0f0f0f0 := &svcsdk.MonitoringConstraintsResource{}
					if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI != nil {
						f0f0f0f0.SetS3Uri(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.ConstraintsResource.S3URI)
					}
					f0f0f0.SetConstraintsResource(f0f0f0f0)
				}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource != nil {
					f0f0f0f1 := &svcsdk.MonitoringStatisticsResource{}
					if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI != nil {
						f0f0f0f1.SetS3Uri(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.BaselineConfig.StatisticsResource.S3URI)
					}
					f0f0f0.SetStatisticsResource(f0f0f0f1)
				}
				f0f0.SetBaselineConfig(f0f0f0)
			}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.Environment != nil {
				f0f0f1 := map[string]*string{}
				for f0f0f1key, f0f0f1valiter := range cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.Environment {
					var f0f0f1val string
					f0f0f1val = *f0f0f1valiter
					f0f0f1[f0f0f1key] = &f0f0f1val
				}
				f0f0.SetEnvironment(f0f0f1)
			}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification != nil {
				f0f0f2 := &svcsdk.MonitoringAppSpecification{}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments != nil {
					f0f0f2f0 := []*string{}
					for _, f0f0f2f0iter := range cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerArguments {
						var f0f0f2f0elem string
						f0f0f2f0elem = *f0f0f2f0iter
						f0f0f2f0 = append(f0f0f2f0, &f0f0f2f0elem)
					}
					f0f0f2.SetContainerArguments(f0f0f2f0)
				}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint != nil {
					f0f0f2f1 := []*string{}
					for _, f0f0f2f1iter := range cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ContainerEntrypoint {
						var f0f0f2f1elem string
						f0f0f2f1elem = *f0f0f2f1iter
						f0f0f2f1 = append(f0f0f2f1, &f0f0f2f1elem)
					}
					f0f0f2.SetContainerEntrypoint(f0f0f2f1)
				}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI != nil {
					f0f0f2.SetImageUri(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.ImageURI)
				}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI != nil {
					f0f0f2.SetPostAnalyticsProcessorSourceUri(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.PostAnalyticsProcessorSourceURI)
				}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI != nil {
					f0f0f2.SetRecordPreprocessorSourceUri(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringAppSpecification.RecordPreprocessorSourceURI)
				}
				f0f0.SetMonitoringAppSpecification(f0f0f2)
			}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs != nil {
				f0f0f3 := []*svcsdk.MonitoringInput{}
				for _, f0f0f3iter := range cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringInputs {
					f0f0f3elem := &svcsdk.MonitoringInput{}
					if f0f0f3iter.EndpointInput != nil {
						f0f0f3elemf0 := &svcsdk.EndpointInput{}
						if f0f0f3iter.EndpointInput.EndpointName != nil {
							f0f0f3elemf0.SetEndpointName(*f0f0f3iter.EndpointInput.EndpointName)
						}
						if f0f0f3iter.EndpointInput.LocalPath != nil {
							f0f0f3elemf0.SetLocalPath(*f0f0f3iter.EndpointInput.LocalPath)
						}
						if f0f0f3iter.EndpointInput.S3DataDistributionType != nil {
							f0f0f3elemf0.SetS3DataDistributionType(*f0f0f3iter.EndpointInput.S3DataDistributionType)
						}
						if f0f0f3iter.EndpointInput.S3InputMode != nil {
							f0f0f3elemf0.SetS3InputMode(*f0f0f3iter.EndpointInput.S3InputMode)
						}
						f0f0f3elem.SetEndpointInput(f0f0f3elemf0)
					}
					f0f0f3 = append(f0f0f3, f0f0f3elem)
				}
				f0f0.SetMonitoringInputs(f0f0f3)
			}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig != nil {
				f0f0f4 := &svcsdk.MonitoringOutputConfig{}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID != nil {
					f0f0f4.SetKmsKeyId(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.KMSKeyID)
				}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs != nil {
					f0f0f4f1 := []*svcsdk.MonitoringOutput{}
					for _, f0f0f4f1iter := range cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringOutputConfig.MonitoringOutputs {
						f0f0f4f1elem := &svcsdk.MonitoringOutput{}
						if f0f0f4f1iter.S3Output != nil {
							f0f0f4f1elemf0 := &svcsdk.MonitoringS3Output{}
							if f0f0f4f1iter.S3Output.LocalPath != nil {
								f0f0f4f1elemf0.SetLocalPath(*f0f0f4f1iter.S3Output.LocalPath)
							}
							if f0f0f4f1iter.S3Output.S3UploadMode != nil {
								f0f0f4f1elemf0.SetS3UploadMode(*f0f0f4f1iter.S3Output.S3UploadMode)
							}
							if f0f0f4f1iter.S3Output.S3URI != nil {
								f0f0f4f1elemf0.SetS3Uri(*f0f0f4f1iter.S3Output.S3URI)
							}
							f0f0f4f1elem.SetS3Output(f0f0f4f1elemf0)
						}
						f0f0f4f1 = append(f0f0f4f1, f0f0f4f1elem)
					}
					f0f0f4.SetMonitoringOutputs(f0f0f4f1)
				}
				f0f0.SetMonitoringOutputConfig(f0f0f4)
			}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources != nil {
				f0f0f5 := &svcsdk.MonitoringResources{}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig != nil {
					f0f0f5f0 := &svcsdk.MonitoringClusterConfig{}
					if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount != nil {
						f0f0f5f0.SetInstanceCount(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceCount)
					}
					if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType != nil {
						f0f0f5f0.SetInstanceType(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.InstanceType)
					}
					if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID != nil {
						f0f0f5f0.SetVolumeKmsKeyId(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeKMSKeyID)
					}
					if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB != nil {
						f0f0f5f0.SetVolumeSizeInGB(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.MonitoringResources.ClusterConfig.VolumeSizeInGB)
					}
					f0f0f5.SetClusterConfig(f0f0f5f0)
				}
				f0f0.SetMonitoringResources(f0f0f5)
			}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig != nil {
				f0f0f6 := &svcsdk.NetworkConfig{}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption != nil {
					f0f0f6.SetEnableInterContainerTrafficEncryption(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableInterContainerTrafficEncryption)
				}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation != nil {
					f0f0f6.SetEnableNetworkIsolation(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.EnableNetworkIsolation)
				}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig != nil {
					f0f0f6f2 := &svcsdk.VpcConfig{}
					if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs != nil {
						f0f0f6f2f0 := []*string{}
						for _, f0f0f6f2f0iter := range cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.SecurityGroupIDs {
							var f0f0f6f2f0elem string
							f0f0f6f2f0elem = *f0f0f6f2f0iter
							f0f0f6f2f0 = append(f0f0f6f2f0, &f0f0f6f2f0elem)
						}
						f0f0f6f2.SetSecurityGroupIds(f0f0f6f2f0)
					}
					if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets != nil {
						f0f0f6f2f1 := []*string{}
						for _, f0f0f6f2f1iter := range cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.NetworkConfig.VPCConfig.Subnets {
							var f0f0f6f2f1elem string
							f0f0f6f2f1elem = *f0f0f6f2f1iter
							f0f0f6f2f1 = append(f0f0f6f2f1, &f0f0f6f2f1elem)
						}
						f0f0f6f2.SetSubnets(f0f0f6f2f1)
					}
					f0f0f6.SetVpcConfig(f0f0f6f2)
				}
				f0f0.SetNetworkConfig(f0f0f6)
			}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN != nil {
				f0f0.SetRoleArn(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.RoleARN)
			}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition != nil {
				f0f0f8 := &svcsdk.MonitoringStoppingCondition{}
				if cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds != nil {
					f0f0f8.SetMaxRuntimeInSeconds(*cr.Spec.ForProvider.MonitoringScheduleConfig.MonitoringJobDefinition.StoppingCondition.MaxRuntimeInSeconds)
				}
				f0f0.SetStoppingCondition(f0f0f8)
			}
			f0.SetMonitoringJobDefinition(f0f0)
		}
		if cr.Spec.ForProvider.MonitoringScheduleConfig.ScheduleConfig != nil {
			f0f1 := &svcsdk.ScheduleConfig{}
			if cr.Spec.ForProvider.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression != nil {
				f0f1.SetScheduleExpression(*cr.Spec.ForProvider.MonitoringScheduleConfig.ScheduleConfig.ScheduleExpression)
			}
			f0.SetScheduleConfig(f0f1)
		}
		res.SetMonitoringScheduleConfig(f0)
	}
	if cr.Spec.ForProvider.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*cr.Spec.ForProvider.MonitoringScheduleName)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f2 := []*svcsdk.Tag{}
		for _, f2iter := range cr.Spec.ForProvider.Tags {
			f2elem := &svcsdk.Tag{}
			if f2iter.Key != nil {
				f2elem.SetKey(*f2iter.Key)
			}
			if f2iter.Value != nil {
				f2elem.SetValue(*f2iter.Value)
			}
			f2 = append(f2, f2elem)
		}
		res.SetTags(f2)
	}

	return postGenerateCreateMonitoringScheduleInput(cr, res)
}

// GenerateDeleteMonitoringScheduleInput returns a deletion input.
func GenerateDeleteMonitoringScheduleInput(cr *svcapitypes.MonitoringSchedule) *svcsdk.DeleteMonitoringScheduleInput {
	res := preGenerateDeleteMonitoringScheduleInput(cr, &svcsdk.DeleteMonitoringScheduleInput{})

	if cr.Spec.ForProvider.MonitoringScheduleName != nil {
		res.SetMonitoringScheduleName(*cr.Spec.ForProvider.MonitoringScheduleName)
	}

	return postGenerateDeleteMonitoringScheduleInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
