/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package notebookinstance

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeNotebookInstanceInput returns input for read
// operation.
func GenerateDescribeNotebookInstanceInput(cr *svcapitypes.NotebookInstance) *svcsdk.DescribeNotebookInstanceInput {
	res := preGenerateDescribeNotebookInstanceInput(cr, &svcsdk.DescribeNotebookInstanceInput{})

	if cr.Spec.ForProvider.NotebookInstanceName != nil {
		res.SetNotebookInstanceName(*cr.Spec.ForProvider.NotebookInstanceName)
	}

	return postGenerateDescribeNotebookInstanceInput(cr, res)
}

// GenerateNotebookInstance returns the current state in the form of *svcapitypes.NotebookInstance.
func GenerateNotebookInstance(resp *svcsdk.DescribeNotebookInstanceOutput) *svcapitypes.NotebookInstance {
	cr := &svcapitypes.NotebookInstance{}

	if resp.NotebookInstanceArn != nil {
		cr.Status.AtProvider.NotebookInstanceARN = resp.NotebookInstanceArn
	}

	return cr
}

// GenerateCreateNotebookInstanceInput returns a create input.
func GenerateCreateNotebookInstanceInput(cr *svcapitypes.NotebookInstance) *svcsdk.CreateNotebookInstanceInput {
	res := preGenerateCreateNotebookInstanceInput(cr, &svcsdk.CreateNotebookInstanceInput{})

	if cr.Spec.ForProvider.AcceleratorTypes != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.AcceleratorTypes {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetAcceleratorTypes(f0)
	}
	if cr.Spec.ForProvider.AdditionalCodeRepositories != nil {
		f1 := []*string{}
		for _, f1iter := range cr.Spec.ForProvider.AdditionalCodeRepositories {
			var f1elem string
			f1elem = *f1iter
			f1 = append(f1, &f1elem)
		}
		res.SetAdditionalCodeRepositories(f1)
	}
	if cr.Spec.ForProvider.DefaultCodeRepository != nil {
		res.SetDefaultCodeRepository(*cr.Spec.ForProvider.DefaultCodeRepository)
	}
	if cr.Spec.ForProvider.DirectInternetAccess != nil {
		res.SetDirectInternetAccess(*cr.Spec.ForProvider.DirectInternetAccess)
	}
	if cr.Spec.ForProvider.InstanceType != nil {
		res.SetInstanceType(*cr.Spec.ForProvider.InstanceType)
	}
	if cr.Spec.ForProvider.KMSKeyID != nil {
		res.SetKmsKeyId(*cr.Spec.ForProvider.KMSKeyID)
	}
	if cr.Spec.ForProvider.LifecycleConfigName != nil {
		res.SetLifecycleConfigName(*cr.Spec.ForProvider.LifecycleConfigName)
	}
	if cr.Spec.ForProvider.NotebookInstanceName != nil {
		res.SetNotebookInstanceName(*cr.Spec.ForProvider.NotebookInstanceName)
	}
	if cr.Spec.ForProvider.RoleARN != nil {
		res.SetRoleArn(*cr.Spec.ForProvider.RoleARN)
	}
	if cr.Spec.ForProvider.RootAccess != nil {
		res.SetRootAccess(*cr.Spec.ForProvider.RootAccess)
	}
	if cr.Spec.ForProvider.SecurityGroupIDs != nil {
		f10 := []*string{}
		for _, f10iter := range cr.Spec.ForProvider.SecurityGroupIDs {
			var f10elem string
			f10elem = *f10iter
			f10 = append(f10, &f10elem)
		}
		res.SetSecurityGroupIds(f10)
	}
	if cr.Spec.ForProvider.SubnetID != nil {
		res.SetSubnetId(*cr.Spec.ForProvider.SubnetID)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f12 := []*svcsdk.Tag{}
		for _, f12iter := range cr.Spec.ForProvider.Tags {
			f12elem := &svcsdk.Tag{}
			if f12iter.Key != nil {
				f12elem.SetKey(*f12iter.Key)
			}
			if f12iter.Value != nil {
				f12elem.SetValue(*f12iter.Value)
			}
			f12 = append(f12, f12elem)
		}
		res.SetTags(f12)
	}
	if cr.Spec.ForProvider.VolumeSizeInGB != nil {
		res.SetVolumeSizeInGB(*cr.Spec.ForProvider.VolumeSizeInGB)
	}

	return postGenerateCreateNotebookInstanceInput(cr, res)
}

// GenerateDeleteNotebookInstanceInput returns a deletion input.
func GenerateDeleteNotebookInstanceInput(cr *svcapitypes.NotebookInstance) *svcsdk.DeleteNotebookInstanceInput {
	res := preGenerateDeleteNotebookInstanceInput(cr, &svcsdk.DeleteNotebookInstanceInput{})

	if cr.Spec.ForProvider.NotebookInstanceName != nil {
		res.SetNotebookInstanceName(*cr.Spec.ForProvider.NotebookInstanceName)
	}

	return postGenerateDeleteNotebookInstanceInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
