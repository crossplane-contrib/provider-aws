/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package trainingjob

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeTrainingJobInput returns input for read
// operation.
func GenerateDescribeTrainingJobInput(cr *svcapitypes.TrainingJob) *svcsdk.DescribeTrainingJobInput {
	res := preGenerateDescribeTrainingJobInput(cr, &svcsdk.DescribeTrainingJobInput{})

	if cr.Spec.ForProvider.TrainingJobName != nil {
		res.SetTrainingJobName(*cr.Spec.ForProvider.TrainingJobName)
	}

	return postGenerateDescribeTrainingJobInput(cr, res)
}

// GenerateTrainingJob returns the current state in the form of *svcapitypes.TrainingJob.
func GenerateTrainingJob(resp *svcsdk.DescribeTrainingJobOutput) *svcapitypes.TrainingJob {
	cr := &svcapitypes.TrainingJob{}

	if resp.TrainingJobArn != nil {
		cr.Status.AtProvider.TrainingJobARN = resp.TrainingJobArn
	}

	return cr
}

// GenerateCreateTrainingJobInput returns a create input.
func GenerateCreateTrainingJobInput(cr *svcapitypes.TrainingJob) *svcsdk.CreateTrainingJobInput {
	res := preGenerateCreateTrainingJobInput(cr, &svcsdk.CreateTrainingJobInput{})

	if cr.Spec.ForProvider.AlgorithmSpecification != nil {
		f0 := &svcsdk.AlgorithmSpecification{}
		if cr.Spec.ForProvider.AlgorithmSpecification.AlgorithmName != nil {
			f0.SetAlgorithmName(*cr.Spec.ForProvider.AlgorithmSpecification.AlgorithmName)
		}
		if cr.Spec.ForProvider.AlgorithmSpecification.EnableSageMakerMetricsTimeSeries != nil {
			f0.SetEnableSageMakerMetricsTimeSeries(*cr.Spec.ForProvider.AlgorithmSpecification.EnableSageMakerMetricsTimeSeries)
		}
		if cr.Spec.ForProvider.AlgorithmSpecification.MetricDefinitions != nil {
			f0f2 := []*svcsdk.MetricDefinition{}
			for _, f0f2iter := range cr.Spec.ForProvider.AlgorithmSpecification.MetricDefinitions {
				f0f2elem := &svcsdk.MetricDefinition{}
				if f0f2iter.Name != nil {
					f0f2elem.SetName(*f0f2iter.Name)
				}
				if f0f2iter.Regex != nil {
					f0f2elem.SetRegex(*f0f2iter.Regex)
				}
				f0f2 = append(f0f2, f0f2elem)
			}
			f0.SetMetricDefinitions(f0f2)
		}
		if cr.Spec.ForProvider.AlgorithmSpecification.TrainingImage != nil {
			f0.SetTrainingImage(*cr.Spec.ForProvider.AlgorithmSpecification.TrainingImage)
		}
		if cr.Spec.ForProvider.AlgorithmSpecification.TrainingInputMode != nil {
			f0.SetTrainingInputMode(*cr.Spec.ForProvider.AlgorithmSpecification.TrainingInputMode)
		}
		res.SetAlgorithmSpecification(f0)
	}
	if cr.Spec.ForProvider.CheckpointConfig != nil {
		f1 := &svcsdk.CheckpointConfig{}
		if cr.Spec.ForProvider.CheckpointConfig.LocalPath != nil {
			f1.SetLocalPath(*cr.Spec.ForProvider.CheckpointConfig.LocalPath)
		}
		if cr.Spec.ForProvider.CheckpointConfig.S3URI != nil {
			f1.SetS3Uri(*cr.Spec.ForProvider.CheckpointConfig.S3URI)
		}
		res.SetCheckpointConfig(f1)
	}
	if cr.Spec.ForProvider.DebugHookConfig != nil {
		f2 := &svcsdk.DebugHookConfig{}
		if cr.Spec.ForProvider.DebugHookConfig.CollectionConfigurations != nil {
			f2f0 := []*svcsdk.CollectionConfiguration{}
			for _, f2f0iter := range cr.Spec.ForProvider.DebugHookConfig.CollectionConfigurations {
				f2f0elem := &svcsdk.CollectionConfiguration{}
				if f2f0iter.CollectionName != nil {
					f2f0elem.SetCollectionName(*f2f0iter.CollectionName)
				}
				if f2f0iter.CollectionParameters != nil {
					f2f0elemf1 := map[string]*string{}
					for f2f0elemf1key, f2f0elemf1valiter := range f2f0iter.CollectionParameters {
						var f2f0elemf1val string
						f2f0elemf1val = *f2f0elemf1valiter
						f2f0elemf1[f2f0elemf1key] = &f2f0elemf1val
					}
					f2f0elem.SetCollectionParameters(f2f0elemf1)
				}
				f2f0 = append(f2f0, f2f0elem)
			}
			f2.SetCollectionConfigurations(f2f0)
		}
		if cr.Spec.ForProvider.DebugHookConfig.HookParameters != nil {
			f2f1 := map[string]*string{}
			for f2f1key, f2f1valiter := range cr.Spec.ForProvider.DebugHookConfig.HookParameters {
				var f2f1val string
				f2f1val = *f2f1valiter
				f2f1[f2f1key] = &f2f1val
			}
			f2.SetHookParameters(f2f1)
		}
		if cr.Spec.ForProvider.DebugHookConfig.LocalPath != nil {
			f2.SetLocalPath(*cr.Spec.ForProvider.DebugHookConfig.LocalPath)
		}
		if cr.Spec.ForProvider.DebugHookConfig.S3OutputPath != nil {
			f2.SetS3OutputPath(*cr.Spec.ForProvider.DebugHookConfig.S3OutputPath)
		}
		res.SetDebugHookConfig(f2)
	}
	if cr.Spec.ForProvider.DebugRuleConfigurations != nil {
		f3 := []*svcsdk.DebugRuleConfiguration{}
		for _, f3iter := range cr.Spec.ForProvider.DebugRuleConfigurations {
			f3elem := &svcsdk.DebugRuleConfiguration{}
			if f3iter.InstanceType != nil {
				f3elem.SetInstanceType(*f3iter.InstanceType)
			}
			if f3iter.LocalPath != nil {
				f3elem.SetLocalPath(*f3iter.LocalPath)
			}
			if f3iter.RuleConfigurationName != nil {
				f3elem.SetRuleConfigurationName(*f3iter.RuleConfigurationName)
			}
			if f3iter.RuleEvaluatorImage != nil {
				f3elem.SetRuleEvaluatorImage(*f3iter.RuleEvaluatorImage)
			}
			if f3iter.RuleParameters != nil {
				f3elemf4 := map[string]*string{}
				for f3elemf4key, f3elemf4valiter := range f3iter.RuleParameters {
					var f3elemf4val string
					f3elemf4val = *f3elemf4valiter
					f3elemf4[f3elemf4key] = &f3elemf4val
				}
				f3elem.SetRuleParameters(f3elemf4)
			}
			if f3iter.S3OutputPath != nil {
				f3elem.SetS3OutputPath(*f3iter.S3OutputPath)
			}
			if f3iter.VolumeSizeInGB != nil {
				f3elem.SetVolumeSizeInGB(*f3iter.VolumeSizeInGB)
			}
			f3 = append(f3, f3elem)
		}
		res.SetDebugRuleConfigurations(f3)
	}
	if cr.Spec.ForProvider.EnableInterContainerTrafficEncryption != nil {
		res.SetEnableInterContainerTrafficEncryption(*cr.Spec.ForProvider.EnableInterContainerTrafficEncryption)
	}
	if cr.Spec.ForProvider.EnableManagedSpotTraining != nil {
		res.SetEnableManagedSpotTraining(*cr.Spec.ForProvider.EnableManagedSpotTraining)
	}
	if cr.Spec.ForProvider.EnableNetworkIsolation != nil {
		res.SetEnableNetworkIsolation(*cr.Spec.ForProvider.EnableNetworkIsolation)
	}
	if cr.Spec.ForProvider.ExperimentConfig != nil {
		f7 := &svcsdk.ExperimentConfig{}
		if cr.Spec.ForProvider.ExperimentConfig.ExperimentName != nil {
			f7.SetExperimentName(*cr.Spec.ForProvider.ExperimentConfig.ExperimentName)
		}
		if cr.Spec.ForProvider.ExperimentConfig.TrialComponentDisplayName != nil {
			f7.SetTrialComponentDisplayName(*cr.Spec.ForProvider.ExperimentConfig.TrialComponentDisplayName)
		}
		if cr.Spec.ForProvider.ExperimentConfig.TrialName != nil {
			f7.SetTrialName(*cr.Spec.ForProvider.ExperimentConfig.TrialName)
		}
		res.SetExperimentConfig(f7)
	}
	if cr.Spec.ForProvider.HyperParameters != nil {
		f8 := map[string]*string{}
		for f8key, f8valiter := range cr.Spec.ForProvider.HyperParameters {
			var f8val string
			f8val = *f8valiter
			f8[f8key] = &f8val
		}
		res.SetHyperParameters(f8)
	}
	if cr.Spec.ForProvider.InputDataConfig != nil {
		f9 := []*svcsdk.Channel{}
		for _, f9iter := range cr.Spec.ForProvider.InputDataConfig {
			f9elem := &svcsdk.Channel{}
			if f9iter.ChannelName != nil {
				f9elem.SetChannelName(*f9iter.ChannelName)
			}
			if f9iter.CompressionType != nil {
				f9elem.SetCompressionType(*f9iter.CompressionType)
			}
			if f9iter.ContentType != nil {
				f9elem.SetContentType(*f9iter.ContentType)
			}
			if f9iter.DataSource != nil {
				f9elemf3 := &svcsdk.DataSource{}
				if f9iter.DataSource.FileSystemDataSource != nil {
					f9elemf3f0 := &svcsdk.FileSystemDataSource{}
					if f9iter.DataSource.FileSystemDataSource.DirectoryPath != nil {
						f9elemf3f0.SetDirectoryPath(*f9iter.DataSource.FileSystemDataSource.DirectoryPath)
					}
					if f9iter.DataSource.FileSystemDataSource.FileSystemAccessMode != nil {
						f9elemf3f0.SetFileSystemAccessMode(*f9iter.DataSource.FileSystemDataSource.FileSystemAccessMode)
					}
					if f9iter.DataSource.FileSystemDataSource.FileSystemID != nil {
						f9elemf3f0.SetFileSystemId(*f9iter.DataSource.FileSystemDataSource.FileSystemID)
					}
					if f9iter.DataSource.FileSystemDataSource.FileSystemType != nil {
						f9elemf3f0.SetFileSystemType(*f9iter.DataSource.FileSystemDataSource.FileSystemType)
					}
					f9elemf3.SetFileSystemDataSource(f9elemf3f0)
				}
				if f9iter.DataSource.S3DataSource != nil {
					f9elemf3f1 := &svcsdk.S3DataSource{}
					if f9iter.DataSource.S3DataSource.AttributeNames != nil {
						f9elemf3f1f0 := []*string{}
						for _, f9elemf3f1f0iter := range f9iter.DataSource.S3DataSource.AttributeNames {
							var f9elemf3f1f0elem string
							f9elemf3f1f0elem = *f9elemf3f1f0iter
							f9elemf3f1f0 = append(f9elemf3f1f0, &f9elemf3f1f0elem)
						}
						f9elemf3f1.SetAttributeNames(f9elemf3f1f0)
					}
					if f9iter.DataSource.S3DataSource.S3DataDistributionType != nil {
						f9elemf3f1.SetS3DataDistributionType(*f9iter.DataSource.S3DataSource.S3DataDistributionType)
					}
					if f9iter.DataSource.S3DataSource.S3DataType != nil {
						f9elemf3f1.SetS3DataType(*f9iter.DataSource.S3DataSource.S3DataType)
					}
					if f9iter.DataSource.S3DataSource.S3URI != nil {
						f9elemf3f1.SetS3Uri(*f9iter.DataSource.S3DataSource.S3URI)
					}
					f9elemf3.SetS3DataSource(f9elemf3f1)
				}
				f9elem.SetDataSource(f9elemf3)
			}
			if f9iter.InputMode != nil {
				f9elem.SetInputMode(*f9iter.InputMode)
			}
			if f9iter.RecordWrapperType != nil {
				f9elem.SetRecordWrapperType(*f9iter.RecordWrapperType)
			}
			if f9iter.ShuffleConfig != nil {
				f9elemf6 := &svcsdk.ShuffleConfig{}
				if f9iter.ShuffleConfig.Seed != nil {
					f9elemf6.SetSeed(*f9iter.ShuffleConfig.Seed)
				}
				f9elem.SetShuffleConfig(f9elemf6)
			}
			f9 = append(f9, f9elem)
		}
		res.SetInputDataConfig(f9)
	}
	if cr.Spec.ForProvider.OutputDataConfig != nil {
		f10 := &svcsdk.OutputDataConfig{}
		if cr.Spec.ForProvider.OutputDataConfig.KMSKeyID != nil {
			f10.SetKmsKeyId(*cr.Spec.ForProvider.OutputDataConfig.KMSKeyID)
		}
		if cr.Spec.ForProvider.OutputDataConfig.S3OutputPath != nil {
			f10.SetS3OutputPath(*cr.Spec.ForProvider.OutputDataConfig.S3OutputPath)
		}
		res.SetOutputDataConfig(f10)
	}
	if cr.Spec.ForProvider.ResourceConfig != nil {
		f11 := &svcsdk.ResourceConfig{}
		if cr.Spec.ForProvider.ResourceConfig.InstanceCount != nil {
			f11.SetInstanceCount(*cr.Spec.ForProvider.ResourceConfig.InstanceCount)
		}
		if cr.Spec.ForProvider.ResourceConfig.InstanceType != nil {
			f11.SetInstanceType(*cr.Spec.ForProvider.ResourceConfig.InstanceType)
		}
		if cr.Spec.ForProvider.ResourceConfig.VolumeKMSKeyID != nil {
			f11.SetVolumeKmsKeyId(*cr.Spec.ForProvider.ResourceConfig.VolumeKMSKeyID)
		}
		if cr.Spec.ForProvider.ResourceConfig.VolumeSizeInGB != nil {
			f11.SetVolumeSizeInGB(*cr.Spec.ForProvider.ResourceConfig.VolumeSizeInGB)
		}
		res.SetResourceConfig(f11)
	}
	if cr.Spec.ForProvider.RoleARN != nil {
		res.SetRoleArn(*cr.Spec.ForProvider.RoleARN)
	}
	if cr.Spec.ForProvider.StoppingCondition != nil {
		f13 := &svcsdk.StoppingCondition{}
		if cr.Spec.ForProvider.StoppingCondition.MaxRuntimeInSeconds != nil {
			f13.SetMaxRuntimeInSeconds(*cr.Spec.ForProvider.StoppingCondition.MaxRuntimeInSeconds)
		}
		if cr.Spec.ForProvider.StoppingCondition.MaxWaitTimeInSeconds != nil {
			f13.SetMaxWaitTimeInSeconds(*cr.Spec.ForProvider.StoppingCondition.MaxWaitTimeInSeconds)
		}
		res.SetStoppingCondition(f13)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f14 := []*svcsdk.Tag{}
		for _, f14iter := range cr.Spec.ForProvider.Tags {
			f14elem := &svcsdk.Tag{}
			if f14iter.Key != nil {
				f14elem.SetKey(*f14iter.Key)
			}
			if f14iter.Value != nil {
				f14elem.SetValue(*f14iter.Value)
			}
			f14 = append(f14, f14elem)
		}
		res.SetTags(f14)
	}
	if cr.Spec.ForProvider.TensorBoardOutputConfig != nil {
		f15 := &svcsdk.TensorBoardOutputConfig{}
		if cr.Spec.ForProvider.TensorBoardOutputConfig.LocalPath != nil {
			f15.SetLocalPath(*cr.Spec.ForProvider.TensorBoardOutputConfig.LocalPath)
		}
		if cr.Spec.ForProvider.TensorBoardOutputConfig.S3OutputPath != nil {
			f15.SetS3OutputPath(*cr.Spec.ForProvider.TensorBoardOutputConfig.S3OutputPath)
		}
		res.SetTensorBoardOutputConfig(f15)
	}
	if cr.Spec.ForProvider.TrainingJobName != nil {
		res.SetTrainingJobName(*cr.Spec.ForProvider.TrainingJobName)
	}
	if cr.Spec.ForProvider.VPCConfig != nil {
		f17 := &svcsdk.VpcConfig{}
		if cr.Spec.ForProvider.VPCConfig.SecurityGroupIDs != nil {
			f17f0 := []*string{}
			for _, f17f0iter := range cr.Spec.ForProvider.VPCConfig.SecurityGroupIDs {
				var f17f0elem string
				f17f0elem = *f17f0iter
				f17f0 = append(f17f0, &f17f0elem)
			}
			f17.SetSecurityGroupIds(f17f0)
		}
		if cr.Spec.ForProvider.VPCConfig.Subnets != nil {
			f17f1 := []*string{}
			for _, f17f1iter := range cr.Spec.ForProvider.VPCConfig.Subnets {
				var f17f1elem string
				f17f1elem = *f17f1iter
				f17f1 = append(f17f1, &f17f1elem)
			}
			f17.SetSubnets(f17f1)
		}
		res.SetVpcConfig(f17)
	}

	return postGenerateCreateTrainingJobInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
