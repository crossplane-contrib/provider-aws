/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package domain

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeDomainInput returns input for read
// operation.
func GenerateDescribeDomainInput(cr *svcapitypes.Domain) *svcsdk.DescribeDomainInput {
	res := preGenerateDescribeDomainInput(cr, &svcsdk.DescribeDomainInput{})

	return postGenerateDescribeDomainInput(cr, res)
}

// GenerateDomain returns the current state in the form of *svcapitypes.Domain.
func GenerateDomain(resp *svcsdk.DescribeDomainOutput) *svcapitypes.Domain {
	cr := &svcapitypes.Domain{}

	if resp.DomainArn != nil {
		cr.Status.AtProvider.DomainARN = resp.DomainArn
	}
	if resp.Url != nil {
		cr.Status.AtProvider.URL = resp.Url
	}

	return cr
}

// GenerateCreateDomainInput returns a create input.
func GenerateCreateDomainInput(cr *svcapitypes.Domain) *svcsdk.CreateDomainInput {
	res := preGenerateCreateDomainInput(cr, &svcsdk.CreateDomainInput{})

	if cr.Spec.ForProvider.AuthMode != nil {
		res.SetAuthMode(*cr.Spec.ForProvider.AuthMode)
	}
	if cr.Spec.ForProvider.DefaultUserSettings != nil {
		f1 := &svcsdk.UserSettings{}
		if cr.Spec.ForProvider.DefaultUserSettings.ExecutionRole != nil {
			f1.SetExecutionRole(*cr.Spec.ForProvider.DefaultUserSettings.ExecutionRole)
		}
		if cr.Spec.ForProvider.DefaultUserSettings.JupyterServerAppSettings != nil {
			f1f1 := &svcsdk.JupyterServerAppSettings{}
			if cr.Spec.ForProvider.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec != nil {
				f1f1f0 := &svcsdk.ResourceSpec{}
				if cr.Spec.ForProvider.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType != nil {
					f1f1f0.SetInstanceType(*cr.Spec.ForProvider.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.InstanceType)
				}
				if cr.Spec.ForProvider.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f1f1f0.SetSageMakerImageArn(*cr.Spec.ForProvider.DefaultUserSettings.JupyterServerAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				f1f1.SetDefaultResourceSpec(f1f1f0)
			}
			f1.SetJupyterServerAppSettings(f1f1)
		}
		if cr.Spec.ForProvider.DefaultUserSettings.KernelGatewayAppSettings != nil {
			f1f2 := &svcsdk.KernelGatewayAppSettings{}
			if cr.Spec.ForProvider.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec != nil {
				f1f2f0 := &svcsdk.ResourceSpec{}
				if cr.Spec.ForProvider.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType != nil {
					f1f2f0.SetInstanceType(*cr.Spec.ForProvider.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.InstanceType)
				}
				if cr.Spec.ForProvider.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f1f2f0.SetSageMakerImageArn(*cr.Spec.ForProvider.DefaultUserSettings.KernelGatewayAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				f1f2.SetDefaultResourceSpec(f1f2f0)
			}
			f1.SetKernelGatewayAppSettings(f1f2)
		}
		if cr.Spec.ForProvider.DefaultUserSettings.SecurityGroups != nil {
			f1f3 := []*string{}
			for _, f1f3iter := range cr.Spec.ForProvider.DefaultUserSettings.SecurityGroups {
				var f1f3elem string
				f1f3elem = *f1f3iter
				f1f3 = append(f1f3, &f1f3elem)
			}
			f1.SetSecurityGroups(f1f3)
		}
		if cr.Spec.ForProvider.DefaultUserSettings.SharingSettings != nil {
			f1f4 := &svcsdk.SharingSettings{}
			if cr.Spec.ForProvider.DefaultUserSettings.SharingSettings.NotebookOutputOption != nil {
				f1f4.SetNotebookOutputOption(*cr.Spec.ForProvider.DefaultUserSettings.SharingSettings.NotebookOutputOption)
			}
			if cr.Spec.ForProvider.DefaultUserSettings.SharingSettings.S3KMSKeyID != nil {
				f1f4.SetS3KmsKeyId(*cr.Spec.ForProvider.DefaultUserSettings.SharingSettings.S3KMSKeyID)
			}
			if cr.Spec.ForProvider.DefaultUserSettings.SharingSettings.S3OutputPath != nil {
				f1f4.SetS3OutputPath(*cr.Spec.ForProvider.DefaultUserSettings.SharingSettings.S3OutputPath)
			}
			f1.SetSharingSettings(f1f4)
		}
		if cr.Spec.ForProvider.DefaultUserSettings.TensorBoardAppSettings != nil {
			f1f5 := &svcsdk.TensorBoardAppSettings{}
			if cr.Spec.ForProvider.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec != nil {
				f1f5f0 := &svcsdk.ResourceSpec{}
				if cr.Spec.ForProvider.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType != nil {
					f1f5f0.SetInstanceType(*cr.Spec.ForProvider.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.InstanceType)
				}
				if cr.Spec.ForProvider.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN != nil {
					f1f5f0.SetSageMakerImageArn(*cr.Spec.ForProvider.DefaultUserSettings.TensorBoardAppSettings.DefaultResourceSpec.SageMakerImageARN)
				}
				f1f5.SetDefaultResourceSpec(f1f5f0)
			}
			f1.SetTensorBoardAppSettings(f1f5)
		}
		res.SetDefaultUserSettings(f1)
	}
	if cr.Spec.ForProvider.DomainName != nil {
		res.SetDomainName(*cr.Spec.ForProvider.DomainName)
	}
	if cr.Spec.ForProvider.HomeEFSFileSystemKMSKeyID != nil {
		res.SetHomeEfsFileSystemKmsKeyId(*cr.Spec.ForProvider.HomeEFSFileSystemKMSKeyID)
	}
	if cr.Spec.ForProvider.SubnetIDs != nil {
		f4 := []*string{}
		for _, f4iter := range cr.Spec.ForProvider.SubnetIDs {
			var f4elem string
			f4elem = *f4iter
			f4 = append(f4, &f4elem)
		}
		res.SetSubnetIds(f4)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f5 := []*svcsdk.Tag{}
		for _, f5iter := range cr.Spec.ForProvider.Tags {
			f5elem := &svcsdk.Tag{}
			if f5iter.Key != nil {
				f5elem.SetKey(*f5iter.Key)
			}
			if f5iter.Value != nil {
				f5elem.SetValue(*f5iter.Value)
			}
			f5 = append(f5, f5elem)
		}
		res.SetTags(f5)
	}
	if cr.Spec.ForProvider.VPCID != nil {
		res.SetVpcId(*cr.Spec.ForProvider.VPCID)
	}

	return postGenerateCreateDomainInput(cr, res)
}

// GenerateDeleteDomainInput returns a deletion input.
func GenerateDeleteDomainInput(cr *svcapitypes.Domain) *svcsdk.DeleteDomainInput {
	res := preGenerateDeleteDomainInput(cr, &svcsdk.DeleteDomainInput{})

	return postGenerateDeleteDomainInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
