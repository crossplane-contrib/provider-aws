/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package automljob

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeAutoMLJobInput returns input for read
// operation.
func GenerateDescribeAutoMLJobInput(cr *svcapitypes.AutoMLJob) *svcsdk.DescribeAutoMLJobInput {
	res := preGenerateDescribeAutoMLJobInput(cr, &svcsdk.DescribeAutoMLJobInput{})

	if cr.Spec.ForProvider.AutoMLJobName != nil {
		res.SetAutoMLJobName(*cr.Spec.ForProvider.AutoMLJobName)
	}

	return postGenerateDescribeAutoMLJobInput(cr, res)
}

// GenerateAutoMLJob returns the current state in the form of *svcapitypes.AutoMLJob.
func GenerateAutoMLJob(resp *svcsdk.DescribeAutoMLJobOutput) *svcapitypes.AutoMLJob {
	cr := &svcapitypes.AutoMLJob{}

	if resp.AutoMLJobArn != nil {
		cr.Status.AtProvider.AutoMLJobARN = resp.AutoMLJobArn
	}

	return cr
}

// GenerateCreateAutoMLJobInput returns a create input.
func GenerateCreateAutoMLJobInput(cr *svcapitypes.AutoMLJob) *svcsdk.CreateAutoMLJobInput {
	res := preGenerateCreateAutoMLJobInput(cr, &svcsdk.CreateAutoMLJobInput{})

	if cr.Spec.ForProvider.AutoMLJobConfig != nil {
		f0 := &svcsdk.AutoMLJobConfig{}
		if cr.Spec.ForProvider.AutoMLJobConfig.CompletionCriteria != nil {
			f0f0 := &svcsdk.AutoMLJobCompletionCriteria{}
			if cr.Spec.ForProvider.AutoMLJobConfig.CompletionCriteria.MaxAutoMLJobRuntimeInSeconds != nil {
				f0f0.SetMaxAutoMLJobRuntimeInSeconds(*cr.Spec.ForProvider.AutoMLJobConfig.CompletionCriteria.MaxAutoMLJobRuntimeInSeconds)
			}
			if cr.Spec.ForProvider.AutoMLJobConfig.CompletionCriteria.MaxCandidates != nil {
				f0f0.SetMaxCandidates(*cr.Spec.ForProvider.AutoMLJobConfig.CompletionCriteria.MaxCandidates)
			}
			if cr.Spec.ForProvider.AutoMLJobConfig.CompletionCriteria.MaxRuntimePerTrainingJobInSeconds != nil {
				f0f0.SetMaxRuntimePerTrainingJobInSeconds(*cr.Spec.ForProvider.AutoMLJobConfig.CompletionCriteria.MaxRuntimePerTrainingJobInSeconds)
			}
			f0.SetCompletionCriteria(f0f0)
		}
		if cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig != nil {
			f0f1 := &svcsdk.AutoMLSecurityConfig{}
			if cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig.EnableInterContainerTrafficEncryption != nil {
				f0f1.SetEnableInterContainerTrafficEncryption(*cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig.EnableInterContainerTrafficEncryption)
			}
			if cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig.VolumeKMSKeyID != nil {
				f0f1.SetVolumeKmsKeyId(*cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig.VolumeKMSKeyID)
			}
			if cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig.VPCConfig != nil {
				f0f1f2 := &svcsdk.VpcConfig{}
				if cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig.VPCConfig.SecurityGroupIDs != nil {
					f0f1f2f0 := []*string{}
					for _, f0f1f2f0iter := range cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig.VPCConfig.SecurityGroupIDs {
						var f0f1f2f0elem string
						f0f1f2f0elem = *f0f1f2f0iter
						f0f1f2f0 = append(f0f1f2f0, &f0f1f2f0elem)
					}
					f0f1f2.SetSecurityGroupIds(f0f1f2f0)
				}
				if cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig.VPCConfig.Subnets != nil {
					f0f1f2f1 := []*string{}
					for _, f0f1f2f1iter := range cr.Spec.ForProvider.AutoMLJobConfig.SecurityConfig.VPCConfig.Subnets {
						var f0f1f2f1elem string
						f0f1f2f1elem = *f0f1f2f1iter
						f0f1f2f1 = append(f0f1f2f1, &f0f1f2f1elem)
					}
					f0f1f2.SetSubnets(f0f1f2f1)
				}
				f0f1.SetVpcConfig(f0f1f2)
			}
			f0.SetSecurityConfig(f0f1)
		}
		res.SetAutoMLJobConfig(f0)
	}
	if cr.Spec.ForProvider.AutoMLJobName != nil {
		res.SetAutoMLJobName(*cr.Spec.ForProvider.AutoMLJobName)
	}
	if cr.Spec.ForProvider.AutoMLJobObjective != nil {
		f2 := &svcsdk.AutoMLJobObjective{}
		if cr.Spec.ForProvider.AutoMLJobObjective.MetricName != nil {
			f2.SetMetricName(*cr.Spec.ForProvider.AutoMLJobObjective.MetricName)
		}
		res.SetAutoMLJobObjective(f2)
	}
	if cr.Spec.ForProvider.GenerateCandidateDefinitionsOnly != nil {
		res.SetGenerateCandidateDefinitionsOnly(*cr.Spec.ForProvider.GenerateCandidateDefinitionsOnly)
	}
	if cr.Spec.ForProvider.InputDataConfig != nil {
		f4 := []*svcsdk.AutoMLChannel{}
		for _, f4iter := range cr.Spec.ForProvider.InputDataConfig {
			f4elem := &svcsdk.AutoMLChannel{}
			if f4iter.CompressionType != nil {
				f4elem.SetCompressionType(*f4iter.CompressionType)
			}
			if f4iter.DataSource != nil {
				f4elemf1 := &svcsdk.AutoMLDataSource{}
				if f4iter.DataSource.S3DataSource != nil {
					f4elemf1f0 := &svcsdk.AutoMLS3DataSource{}
					if f4iter.DataSource.S3DataSource.S3DataType != nil {
						f4elemf1f0.SetS3DataType(*f4iter.DataSource.S3DataSource.S3DataType)
					}
					if f4iter.DataSource.S3DataSource.S3URI != nil {
						f4elemf1f0.SetS3Uri(*f4iter.DataSource.S3DataSource.S3URI)
					}
					f4elemf1.SetS3DataSource(f4elemf1f0)
				}
				f4elem.SetDataSource(f4elemf1)
			}
			if f4iter.TargetAttributeName != nil {
				f4elem.SetTargetAttributeName(*f4iter.TargetAttributeName)
			}
			f4 = append(f4, f4elem)
		}
		res.SetInputDataConfig(f4)
	}
	if cr.Spec.ForProvider.OutputDataConfig != nil {
		f5 := &svcsdk.AutoMLOutputDataConfig{}
		if cr.Spec.ForProvider.OutputDataConfig.KMSKeyID != nil {
			f5.SetKmsKeyId(*cr.Spec.ForProvider.OutputDataConfig.KMSKeyID)
		}
		if cr.Spec.ForProvider.OutputDataConfig.S3OutputPath != nil {
			f5.SetS3OutputPath(*cr.Spec.ForProvider.OutputDataConfig.S3OutputPath)
		}
		res.SetOutputDataConfig(f5)
	}
	if cr.Spec.ForProvider.ProblemType != nil {
		res.SetProblemType(*cr.Spec.ForProvider.ProblemType)
	}
	if cr.Spec.ForProvider.RoleARN != nil {
		res.SetRoleArn(*cr.Spec.ForProvider.RoleARN)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f8 := []*svcsdk.Tag{}
		for _, f8iter := range cr.Spec.ForProvider.Tags {
			f8elem := &svcsdk.Tag{}
			if f8iter.Key != nil {
				f8elem.SetKey(*f8iter.Key)
			}
			if f8iter.Value != nil {
				f8elem.SetValue(*f8iter.Value)
			}
			f8 = append(f8, f8elem)
		}
		res.SetTags(f8)
	}

	return postGenerateCreateAutoMLJobInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
