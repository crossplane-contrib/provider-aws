/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package notebookinstancelifecycleconfig

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeNotebookInstanceLifecycleConfigInput returns input for read
// operation.
func GenerateDescribeNotebookInstanceLifecycleConfigInput(cr *svcapitypes.NotebookInstanceLifecycleConfig) *svcsdk.DescribeNotebookInstanceLifecycleConfigInput {
	res := preGenerateDescribeNotebookInstanceLifecycleConfigInput(cr, &svcsdk.DescribeNotebookInstanceLifecycleConfigInput{})

	if cr.Spec.ForProvider.NotebookInstanceLifecycleConfigName != nil {
		res.SetNotebookInstanceLifecycleConfigName(*cr.Spec.ForProvider.NotebookInstanceLifecycleConfigName)
	}

	return postGenerateDescribeNotebookInstanceLifecycleConfigInput(cr, res)
}

// GenerateNotebookInstanceLifecycleConfig returns the current state in the form of *svcapitypes.NotebookInstanceLifecycleConfig.
func GenerateNotebookInstanceLifecycleConfig(resp *svcsdk.DescribeNotebookInstanceLifecycleConfigOutput) *svcapitypes.NotebookInstanceLifecycleConfig {
	cr := &svcapitypes.NotebookInstanceLifecycleConfig{}

	if resp.NotebookInstanceLifecycleConfigArn != nil {
		cr.Status.AtProvider.NotebookInstanceLifecycleConfigARN = resp.NotebookInstanceLifecycleConfigArn
	}

	return cr
}

// GenerateCreateNotebookInstanceLifecycleConfigInput returns a create input.
func GenerateCreateNotebookInstanceLifecycleConfigInput(cr *svcapitypes.NotebookInstanceLifecycleConfig) *svcsdk.CreateNotebookInstanceLifecycleConfigInput {
	res := preGenerateCreateNotebookInstanceLifecycleConfigInput(cr, &svcsdk.CreateNotebookInstanceLifecycleConfigInput{})

	if cr.Spec.ForProvider.NotebookInstanceLifecycleConfigName != nil {
		res.SetNotebookInstanceLifecycleConfigName(*cr.Spec.ForProvider.NotebookInstanceLifecycleConfigName)
	}
	if cr.Spec.ForProvider.OnCreate != nil {
		f1 := []*svcsdk.NotebookInstanceLifecycleHook{}
		for _, f1iter := range cr.Spec.ForProvider.OnCreate {
			f1elem := &svcsdk.NotebookInstanceLifecycleHook{}
			if f1iter.Content != nil {
				f1elem.SetContent(*f1iter.Content)
			}
			f1 = append(f1, f1elem)
		}
		res.SetOnCreate(f1)
	}
	if cr.Spec.ForProvider.OnStart != nil {
		f2 := []*svcsdk.NotebookInstanceLifecycleHook{}
		for _, f2iter := range cr.Spec.ForProvider.OnStart {
			f2elem := &svcsdk.NotebookInstanceLifecycleHook{}
			if f2iter.Content != nil {
				f2elem.SetContent(*f2iter.Content)
			}
			f2 = append(f2, f2elem)
		}
		res.SetOnStart(f2)
	}

	return postGenerateCreateNotebookInstanceLifecycleConfigInput(cr, res)
}

// GenerateDeleteNotebookInstanceLifecycleConfigInput returns a deletion input.
func GenerateDeleteNotebookInstanceLifecycleConfigInput(cr *svcapitypes.NotebookInstanceLifecycleConfig) *svcsdk.DeleteNotebookInstanceLifecycleConfigInput {
	res := preGenerateDeleteNotebookInstanceLifecycleConfigInput(cr, &svcsdk.DeleteNotebookInstanceLifecycleConfigInput{})

	if cr.Spec.ForProvider.NotebookInstanceLifecycleConfigName != nil {
		res.SetNotebookInstanceLifecycleConfigName(*cr.Spec.ForProvider.NotebookInstanceLifecycleConfigName)
	}

	return postGenerateDeleteNotebookInstanceLifecycleConfigInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
