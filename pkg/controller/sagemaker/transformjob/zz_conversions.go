/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package transformjob

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/sagemaker"

	svcapitypes "github.com/crossplane/provider-aws/apis/sagemaker/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateDescribeTransformJobInput returns input for read
// operation.
func GenerateDescribeTransformJobInput(cr *svcapitypes.TransformJob) *svcsdk.DescribeTransformJobInput {
	res := preGenerateDescribeTransformJobInput(cr, &svcsdk.DescribeTransformJobInput{})

	if cr.Spec.ForProvider.TransformJobName != nil {
		res.SetTransformJobName(*cr.Spec.ForProvider.TransformJobName)
	}

	return postGenerateDescribeTransformJobInput(cr, res)
}

// GenerateTransformJob returns the current state in the form of *svcapitypes.TransformJob.
func GenerateTransformJob(resp *svcsdk.DescribeTransformJobOutput) *svcapitypes.TransformJob {
	cr := &svcapitypes.TransformJob{}

	if resp.TransformJobArn != nil {
		cr.Status.AtProvider.TransformJobARN = resp.TransformJobArn
	}

	return cr
}

// GenerateCreateTransformJobInput returns a create input.
func GenerateCreateTransformJobInput(cr *svcapitypes.TransformJob) *svcsdk.CreateTransformJobInput {
	res := preGenerateCreateTransformJobInput(cr, &svcsdk.CreateTransformJobInput{})

	if cr.Spec.ForProvider.BatchStrategy != nil {
		res.SetBatchStrategy(*cr.Spec.ForProvider.BatchStrategy)
	}
	if cr.Spec.ForProvider.DataProcessing != nil {
		f1 := &svcsdk.DataProcessing{}
		if cr.Spec.ForProvider.DataProcessing.InputFilter != nil {
			f1.SetInputFilter(*cr.Spec.ForProvider.DataProcessing.InputFilter)
		}
		if cr.Spec.ForProvider.DataProcessing.JoinSource != nil {
			f1.SetJoinSource(*cr.Spec.ForProvider.DataProcessing.JoinSource)
		}
		if cr.Spec.ForProvider.DataProcessing.OutputFilter != nil {
			f1.SetOutputFilter(*cr.Spec.ForProvider.DataProcessing.OutputFilter)
		}
		res.SetDataProcessing(f1)
	}
	if cr.Spec.ForProvider.Environment != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range cr.Spec.ForProvider.Environment {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		res.SetEnvironment(f2)
	}
	if cr.Spec.ForProvider.ExperimentConfig != nil {
		f3 := &svcsdk.ExperimentConfig{}
		if cr.Spec.ForProvider.ExperimentConfig.ExperimentName != nil {
			f3.SetExperimentName(*cr.Spec.ForProvider.ExperimentConfig.ExperimentName)
		}
		if cr.Spec.ForProvider.ExperimentConfig.TrialComponentDisplayName != nil {
			f3.SetTrialComponentDisplayName(*cr.Spec.ForProvider.ExperimentConfig.TrialComponentDisplayName)
		}
		if cr.Spec.ForProvider.ExperimentConfig.TrialName != nil {
			f3.SetTrialName(*cr.Spec.ForProvider.ExperimentConfig.TrialName)
		}
		res.SetExperimentConfig(f3)
	}
	if cr.Spec.ForProvider.MaxConcurrentTransforms != nil {
		res.SetMaxConcurrentTransforms(*cr.Spec.ForProvider.MaxConcurrentTransforms)
	}
	if cr.Spec.ForProvider.MaxPayloadInMB != nil {
		res.SetMaxPayloadInMB(*cr.Spec.ForProvider.MaxPayloadInMB)
	}
	if cr.Spec.ForProvider.ModelClientConfig != nil {
		f6 := &svcsdk.ModelClientConfig{}
		if cr.Spec.ForProvider.ModelClientConfig.InvocationsMaxRetries != nil {
			f6.SetInvocationsMaxRetries(*cr.Spec.ForProvider.ModelClientConfig.InvocationsMaxRetries)
		}
		if cr.Spec.ForProvider.ModelClientConfig.InvocationsTimeoutInSeconds != nil {
			f6.SetInvocationsTimeoutInSeconds(*cr.Spec.ForProvider.ModelClientConfig.InvocationsTimeoutInSeconds)
		}
		res.SetModelClientConfig(f6)
	}
	if cr.Spec.ForProvider.ModelName != nil {
		res.SetModelName(*cr.Spec.ForProvider.ModelName)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f8 := []*svcsdk.Tag{}
		for _, f8iter := range cr.Spec.ForProvider.Tags {
			f8elem := &svcsdk.Tag{}
			if f8iter.Key != nil {
				f8elem.SetKey(*f8iter.Key)
			}
			if f8iter.Value != nil {
				f8elem.SetValue(*f8iter.Value)
			}
			f8 = append(f8, f8elem)
		}
		res.SetTags(f8)
	}
	if cr.Spec.ForProvider.TransformInput != nil {
		f9 := &svcsdk.TransformInput{}
		if cr.Spec.ForProvider.TransformInput.CompressionType != nil {
			f9.SetCompressionType(*cr.Spec.ForProvider.TransformInput.CompressionType)
		}
		if cr.Spec.ForProvider.TransformInput.ContentType != nil {
			f9.SetContentType(*cr.Spec.ForProvider.TransformInput.ContentType)
		}
		if cr.Spec.ForProvider.TransformInput.DataSource != nil {
			f9f2 := &svcsdk.TransformDataSource{}
			if cr.Spec.ForProvider.TransformInput.DataSource.S3DataSource != nil {
				f9f2f0 := &svcsdk.TransformS3DataSource{}
				if cr.Spec.ForProvider.TransformInput.DataSource.S3DataSource.S3DataType != nil {
					f9f2f0.SetS3DataType(*cr.Spec.ForProvider.TransformInput.DataSource.S3DataSource.S3DataType)
				}
				if cr.Spec.ForProvider.TransformInput.DataSource.S3DataSource.S3URI != nil {
					f9f2f0.SetS3Uri(*cr.Spec.ForProvider.TransformInput.DataSource.S3DataSource.S3URI)
				}
				f9f2.SetS3DataSource(f9f2f0)
			}
			f9.SetDataSource(f9f2)
		}
		if cr.Spec.ForProvider.TransformInput.SplitType != nil {
			f9.SetSplitType(*cr.Spec.ForProvider.TransformInput.SplitType)
		}
		res.SetTransformInput(f9)
	}
	if cr.Spec.ForProvider.TransformJobName != nil {
		res.SetTransformJobName(*cr.Spec.ForProvider.TransformJobName)
	}
	if cr.Spec.ForProvider.TransformOutput != nil {
		f11 := &svcsdk.TransformOutput{}
		if cr.Spec.ForProvider.TransformOutput.Accept != nil {
			f11.SetAccept(*cr.Spec.ForProvider.TransformOutput.Accept)
		}
		if cr.Spec.ForProvider.TransformOutput.AssembleWith != nil {
			f11.SetAssembleWith(*cr.Spec.ForProvider.TransformOutput.AssembleWith)
		}
		if cr.Spec.ForProvider.TransformOutput.KMSKeyID != nil {
			f11.SetKmsKeyId(*cr.Spec.ForProvider.TransformOutput.KMSKeyID)
		}
		if cr.Spec.ForProvider.TransformOutput.S3OutputPath != nil {
			f11.SetS3OutputPath(*cr.Spec.ForProvider.TransformOutput.S3OutputPath)
		}
		res.SetTransformOutput(f11)
	}
	if cr.Spec.ForProvider.TransformResources != nil {
		f12 := &svcsdk.TransformResources{}
		if cr.Spec.ForProvider.TransformResources.InstanceCount != nil {
			f12.SetInstanceCount(*cr.Spec.ForProvider.TransformResources.InstanceCount)
		}
		if cr.Spec.ForProvider.TransformResources.InstanceType != nil {
			f12.SetInstanceType(*cr.Spec.ForProvider.TransformResources.InstanceType)
		}
		if cr.Spec.ForProvider.TransformResources.VolumeKMSKeyID != nil {
			f12.SetVolumeKmsKeyId(*cr.Spec.ForProvider.TransformResources.VolumeKMSKeyID)
		}
		res.SetTransformResources(f12)
	}

	return postGenerateCreateTransformJobInput(cr, res)
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "UNKNOWN"
}
