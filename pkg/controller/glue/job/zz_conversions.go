/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package job

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/glue"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/glue/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetJobInput returns input for read
// operation.
func GenerateGetJobInput(cr *svcapitypes.Job) *svcsdk.GetJobInput {
	res := &svcsdk.GetJobInput{}

	return res
}

// GenerateJob returns the current state in the form of *svcapitypes.Job.
func GenerateJob(resp *svcsdk.GetJobOutput) *svcapitypes.Job {
	cr := &svcapitypes.Job{}

	if resp.Job.AllocatedCapacity != nil {
		cr.Spec.ForProvider.AllocatedCapacity = resp.Job.AllocatedCapacity
	} else {
		cr.Spec.ForProvider.AllocatedCapacity = nil
	}
	if resp.Job.Command != nil {
		f1 := &svcapitypes.JobCommand{}
		if resp.Job.Command.Name != nil {
			f1.Name = resp.Job.Command.Name
		}
		if resp.Job.Command.PythonVersion != nil {
			f1.PythonVersion = resp.Job.Command.PythonVersion
		}
		if resp.Job.Command.ScriptLocation != nil {
			f1.ScriptLocation = resp.Job.Command.ScriptLocation
		}
		cr.Spec.ForProvider.Command = f1
	} else {
		cr.Spec.ForProvider.Command = nil
	}
	if resp.Job.CreatedOn != nil {
		cr.Status.AtProvider.CreatedOn = &metav1.Time{*resp.Job.CreatedOn}
	} else {
		cr.Status.AtProvider.CreatedOn = nil
	}
	if resp.Job.DefaultArguments != nil {
		f4 := map[string]*string{}
		for f4key, f4valiter := range resp.Job.DefaultArguments {
			var f4val string
			f4val = *f4valiter
			f4[f4key] = &f4val
		}
		cr.Spec.ForProvider.DefaultArguments = f4
	} else {
		cr.Spec.ForProvider.DefaultArguments = nil
	}
	if resp.Job.Description != nil {
		cr.Spec.ForProvider.Description = resp.Job.Description
	} else {
		cr.Spec.ForProvider.Description = nil
	}
	if resp.Job.ExecutionProperty != nil {
		f6 := &svcapitypes.ExecutionProperty{}
		if resp.Job.ExecutionProperty.MaxConcurrentRuns != nil {
			f6.MaxConcurrentRuns = resp.Job.ExecutionProperty.MaxConcurrentRuns
		}
		cr.Spec.ForProvider.ExecutionProperty = f6
	} else {
		cr.Spec.ForProvider.ExecutionProperty = nil
	}
	if resp.Job.GlueVersion != nil {
		cr.Spec.ForProvider.GlueVersion = resp.Job.GlueVersion
	} else {
		cr.Spec.ForProvider.GlueVersion = nil
	}
	if resp.Job.LastModifiedOn != nil {
		cr.Status.AtProvider.LastModifiedOn = &metav1.Time{*resp.Job.LastModifiedOn}
	} else {
		cr.Status.AtProvider.LastModifiedOn = nil
	}
	if resp.Job.LogUri != nil {
		cr.Spec.ForProvider.LogURI = resp.Job.LogUri
	} else {
		cr.Spec.ForProvider.LogURI = nil
	}
	if resp.Job.MaxCapacity != nil {
		cr.Spec.ForProvider.MaxCapacity = resp.Job.MaxCapacity
	} else {
		cr.Spec.ForProvider.MaxCapacity = nil
	}
	if resp.Job.MaxRetries != nil {
		cr.Spec.ForProvider.MaxRetries = resp.Job.MaxRetries
	} else {
		cr.Spec.ForProvider.MaxRetries = nil
	}
	if resp.Job.Name != nil {
		cr.Status.AtProvider.Name = resp.Job.Name
	} else {
		cr.Status.AtProvider.Name = nil
	}
	if resp.Job.NonOverridableArguments != nil {
		f13 := map[string]*string{}
		for f13key, f13valiter := range resp.Job.NonOverridableArguments {
			var f13val string
			f13val = *f13valiter
			f13[f13key] = &f13val
		}
		cr.Spec.ForProvider.NonOverridableArguments = f13
	} else {
		cr.Spec.ForProvider.NonOverridableArguments = nil
	}
	if resp.Job.NotificationProperty != nil {
		f14 := &svcapitypes.NotificationProperty{}
		if resp.Job.NotificationProperty.NotifyDelayAfter != nil {
			f14.NotifyDelayAfter = resp.Job.NotificationProperty.NotifyDelayAfter
		}
		cr.Spec.ForProvider.NotificationProperty = f14
	} else {
		cr.Spec.ForProvider.NotificationProperty = nil
	}
	if resp.Job.NumberOfWorkers != nil {
		cr.Spec.ForProvider.NumberOfWorkers = resp.Job.NumberOfWorkers
	} else {
		cr.Spec.ForProvider.NumberOfWorkers = nil
	}
	if resp.Job.Timeout != nil {
		cr.Spec.ForProvider.Timeout = resp.Job.Timeout
	} else {
		cr.Spec.ForProvider.Timeout = nil
	}
	if resp.Job.WorkerType != nil {
		cr.Spec.ForProvider.WorkerType = resp.Job.WorkerType
	} else {
		cr.Spec.ForProvider.WorkerType = nil
	}

	return cr
}

// GenerateCreateJobInput returns a create input.
func GenerateCreateJobInput(cr *svcapitypes.Job) *svcsdk.CreateJobInput {
	res := &svcsdk.CreateJobInput{}

	if cr.Spec.ForProvider.AllocatedCapacity != nil {
		res.SetAllocatedCapacity(*cr.Spec.ForProvider.AllocatedCapacity)
	}
	if cr.Spec.ForProvider.Command != nil {
		f1 := &svcsdk.JobCommand{}
		if cr.Spec.ForProvider.Command.Name != nil {
			f1.SetName(*cr.Spec.ForProvider.Command.Name)
		}
		if cr.Spec.ForProvider.Command.PythonVersion != nil {
			f1.SetPythonVersion(*cr.Spec.ForProvider.Command.PythonVersion)
		}
		if cr.Spec.ForProvider.Command.ScriptLocation != nil {
			f1.SetScriptLocation(*cr.Spec.ForProvider.Command.ScriptLocation)
		}
		res.SetCommand(f1)
	}
	if cr.Spec.ForProvider.DefaultArguments != nil {
		f2 := map[string]*string{}
		for f2key, f2valiter := range cr.Spec.ForProvider.DefaultArguments {
			var f2val string
			f2val = *f2valiter
			f2[f2key] = &f2val
		}
		res.SetDefaultArguments(f2)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.ExecutionProperty != nil {
		f4 := &svcsdk.ExecutionProperty{}
		if cr.Spec.ForProvider.ExecutionProperty.MaxConcurrentRuns != nil {
			f4.SetMaxConcurrentRuns(*cr.Spec.ForProvider.ExecutionProperty.MaxConcurrentRuns)
		}
		res.SetExecutionProperty(f4)
	}
	if cr.Spec.ForProvider.GlueVersion != nil {
		res.SetGlueVersion(*cr.Spec.ForProvider.GlueVersion)
	}
	if cr.Spec.ForProvider.LogURI != nil {
		res.SetLogUri(*cr.Spec.ForProvider.LogURI)
	}
	if cr.Spec.ForProvider.MaxCapacity != nil {
		res.SetMaxCapacity(*cr.Spec.ForProvider.MaxCapacity)
	}
	if cr.Spec.ForProvider.MaxRetries != nil {
		res.SetMaxRetries(*cr.Spec.ForProvider.MaxRetries)
	}
	if cr.Spec.ForProvider.NonOverridableArguments != nil {
		f9 := map[string]*string{}
		for f9key, f9valiter := range cr.Spec.ForProvider.NonOverridableArguments {
			var f9val string
			f9val = *f9valiter
			f9[f9key] = &f9val
		}
		res.SetNonOverridableArguments(f9)
	}
	if cr.Spec.ForProvider.NotificationProperty != nil {
		f10 := &svcsdk.NotificationProperty{}
		if cr.Spec.ForProvider.NotificationProperty.NotifyDelayAfter != nil {
			f10.SetNotifyDelayAfter(*cr.Spec.ForProvider.NotificationProperty.NotifyDelayAfter)
		}
		res.SetNotificationProperty(f10)
	}
	if cr.Spec.ForProvider.NumberOfWorkers != nil {
		res.SetNumberOfWorkers(*cr.Spec.ForProvider.NumberOfWorkers)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f12 := map[string]*string{}
		for f12key, f12valiter := range cr.Spec.ForProvider.Tags {
			var f12val string
			f12val = *f12valiter
			f12[f12key] = &f12val
		}
		res.SetTags(f12)
	}
	if cr.Spec.ForProvider.Timeout != nil {
		res.SetTimeout(*cr.Spec.ForProvider.Timeout)
	}
	if cr.Spec.ForProvider.WorkerType != nil {
		res.SetWorkerType(*cr.Spec.ForProvider.WorkerType)
	}

	return res
}

// GenerateUpdateJobInput returns an update input.
func GenerateUpdateJobInput(cr *svcapitypes.Job) *svcsdk.UpdateJobInput {
	res := &svcsdk.UpdateJobInput{}

	return res
}

// GenerateDeleteJobInput returns a deletion input.
func GenerateDeleteJobInput(cr *svcapitypes.Job) *svcsdk.DeleteJobInput {
	res := &svcsdk.DeleteJobInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "EntityNotFoundException"
}
