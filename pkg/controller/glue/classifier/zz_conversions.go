/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package classifier

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/glue"

	svcapitypes "github.com/crossplane/provider-aws/apis/glue/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetClassifierInput returns input for read
// operation.
func GenerateGetClassifierInput(cr *svcapitypes.Classifier) *svcsdk.GetClassifierInput {
	res := &svcsdk.GetClassifierInput{}

	return res
}

// GenerateClassifier returns the current state in the form of *svcapitypes.Classifier.
func GenerateClassifier(resp *svcsdk.GetClassifierOutput) *svcapitypes.Classifier {
	cr := &svcapitypes.Classifier{}

	return cr
}

// GenerateCreateClassifierInput returns a create input.
func GenerateCreateClassifierInput(cr *svcapitypes.Classifier) *svcsdk.CreateClassifierInput {
	res := &svcsdk.CreateClassifierInput{}

	if cr.Spec.ForProvider.CsvClassifier != nil {
		f0 := &svcsdk.CreateCsvClassifierRequest{}
		if cr.Spec.ForProvider.CsvClassifier.AllowSingleColumn != nil {
			f0.SetAllowSingleColumn(*cr.Spec.ForProvider.CsvClassifier.AllowSingleColumn)
		}
		if cr.Spec.ForProvider.CsvClassifier.ContainsHeader != nil {
			f0.SetContainsHeader(*cr.Spec.ForProvider.CsvClassifier.ContainsHeader)
		}
		if cr.Spec.ForProvider.CsvClassifier.Delimiter != nil {
			f0.SetDelimiter(*cr.Spec.ForProvider.CsvClassifier.Delimiter)
		}
		if cr.Spec.ForProvider.CsvClassifier.DisableValueTrimming != nil {
			f0.SetDisableValueTrimming(*cr.Spec.ForProvider.CsvClassifier.DisableValueTrimming)
		}
		if cr.Spec.ForProvider.CsvClassifier.Header != nil {
			f0f4 := []*string{}
			for _, f0f4iter := range cr.Spec.ForProvider.CsvClassifier.Header {
				var f0f4elem string
				f0f4elem = *f0f4iter
				f0f4 = append(f0f4, &f0f4elem)
			}
			f0.SetHeader(f0f4)
		}
		if cr.Spec.ForProvider.CsvClassifier.Name != nil {
			f0.SetName(*cr.Spec.ForProvider.CsvClassifier.Name)
		}
		if cr.Spec.ForProvider.CsvClassifier.QuoteSymbol != nil {
			f0.SetQuoteSymbol(*cr.Spec.ForProvider.CsvClassifier.QuoteSymbol)
		}
		res.SetCsvClassifier(f0)
	}
	if cr.Spec.ForProvider.GrokClassifier != nil {
		f1 := &svcsdk.CreateGrokClassifierRequest{}
		if cr.Spec.ForProvider.GrokClassifier.Classification != nil {
			f1.SetClassification(*cr.Spec.ForProvider.GrokClassifier.Classification)
		}
		if cr.Spec.ForProvider.GrokClassifier.CustomPatterns != nil {
			f1.SetCustomPatterns(*cr.Spec.ForProvider.GrokClassifier.CustomPatterns)
		}
		if cr.Spec.ForProvider.GrokClassifier.GrokPattern != nil {
			f1.SetGrokPattern(*cr.Spec.ForProvider.GrokClassifier.GrokPattern)
		}
		if cr.Spec.ForProvider.GrokClassifier.Name != nil {
			f1.SetName(*cr.Spec.ForProvider.GrokClassifier.Name)
		}
		res.SetGrokClassifier(f1)
	}
	if cr.Spec.ForProvider.JSONClassifier != nil {
		f2 := &svcsdk.CreateJsonClassifierRequest{}
		if cr.Spec.ForProvider.JSONClassifier.JSONPath != nil {
			f2.SetJsonPath(*cr.Spec.ForProvider.JSONClassifier.JSONPath)
		}
		if cr.Spec.ForProvider.JSONClassifier.Name != nil {
			f2.SetName(*cr.Spec.ForProvider.JSONClassifier.Name)
		}
		res.SetJsonClassifier(f2)
	}
	if cr.Spec.ForProvider.XMLClassifier != nil {
		f3 := &svcsdk.CreateXMLClassifierRequest{}
		if cr.Spec.ForProvider.XMLClassifier.Classification != nil {
			f3.SetClassification(*cr.Spec.ForProvider.XMLClassifier.Classification)
		}
		if cr.Spec.ForProvider.XMLClassifier.Name != nil {
			f3.SetName(*cr.Spec.ForProvider.XMLClassifier.Name)
		}
		if cr.Spec.ForProvider.XMLClassifier.RowTag != nil {
			f3.SetRowTag(*cr.Spec.ForProvider.XMLClassifier.RowTag)
		}
		res.SetXMLClassifier(f3)
	}

	return res
}

// GenerateUpdateClassifierInput returns an update input.
func GenerateUpdateClassifierInput(cr *svcapitypes.Classifier) *svcsdk.UpdateClassifierInput {
	res := &svcsdk.UpdateClassifierInput{}

	if cr.Spec.ForProvider.CsvClassifier != nil {
		f0 := &svcsdk.UpdateCsvClassifierRequest{}
		if cr.Spec.ForProvider.CsvClassifier.AllowSingleColumn != nil {
			f0.SetAllowSingleColumn(*cr.Spec.ForProvider.CsvClassifier.AllowSingleColumn)
		}
		if cr.Spec.ForProvider.CsvClassifier.ContainsHeader != nil {
			f0.SetContainsHeader(*cr.Spec.ForProvider.CsvClassifier.ContainsHeader)
		}
		if cr.Spec.ForProvider.CsvClassifier.Delimiter != nil {
			f0.SetDelimiter(*cr.Spec.ForProvider.CsvClassifier.Delimiter)
		}
		if cr.Spec.ForProvider.CsvClassifier.DisableValueTrimming != nil {
			f0.SetDisableValueTrimming(*cr.Spec.ForProvider.CsvClassifier.DisableValueTrimming)
		}
		if cr.Spec.ForProvider.CsvClassifier.Header != nil {
			f0f4 := []*string{}
			for _, f0f4iter := range cr.Spec.ForProvider.CsvClassifier.Header {
				var f0f4elem string
				f0f4elem = *f0f4iter
				f0f4 = append(f0f4, &f0f4elem)
			}
			f0.SetHeader(f0f4)
		}
		if cr.Spec.ForProvider.CsvClassifier.Name != nil {
			f0.SetName(*cr.Spec.ForProvider.CsvClassifier.Name)
		}
		if cr.Spec.ForProvider.CsvClassifier.QuoteSymbol != nil {
			f0.SetQuoteSymbol(*cr.Spec.ForProvider.CsvClassifier.QuoteSymbol)
		}
		res.SetCsvClassifier(f0)
	}
	if cr.Spec.ForProvider.GrokClassifier != nil {
		f1 := &svcsdk.UpdateGrokClassifierRequest{}
		if cr.Spec.ForProvider.GrokClassifier.Classification != nil {
			f1.SetClassification(*cr.Spec.ForProvider.GrokClassifier.Classification)
		}
		if cr.Spec.ForProvider.GrokClassifier.CustomPatterns != nil {
			f1.SetCustomPatterns(*cr.Spec.ForProvider.GrokClassifier.CustomPatterns)
		}
		if cr.Spec.ForProvider.GrokClassifier.GrokPattern != nil {
			f1.SetGrokPattern(*cr.Spec.ForProvider.GrokClassifier.GrokPattern)
		}
		if cr.Spec.ForProvider.GrokClassifier.Name != nil {
			f1.SetName(*cr.Spec.ForProvider.GrokClassifier.Name)
		}
		res.SetGrokClassifier(f1)
	}
	if cr.Spec.ForProvider.JSONClassifier != nil {
		f2 := &svcsdk.UpdateJsonClassifierRequest{}
		if cr.Spec.ForProvider.JSONClassifier.JSONPath != nil {
			f2.SetJsonPath(*cr.Spec.ForProvider.JSONClassifier.JSONPath)
		}
		if cr.Spec.ForProvider.JSONClassifier.Name != nil {
			f2.SetName(*cr.Spec.ForProvider.JSONClassifier.Name)
		}
		res.SetJsonClassifier(f2)
	}
	if cr.Spec.ForProvider.XMLClassifier != nil {
		f3 := &svcsdk.UpdateXMLClassifierRequest{}
		if cr.Spec.ForProvider.XMLClassifier.Classification != nil {
			f3.SetClassification(*cr.Spec.ForProvider.XMLClassifier.Classification)
		}
		if cr.Spec.ForProvider.XMLClassifier.Name != nil {
			f3.SetName(*cr.Spec.ForProvider.XMLClassifier.Name)
		}
		if cr.Spec.ForProvider.XMLClassifier.RowTag != nil {
			f3.SetRowTag(*cr.Spec.ForProvider.XMLClassifier.RowTag)
		}
		res.SetXMLClassifier(f3)
	}

	return res
}

// GenerateDeleteClassifierInput returns a deletion input.
func GenerateDeleteClassifierInput(cr *svcapitypes.Classifier) *svcsdk.DeleteClassifierInput {
	res := &svcsdk.DeleteClassifierInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "EntityNotFoundException"
}
