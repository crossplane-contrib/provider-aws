/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package connection

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/glue"

	svcapitypes "github.com/crossplane/provider-aws/apis/glue/v1alpha1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetConnectionInput returns input for read
// operation.
func GenerateGetConnectionInput(cr *svcapitypes.Connection) *svcsdk.GetConnectionInput {
	res := &svcsdk.GetConnectionInput{}

	if cr.Spec.ForProvider.CatalogID != nil {
		res.SetCatalogId(*cr.Spec.ForProvider.CatalogID)
	}

	return res
}

// GenerateConnection returns the current state in the form of *svcapitypes.Connection.
func GenerateConnection(resp *svcsdk.GetConnectionOutput) *svcapitypes.Connection {
	cr := &svcapitypes.Connection{}

	return cr
}

// GenerateCreateConnectionInput returns a create input.
func GenerateCreateConnectionInput(cr *svcapitypes.Connection) *svcsdk.CreateConnectionInput {
	res := &svcsdk.CreateConnectionInput{}

	if cr.Spec.ForProvider.CatalogID != nil {
		res.SetCatalogId(*cr.Spec.ForProvider.CatalogID)
	}
	if cr.Spec.ForProvider.ConnectionInput != nil {
		f1 := &svcsdk.ConnectionInput{}
		if cr.Spec.ForProvider.ConnectionInput.ConnectionProperties != nil {
			f1f0 := map[string]*string{}
			for f1f0key, f1f0valiter := range cr.Spec.ForProvider.ConnectionInput.ConnectionProperties {
				var f1f0val string
				f1f0val = *f1f0valiter
				f1f0[f1f0key] = &f1f0val
			}
			f1.SetConnectionProperties(f1f0)
		}
		if cr.Spec.ForProvider.ConnectionInput.ConnectionType != nil {
			f1.SetConnectionType(*cr.Spec.ForProvider.ConnectionInput.ConnectionType)
		}
		if cr.Spec.ForProvider.ConnectionInput.Description != nil {
			f1.SetDescription(*cr.Spec.ForProvider.ConnectionInput.Description)
		}
		if cr.Spec.ForProvider.ConnectionInput.MatchCriteria != nil {
			f1f3 := []*string{}
			for _, f1f3iter := range cr.Spec.ForProvider.ConnectionInput.MatchCriteria {
				var f1f3elem string
				f1f3elem = *f1f3iter
				f1f3 = append(f1f3, &f1f3elem)
			}
			f1.SetMatchCriteria(f1f3)
		}
		if cr.Spec.ForProvider.ConnectionInput.Name != nil {
			f1.SetName(*cr.Spec.ForProvider.ConnectionInput.Name)
		}
		if cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements != nil {
			f1f5 := &svcsdk.PhysicalConnectionRequirements{}
			if cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.AvailabilityZone != nil {
				f1f5.SetAvailabilityZone(*cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.AvailabilityZone)
			}
			if cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.SecurityGroupIDList != nil {
				f1f5f1 := []*string{}
				for _, f1f5f1iter := range cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.SecurityGroupIDList {
					var f1f5f1elem string
					f1f5f1elem = *f1f5f1iter
					f1f5f1 = append(f1f5f1, &f1f5f1elem)
				}
				f1f5.SetSecurityGroupIdList(f1f5f1)
			}
			if cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.SubnetID != nil {
				f1f5.SetSubnetId(*cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.SubnetID)
			}
			f1.SetPhysicalConnectionRequirements(f1f5)
		}
		res.SetConnectionInput(f1)
	}

	return res
}

// GenerateUpdateConnectionInput returns an update input.
func GenerateUpdateConnectionInput(cr *svcapitypes.Connection) *svcsdk.UpdateConnectionInput {
	res := &svcsdk.UpdateConnectionInput{}

	if cr.Spec.ForProvider.CatalogID != nil {
		res.SetCatalogId(*cr.Spec.ForProvider.CatalogID)
	}
	if cr.Spec.ForProvider.ConnectionInput != nil {
		f1 := &svcsdk.ConnectionInput{}
		if cr.Spec.ForProvider.ConnectionInput.ConnectionProperties != nil {
			f1f0 := map[string]*string{}
			for f1f0key, f1f0valiter := range cr.Spec.ForProvider.ConnectionInput.ConnectionProperties {
				var f1f0val string
				f1f0val = *f1f0valiter
				f1f0[f1f0key] = &f1f0val
			}
			f1.SetConnectionProperties(f1f0)
		}
		if cr.Spec.ForProvider.ConnectionInput.ConnectionType != nil {
			f1.SetConnectionType(*cr.Spec.ForProvider.ConnectionInput.ConnectionType)
		}
		if cr.Spec.ForProvider.ConnectionInput.Description != nil {
			f1.SetDescription(*cr.Spec.ForProvider.ConnectionInput.Description)
		}
		if cr.Spec.ForProvider.ConnectionInput.MatchCriteria != nil {
			f1f3 := []*string{}
			for _, f1f3iter := range cr.Spec.ForProvider.ConnectionInput.MatchCriteria {
				var f1f3elem string
				f1f3elem = *f1f3iter
				f1f3 = append(f1f3, &f1f3elem)
			}
			f1.SetMatchCriteria(f1f3)
		}
		if cr.Spec.ForProvider.ConnectionInput.Name != nil {
			f1.SetName(*cr.Spec.ForProvider.ConnectionInput.Name)
		}
		if cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements != nil {
			f1f5 := &svcsdk.PhysicalConnectionRequirements{}
			if cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.AvailabilityZone != nil {
				f1f5.SetAvailabilityZone(*cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.AvailabilityZone)
			}
			if cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.SecurityGroupIDList != nil {
				f1f5f1 := []*string{}
				for _, f1f5f1iter := range cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.SecurityGroupIDList {
					var f1f5f1elem string
					f1f5f1elem = *f1f5f1iter
					f1f5f1 = append(f1f5f1, &f1f5f1elem)
				}
				f1f5.SetSecurityGroupIdList(f1f5f1)
			}
			if cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.SubnetID != nil {
				f1f5.SetSubnetId(*cr.Spec.ForProvider.ConnectionInput.PhysicalConnectionRequirements.SubnetID)
			}
			f1.SetPhysicalConnectionRequirements(f1f5)
		}
		res.SetConnectionInput(f1)
	}

	return res
}

// GenerateDeleteConnectionInput returns a deletion input.
func GenerateDeleteConnectionInput(cr *svcapitypes.Connection) *svcsdk.DeleteConnectionInput {
	res := &svcsdk.DeleteConnectionInput{}

	if cr.Spec.ForProvider.CatalogID != nil {
		res.SetCatalogId(*cr.Spec.ForProvider.CatalogID)
	}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "EntityNotFoundException"
}
