/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package function

import (
	"github.com/aws/aws-sdk-go/aws/awserr"
	svcsdk "github.com/aws/aws-sdk-go/service/lambda"

	svcapitypes "github.com/crossplane-contrib/provider-aws/apis/lambda/v1beta1"
)

// NOTE(muvaf): We return pointers in case the function needs to start with an
// empty object, hence need to return a new pointer.

// GenerateGetFunctionInput returns input for read
// operation.
func GenerateGetFunctionInput(cr *svcapitypes.Function) *svcsdk.GetFunctionInput {
	res := &svcsdk.GetFunctionInput{}

	return res
}

// GenerateFunction returns the current state in the form of *svcapitypes.Function.
func GenerateFunction(resp *svcsdk.GetFunctionOutput) *svcapitypes.Function {
	cr := &svcapitypes.Function{}

	if resp.Tags != nil {
		f3 := map[string]*string{}
		for f3key, f3valiter := range resp.Tags {
			var f3val string
			f3val = *f3valiter
			f3[f3key] = &f3val
		}
		cr.Spec.ForProvider.Tags = f3
	} else {
		cr.Spec.ForProvider.Tags = nil
	}

	return cr
}

// GenerateCreateFunctionInput returns a create input.
func GenerateCreateFunctionInput(cr *svcapitypes.Function) *svcsdk.CreateFunctionInput {
	res := &svcsdk.CreateFunctionInput{}

	if cr.Spec.ForProvider.Architectures != nil {
		f0 := []*string{}
		for _, f0iter := range cr.Spec.ForProvider.Architectures {
			var f0elem string
			f0elem = *f0iter
			f0 = append(f0, &f0elem)
		}
		res.SetArchitectures(f0)
	}
	if cr.Spec.ForProvider.CodeSigningConfigARN != nil {
		res.SetCodeSigningConfigArn(*cr.Spec.ForProvider.CodeSigningConfigARN)
	}
	if cr.Spec.ForProvider.DeadLetterConfig != nil {
		f2 := &svcsdk.DeadLetterConfig{}
		if cr.Spec.ForProvider.DeadLetterConfig.TargetARN != nil {
			f2.SetTargetArn(*cr.Spec.ForProvider.DeadLetterConfig.TargetARN)
		}
		res.SetDeadLetterConfig(f2)
	}
	if cr.Spec.ForProvider.Description != nil {
		res.SetDescription(*cr.Spec.ForProvider.Description)
	}
	if cr.Spec.ForProvider.Environment != nil {
		f4 := &svcsdk.Environment{}
		if cr.Spec.ForProvider.Environment.Variables != nil {
			f4f0 := map[string]*string{}
			for f4f0key, f4f0valiter := range cr.Spec.ForProvider.Environment.Variables {
				var f4f0val string
				f4f0val = *f4f0valiter
				f4f0[f4f0key] = &f4f0val
			}
			f4.SetVariables(f4f0)
		}
		res.SetEnvironment(f4)
	}
	if cr.Spec.ForProvider.FileSystemConfigs != nil {
		f5 := []*svcsdk.FileSystemConfig{}
		for _, f5iter := range cr.Spec.ForProvider.FileSystemConfigs {
			f5elem := &svcsdk.FileSystemConfig{}
			if f5iter.ARN != nil {
				f5elem.SetArn(*f5iter.ARN)
			}
			if f5iter.LocalMountPath != nil {
				f5elem.SetLocalMountPath(*f5iter.LocalMountPath)
			}
			f5 = append(f5, f5elem)
		}
		res.SetFileSystemConfigs(f5)
	}
	if cr.Spec.ForProvider.Handler != nil {
		res.SetHandler(*cr.Spec.ForProvider.Handler)
	}
	if cr.Spec.ForProvider.ImageConfig != nil {
		f7 := &svcsdk.ImageConfig{}
		if cr.Spec.ForProvider.ImageConfig.Command != nil {
			f7f0 := []*string{}
			for _, f7f0iter := range cr.Spec.ForProvider.ImageConfig.Command {
				var f7f0elem string
				f7f0elem = *f7f0iter
				f7f0 = append(f7f0, &f7f0elem)
			}
			f7.SetCommand(f7f0)
		}
		if cr.Spec.ForProvider.ImageConfig.EntryPoint != nil {
			f7f1 := []*string{}
			for _, f7f1iter := range cr.Spec.ForProvider.ImageConfig.EntryPoint {
				var f7f1elem string
				f7f1elem = *f7f1iter
				f7f1 = append(f7f1, &f7f1elem)
			}
			f7.SetEntryPoint(f7f1)
		}
		if cr.Spec.ForProvider.ImageConfig.WorkingDirectory != nil {
			f7.SetWorkingDirectory(*cr.Spec.ForProvider.ImageConfig.WorkingDirectory)
		}
		res.SetImageConfig(f7)
	}
	if cr.Spec.ForProvider.KMSKeyARN != nil {
		res.SetKMSKeyArn(*cr.Spec.ForProvider.KMSKeyARN)
	}
	if cr.Spec.ForProvider.Layers != nil {
		f9 := []*string{}
		for _, f9iter := range cr.Spec.ForProvider.Layers {
			var f9elem string
			f9elem = *f9iter
			f9 = append(f9, &f9elem)
		}
		res.SetLayers(f9)
	}
	if cr.Spec.ForProvider.MemorySize != nil {
		res.SetMemorySize(*cr.Spec.ForProvider.MemorySize)
	}
	if cr.Spec.ForProvider.PackageType != nil {
		res.SetPackageType(*cr.Spec.ForProvider.PackageType)
	}
	if cr.Spec.ForProvider.Publish != nil {
		res.SetPublish(*cr.Spec.ForProvider.Publish)
	}
	if cr.Spec.ForProvider.Runtime != nil {
		res.SetRuntime(*cr.Spec.ForProvider.Runtime)
	}
	if cr.Spec.ForProvider.Tags != nil {
		f14 := map[string]*string{}
		for f14key, f14valiter := range cr.Spec.ForProvider.Tags {
			var f14val string
			f14val = *f14valiter
			f14[f14key] = &f14val
		}
		res.SetTags(f14)
	}
	if cr.Spec.ForProvider.Timeout != nil {
		res.SetTimeout(*cr.Spec.ForProvider.Timeout)
	}
	if cr.Spec.ForProvider.TracingConfig != nil {
		f16 := &svcsdk.TracingConfig{}
		if cr.Spec.ForProvider.TracingConfig.Mode != nil {
			f16.SetMode(*cr.Spec.ForProvider.TracingConfig.Mode)
		}
		res.SetTracingConfig(f16)
	}

	return res
}

// GenerateDeleteFunctionInput returns a deletion input.
func GenerateDeleteFunctionInput(cr *svcapitypes.Function) *svcsdk.DeleteFunctionInput {
	res := &svcsdk.DeleteFunctionInput{}

	return res
}

// IsNotFound returns whether the given error is of type NotFound or not.
func IsNotFound(err error) bool {
	awsErr, ok := err.(awserr.Error)
	return ok && awsErr.Code() == "ResourceNotFoundException"
}
