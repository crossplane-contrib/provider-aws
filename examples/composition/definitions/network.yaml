# This defines our new 'Network', i.e. a VPC network with subnets, a route
# table, and a security group.
apiVersion: apiextensions.crossplane.io/v1alpha1
kind: InfrastructureDefinition
metadata:
  name: networks.aws.example.org
spec:
  crdSpecTemplate:
    group: aws.example.org
    version: v1alpha1
    names:
      kind: Network
      listKind: NetworkList
      plural: networks
      singular: network
    validation:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              sgName:
                type: string
                description: Name of security group in network.
              providerConfigRef:
                type: object
                description: Crossplane AWS provider credentials to use.
                properties:
                  name:
                    type: string
                required:
                - name
            required:
            - sgName
            - providerRef
---
apiVersion: apiextensions.crossplane.io/v1alpha1
kind: Composition
metadata:
  name: networks.aws.example.org
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  reclaimPolicy: Delete
  from:
    apiVersion: aws.example.org/v1alpha1
    kind: Network
  to:
  - base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: VPC
      spec:
        forProvider:
          region: us-west-2
          cidrBlock: 192.168.0.0/16
          enableDnsSupport: true
          enableDnsHostNames: true
          instanceTenancy: default
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerConfigRef.name"
      toFieldPath: "spec.providerConfigRef.name"
  - base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          subnet-1: "true"
      spec:
        forProvider:
          cidrBlock: 192.168.64.0/18
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerConfigRef.name"
      toFieldPath: "spec.providerConfigRef.name"
  - base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          subnet-2: "true"
      spec:
        forProvider:
          cidrBlock: 192.168.128.0/18
          availabilityZone: us-west-2b
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerConfigRef.name"
      toFieldPath: "spec.providerConfigRef.name"
  - base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: Subnet
      metadata:
        labels:
          subnet-3: "true"
      spec:
        forProvider:
          cidrBlock: 192.168.192.0/18
          availabilityZone: us-west-2a
          vpcIdSelector:
            matchControllerRef: true
          mapPublicIPOnLaunch: true
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerConfigRef.name"
      toFieldPath: "spec.providerConfigRef.name"
  - base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: InternetGateway
      spec:
        forProvider:
          vpcIdSelector:
            matchControllerRef: true
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerConfigRef.name"
      toFieldPath: "spec.providerConfigRef.name"
  - base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: RouteTable
      spec:
        forProvider:
          routes:
            - destinationCidrBlock: 0.0.0.0/0
              gatewayIdSelector:
                matchControllerRef: true
          associations:
            - subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  subnet-1: "true"
            - subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  subnet-2: "true"
            - subnetIdSelector:
                matchControllerRef: true
                matchLabels:
                  subnet-3: "true"
          vpcIdSelector:
            matchControllerRef: true
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerConfigRef.name"
      toFieldPath: "spec.providerConfigRef.name"
  - base:
      apiVersion: ec2.aws.crossplane.io/v1beta1
      kind: SecurityGroup
      spec:
        forProvider:
          vpcIdSelector:
            matchControllerRef: true
          description: Cluster communication with worker nodes
          ingress:
            - fromPort: 80
              toPort: 80
              ipProtocol: tcp
              ipRanges:
                - cidrIp: 192.168.0.0/16
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerConfigRef.name"
      toFieldPath: "spec.providerConfigRef.name"
    - fromFieldPath: "spec.sgName"
      toFieldPath: "spec.forProvider.groupName"