# This defines our new 'Cluster', i.e. an EKS cluster with node groups.
apiVersion: apiextensions.crossplane.io/v1alpha1
kind: InfrastructureDefinition
metadata:
  name: clusters.aws.example.org
spec:
  crdSpecTemplate:
    group: aws.example.org
    version: v1alpha1
    names:
      kind: Cluster
      listKind: ClusterList
      plural: clusters
      singular: cluster
    validation:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              networkName:
                type: string
                description: Name of network for cluster.
              providerRef:
                type: object
                description: Crossplane AWS provider credentials to use.
                properties:
                  name:
                    type: string
                required:
                - name
            required:
            - providerRef
---
apiVersion: apiextensions.crossplane.io/v1alpha1
kind: Composition
metadata:
  name: clusters.aws.example.org
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  reclaimPolicy: Delete
  from:
    apiVersion: aws.example.org/v1alpha1
    kind: Cluster
  to:
  - base:
      apiVersion: identity.aws.crossplane.io/v1beta1
      kind: IAMRole
      metadata:
        labels:
          cluster-role: "true"
      spec:
        forProvider:
          description: Example EKS IAM role
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "eks.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
  - base:
      apiVersion: identity.aws.crossplane.io/v1beta1
      kind: IAMRolePolicyAttachment
      spec:
        forProvider:
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              cluster-role: "true"
          policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
  - base:
      apiVersion: identity.aws.crossplane.io/v1beta1
      kind: IAMRolePolicyAttachment
      spec:
        forProvider:
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              cluster-role: "true"
          policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
  - base:
      apiVersion: eks.aws.crossplane.io/v1beta1
      kind: Cluster
      spec:
        forProvider:
          roleArnSelector:
            matchControllerRef: true
          resourcesVpcConfig:
            publicAccessCidrs:
            - 0.0.0.0/0
            endpointPublicAccess: true
            subnetIdSelector:
              matchLabels:
                crossplane.io/composite: my-network
          version: "1.15"
        reclaimPolicy: Delete
        writeConnectionSecretToRef:
          name: cluster-conn
          namespace: default
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
    - fromFieldPath: "spec.networkName"
      toFieldPath: "spec.forProvider.resourcesVpcConfig.subnetIdSelector.matchLabels[crossplane.io/composite]"
  - base:
      apiVersion: identity.aws.crossplane.io/v1beta1
      kind: IAMRole
      metadata:
        labels:
          node-role: "true"
      spec:
        forProvider:
          description: EKS Node IAM Role
          assumeRolePolicyDocument: |
            {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "ec2.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
  - base:
      apiVersion: identity.aws.crossplane.io/v1beta1
      kind: IAMRolePolicyAttachment
      spec:
        forProvider:
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              node-role: "true"
          policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
  - base:
      apiVersion: identity.aws.crossplane.io/v1beta1
      kind: IAMRolePolicyAttachment
      spec:
        forProvider:
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              node-role: "true"
          policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
  - base:
      apiVersion: identity.aws.crossplane.io/v1beta1
      kind: IAMRolePolicyAttachment
      spec:
        forProvider:
          roleNameSelector:
            matchControllerRef: true
            matchLabels:
              node-role: "true"
          policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
        reclaimPolicy: Delete
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
  - base:
      apiVersion: eks.aws.crossplane.io/v1alpha1
      kind: NodeGroup
      spec:
        forProvider:
          clusterNameSelector:
            matchControllerRef: true
          nodeRoleSelector:
            matchControllerRef: true
            matchLabels:
              node-role: "true"
          subnetSelector:
            matchLabels:
              crossplane.io/composite: my-network
        reclaimPolicy: Delete
        writeConnectionSecretToRef:
          name: temp
          namespace: default
    patches:
    - fromFieldPath: "metadata.labels"
      toFieldPath: "metadata.labels"
    - fromFieldPath: "metadata.annotations[crossplane.io/external-name]"
      toFieldPath: "metadata.annotations[crossplane.io/external-name]"
    - fromFieldPath: "spec.providerRef.name"
      toFieldPath: "spec.providerRef.name"
    - fromFieldPath: "spec.networkName"
      toFieldPath: "spec.forProvider.subnetSelector.matchLabels[crossplane.io/composite]"