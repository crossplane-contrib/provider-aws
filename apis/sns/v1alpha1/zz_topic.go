/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

// TopicParameters defines the desired state of Topic
type TopicParameters struct {
	// Region is which region the Topic will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	DeliveryPolicy *string `json:"deliveryPolicy,omitempty"`

	DisplayName *string `json:"displayName,omitempty"`

	KMSMasterKeyID *string `json:"kmsMasterKeyID,omitempty"`

	// The name of the topic you want to create.
	//
	// Constraints: Topic names must be made up of only uppercase and lowercase
	// ASCII letters, numbers, underscores, and hyphens, and must be between 1 and
	// 256 characters long.
	//
	// For a FIFO (first-in-first-out) topic, the name must end with the .fifo suffix.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`

	Policy *string `json:"policy,omitempty"`

	// The list of tags to add to a new topic.
	//
	// To be able to tag a topic on creation, you must have the sns:CreateTopic
	// and sns:TagResource permissions.
	Tags []*Tag `json:"tags,omitempty"`

	// CustomTopicParameters includes the additional fields on top of
	// the generated ones.
	CustomTopicParameters `json:",inline"`
}

// TopicSpec defines the desired state of Topic
type TopicSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TopicParameters `json:"forProvider"`
}

// TopicObservation defines the observed state of Topic
type TopicObservation struct {
	EffectiveDeliveryPolicy *string `json:"effectiveDeliveryPolicy,omitempty"`
	Owner                   *string `json:"owner,omitempty"`
	// The Amazon Resource Name (ARN) assigned to the created topic.
	TopicARN *string `json:"topicARN,omitempty"`
}

// TopicStatus defines the observed state of Topic.
type TopicStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TopicObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Topic is the Schema for the Topics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Topic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TopicSpec   `json:"spec,omitempty"`
	Status            TopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TopicList contains a list of Topics
type TopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Topic `json:"items"`
}

// Repository type metadata.
var (
	TopicKind             = "Topic"
	TopicGroupKind        = schema.GroupKind{Group: Group, Kind: TopicKind}.String()
	TopicKindAPIVersion   = TopicKind + "." + GroupVersion.String()
	TopicGroupVersionKind = GroupVersion.WithKind(TopicKind)
)

func init() {
	SchemeBuilder.Register(&Topic{}, &TopicList{})
}
