/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

// PlatformApplicationParameters defines the desired state of PlatformApplication
type PlatformApplicationParameters struct {
	// Region is which region the PlatformApplication will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	EventDeliveryFailure *string `json:"eventDeliveryFailure,omitempty"`

	EventEndpointCreated *string `json:"eventEndpointCreated,omitempty"`

	EventEndpointDeleted *string `json:"eventEndpointDeleted,omitempty"`

	EventEndpointUpdated *string `json:"eventEndpointUpdated,omitempty"`

	FailureFeedbackRoleARN *string `json:"failureFeedbackRoleARN,omitempty"`

	// Application names must be made up of only uppercase and lowercase ASCII letters,
	// numbers, underscores, hyphens, and periods, and must be between 1 and 256
	// characters long.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`

	// The following platforms are supported: ADM (Amazon Device Messaging), APNS
	// (Apple Push Notification Service), APNS_SANDBOX, and GCM (Firebase Cloud
	// Messaging).
	// +kubebuilder:validation:Required
	Platform *string `json:"platform"`

	PlatformCredential *string `json:"platformCredential,omitempty"`

	PlatformPrincipal *string `json:"platformPrincipal,omitempty"`

	SuccessFeedbackRoleARN *string `json:"successFeedbackRoleARN,omitempty"`

	SuccessFeedbackSampleRate *string `json:"successFeedbackSampleRate,omitempty"`

	// CustomPlatformApplicationParameters includes the additional fields on top of
	// the generated ones.
	CustomPlatformApplicationParameters `json:",inline"`
}

// PlatformApplicationSpec defines the desired state of PlatformApplication
type PlatformApplicationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PlatformApplicationParameters `json:"forProvider"`
}

// PlatformApplicationObservation defines the observed state of PlatformApplication
type PlatformApplicationObservation struct {
	// PlatformApplicationArn is returned.
	PlatformApplicationARN *string `json:"platformApplicationARN,omitempty"`
}

// PlatformApplicationStatus defines the observed state of PlatformApplication.
type PlatformApplicationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PlatformApplicationObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// PlatformApplication is the Schema for the PlatformApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type PlatformApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PlatformApplicationSpec   `json:"spec,omitempty"`
	Status            PlatformApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PlatformApplicationList contains a list of PlatformApplications
type PlatformApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PlatformApplication `json:"items"`
}

// Repository type metadata.
var (
	PlatformApplicationKind             = "PlatformApplication"
	PlatformApplicationGroupKind        = schema.GroupKind{Group: Group, Kind: PlatformApplicationKind}.String()
	PlatformApplicationKindAPIVersion   = PlatformApplicationKind + "." + GroupVersion.String()
	PlatformApplicationGroupVersionKind = GroupVersion.WithKind(PlatformApplicationKind)
)

func init() {
	SchemeBuilder.Register(&PlatformApplication{}, &PlatformApplicationList{})
}
