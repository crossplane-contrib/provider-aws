/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// WorkspaceParameters defines the desired state of Workspace
type WorkspaceParameters struct {
	// Region is which region the Workspace will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// An optional user-assigned alias for this workspace. This alias is for user
	// reference and does not need to be unique.
	Alias *string `json:"alias,omitempty"`
	// Optional, user-provided tags for this workspace.
	Tags                      map[string]*string `json:"tags,omitempty"`
	CustomWorkspaceParameters `json:",inline"`
}

// WorkspaceSpec defines the desired state of Workspace
type WorkspaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WorkspaceParameters `json:"forProvider"`
}

// WorkspaceObservation defines the observed state of Workspace
type WorkspaceObservation struct {
	// The ARN of the workspace that was just created.
	ARN *string `json:"arn,omitempty"`
	// Prometheus endpoint URI.
	PrometheusEndpoint *string `json:"prometheusEndpoint,omitempty"`
	// The status of the workspace that was just created (usually CREATING).
	Status *WorkspaceStatus_SDK `json:"status,omitempty"`
	// The generated ID of the workspace that was just created.
	WorkspaceID *string `json:"workspaceID,omitempty"`
}

// WorkspaceStatus defines the observed state of Workspace.
type WorkspaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WorkspaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Workspace is the Schema for the Workspaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Workspace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkspaceSpec   `json:"spec"`
	Status            WorkspaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceList contains a list of Workspaces
type WorkspaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workspace `json:"items"`
}

// Repository type metadata.
var (
	WorkspaceKind             = "Workspace"
	WorkspaceGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkspaceKind}.String()
	WorkspaceKindAPIVersion   = WorkspaceKind + "." + GroupVersion.String()
	WorkspaceGroupVersionKind = GroupVersion.WithKind(WorkspaceKind)
)

func init() {
	SchemeBuilder.Register(&Workspace{}, &WorkspaceList{})
}
