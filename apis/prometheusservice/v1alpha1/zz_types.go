/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type AlertManagerDefinitionDescription struct {
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The alert manager definition data.
	Data []byte `json:"data,omitempty"`

	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`
	// Represents the status of a definition.
	Status *AlertManagerDefinitionStatus_SDK `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type AlertManagerDefinitionStatus_SDK struct {
	// State of an alert manager definition.
	StatusCode *string `json:"statusCode,omitempty"`

	StatusReason *string `json:"statusReason,omitempty"`
}

// +kubebuilder:skipversion
type AmpConfiguration struct {
	// An ARN identifying a Workspace.
	WorkspaceARN *string `json:"workspaceARN,omitempty"`
}

// +kubebuilder:skipversion
type Destination struct {
	// A representation of an AMP destination.
	AmpConfiguration *AmpConfiguration `json:"ampConfiguration,omitempty"`
}

// +kubebuilder:skipversion
type EKSConfiguration struct {
	// The ARN of an EKS cluster.
	ClusterARN *string `json:"clusterARN,omitempty"`
	// A list of security group IDs specified for VPC configuration.
	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`
	// A list of subnet IDs specified for VPC configuration.
	SubnetIDs []*string `json:"subnetIDs,omitempty"`
}

// +kubebuilder:skipversion
type LoggingConfigurationMetadata struct {
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`
	// A workspace ID.
	Workspace *string `json:"workspace,omitempty"`
}

// +kubebuilder:skipversion
type LoggingConfigurationStatus struct {
	StatusReason *string `json:"statusReason,omitempty"`
}

// +kubebuilder:skipversion
type RuleGroupsNamespaceDescription struct {
	// An ARN identifying a rule groups namespace.
	ARN *string `json:"arn,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The rule groups namespace data.
	Data []byte `json:"data,omitempty"`

	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`
	// The namespace name that the rule group belong to.
	Name *string `json:"name,omitempty"`
	// Represents the status of a namespace.
	Status *RuleGroupsNamespaceStatus_SDK `json:"status,omitempty"`
	// The list of tags assigned to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type RuleGroupsNamespaceStatus_SDK struct {
	// State of a namespace.
	StatusCode *string `json:"statusCode,omitempty"`

	StatusReason *string `json:"statusReason,omitempty"`
}

// +kubebuilder:skipversion
type RuleGroupsNamespaceSummary struct {
	// An ARN identifying a rule groups namespace.
	ARN *string `json:"arn,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`
	// The namespace name that the rule group belong to.
	Name *string `json:"name,omitempty"`
	// Represents the status of a namespace.
	Status *RuleGroupsNamespaceStatus_SDK `json:"status,omitempty"`
	// The list of tags assigned to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ScrapeConfiguration struct {
	ConfigurationBlob []byte `json:"configurationBlob,omitempty"`
}

// +kubebuilder:skipversion
type ScraperDescription struct {
	// A user-assigned scraper alias.
	Alias *string `json:"alias,omitempty"`
	// An ARN identifying a scrape configuration.
	ARN *string `json:"arn,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// A representation of a destination that a scraper can produce metrics to.
	Destination *Destination `json:"destination,omitempty"`

	LastModifiedAt *metav1.Time `json:"lastModifiedAt,omitempty"`
	// An ARN identifying an IAM role used by the scraper.
	RoleARN *string `json:"roleARN,omitempty"`
	// A representation of a Prometheus configuration file.
	ScrapeConfiguration *ScrapeConfiguration `json:"scrapeConfiguration,omitempty"`
	// A scraper ID.
	ScraperID *string `json:"scraperID,omitempty"`
	// A representation of a source that a scraper can discover and collect metrics
	// from.
	Source *Source `json:"source,omitempty"`
	// Represents the status of a scraper.
	Status *ScraperStatus_SDK `json:"status,omitempty"`
	// The reason for failure if any.
	StatusReason *string `json:"statusReason,omitempty"`
	// The list of tags assigned to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ScraperStatus_SDK struct {
	// State of a scraper.
	StatusCode *string `json:"statusCode,omitempty"`
}

// +kubebuilder:skipversion
type ScraperSummary struct {
	// A user-assigned scraper alias.
	Alias *string `json:"alias,omitempty"`
	// An ARN identifying a scrape configuration.
	ARN *string `json:"arn,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// A representation of a destination that a scraper can produce metrics to.
	Destination *Destination `json:"destination,omitempty"`

	LastModifiedAt *metav1.Time `json:"lastModifiedAt,omitempty"`
	// An ARN identifying an IAM role used by the scraper.
	RoleARN *string `json:"roleARN,omitempty"`
	// A scraper ID.
	ScraperID *string `json:"scraperID,omitempty"`
	// A representation of a source that a scraper can discover and collect metrics
	// from.
	Source *Source `json:"source,omitempty"`
	// Represents the status of a scraper.
	Status *ScraperStatus_SDK `json:"status,omitempty"`
	// The reason for failure if any.
	StatusReason *string `json:"statusReason,omitempty"`
	// The list of tags assigned to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type Source struct {
	// A representation of an EKS source.
	EKSConfiguration *EKSConfiguration `json:"eksConfiguration,omitempty"`
}

// +kubebuilder:skipversion
type ValidationExceptionField struct {
	Message *string `json:"message,omitempty"`

	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type WorkspaceDescription struct {
	// A user-assigned workspace alias.
	Alias *string `json:"alias,omitempty"`
	// An ARN identifying a Workspace.
	ARN *string `json:"arn,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// A KMS Key ARN.
	KMSKeyARN *string `json:"kmsKeyARN,omitempty"`

	PrometheusEndpoint *string `json:"prometheusEndpoint,omitempty"`
	// Represents the status of a workspace.
	Status *WorkspaceStatus_SDK `json:"status,omitempty"`
	// The list of tags assigned to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
	// A workspace ID.
	WorkspaceID *string `json:"workspaceID,omitempty"`
}

// +kubebuilder:skipversion
type WorkspaceStatus_SDK struct {
	// State of a workspace.
	StatusCode *string `json:"statusCode,omitempty"`
}

// +kubebuilder:skipversion
type WorkspaceSummary struct {
	// A user-assigned workspace alias.
	Alias *string `json:"alias,omitempty"`
	// An ARN identifying a Workspace.
	ARN *string `json:"arn,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// A KMS Key ARN.
	KMSKeyARN *string `json:"kmsKeyARN,omitempty"`
	// Represents the status of a workspace.
	Status *WorkspaceStatus_SDK `json:"status,omitempty"`
	// The list of tags assigned to the resource.
	Tags map[string]*string `json:"tags,omitempty"`
	// A workspace ID.
	WorkspaceID *string `json:"workspaceID,omitempty"`
}
