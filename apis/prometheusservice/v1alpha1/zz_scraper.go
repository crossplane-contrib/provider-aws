/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ScraperParameters defines the desired state of Scraper
type ScraperParameters struct {
	// Region is which region the Scraper will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// An optional user-assigned alias for this scraper. This alias is for user
	// reference and does not need to be unique.
	Alias *string `json:"alias,omitempty"`
	// Optional, unique, case-sensitive, user-provided identifier to ensure the
	// idempotency of the request.
	ClientToken *string `json:"clientToken,omitempty"`
	// The destination that the scraper will be producing metrics to.
	// +kubebuilder:validation:Required
	Destination *Destination `json:"destination"`
	// The configuration used to create the scraper.
	// +kubebuilder:validation:Required
	ScrapeConfiguration *ScrapeConfiguration `json:"scrapeConfiguration"`
	// The source that the scraper will be discovering and collecting metrics from.
	// +kubebuilder:validation:Required
	Source *Source `json:"source"`
	// Optional, user-provided tags for this scraper.
	Tags                    map[string]*string `json:"tags,omitempty"`
	CustomScraperParameters `json:",inline"`
}

// ScraperSpec defines the desired state of Scraper
type ScraperSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ScraperParameters `json:"forProvider"`
}

// ScraperObservation defines the observed state of Scraper
type ScraperObservation struct {
	// The ARN of the scraper that was just created.
	ARN *string `json:"arn,omitempty"`
	// The generated ID of the scraper that was just created.
	ScraperID *string `json:"scraperID,omitempty"`
	// The status of the scraper that was just created (usually CREATING).
	Status *ScraperStatus_SDK `json:"status,omitempty"`

	CustomScraperObservation `json:",inline"`
}

// ScraperStatus defines the observed state of Scraper.
type ScraperStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ScraperObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Scraper is the Schema for the Scrapers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Scraper struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ScraperSpec   `json:"spec"`
	Status            ScraperStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ScraperList contains a list of Scrapers
type ScraperList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Scraper `json:"items"`
}

// Repository type metadata.
var (
	ScraperKind             = "Scraper"
	ScraperGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ScraperKind}.String()
	ScraperKindAPIVersion   = ScraperKind + "." + GroupVersion.String()
	ScraperGroupVersionKind = GroupVersion.WithKind(ScraperKind)
)

func init() {
	SchemeBuilder.Register(&Scraper{}, &ScraperList{})
}
