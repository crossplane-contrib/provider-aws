/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

type DescribedSecurityPolicy struct {
	SecurityPolicyName *string `json:"securityPolicyName,omitempty"`
}

type DescribedServer struct {
	ARN *string `json:"arn,omitempty"`

	Certificate *string `json:"certificate,omitempty"`

	Domain *string `json:"domain,omitempty"`
	// The virtual private cloud (VPC) endpoint settings that are configured for
	// your file transfer protocol-enabled server. With a VPC endpoint, you can
	// restrict access to your server and resources only within your VPC. To control
	// incoming internet traffic, invoke the UpdateServer API and attach an Elastic
	// IP to your server's endpoint.
	EndpointDetails *EndpointDetails `json:"endpointDetails,omitempty"`

	EndpointType *string `json:"endpointType,omitempty"`

	HostKeyFingerprint *string `json:"hostKeyFingerprint,omitempty"`
	// Returns information related to the type of user authentication that is in
	// use for a file transfer protocol-enabled server's users. A server can have
	// only one method of authentication.
	IDentityProviderDetails *IDentityProviderDetails `json:"identityProviderDetails,omitempty"`
	// Returns information related to the type of user authentication that is in
	// use for a file transfer protocol-enabled server's users. For SERVICE_MANAGED
	// authentication, the Secure Shell (SSH) public keys are stored with a user
	// on the server instance. For API_GATEWAY authentication, your custom authentication
	// method is implemented by using an API call. The server can have only one
	// method of authentication.
	IDentityProviderType *string `json:"identityProviderType,omitempty"`

	LoggingRole *string `json:"loggingRole,omitempty"`

	Protocols []*string `json:"protocols,omitempty"`

	SecurityPolicyName *string `json:"securityPolicyName,omitempty"`

	ServerID *string `json:"serverID,omitempty"`
	// Describes the condition of a file transfer protocol-enabled server with respect
	// to its ability to perform file operations. There are six possible states:
	// OFFLINE, ONLINE, STARTING, STOPPING, START_FAILED, and STOP_FAILED.
	//
	// OFFLINE indicates that the server exists, but that it is not available for
	// file operations. ONLINE indicates that the server is available to perform
	// file operations. STARTING indicates that the server's was instantiated, but
	// the server is not yet available to perform file operations. Under normal
	// conditions, it can take a couple of minutes for the server to be completely
	// operational. Both START_FAILED and STOP_FAILED are error conditions.
	State *string `json:"state,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	UserCount *int64 `json:"userCount,omitempty"`
}

type DescribedUser struct {
	ARN *string `json:"arn,omitempty"`

	HomeDirectory *string `json:"homeDirectory,omitempty"`

	HomeDirectoryMappings []*HomeDirectoryMapEntry `json:"homeDirectoryMappings,omitempty"`

	HomeDirectoryType *string `json:"homeDirectoryType,omitempty"`

	Policy *string `json:"policy,omitempty"`

	PosixProfile *PosixProfile `json:"posixProfile,omitempty"`

	Role *string `json:"role,omitempty"`

	SshPublicKeys []*SshPublicKey `json:"sshPublicKeys,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	UserName *string `json:"userName,omitempty"`
}

type EndpointDetails struct {
	AddressAllocationIDs []*string `json:"addressAllocationIDs,omitempty"`

	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`

	SubnetIDs []*string `json:"subnetIDs,omitempty"`

	VPCEndpointID *string `json:"vpcEndpointID,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

type HomeDirectoryMapEntry struct {
	Entry *string `json:"entry,omitempty"`

	Target *string `json:"target,omitempty"`
}

type IDentityProviderDetails struct {
	InvocationRole *string `json:"invocationRole,omitempty"`

	URL *string `json:"url,omitempty"`
}

type ListedServer struct {
	ARN *string `json:"arn,omitempty"`

	Domain *string `json:"domain,omitempty"`

	EndpointType *string `json:"endpointType,omitempty"`
	// Returns information related to the type of user authentication that is in
	// use for a file transfer protocol-enabled server's users. For SERVICE_MANAGED
	// authentication, the Secure Shell (SSH) public keys are stored with a user
	// on the server instance. For API_GATEWAY authentication, your custom authentication
	// method is implemented by using an API call. The server can have only one
	// method of authentication.
	IDentityProviderType *string `json:"identityProviderType,omitempty"`

	LoggingRole *string `json:"loggingRole,omitempty"`

	ServerID *string `json:"serverID,omitempty"`
	// Describes the condition of a file transfer protocol-enabled server with respect
	// to its ability to perform file operations. There are six possible states:
	// OFFLINE, ONLINE, STARTING, STOPPING, START_FAILED, and STOP_FAILED.
	//
	// OFFLINE indicates that the server exists, but that it is not available for
	// file operations. ONLINE indicates that the server is available to perform
	// file operations. STARTING indicates that the server's was instantiated, but
	// the server is not yet available to perform file operations. Under normal
	// conditions, it can take a couple of minutes for the server to be completely
	// operational. Both START_FAILED and STOP_FAILED are error conditions.
	State *string `json:"state,omitempty"`

	UserCount *int64 `json:"userCount,omitempty"`
}

type ListedUser struct {
	ARN *string `json:"arn,omitempty"`

	HomeDirectory *string `json:"homeDirectory,omitempty"`

	HomeDirectoryType *string `json:"homeDirectoryType,omitempty"`

	Role *string `json:"role,omitempty"`

	SshPublicKeyCount *int64 `json:"sshPublicKeyCount,omitempty"`

	UserName *string `json:"userName,omitempty"`
}

type PosixProfile struct {
	Gid *int64 `json:"gid,omitempty"`

	SecondaryGids []*int64 `json:"secondaryGids,omitempty"`

	Uid *int64 `json:"uid,omitempty"`
}

type SshPublicKey struct {
	DateImported *metav1.Time `json:"dateImported,omitempty"`

	SshPublicKeyBody *string `json:"sshPublicKeyBody,omitempty"`

	SshPublicKeyID *string `json:"sshPublicKeyID,omitempty"`
}

type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}
