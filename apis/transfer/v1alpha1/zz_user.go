/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// UserParameters defines the desired state of User
type UserParameters struct {
	// Region is which region the User will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The landing directory (folder) for a user when they log in to the server
	// using the client.
	//
	// An example is your-Amazon-S3-bucket-name>/home/username .
	HomeDirectory *string `json:"homeDirectory,omitempty"`
	// Logical directory mappings that specify what Amazon S3 paths and keys should
	// be visible to your user and how you want to make them visible. You will need
	// to specify the "Entry" and "Target" pair, where Entry shows how the path
	// is made visible and Target is the actual Amazon S3 path. If you only specify
	// a target, it will be displayed as is. You will need to also make sure that
	// your IAM role provides access to paths in Target. The following is an example.
	//
	// '[ "/bucket2/documentation", { "Entry": "your-personal-report.pdf", "Target":
	// "/bucket3/customized-reports/${transfer:UserName}.pdf" } ]'
	//
	// In most cases, you can use this value instead of the scope-down policy to
	// lock your user down to the designated home directory ("chroot"). To do this,
	// you can set Entry to '/' and set Target to the HomeDirectory parameter value.
	//
	// If the target of a logical directory entry does not exist in Amazon S3, the
	// entry will be ignored. As a workaround, you can use the Amazon S3 API to
	// create 0 byte objects as place holders for your directory. If using the CLI,
	// use the s3api call instead of s3 so you can use the put-object operation.
	// For example, you use the following: aws s3api put-object --bucket bucketname
	// --key path/to/folder/. Make sure that the end of the key name ends in a '/'
	// for it to be considered a folder.
	HomeDirectoryMappings []*HomeDirectoryMapEntry `json:"homeDirectoryMappings,omitempty"`
	// The type of landing directory (folder) you want your users' home directory
	// to be when they log into the server. If you set it to PATH, the user will
	// see the absolute Amazon S3 bucket paths as is in their file transfer protocol
	// clients. If you set it LOGICAL, you will need to provide mappings in the
	// HomeDirectoryMappings for how you want to make Amazon S3 paths visible to
	// your users.
	HomeDirectoryType *string `json:"homeDirectoryType,omitempty"`
	// A scope-down policy for your user so you can use the same IAM role across
	// multiple users. This policy scopes down user access to portions of their
	// Amazon S3 bucket. Variables that you can use inside this policy include ${Transfer:UserName},
	// ${Transfer:HomeDirectory}, and ${Transfer:HomeBucket}.
	//
	// For scope-down policies, AWS Transfer Family stores the policy as a JSON
	// blob, instead of the Amazon Resource Name (ARN) of the policy. You save the
	// policy as a JSON blob and pass it in the Policy argument.
	//
	// For an example of a scope-down policy, see Creating a scope-down policy (https://docs.aws.amazon.com/transfer/latest/userguide/users.html#users-policies-scope-down).
	//
	// For more information, see AssumeRole (https://docs.aws.amazon.com/STS/latest/APIReference/API_AssumeRole.html)
	// in the AWS Security Token Service API Reference.
	Policy *string `json:"policy,omitempty"`

	PosixProfile *PosixProfile `json:"posixProfile,omitempty"`
	// The public portion of the Secure Shell (SSH) key used to authenticate the
	// user to the server.
	SshPublicKeyBody *string `json:"sshPublicKeyBody,omitempty"`
	// Key-value pairs that can be used to group and search for users. Tags are
	// metadata attached to users for any purpose.
	Tags                 []*Tag `json:"tags,omitempty"`
	CustomUserParameters `json:",inline"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       UserParameters `json:"forProvider"`
}

// UserObservation defines the observed state of User
type UserObservation struct {
	// The ID of the server that the user is attached to.
	ServerID *string `json:"serverID,omitempty"`
	// A unique string that identifies a user account associated with a server.
	UserName *string `json:"userName,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          UserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// User is the Schema for the Users API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec"`
	Status            UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	UserKind             = "User"
	UserGroupKind        = schema.GroupKind{Group: Group, Kind: UserKind}.String()
	UserKindAPIVersion   = UserKind + "." + GroupVersion.String()
	UserGroupVersionKind = GroupVersion.WithKind(UserKind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
