/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by angryjet. DO NOT EDIT.

package v1beta1

import (
	"context"
	v1beta1 "github.com/crossplane-contrib/provider-aws/apis/iam/v1beta1"
	v1alpha1 "github.com/crossplane-contrib/provider-aws/apis/kms/v1alpha1"
	v1alpha11 "github.com/crossplane-contrib/provider-aws/apis/notification/v1alpha1"
	v1beta11 "github.com/crossplane-contrib/provider-aws/apis/sqs/v1beta1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Bucket.
func (mg *Bucket) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.ServerSideEncryptionConfiguration != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ServerSideEncryptionConfiguration.Rules); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ServerSideEncryptionConfiguration.Rules[i4].ApplyServerSideEncryptionByDefault.KMSMasterKeyID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.ServerSideEncryptionConfiguration.Rules[i4].ApplyServerSideEncryptionByDefault.KMSMasterKeyIDRef,
				Selector:     mg.Spec.ForProvider.ServerSideEncryptionConfiguration.Rules[i4].ApplyServerSideEncryptionByDefault.KMSMasterKeyIDSelector,
				To: reference.To{
					List:    &v1alpha1.KeyList{},
					Managed: &v1alpha1.Key{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ServerSideEncryptionConfiguration.Rules[i4].ApplyServerSideEncryptionByDefault.KMSMasterKeyID")
			}
			mg.Spec.ForProvider.ServerSideEncryptionConfiguration.Rules[i4].ApplyServerSideEncryptionByDefault.KMSMasterKeyID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ServerSideEncryptionConfiguration.Rules[i4].ApplyServerSideEncryptionByDefault.KMSMasterKeyIDRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.LoggingConfiguration != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.LoggingConfiguration.TargetBucket),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.LoggingConfiguration.TargetBucketRef,
			Selector:     mg.Spec.ForProvider.LoggingConfiguration.TargetBucketSelector,
			To: reference.To{
				List:    &BucketList{},
				Managed: &Bucket{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.LoggingConfiguration.TargetBucket")
		}
		mg.Spec.ForProvider.LoggingConfiguration.TargetBucket = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.LoggingConfiguration.TargetBucketRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ReplicationConfiguration != nil {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ReplicationConfiguration.Role),
			Extract:      v1beta1.RoleARN(),
			Reference:    mg.Spec.ForProvider.ReplicationConfiguration.RoleRef,
			Selector:     mg.Spec.ForProvider.ReplicationConfiguration.RoleSelector,
			To: reference.To{
				List:    &v1beta1.RoleList{},
				Managed: &v1beta1.Role{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.ReplicationConfiguration.Role")
		}
		mg.Spec.ForProvider.ReplicationConfiguration.Role = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.ReplicationConfiguration.RoleRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.ReplicationConfiguration != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ReplicationConfiguration.Rules); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.Bucket),
				Extract:      BucketARN(),
				Reference:    mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.BucketRef,
				Selector:     mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.BucketSelector,
				To: reference.To{
					List:    &BucketList{},
					Managed: &Bucket{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.Bucket")
			}
			mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.Bucket = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.BucketRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.ReplicationConfiguration != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.ReplicationConfiguration.Rules); i4++ {
			if mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.EncryptionConfiguration != nil {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.EncryptionConfiguration.ReplicaKmsKeyID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.EncryptionConfiguration.ReplicaKmsKeyIDRef,
					Selector:     mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.EncryptionConfiguration.ReplicaKmsKeyIDSelector,
					To: reference.To{
						List:    &v1alpha1.KeyList{},
						Managed: &v1alpha1.Key{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.EncryptionConfiguration.ReplicaKmsKeyID")
				}
				mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.EncryptionConfiguration.ReplicaKmsKeyID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.ReplicationConfiguration.Rules[i4].Destination.EncryptionConfiguration.ReplicaKmsKeyIDRef = rsp.ResolvedReference

			}
		}
	}
	if mg.Spec.ForProvider.NotificationConfiguration != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.NotificationConfiguration.QueueConfigurations); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NotificationConfiguration.QueueConfigurations[i4].QueueArn),
				Extract:      v1beta11.QueueARN(),
				Reference:    mg.Spec.ForProvider.NotificationConfiguration.QueueConfigurations[i4].QueueArnRef,
				Selector:     mg.Spec.ForProvider.NotificationConfiguration.QueueConfigurations[i4].QueueArnSelector,
				To: reference.To{
					List:    &v1beta11.QueueList{},
					Managed: &v1beta11.Queue{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.NotificationConfiguration.QueueConfigurations[i4].QueueArn")
			}
			mg.Spec.ForProvider.NotificationConfiguration.QueueConfigurations[i4].QueueArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.NotificationConfiguration.QueueConfigurations[i4].QueueArnRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.NotificationConfiguration != nil {
		for i4 := 0; i4 < len(mg.Spec.ForProvider.NotificationConfiguration.TopicConfigurations); i4++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.NotificationConfiguration.TopicConfigurations[i4].TopicArn),
				Extract:      v1alpha11.SNSTopicARN(),
				Reference:    mg.Spec.ForProvider.NotificationConfiguration.TopicConfigurations[i4].TopicArnRef,
				Selector:     mg.Spec.ForProvider.NotificationConfiguration.TopicConfigurations[i4].TopicArnSelector,
				To: reference.To{
					List:    &v1alpha11.SNSTopicList{},
					Managed: &v1alpha11.SNSTopic{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.NotificationConfiguration.TopicConfigurations[i4].TopicArn")
			}
			mg.Spec.ForProvider.NotificationConfiguration.TopicConfigurations[i4].TopicArn = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.NotificationConfiguration.TopicConfigurations[i4].TopicArnRef = rsp.ResolvedReference

		}
	}

	return nil
}
