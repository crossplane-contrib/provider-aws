/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// OptionGroupParameters defines the desired state of OptionGroup
type OptionGroupParameters struct {
	// Region is which region the OptionGroup will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The name of the engine to associate this option group with.
	//
	// Valid Values:
	//
	//    * db2-ae
	//
	//    * db2-se
	//
	//    * mariadb
	//
	//    * mysql
	//
	//    * oracle-ee
	//
	//    * oracle-ee-cdb
	//
	//    * oracle-se2
	//
	//    * oracle-se2-cdb
	//
	//    * postgres
	//
	//    * sqlserver-ee
	//
	//    * sqlserver-se
	//
	//    * sqlserver-ex
	//
	//    * sqlserver-web
	// +kubebuilder:validation:Required
	EngineName *string `json:"engineName"`
	// Specifies the major version of the engine that this option group should be
	// associated with.
	// +kubebuilder:validation:Required
	MajorEngineVersion *string `json:"majorEngineVersion"`
	// The description of the option group.
	// +kubebuilder:validation:Required
	OptionGroupDescription *string `json:"optionGroupDescription"`
	// Tags to assign to the option group.
	Tags                        []*Tag `json:"tags,omitempty"`
	CustomOptionGroupParameters `json:",inline"`
}

// OptionGroupSpec defines the desired state of OptionGroup
type OptionGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OptionGroupParameters `json:"forProvider"`
}

// OptionGroupObservation defines the observed state of OptionGroup
type OptionGroupObservation struct {
	// Indicates whether this option group can be applied to both VPC and non-VPC
	// instances. The value true indicates the option group can be applied to both
	// VPC and non-VPC instances.
	AllowsVPCAndNonVPCInstanceMemberships *bool `json:"allowsVPCAndNonVPCInstanceMemberships,omitempty"`
	// Indicates when the option group was copied.
	CopyTimestamp *metav1.Time `json:"copyTimestamp,omitempty"`
	// Specifies the Amazon Resource Name (ARN) for the option group.
	OptionGroupARN *string `json:"optionGroupARN,omitempty"`
	// Specifies the name of the option group.
	OptionGroupName *string `json:"optionGroupName,omitempty"`
	// Indicates what options are available in the option group.
	Options []*Option `json:"options,omitempty"`
	// Specifies the Amazon Web Services account ID for the option group from which
	// this option group is copied.
	SourceAccountID *string `json:"sourceAccountID,omitempty"`
	// Specifies the name of the option group from which this option group is copied.
	SourceOptionGroup *string `json:"sourceOptionGroup,omitempty"`
	// If AllowsVpcAndNonVpcInstanceMemberships is false, this field is blank. If
	// AllowsVpcAndNonVpcInstanceMemberships is true and this field is blank, then
	// this option group can be applied to both VPC and non-VPC instances. If this
	// field contains a value, then this option group can only be applied to instances
	// that are in the VPC indicated by this field.
	VPCID *string `json:"vpcID,omitempty"`

	CustomOptionGroupObservation `json:",inline"`
}

// OptionGroupStatus defines the observed state of OptionGroup.
type OptionGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OptionGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OptionGroup is the Schema for the OptionGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type OptionGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OptionGroupSpec   `json:"spec"`
	Status            OptionGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OptionGroupList contains a list of OptionGroups
type OptionGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OptionGroup `json:"items"`
}

// Repository type metadata.
var (
	OptionGroupKind             = "OptionGroup"
	OptionGroupGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: OptionGroupKind}.String()
	OptionGroupKindAPIVersion   = OptionGroupKind + "." + GroupVersion.String()
	OptionGroupGroupVersionKind = GroupVersion.WithKind(OptionGroupKind)
)

func init() {
	SchemeBuilder.Register(&OptionGroup{}, &OptionGroupList{})
}
