/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// DBInstanceRoleAssociationParameters defines the desired state of DBInstanceRoleAssociation
type DBInstanceRoleAssociationParameters struct {
	// Region is which region the DBInstanceRoleAssociation will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The name of the feature for the DB instance that the IAM role is to be associated
	// with. For information about supported feature names, see DBEngineVersion.
	// +kubebuilder:validation:Required
	FeatureName                               *string `json:"featureName"`
	CustomDBInstanceRoleAssociationParameters `json:",inline"`
}

// DBInstanceRoleAssociationSpec defines the desired state of DBInstanceRoleAssociation
type DBInstanceRoleAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DBInstanceRoleAssociationParameters `json:"forProvider"`
}

// DBInstanceRoleAssociationObservation defines the observed state of DBInstanceRoleAssociation
type DBInstanceRoleAssociationObservation struct {
}

// DBInstanceRoleAssociationStatus defines the observed state of DBInstanceRoleAssociation.
type DBInstanceRoleAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DBInstanceRoleAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DBInstanceRoleAssociation is the Schema for the DBInstanceRoleAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DBInstanceRoleAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DBInstanceRoleAssociationSpec   `json:"spec"`
	Status            DBInstanceRoleAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DBInstanceRoleAssociationList contains a list of DBInstanceRoleAssociations
type DBInstanceRoleAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DBInstanceRoleAssociation `json:"items"`
}

// Repository type metadata.
var (
	DBInstanceRoleAssociationKind             = "DBInstanceRoleAssociation"
	DBInstanceRoleAssociationGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DBInstanceRoleAssociationKind}.String()
	DBInstanceRoleAssociationKindAPIVersion   = DBInstanceRoleAssociationKind + "." + GroupVersion.String()
	DBInstanceRoleAssociationGroupVersionKind = GroupVersion.WithKind(DBInstanceRoleAssociationKind)
)

func init() {
	SchemeBuilder.Register(&DBInstanceRoleAssociation{}, &DBInstanceRoleAssociationList{})
}
