/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// DBClusterParameters defines the desired state of DBCluster
type DBClusterParameters struct {
	// Region is which region the DBCluster will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The amount of storage in gibibytes (GiB) to allocate to each DB instance
	// in the Multi-AZ DB cluster.
	//
	// This setting is required to create a Multi-AZ DB cluster.
	//
	// Valid for: Multi-AZ DB clusters only
	AllocatedStorage *int64 `json:"allocatedStorage,omitempty"`
	// A value that indicates whether minor engine upgrades are applied automatically
	// to the DB cluster during the maintenance window. By default, minor engine
	// upgrades are applied automatically.
	//
	// Valid for: Multi-AZ DB clusters only
	AutoMinorVersionUpgrade *bool `json:"autoMinorVersionUpgrade,omitempty"`
	// A list of Availability Zones (AZs) where DB instances in the DB cluster can
	// be created.
	//
	// For information on Amazon Web Services Regions and Availability Zones, see
	// Choosing the Regions and Availability Zones (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Concepts.RegionsAndAvailabilityZones.html)
	// in the Amazon Aurora User Guide.
	//
	// Valid for: Aurora DB clusters only
	AvailabilityZones []*string `json:"availabilityZones,omitempty"`
	// The target backtrack window, in seconds. To disable backtracking, set this
	// value to 0.
	//
	// Default: 0
	//
	// Constraints:
	//
	//    * If specified, this value must be set to a number from 0 to 259,200 (72
	//    hours).
	//
	// Valid for: Aurora MySQL DB clusters only
	BacktrackWindow *int64 `json:"backtrackWindow,omitempty"`
	// The number of days for which automated backups are retained.
	//
	// Default: 1
	//
	// Constraints:
	//
	//    * Must be a value from 1 to 35
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	BackupRetentionPeriod *int64 `json:"backupRetentionPeriod,omitempty"`
	// A value that indicates that the DB cluster should be associated with the
	// specified CharacterSet.
	//
	// Valid for: Aurora DB clusters only
	CharacterSetName *string `json:"characterSetName,omitempty"`
	// A value that indicates whether to copy all tags from the DB cluster to snapshots
	// of the DB cluster. The default is not to copy them.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	CopyTagsToSnapshot *bool `json:"copyTagsToSnapshot,omitempty"`
	// The compute and memory capacity of each DB instance in the Multi-AZ DB cluster,
	// for example db.m6g.xlarge. Not all DB instance classes are available in all
	// Amazon Web Services Regions, or for all database engines.
	//
	// For the full list of DB instance classes and availability for your engine,
	// see DB instance class (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/Concepts.DBInstanceClass.html)
	// in the Amazon RDS User Guide.
	//
	// This setting is required to create a Multi-AZ DB cluster.
	//
	// Valid for: Multi-AZ DB clusters only
	DBClusterInstanceClass *string `json:"dbClusterInstanceClass,omitempty"`
	// The name of the DB cluster parameter group to associate with this DB cluster.
	// If you do not specify a value, then the default DB cluster parameter group
	// for the specified DB engine and version is used.
	//
	// Constraints:
	//
	//    * If supplied, must match the name of an existing DB cluster parameter
	//    group.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	DBClusterParameterGroupName *string `json:"dbClusterParameterGroupName,omitempty"`
	// A DB subnet group to associate with this DB cluster.
	//
	// This setting is required to create a Multi-AZ DB cluster.
	//
	// Constraints: Must match the name of an existing DBSubnetGroup. Must not be
	// default.
	//
	// Example: mydbsubnetgroup
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	DBSubnetGroupName *string `json:"dbSubnetGroupName,omitempty"`
	// The name for your database of up to 64 alphanumeric characters. If you do
	// not provide a name, Amazon RDS doesn't create a database in the DB cluster
	// you are creating.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	DatabaseName *string `json:"databaseName,omitempty"`
	// A value that indicates whether the DB cluster has deletion protection enabled.
	// The database can't be deleted when deletion protection is enabled. By default,
	// deletion protection isn't enabled.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	DeletionProtection *bool `json:"deletionProtection,omitempty"`
	// DestinationRegion is used for presigning the request to a given region.
	DestinationRegion *string `json:"destinationRegion,omitempty"`
	// The Active Directory directory ID to create the DB cluster in.
	//
	// For Amazon Aurora DB clusters, Amazon RDS can use Kerberos authentication
	// to authenticate users that connect to the DB cluster.
	//
	// For more information, see Kerberos authentication (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/kerberos-authentication.html)
	// in the Amazon Aurora User Guide.
	//
	// Valid for: Aurora DB clusters only
	Domain *string `json:"domain,omitempty"`
	// Specify the name of the IAM role to be used when making API calls to the
	// Directory Service.
	//
	// Valid for: Aurora DB clusters only
	DomainIAMRoleName *string `json:"domainIAMRoleName,omitempty"`
	// The list of log types that need to be enabled for exporting to CloudWatch
	// Logs. The values in the list depend on the DB engine being used.
	//
	// RDS for MySQL
	//
	// Possible values are error, general, and slowquery.
	//
	// RDS for PostgreSQL
	//
	// Possible values are postgresql and upgrade.
	//
	// Aurora MySQL
	//
	// Possible values are audit, error, general, and slowquery.
	//
	// Aurora PostgreSQL
	//
	// Possible value is postgresql.
	//
	// For more information about exporting CloudWatch Logs for Amazon RDS, see
	// Publishing Database Logs to Amazon CloudWatch Logs (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch)
	// in the Amazon RDS User Guide.
	//
	// For more information about exporting CloudWatch Logs for Amazon Aurora, see
	// Publishing Database Logs to Amazon CloudWatch Logs (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html#USER_LogAccess.Procedural.UploadtoCloudWatch)
	// in the Amazon Aurora User Guide.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	EnableCloudwatchLogsExports []*string `json:"enableCloudwatchLogsExports,omitempty"`
	// A value that indicates whether to enable this DB cluster to forward write
	// operations to the primary cluster of an Aurora global database (GlobalCluster).
	// By default, write operations are not allowed on Aurora DB clusters that are
	// secondary clusters in an Aurora global database.
	//
	// You can set this value only on Aurora DB clusters that are members of an
	// Aurora global database. With this parameter enabled, a secondary cluster
	// can forward writes to the current primary cluster and the resulting changes
	// are replicated back to this cluster. For the primary DB cluster of an Aurora
	// global database, this value is used immediately if the primary is demoted
	// by the FailoverGlobalCluster API operation, but it does nothing until then.
	//
	// Valid for: Aurora DB clusters only
	EnableGlobalWriteForwarding *bool `json:"enableGlobalWriteForwarding,omitempty"`
	// A value that indicates whether to enable the HTTP endpoint for an Aurora
	// Serverless v1 DB cluster. By default, the HTTP endpoint is disabled.
	//
	// When enabled, the HTTP endpoint provides a connectionless web service API
	// for running SQL queries on the Aurora Serverless v1 DB cluster. You can also
	// query your database from inside the RDS console with the query editor.
	//
	// For more information, see Using the Data API for Aurora Serverless v1 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html)
	// in the Amazon Aurora User Guide.
	//
	// Valid for: Aurora DB clusters only
	EnableHTTPEndpoint *bool `json:"enableHTTPEndpoint,omitempty"`
	// A value that indicates whether to enable mapping of Amazon Web Services Identity
	// and Access Management (IAM) accounts to database accounts. By default, mapping
	// isn't enabled.
	//
	// For more information, see IAM Database Authentication (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/UsingWithRDS.IAMDBAuth.html)
	// in the Amazon Aurora User Guide..
	//
	// Valid for: Aurora DB clusters only
	EnableIAMDatabaseAuthentication *bool `json:"enableIAMDatabaseAuthentication,omitempty"`
	// A value that indicates whether to turn on Performance Insights for the DB
	// cluster.
	//
	// For more information, see Using Amazon Performance Insights (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_PerfInsights.html)
	// in the Amazon RDS User Guide.
	//
	// Valid for: Multi-AZ DB clusters only
	EnablePerformanceInsights *bool `json:"enablePerformanceInsights,omitempty"`
	// The name of the database engine to be used for this DB cluster.
	//
	// Valid Values:
	//
	//    * aurora (for MySQL 5.6-compatible Aurora)
	//
	//    * aurora-mysql (for MySQL 5.7-compatible and MySQL 8.0-compatible Aurora)
	//
	//    * aurora-postgresql
	//
	//    * mysql
	//
	//    * postgres
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	// +kubebuilder:validation:Required
	Engine *string `json:"engine"`
	// The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery,
	// global, or multimaster.
	//
	// The parallelquery engine mode isn't required for Aurora MySQL version 1.23
	// and higher 1.x versions, and version 2.09 and higher 2.x versions.
	//
	// The global engine mode isn't required for Aurora MySQL version 1.22 and higher
	// 1.x versions, and global engine mode isn't required for any 2.x versions.
	//
	// The multimaster engine mode only applies for DB clusters created with Aurora
	// MySQL version 5.6.10a.
	//
	// For Aurora PostgreSQL, the global engine mode isn't required, and both the
	// parallelquery and the multimaster engine modes currently aren't supported.
	//
	// Limitations and requirements apply to some DB engine modes. For more information,
	// see the following sections in the Amazon Aurora User Guide:
	//
	//    * Limitations of Aurora Serverless v1 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html#aurora-serverless.limitations)
	//
	//    * Limitations of Parallel Query (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-mysql-parallel-query.html#aurora-mysql-parallel-query-limitations)
	//
	//    * Limitations of Aurora Global Databases (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-global-database.html#aurora-global-database.limitations)
	//
	//    * Limitations of Multi-Master Clusters (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-multi-master.html#aurora-multi-master-limitations)
	//
	// Valid for: Aurora DB clusters only
	EngineMode *string `json:"engineMode,omitempty"`
	// The version number of the database engine to use.
	//
	// To list all of the available engine versions for MySQL 5.6-compatible Aurora,
	// use the following command:
	//
	// aws rds describe-db-engine-versions --engine aurora --query "DBEngineVersions[].EngineVersion"
	//
	// To list all of the available engine versions for MySQL 5.7-compatible and
	// MySQL 8.0-compatible Aurora, use the following command:
	//
	// aws rds describe-db-engine-versions --engine aurora-mysql --query "DBEngineVersions[].EngineVersion"
	//
	// To list all of the available engine versions for Aurora PostgreSQL, use the
	// following command:
	//
	// aws rds describe-db-engine-versions --engine aurora-postgresql --query "DBEngineVersions[].EngineVersion"
	//
	// To list all of the available engine versions for RDS for MySQL, use the following
	// command:
	//
	// aws rds describe-db-engine-versions --engine mysql --query "DBEngineVersions[].EngineVersion"
	//
	// To list all of the available engine versions for RDS for PostgreSQL, use
	// the following command:
	//
	// aws rds describe-db-engine-versions --engine postgres --query "DBEngineVersions[].EngineVersion"
	//
	// Aurora MySQL
	//
	// For information, see MySQL on Amazon RDS Versions (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraMySQL.Updates.html)
	// in the Amazon Aurora User Guide.
	//
	// Aurora PostgreSQL
	//
	// For information, see Amazon Aurora PostgreSQL releases and engine versions
	// (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/AuroraPostgreSQL.Updates.20180305.html)
	// in the Amazon Aurora User Guide.
	//
	// MySQL
	//
	// For information, see MySQL on Amazon RDS Versions (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.VersionMgmt)
	// in the Amazon RDS User Guide.
	//
	// PostgreSQL
	//
	// For information, see Amazon RDS for PostgreSQL versions and extensions (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_PostgreSQL.html#PostgreSQL.Concepts)
	// in the Amazon RDS User Guide.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	EngineVersion *string `json:"engineVersion,omitempty"`
	// The global cluster ID of an Aurora cluster that becomes the primary cluster
	// in the new global database cluster.
	//
	// Valid for: Aurora DB clusters only
	GlobalClusterIdentifier *string `json:"globalClusterIdentifier,omitempty"`
	// The amount of Provisioned IOPS (input/output operations per second) to be
	// initially allocated for each DB instance in the Multi-AZ DB cluster.
	//
	// For information about valid Iops values, see Amazon RDS Provisioned IOPS
	// storage to improve performance (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_Storage.html#USER_PIOPS)
	// in the Amazon RDS User Guide.
	//
	// This setting is required to create a Multi-AZ DB cluster.
	//
	// Constraints: Must be a multiple between .5 and 50 of the storage amount for
	// the DB cluster.
	//
	// Valid for: Multi-AZ DB clusters only
	IOPS *int64 `json:"iops,omitempty"`
	// The Amazon Web Services KMS key identifier for an encrypted DB cluster.
	//
	// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
	// ARN, or alias name for the KMS key. To use a KMS key in a different Amazon
	// Web Services account, specify the key ARN or alias ARN.
	//
	// When a KMS key isn't specified in KmsKeyId:
	//
	//    * If ReplicationSourceIdentifier identifies an encrypted source, then
	//    Amazon RDS will use the KMS key used to encrypt the source. Otherwise,
	//    Amazon RDS will use your default KMS key.
	//
	//    * If the StorageEncrypted parameter is enabled and ReplicationSourceIdentifier
	//    isn't specified, then Amazon RDS will use your default KMS key.
	//
	// There is a default KMS key for your Amazon Web Services account. Your Amazon
	// Web Services account has a different default KMS key for each Amazon Web
	// Services Region.
	//
	// If you create a read replica of an encrypted DB cluster in another Amazon
	// Web Services Region, you must set KmsKeyId to a KMS key identifier that is
	// valid in the destination Amazon Web Services Region. This KMS key is used
	// to encrypt the read replica in that Amazon Web Services Region.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// The name of the master user for the DB cluster.
	//
	// Constraints:
	//
	//    * Must be 1 to 16 letters or numbers.
	//
	//    * First character must be a letter.
	//
	//    * Can't be a reserved word for the chosen database engine.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	MasterUsername *string `json:"masterUsername,omitempty"`
	// The interval, in seconds, between points when Enhanced Monitoring metrics
	// are collected for the DB cluster. To turn off collecting Enhanced Monitoring
	// metrics, specify 0. The default is 0.
	//
	// If MonitoringRoleArn is specified, also set MonitoringInterval to a value
	// other than 0.
	//
	// Valid Values: 0, 1, 5, 10, 15, 30, 60
	//
	// Valid for: Multi-AZ DB clusters only
	MonitoringInterval *int64 `json:"monitoringInterval,omitempty"`
	// The Amazon Resource Name (ARN) for the IAM role that permits RDS to send
	// Enhanced Monitoring metrics to Amazon CloudWatch Logs. An example is arn:aws:iam:123456789012:role/emaccess.
	// For information on creating a monitoring role, see Setting up and enabling
	// Enhanced Monitoring (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/USER_Monitoring.OS.html#USER_Monitoring.OS.Enabling)
	// in the Amazon RDS User Guide.
	//
	// If MonitoringInterval is set to a value other than 0, supply a MonitoringRoleArn
	// value.
	//
	// Valid for: Multi-AZ DB clusters only
	MonitoringRoleARN *string `json:"monitoringRoleARN,omitempty"`
	// A value that indicates that the DB cluster should be associated with the
	// specified option group.
	//
	// DB clusters are associated with a default option group that can't be modified.
	OptionGroupName *string `json:"optionGroupName,omitempty"`
	// The Amazon Web Services KMS key identifier for encryption of Performance
	// Insights data.
	//
	// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
	// ARN, or alias name for the KMS key.
	//
	// If you don't specify a value for PerformanceInsightsKMSKeyId, then Amazon
	// RDS uses your default KMS key. There is a default KMS key for your Amazon
	// Web Services account. Your Amazon Web Services account has a different default
	// KMS key for each Amazon Web Services Region.
	//
	// Valid for: Multi-AZ DB clusters only
	PerformanceInsightsKMSKeyID *string `json:"performanceInsightsKMSKeyID,omitempty"`
	// The amount of time, in days, to retain Performance Insights data. Valid values
	// are 7 or 731 (2 years).
	//
	// Valid for: Multi-AZ DB clusters only
	PerformanceInsightsRetentionPeriod *int64 `json:"performanceInsightsRetentionPeriod,omitempty"`
	// The port number on which the instances in the DB cluster accept connections.
	//
	// RDS for MySQL and Aurora MySQL
	//
	// Default: 3306
	//
	// Valid values: 1150-65535
	//
	// RDS for PostgreSQL and Aurora PostgreSQL
	//
	// Default: 5432
	//
	// Valid values: 1150-65535
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	Port *int64 `json:"port,omitempty"`
	// A URL that contains a Signature Version 4 signed request for the CreateDBCluster
	// action to be called in the source Amazon Web Services Region where the DB
	// cluster is replicated from. Specify PreSignedUrl only when you are performing
	// cross-Region replication from an encrypted DB cluster.
	//
	// The pre-signed URL must be a valid request for the CreateDBCluster API action
	// that can be executed in the source Amazon Web Services Region that contains
	// the encrypted DB cluster to be copied.
	//
	// The pre-signed URL request must contain the following parameter values:
	//
	//    * KmsKeyId - The Amazon Web Services KMS key identifier for the KMS key
	//    to use to encrypt the copy of the DB cluster in the destination Amazon
	//    Web Services Region. This should refer to the same KMS key for both the
	//    CreateDBCluster action that is called in the destination Amazon Web Services
	//    Region, and the action contained in the pre-signed URL.
	//
	//    * DestinationRegion - The name of the Amazon Web Services Region that
	//    Aurora read replica will be created in.
	//
	//    * ReplicationSourceIdentifier - The DB cluster identifier for the encrypted
	//    DB cluster to be copied. This identifier must be in the Amazon Resource
	//    Name (ARN) format for the source Amazon Web Services Region. For example,
	//    if you are copying an encrypted DB cluster from the us-west-2 Amazon Web
	//    Services Region, then your ReplicationSourceIdentifier would look like
	//    Example: arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1.
	//
	// To learn how to generate a Signature Version 4 signed request, see Authenticating
	// Requests: Using Query Parameters (Amazon Web Services Signature Version 4)
	// (https://docs.aws.amazon.com/AmazonS3/latest/API/sigv4-query-string-auth.html)
	// and Signature Version 4 Signing Process (https://docs.aws.amazon.com/general/latest/gr/signature-version-4.html).
	//
	// If you are using an Amazon Web Services SDK tool or the CLI, you can specify
	// SourceRegion (or --source-region for the CLI) instead of specifying PreSignedUrl
	// manually. Specifying SourceRegion autogenerates a pre-signed URL that is
	// a valid request for the operation that can be executed in the source Amazon
	// Web Services Region.
	//
	// Valid for: Aurora DB clusters only
	PreSignedURL *string `json:"preSignedURL,omitempty"`
	// The daily time range during which automated backups are created if automated
	// backups are enabled using the BackupRetentionPeriod parameter.
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Amazon Web Services Region. To view the time blocks available,
	// see Backup window (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/Aurora.Managing.Backups.html#Aurora.Managing.Backups.BackupWindow)
	// in the Amazon Aurora User Guide.
	//
	// Constraints:
	//
	//    * Must be in the format hh24:mi-hh24:mi.
	//
	//    * Must be in Universal Coordinated Time (UTC).
	//
	//    * Must not conflict with the preferred maintenance window.
	//
	//    * Must be at least 30 minutes.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	PreferredBackupWindow *string `json:"preferredBackupWindow,omitempty"`
	// The weekly time range during which system maintenance can occur, in Universal
	// Coordinated Time (UTC).
	//
	// Format: ddd:hh24:mi-ddd:hh24:mi
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Amazon Web Services Region, occurring on a random day of
	// the week. To see the time blocks available, see Adjusting the Preferred DB
	// Cluster Maintenance Window (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_UpgradeDBInstance.Maintenance.html#AdjustingTheMaintenanceWindow.Aurora)
	// in the Amazon Aurora User Guide.
	//
	// Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
	//
	// Constraints: Minimum 30-minute window.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`
	// A value that indicates whether the DB cluster is publicly accessible.
	//
	// When the DB cluster is publicly accessible, its Domain Name System (DNS)
	// endpoint resolves to the private IP address from within the DB cluster's
	// virtual private cloud (VPC). It resolves to the public IP address from outside
	// of the DB cluster's VPC. Access to the DB cluster is ultimately controlled
	// by the security group it uses. That public access isn't permitted if the
	// security group assigned to the DB cluster doesn't permit it.
	//
	// When the DB cluster isn't publicly accessible, it is an internal DB cluster
	// with a DNS name that resolves to a private IP address.
	//
	// Default: The default behavior varies depending on whether DBSubnetGroupName
	// is specified.
	//
	// If DBSubnetGroupName isn't specified, and PubliclyAccessible isn't specified,
	// the following applies:
	//
	//    * If the default VPC in the target Region doesn’t have an internet gateway
	//    attached to it, the DB cluster is private.
	//
	//    * If the default VPC in the target Region has an internet gateway attached
	//    to it, the DB cluster is public.
	//
	// If DBSubnetGroupName is specified, and PubliclyAccessible isn't specified,
	// the following applies:
	//
	//    * If the subnets are part of a VPC that doesn’t have an internet gateway
	//    attached to it, the DB cluster is private.
	//
	//    * If the subnets are part of a VPC that has an internet gateway attached
	//    to it, the DB cluster is public.
	//
	// Valid for: Multi-AZ DB clusters only
	PubliclyAccessible *bool `json:"publiclyAccessible,omitempty"`
	// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if
	// this DB cluster is created as a read replica.
	//
	// Valid for: Aurora DB clusters only
	ReplicationSourceIdentifier *string `json:"replicationSourceIdentifier,omitempty"`
	// For DB clusters in serverless DB engine mode, the scaling properties of the
	// DB cluster.
	//
	// Valid for: Aurora DB clusters only
	ScalingConfiguration *ScalingConfiguration `json:"scalingConfiguration,omitempty"`

	ServerlessV2ScalingConfiguration *ServerlessV2ScalingConfiguration `json:"serverlessV2ScalingConfiguration,omitempty"`
	// SourceRegion is the source region where the resource exists. This is not
	// sent over the wire and is only used for presigning. This value should always
	// have the same region as the source ARN.
	SourceRegion *string `json:"sourceRegion,omitempty"`
	// A value that indicates whether the DB cluster is encrypted.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	StorageEncrypted *bool `json:"storageEncrypted,omitempty"`
	// Specifies the storage type to be associated with the DB cluster.
	//
	// This setting is required to create a Multi-AZ DB cluster.
	//
	// Valid values: io1
	//
	// When specified, a value for the Iops parameter is required.
	//
	// Default: io1
	//
	// Valid for: Multi-AZ DB clusters only
	StorageType *string `json:"storageType,omitempty"`
	// Tags to assign to the DB cluster.
	//
	// Valid for: Aurora DB clusters and Multi-AZ DB clusters
	Tags                      []*Tag `json:"tags,omitempty"`
	CustomDBClusterParameters `json:",inline"`
}

// DBClusterSpec defines the desired state of DBCluster
type DBClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DBClusterParameters `json:"forProvider"`
}

// DBClusterObservation defines the observed state of DBCluster
type DBClusterObservation struct {
	// The name of the Amazon Kinesis data stream used for the database activity
	// stream.
	ActivityStreamKinesisStreamName *string `json:"activityStreamKinesisStreamName,omitempty"`
	// The Amazon Web Services KMS key identifier used for encrypting messages in
	// the database activity stream.
	//
	// The Amazon Web Services KMS key identifier is the key ARN, key ID, alias
	// ARN, or alias name for the KMS key.
	ActivityStreamKMSKeyID *string `json:"activityStreamKMSKeyID,omitempty"`
	// The mode of the database activity stream. Database events such as a change
	// or access generate an activity stream event. The database session can handle
	// these events either synchronously or asynchronously.
	ActivityStreamMode *string `json:"activityStreamMode,omitempty"`
	// The status of the database activity stream.
	ActivityStreamStatus *string `json:"activityStreamStatus,omitempty"`
	// Provides a list of the Amazon Web Services Identity and Access Management
	// (IAM) roles that are associated with the DB cluster. IAM roles that are associated
	// with a DB cluster grant permission for the DB cluster to access other Amazon
	// Web Services on your behalf.
	AssociatedRoles []*DBClusterRole `json:"associatedRoles,omitempty"`
	// The time when a stopped DB cluster is restarted automatically.
	AutomaticRestartTime *metav1.Time `json:"automaticRestartTime,omitempty"`
	// The number of change records stored for Backtrack.
	BacktrackConsumedChangeRecords *int64 `json:"backtrackConsumedChangeRecords,omitempty"`
	// The current capacity of an Aurora Serverless v1 DB cluster. The capacity
	// is 0 (zero) when the cluster is paused.
	//
	// For more information about Aurora Serverless v1, see Using Amazon Aurora
	// Serverless v1 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/aurora-serverless.html)
	// in the Amazon Aurora User Guide.
	Capacity *int64 `json:"capacity,omitempty"`
	// Identifies the clone group to which the DB cluster is associated.
	CloneGroupID *string `json:"cloneGroupID,omitempty"`
	// Specifies the time when the DB cluster was created, in Universal Coordinated
	// Time (UTC).
	ClusterCreateTime *metav1.Time `json:"clusterCreateTime,omitempty"`
	// Specifies whether the DB cluster is a clone of a DB cluster owned by a different
	// Amazon Web Services account.
	CrossAccountClone *bool `json:"crossAccountClone,omitempty"`
	// Identifies all custom endpoints associated with the cluster.
	CustomEndpoints []*string `json:"customEndpoints,omitempty"`
	// The Amazon Resource Name (ARN) for the DB cluster.
	DBClusterARN *string `json:"dbClusterARN,omitempty"`
	// Contains a user-supplied DB cluster identifier. This identifier is the unique
	// key that identifies a DB cluster.
	DBClusterIdentifier *string `json:"dbClusterIdentifier,omitempty"`
	// Provides the list of instances that make up the DB cluster.
	DBClusterMembers []*DBClusterMember `json:"dbClusterMembers,omitempty"`
	// Provides the list of option group memberships for this DB cluster.
	DBClusterOptionGroupMemberships []*DBClusterOptionGroupStatus `json:"dbClusterOptionGroupMemberships,omitempty"`
	// Specifies the name of the DB cluster parameter group for the DB cluster.
	DBClusterParameterGroup *string `json:"dbClusterParameterGroup,omitempty"`
	// Specifies information on the subnet group associated with the DB cluster,
	// including the name, description, and subnets in the subnet group.
	DBSubnetGroup *string `json:"dbSubnetGroup,omitempty"`
	// The Amazon Web Services Region-unique, immutable identifier for the DB cluster.
	// This identifier is found in Amazon Web Services CloudTrail log entries whenever
	// the KMS key for the DB cluster is accessed.
	DBClusterResourceID *string `json:"dbClusterResourceID,omitempty"`
	// The Active Directory Domain membership records associated with the DB cluster.
	DomainMemberships []*DomainMembership `json:"domainMemberships,omitempty"`
	// The earliest time to which a DB cluster can be backtracked.
	EarliestBacktrackTime *metav1.Time `json:"earliestBacktrackTime,omitempty"`
	// The earliest time to which a database can be restored with point-in-time
	// restore.
	EarliestRestorableTime *metav1.Time `json:"earliestRestorableTime,omitempty"`
	// A list of log types that this DB cluster is configured to export to CloudWatch
	// Logs.
	//
	// Log types vary by DB engine. For information about the log types for each
	// DB engine, see Amazon RDS Database Log Files (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/USER_LogAccess.html)
	// in the Amazon Aurora User Guide.
	EnabledCloudwatchLogsExports []*string `json:"enabledCloudwatchLogsExports,omitempty"`
	// Specifies the connection endpoint for the primary instance of the DB cluster.
	Endpoint *string `json:"endpoint,omitempty"`
	// Specifies whether you have requested to enable write forwarding for a secondary
	// cluster in an Aurora global database. Because write forwarding takes time
	// to enable, check the value of GlobalWriteForwardingStatus to confirm that
	// the request has completed before using the write forwarding feature for this
	// cluster.
	GlobalWriteForwardingRequested *bool `json:"globalWriteForwardingRequested,omitempty"`
	// Specifies whether a secondary cluster in an Aurora global database has write
	// forwarding enabled, not enabled, or is in the process of enabling it.
	GlobalWriteForwardingStatus *string `json:"globalWriteForwardingStatus,omitempty"`
	// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
	HostedZoneID *string `json:"hostedZoneID,omitempty"`
	// A value that indicates whether the HTTP endpoint for an Aurora Serverless
	// v1 DB cluster is enabled.
	//
	// When enabled, the HTTP endpoint provides a connectionless web service API
	// for running SQL queries on the Aurora Serverless v1 DB cluster. You can also
	// query your database from inside the RDS console with the query editor.
	//
	// For more information, see Using the Data API for Aurora Serverless v1 (https://docs.aws.amazon.com/AmazonRDS/latest/AuroraUserGuide/data-api.html)
	// in the Amazon Aurora User Guide.
	HTTPEndpointEnabled *bool `json:"httpEndpointEnabled,omitempty"`
	// A value that indicates whether the mapping of Amazon Web Services Identity
	// and Access Management (IAM) accounts to database accounts is enabled.
	IAMDatabaseAuthenticationEnabled *bool `json:"iamDatabaseAuthenticationEnabled,omitempty"`
	// Specifies the latest time to which a database can be restored with point-in-time
	// restore.
	LatestRestorableTime *metav1.Time `json:"latestRestorableTime,omitempty"`
	// Specifies whether the DB cluster has instances in multiple Availability Zones.
	MultiAZ *bool `json:"multiAZ,omitempty"`
	// Specifies the progress of the operation as a percentage.
	PercentProgress *string `json:"percentProgress,omitempty"`
	// True if Performance Insights is enabled for the DB cluster, and otherwise
	// false.
	//
	// This setting is only for non-Aurora Multi-AZ DB clusters.
	PerformanceInsightsEnabled *bool `json:"performanceInsightsEnabled,omitempty"`
	// Contains one or more identifiers of the read replicas associated with this
	// DB cluster.
	ReadReplicaIdentifiers []*string `json:"readReplicaIdentifiers,omitempty"`
	// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster
	// load-balances connections across the Aurora Replicas that are available in
	// a DB cluster. As clients request new connections to the reader endpoint,
	// Aurora distributes the connection requests among the Aurora Replicas in the
	// DB cluster. This functionality can help balance your read workload across
	// multiple Aurora Replicas in your DB cluster.
	//
	// If a failover occurs, and the Aurora Replica that you are connected to is
	// promoted to be the primary instance, your connection is dropped. To continue
	// sending your read workload to other Aurora Replicas in the cluster, you can
	// then reconnect to the reader endpoint.
	ReaderEndpoint *string `json:"readerEndpoint,omitempty"`

	ScalingConfigurationInfo *ScalingConfigurationInfo `json:"scalingConfigurationInfo,omitempty"`
	// Specifies the current state of this DB cluster.
	Status *string `json:"status,omitempty"`

	TagList []*Tag `json:"tagList,omitempty"`
	// Provides a list of VPC security groups that the DB cluster belongs to.
	VPCSecurityGroups []*VPCSecurityGroupMembership `json:"vpcSecurityGroups,omitempty"`
}

// DBClusterStatus defines the observed state of DBCluster.
type DBClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DBClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DBCluster is the Schema for the DBClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DBCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DBClusterSpec   `json:"spec"`
	Status            DBClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DBClusterList contains a list of DBClusters
type DBClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DBCluster `json:"items"`
}

// Repository type metadata.
var (
	DBClusterKind             = "DBCluster"
	DBClusterGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DBClusterKind}.String()
	DBClusterKindAPIVersion   = DBClusterKind + "." + GroupVersion.String()
	DBClusterGroupVersionKind = GroupVersion.WithKind(DBClusterKind)
)

func init() {
	SchemeBuilder.Register(&DBCluster{}, &DBClusterList{})
}
