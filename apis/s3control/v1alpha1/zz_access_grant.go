/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// AccessGrantParameters defines the desired state of AccessGrant
type AccessGrantParameters struct {
	// Region is which region the AccessGrant will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The configuration options of the grant location. The grant location is the
	// S3 path to the data to which you are granting access. It contains the S3SubPrefix
	// field. The grant scope is the result of appending the subprefix to the location
	// scope of the registered location.
	AccessGrantsLocationConfiguration *AccessGrantsLocationConfiguration `json:"accessGrantsLocationConfiguration,omitempty"`
	// The ID of the registered location to which you are granting access. S3 Access
	// Grants assigns this ID when you register the location. S3 Access Grants assigns
	// the ID default to the default location s3:// and assigns an auto-generated
	// ID to other locations that you register.
	//
	// If you are passing the default location, you cannot create an access grant
	// for the entire default location. You must also specify a bucket or a bucket
	// and prefix in the Subprefix field.
	// +kubebuilder:validation:Required
	AccessGrantsLocationID *string `json:"accessGrantsLocationID"`
	// The ID of the Amazon Web Services account that is making this request.
	// +kubebuilder:validation:Required
	AccountID *string `json:"accountID"`
	// The Amazon Resource Name (ARN) of an Amazon Web Services IAM Identity Center
	// application associated with your Identity Center instance. If an application
	// ARN is included in the request to create an access grant, the grantee can
	// only access the S3 data through this application.
	ApplicationARN *string `json:"applicationARN,omitempty"`
	// The user, group, or role to which you are granting access. You can grant
	// access to an IAM user or role. If you have added your corporate directory
	// to Amazon Web Services IAM Identity Center and associated your Identity Center
	// instance with your S3 Access Grants instance, the grantee can also be a corporate
	// directory user or group.
	// +kubebuilder:validation:Required
	Grantee *Grantee `json:"grantee"`
	// The type of access that you are granting to your S3 data, which can be set
	// to one of the following values:
	//
	//    * READ – Grant read-only access to the S3 data.
	//
	//    * WRITE – Grant write-only access to the S3 data.
	//
	//    * READWRITE – Grant both read and write access to the S3 data.
	// +kubebuilder:validation:Required
	Permission *string `json:"permission"`
	// The type of S3SubPrefix. The only possible value is Object. Pass this value
	// if the access grant scope is an object. Do not pass this value if the access
	// grant scope is a bucket or a bucket and a prefix.
	S3PrefixType *string `json:"s3PrefixType,omitempty"`
	// The Amazon Web Services resource tags that you are adding to the access grant.
	// Each tag is a label consisting of a user-defined key and value. Tags can
	// help you manage, identify, organize, search for, and filter resources.
	Tags                        []*Tag `json:"tags,omitempty"`
	CustomAccessGrantParameters `json:",inline"`
}

// AccessGrantSpec defines the desired state of AccessGrant
type AccessGrantSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AccessGrantParameters `json:"forProvider"`
}

// AccessGrantObservation defines the observed state of AccessGrant
type AccessGrantObservation struct {
	// The Amazon Resource Name (ARN) of the access grant.
	AccessGrantARN *string `json:"accessGrantARN,omitempty"`
	// The ID of the access grant. S3 Access Grants auto-generates this ID when
	// you create the access grant.
	AccessGrantID *string `json:"accessGrantID,omitempty"`
	// The date and time when you created the access grant.
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The S3 path of the data to which you are granting access. It is the result
	// of appending the Subprefix to the location scope.
	GrantScope *string `json:"grantScope,omitempty"`

	CustomAccessGrantObservation `json:",inline"`
}

// AccessGrantStatus defines the observed state of AccessGrant.
type AccessGrantStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AccessGrantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessGrant is the Schema for the AccessGrants API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AccessGrant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessGrantSpec   `json:"spec"`
	Status            AccessGrantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessGrantList contains a list of AccessGrants
type AccessGrantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessGrant `json:"items"`
}

// Repository type metadata.
var (
	AccessGrantKind             = "AccessGrant"
	AccessGrantGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessGrantKind}.String()
	AccessGrantKindAPIVersion   = AccessGrantKind + "." + GroupVersion.String()
	AccessGrantGroupVersionKind = GroupVersion.WithKind(AccessGrantKind)
)

func init() {
	SchemeBuilder.Register(&AccessGrant{}, &AccessGrantList{})
}
