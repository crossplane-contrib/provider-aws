/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// StorageLensGroupParameters defines the desired state of StorageLensGroup
type StorageLensGroupParameters struct {
	// Region is which region the StorageLensGroup will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The Amazon Web Services account ID that the Storage Lens group is created
	// from and associated with.
	// +kubebuilder:validation:Required
	AccountID *string `json:"accountID"`
	// The Storage Lens group configuration.
	// +kubebuilder:validation:Required
	StorageLensGroup *StorageLensGroup_SDK `json:"storageLensGroup"`
	// The Amazon Web Services resource tags that you're adding to your Storage
	// Lens group. This parameter is optional.
	Tags                             []*Tag `json:"tags,omitempty"`
	CustomStorageLensGroupParameters `json:",inline"`
}

// StorageLensGroupSpec defines the desired state of StorageLensGroup
type StorageLensGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       StorageLensGroupParameters `json:"forProvider"`
}

// StorageLensGroupObservation defines the observed state of StorageLensGroup
type StorageLensGroupObservation struct {
	CustomStorageLensGroupObservation `json:",inline"`
}

// StorageLensGroupStatus defines the observed state of StorageLensGroup.
type StorageLensGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          StorageLensGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StorageLensGroup is the Schema for the StorageLensGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type StorageLensGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StorageLensGroupSpec   `json:"spec"`
	Status            StorageLensGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StorageLensGroupList contains a list of StorageLensGroups
type StorageLensGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StorageLensGroup `json:"items"`
}

// Repository type metadata.
var (
	StorageLensGroupKind             = "StorageLensGroup"
	StorageLensGroupGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StorageLensGroupKind}.String()
	StorageLensGroupKindAPIVersion   = StorageLensGroupKind + "." + GroupVersion.String()
	StorageLensGroupGroupVersionKind = GroupVersion.WithKind(StorageLensGroupKind)
)

func init() {
	SchemeBuilder.Register(&StorageLensGroup{}, &StorageLensGroupList{})
}
