/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type AccessGrantsLocationConfiguration struct {
	S3SubPrefix *string `json:"s3SubPrefix,omitempty"`
}

// +kubebuilder:skipversion
type AccessPoint_SDK struct {
	AccessPointARN *string `json:"accessPointARN,omitempty"`

	Alias *string `json:"alias,omitempty"`

	Bucket *string `json:"bucket,omitempty"`

	BucketAccountID *string `json:"bucketAccountID,omitempty"`

	Name *string `json:"name,omitempty"`

	NetworkOrigin *string `json:"networkOrigin,omitempty"`
	// The virtual private cloud (VPC) configuration for an access point.
	VPCConfiguration *VPCConfiguration `json:"vpcConfiguration,omitempty"`
}

// +kubebuilder:skipversion
type CreateMultiRegionAccessPointInput struct {
	// The PublicAccessBlock configuration that you want to apply to this Amazon
	// S3 account. You can enable the configuration options in any combination.
	// For more information about when Amazon S3 considers a bucket or object public,
	// see The Meaning of "Public" (https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status)
	// in the Amazon S3 User Guide.
	//
	// This data type is not supported for Amazon S3 on Outposts.
	PublicAccessBlock *PublicAccessBlockConfiguration `json:"publicAccessBlock,omitempty"`
}

// +kubebuilder:skipversion
type Destination struct {
	Account *string `json:"account,omitempty"`
}

// +kubebuilder:skipversion
type Grantee struct {
	GranteeIdentifier *string `json:"granteeIdentifier,omitempty"`

	GranteeType *string `json:"granteeType,omitempty"`
}

// +kubebuilder:skipversion
type JobDescriptor struct {
	RoleARN *string `json:"roleARN,omitempty"`
}

// +kubebuilder:skipversion
type JobManifestLocation struct {
	ETag *string `json:"eTag,omitempty"`
}

// +kubebuilder:skipversion
type LifecycleRuleAndOperator struct {
	Prefix *string `json:"prefix,omitempty"`
}

// +kubebuilder:skipversion
type LifecycleRuleFilter struct {
	Prefix *string `json:"prefix,omitempty"`
	// A container for a key-value name pair.
	Tag *S3Tag `json:"tag,omitempty"`
}

// +kubebuilder:skipversion
type ListAccessGrantEntry struct {
	AccessGrantARN *string `json:"accessGrantARN,omitempty"`

	AccessGrantID *string `json:"accessGrantID,omitempty"`
	// The configuration options of the S3 Access Grants location. It contains the
	// S3SubPrefix field. The grant scope, the data to which you are granting access,
	// is the result of appending the Subprefix field to the scope of the registered
	// location.
	AccessGrantsLocationConfiguration *AccessGrantsLocationConfiguration `json:"accessGrantsLocationConfiguration,omitempty"`

	AccessGrantsLocationID *string `json:"accessGrantsLocationID,omitempty"`

	ApplicationARN *string `json:"applicationARN,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	GrantScope *string `json:"grantScope,omitempty"`
	// The user, group, or role to which you are granting access. You can grant
	// access to an IAM user or role. If you have added your corporate directory
	// to Amazon Web Services IAM Identity Center and associated your Identity Center
	// instance with your S3 Access Grants instance, the grantee can also be a corporate
	// directory user or group.
	Grantee *Grantee `json:"grantee,omitempty"`

	Permission *string `json:"permission,omitempty"`
}

// +kubebuilder:skipversion
type ListAccessGrantsInstanceEntry struct {
	AccessGrantsInstanceARN *string `json:"accessGrantsInstanceARN,omitempty"`

	AccessGrantsInstanceID *string `json:"accessGrantsInstanceID,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	IdentityCenterARN *string `json:"identityCenterARN,omitempty"`
}

// +kubebuilder:skipversion
type ListAccessGrantsLocationsEntry struct {
	AccessGrantsLocationARN *string `json:"accessGrantsLocationARN,omitempty"`

	AccessGrantsLocationID *string `json:"accessGrantsLocationID,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	IAMRoleARN *string `json:"iamRoleARN,omitempty"`

	LocationScope *string `json:"locationScope,omitempty"`
}

// +kubebuilder:skipversion
type ListStorageLensConfigurationEntry struct {
	HomeRegion *string `json:"homeRegion,omitempty"`
}

// +kubebuilder:skipversion
type ListStorageLensGroupEntry struct {
	HomeRegion *string `json:"homeRegion,omitempty"`

	Name *string `json:"name,omitempty"`

	StorageLensGroupARN *string `json:"storageLensGroupARN,omitempty"`
}

// +kubebuilder:skipversion
type MatchObjectAge struct {
	DaysGreaterThan *int64 `json:"daysGreaterThan,omitempty"`

	DaysLessThan *int64 `json:"daysLessThan,omitempty"`
}

// +kubebuilder:skipversion
type MatchObjectSize struct {
	BytesGreaterThan *int64 `json:"bytesGreaterThan,omitempty"`

	BytesLessThan *int64 `json:"bytesLessThan,omitempty"`
}

// +kubebuilder:skipversion
type MultiRegionAccessPointReport struct {
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The PublicAccessBlock configuration that you want to apply to this Amazon
	// S3 account. You can enable the configuration options in any combination.
	// For more information about when Amazon S3 considers a bucket or object public,
	// see The Meaning of "Public" (https://docs.aws.amazon.com/AmazonS3/latest/dev/access-control-block-public-access.html#access-control-block-public-access-policy-status)
	// in the Amazon S3 User Guide.
	//
	// This data type is not supported for Amazon S3 on Outposts.
	PublicAccessBlock *PublicAccessBlockConfiguration `json:"publicAccessBlock,omitempty"`
}

// +kubebuilder:skipversion
type MultiRegionAccessPointRoute struct {
	Bucket *string `json:"bucket,omitempty"`
}

// +kubebuilder:skipversion
type PublicAccessBlockConfiguration struct {
	BlockPublicACLs *bool `json:"blockPublicACLs,omitempty"`

	BlockPublicPolicy *bool `json:"blockPublicPolicy,omitempty"`

	IgnorePublicACLs *bool `json:"ignorePublicACLs,omitempty"`

	RestrictPublicBuckets *bool `json:"restrictPublicBuckets,omitempty"`
}

// +kubebuilder:skipversion
type Region struct {
	Bucket *string `json:"bucket,omitempty"`

	BucketAccountID *string `json:"bucketAccountID,omitempty"`
}

// +kubebuilder:skipversion
type RegionReport struct {
	Bucket *string `json:"bucket,omitempty"`

	BucketAccountID *string `json:"bucketAccountID,omitempty"`
}

// +kubebuilder:skipversion
type RegionalBucket struct {
	Bucket *string `json:"bucket,omitempty"`

	CreationDate *metav1.Time `json:"creationDate,omitempty"`
}

// +kubebuilder:skipversion
type ReplicationRule struct {
	Prefix *string `json:"prefix,omitempty"`
}

// +kubebuilder:skipversion
type ReplicationRuleAndOperator struct {
	Prefix *string `json:"prefix,omitempty"`
}

// +kubebuilder:skipversion
type ReplicationRuleFilter struct {
	Prefix *string `json:"prefix,omitempty"`
	// A container for a key-value name pair.
	Tag *S3Tag `json:"tag,omitempty"`
}

// +kubebuilder:skipversion
type S3BucketDestination struct {
	AccountID *string `json:"accountID,omitempty"`

	Prefix *string `json:"prefix,omitempty"`
}

// +kubebuilder:skipversion
type S3CopyObjectOperation struct {
	TargetKeyPrefix *string `json:"targetKeyPrefix,omitempty"`
}

// +kubebuilder:skipversion
type S3Grantee struct {
	DisplayName *string `json:"displayName,omitempty"`

	Identifier *string `json:"identifier,omitempty"`
}

// +kubebuilder:skipversion
type S3JobManifestGenerator struct {
	ExpectedBucketOwner *string `json:"expectedBucketOwner,omitempty"`
}

// +kubebuilder:skipversion
type S3ManifestOutputLocation struct {
	ExpectedManifestBucketOwner *string `json:"expectedManifestBucketOwner,omitempty"`
}

// +kubebuilder:skipversion
type S3ObjectMetadata struct {
	CacheControl *string `json:"cacheControl,omitempty"`

	ContentDisposition *string `json:"contentDisposition,omitempty"`

	ContentEncoding *string `json:"contentEncoding,omitempty"`

	ContentLanguage *string `json:"contentLanguage,omitempty"`

	ContentMD5 *string `json:"contentMD5,omitempty"`

	ContentType *string `json:"contentType,omitempty"`
}

// +kubebuilder:skipversion
type S3ObjectOwner struct {
	DisplayName *string `json:"displayName,omitempty"`

	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type S3Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type StorageLensGroupAndOperator struct {
	MatchAnyPrefix []*string `json:"matchAnyPrefix,omitempty"`

	MatchAnySuffix []*string `json:"matchAnySuffix,omitempty"`

	MatchAnyTag []*S3Tag `json:"matchAnyTag,omitempty"`
	// A filter condition that specifies the object age range of included objects
	// in days. Only integers are supported.
	MatchObjectAge *MatchObjectAge `json:"matchObjectAge,omitempty"`
	// A filter condition that specifies the object size range of included objects
	// in bytes. Only integers are supported.
	MatchObjectSize *MatchObjectSize `json:"matchObjectSize,omitempty"`
}

// +kubebuilder:skipversion
type StorageLensGroupFilter struct {
	// A logical operator that allows multiple filter conditions to be joined for
	// more complex comparisons of Storage Lens group data.
	And *StorageLensGroupAndOperator `json:"and,omitempty"`

	MatchAnyPrefix []*string `json:"matchAnyPrefix,omitempty"`

	MatchAnySuffix []*string `json:"matchAnySuffix,omitempty"`

	MatchAnyTag []*S3Tag `json:"matchAnyTag,omitempty"`
	// A filter condition that specifies the object age range of included objects
	// in days. Only integers are supported.
	MatchObjectAge *MatchObjectAge `json:"matchObjectAge,omitempty"`
	// A filter condition that specifies the object size range of included objects
	// in bytes. Only integers are supported.
	MatchObjectSize *MatchObjectSize `json:"matchObjectSize,omitempty"`
	// A container element for specifying Or rule conditions. The rule conditions
	// determine the subset of objects to which the Or rule applies. Objects can
	// match any of the listed filter conditions, which are joined by the Or logical
	// operator. Only one of each filter condition is allowed.
	Or *StorageLensGroupOrOperator `json:"or,omitempty"`
}

// +kubebuilder:skipversion
type StorageLensGroupOrOperator struct {
	MatchAnyPrefix []*string `json:"matchAnyPrefix,omitempty"`

	MatchAnySuffix []*string `json:"matchAnySuffix,omitempty"`

	MatchAnyTag []*S3Tag `json:"matchAnyTag,omitempty"`
	// A filter condition that specifies the object age range of included objects
	// in days. Only integers are supported.
	MatchObjectAge *MatchObjectAge `json:"matchObjectAge,omitempty"`
	// A filter condition that specifies the object size range of included objects
	// in bytes. Only integers are supported.
	MatchObjectSize *MatchObjectSize `json:"matchObjectSize,omitempty"`
}

// +kubebuilder:skipversion
type StorageLensGroup_SDK struct {
	// The filter element sets the criteria for the Storage Lens group data that
	// is displayed. For multiple filter conditions, the AND or OR logical operator
	// is used.
	Filter *StorageLensGroupFilter `json:"filter,omitempty"`

	Name *string `json:"name,omitempty"`

	StorageLensGroupARN *string `json:"storageLensGroupARN,omitempty"`
}

// +kubebuilder:skipversion
type StorageLensTag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type VPCConfiguration struct {
	VPCID *string `json:"vpcID,omitempty"`
}
