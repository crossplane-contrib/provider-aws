/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// AccessGrantsLocationParameters defines the desired state of AccessGrantsLocation
type AccessGrantsLocationParameters struct {
	// Region is which region the AccessGrantsLocation will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The ID of the Amazon Web Services account that is making this request.
	// +kubebuilder:validation:Required
	AccountID *string `json:"accountID"`
	// The Amazon Resource Name (ARN) of the IAM role for the registered location.
	// S3 Access Grants assumes this role to manage access to the registered location.
	// +kubebuilder:validation:Required
	IAMRoleARN *string `json:"iamRoleARN"`
	// The S3 path to the location that you are registering. The location scope
	// can be the default S3 location s3://, the S3 path to a bucket s3://<bucket>,
	// or the S3 path to a bucket and prefix s3://<bucket>/<prefix>. A prefix in
	// S3 is a string of characters at the beginning of an object key name used
	// to organize the objects that you store in your S3 buckets. For example, object
	// key names that start with the engineering/ prefix or object key names that
	// start with the marketing/campaigns/ prefix.
	// +kubebuilder:validation:Required
	LocationScope *string `json:"locationScope"`
	// The Amazon Web Services resource tags that you are adding to the S3 Access
	// Grants location. Each tag is a label consisting of a user-defined key and
	// value. Tags can help you manage, identify, organize, search for, and filter
	// resources.
	Tags                                 []*Tag `json:"tags,omitempty"`
	CustomAccessGrantsLocationParameters `json:",inline"`
}

// AccessGrantsLocationSpec defines the desired state of AccessGrantsLocation
type AccessGrantsLocationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AccessGrantsLocationParameters `json:"forProvider"`
}

// AccessGrantsLocationObservation defines the observed state of AccessGrantsLocation
type AccessGrantsLocationObservation struct {
	// The Amazon Resource Name (ARN) of the location you are registering.
	AccessGrantsLocationARN *string `json:"accessGrantsLocationARN,omitempty"`
	// The ID of the registered location to which you are granting access. S3 Access
	// Grants assigns this ID when you register the location. S3 Access Grants assigns
	// the ID default to the default location s3:// and assigns an auto-generated
	// ID to other locations that you register.
	AccessGrantsLocationID *string `json:"accessGrantsLocationID,omitempty"`
	// The date and time when you registered the location.
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	CustomAccessGrantsLocationObservation `json:",inline"`
}

// AccessGrantsLocationStatus defines the observed state of AccessGrantsLocation.
type AccessGrantsLocationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AccessGrantsLocationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AccessGrantsLocation is the Schema for the AccessGrantsLocations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AccessGrantsLocation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AccessGrantsLocationSpec   `json:"spec"`
	Status            AccessGrantsLocationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AccessGrantsLocationList contains a list of AccessGrantsLocations
type AccessGrantsLocationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AccessGrantsLocation `json:"items"`
}

// Repository type metadata.
var (
	AccessGrantsLocationKind             = "AccessGrantsLocation"
	AccessGrantsLocationGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AccessGrantsLocationKind}.String()
	AccessGrantsLocationKindAPIVersion   = AccessGrantsLocationKind + "." + GroupVersion.String()
	AccessGrantsLocationGroupVersionKind = GroupVersion.WithKind(AccessGrantsLocationKind)
)

func init() {
	SchemeBuilder.Register(&AccessGrantsLocation{}, &AccessGrantsLocationList{})
}
