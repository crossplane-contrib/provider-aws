/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// UserProfileParameters defines the desired state of UserProfile
type UserProfileParameters struct {
	// Region is which region the UserProfile will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The ID of the associated Domain.
	DomainID *string `json:"domainID,omitempty"`

	// DomainIDRef is a reference to an sagemaker/v1alpha1/Domain used
	// to set the DomainID field.
	// +optional
	DomainIDRef *xpv1.Reference `json:"domainIDRef,omitempty"`

	// DomainIDSelector selects references to sagemaker/v1alpha1/Domain
	// used to set the DomainID.
	// +optional
	DomainIDSelector *xpv1.Selector `json:"domainIDSelector,omitempty"`

	// A specifier for the type of value specified in SingleSignOnUserValue. Currently,
	// the only supported value is "UserName". If the Domain's AuthMode is SSO,
	// this field is required. If the Domain's AuthMode is not SSO, this field cannot
	// be specified.
	SingleSignOnUserIdentifier *string `json:"singleSignOnUserIdentifier,omitempty"`

	// The username of the associated AWS Single Sign-On User for this UserProfile.
	// If the Domain's AuthMode is SSO, this field is required, and must match a
	// valid username of a user in your directory. If the Domain's AuthMode is not
	// SSO, this field cannot be specified.
	SingleSignOnUserValue *string `json:"singleSignOnUserValue,omitempty"`

	// Each tag consists of a key and an optional value. Tag keys must be unique
	// per resource.
	Tags []*Tag `json:"tags,omitempty"`

	// A name for the UserProfile.
	// +kubebuilder:validation:Required
	UserProfileName *string `json:"userProfileName"`

	// A collection of settings.
	UserSettings *UserSettings `json:"userSettings,omitempty"`
}

// UserProfileSpec defines the desired state of UserProfile
type UserProfileSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       UserProfileParameters `json:"forProvider"`
}

// UserProfileObservation defines the observed state of UserProfile
type UserProfileObservation struct {
	// The user profile Amazon Resource Name (ARN).
	UserProfileARN *string `json:"userProfileARN,omitempty"`
}

// UserProfileStatus defines the observed state of UserProfile.
type UserProfileStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          UserProfileObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// UserProfile is the Schema for the UserProfiles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type UserProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserProfileSpec   `json:"spec,omitempty"`
	Status            UserProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserProfileList contains a list of UserProfiles
type UserProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserProfile `json:"items"`
}

// Repository type metadata.
var (
	UserProfileKind             = "UserProfile"
	UserProfileGroupKind        = schema.GroupKind{Group: Group, Kind: UserProfileKind}.String()
	UserProfileKindAPIVersion   = UserProfileKind + "." + GroupVersion.String()
	UserProfileGroupVersionKind = GroupVersion.WithKind(UserProfileKind)
)

func init() {
	SchemeBuilder.Register(&UserProfile{}, &UserProfileList{})
}
