/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// MonitoringScheduleParameters defines the desired state of MonitoringSchedule
type MonitoringScheduleParameters struct {
	// Region is which region the MonitoringSchedule will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The configuration object that specifies the monitoring schedule and defines
	// the monitoring job.
	// +kubebuilder:validation:Required
	MonitoringScheduleConfig *MonitoringScheduleConfig `json:"monitoringScheduleConfig"`

	// The name of the monitoring schedule. The name must be unique within an AWS
	// Region within an AWS account.
	// +kubebuilder:validation:Required
	MonitoringScheduleName *string `json:"monitoringScheduleName"`

	// (Optional) An array of key-value pairs. For more information, see Using Cost
	// Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL)
	// in the AWS Billing and Cost Management User Guide.
	Tags []*Tag `json:"tags,omitempty"`
}

// MonitoringScheduleSpec defines the desired state of MonitoringSchedule
type MonitoringScheduleSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MonitoringScheduleParameters `json:"forProvider"`
}

// MonitoringScheduleObservation defines the observed state of MonitoringSchedule
type MonitoringScheduleObservation struct {
	// The Amazon Resource Name (ARN) of the monitoring schedule.
	MonitoringScheduleARN *string `json:"monitoringScheduleARN,omitempty"`
}

// MonitoringScheduleStatus defines the observed state of MonitoringSchedule.
type MonitoringScheduleStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MonitoringScheduleObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// MonitoringSchedule is the Schema for the MonitoringSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type MonitoringSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MonitoringScheduleSpec   `json:"spec,omitempty"`
	Status            MonitoringScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MonitoringScheduleList contains a list of MonitoringSchedules
type MonitoringScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MonitoringSchedule `json:"items"`
}

// Repository type metadata.
var (
	MonitoringScheduleKind             = "MonitoringSchedule"
	MonitoringScheduleGroupKind        = schema.GroupKind{Group: Group, Kind: MonitoringScheduleKind}.String()
	MonitoringScheduleKindAPIVersion   = MonitoringScheduleKind + "." + GroupVersion.String()
	MonitoringScheduleGroupVersionKind = GroupVersion.WithKind(MonitoringScheduleKind)
)

func init() {
	SchemeBuilder.Register(&MonitoringSchedule{}, &MonitoringScheduleList{})
}
