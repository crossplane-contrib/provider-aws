/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// WorkteamParameters defines the desired state of Workteam
type WorkteamParameters struct {
	// Region is which region the Workteam will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// A description of the work team.
	// +kubebuilder:validation:Required
	Description *string `json:"description"`

	// A list of MemberDefinition objects that contains objects that identify the
	// workers that make up the work team.
	//
	// Workforces can be created using Amazon Cognito or your own OIDC Identity
	// Provider (IdP). For private workforces created using Amazon Cognito use CognitoMemberDefinition.
	// For workforces created using your own OIDC identity provider (IdP) use OidcMemberDefinition.
	// Do not provide input for both of these parameters in a single request.
	//
	// For workforces created using Amazon Cognito, private work teams correspond
	// to Amazon Cognito user groups within the user pool used to create a workforce.
	// All of the CognitoMemberDefinition objects that make up the member definition
	// must have the same ClientId and UserPool values. To add a Amazon Cognito
	// user group to an existing worker pool, see Adding groups to a User Pool.
	// For more information about user pools, see Amazon Cognito User Pools (https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
	//
	// For workforces created using your own OIDC IdP, specify the user groups that
	// you want to include in your private work team in OidcMemberDefinition by
	// listing those groups in Groups.
	// +kubebuilder:validation:Required
	MemberDefinitions []*MemberDefinition `json:"memberDefinitions"`

	// Configures notification of workers regarding available or expiring work items.
	NotificationConfiguration *NotificationConfiguration `json:"notificationConfiguration,omitempty"`

	// An array of key-value pairs.
	//
	// For more information, see Resource Tag (https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-resource-tags.html)
	// and Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what)
	// in the AWS Billing and Cost Management User Guide.
	Tags []*Tag `json:"tags,omitempty"`

	// The name of the workforce.
	WorkforceName *string `json:"workforceName,omitempty"`

	// WorkforceNameRef is a reference to an sagemaker/v1alpha1/Workforce used
	// to set the WorkforceName field.
	// +optional
	WorkforceNameRef *xpv1.Reference `json:"workforceNameRef,omitempty"`

	// WorkforceNameSelector selects references to sagemaker/v1alpha1/Workforce
	// used to set the WorkforceName.
	// +optional
	WorkforceNameSelector *xpv1.Selector `json:"workforceNameSelector,omitempty"`

	// The name of the work team. Use this name to identify the work team.
	// +kubebuilder:validation:Required
	WorkteamName *string `json:"workteamName"`
}

// WorkteamSpec defines the desired state of Workteam
type WorkteamSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WorkteamParameters `json:"forProvider"`
}

// WorkteamObservation defines the observed state of Workteam
type WorkteamObservation struct {
	// The Amazon Resource Name (ARN) of the work team. You can use this ARN to
	// identify the work team.
	WorkteamARN *string `json:"workteamARN,omitempty"`
}

// WorkteamStatus defines the observed state of Workteam.
type WorkteamStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WorkteamObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Workteam is the Schema for the Workteams API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Workteam struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkteamSpec   `json:"spec,omitempty"`
	Status            WorkteamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkteamList contains a list of Workteams
type WorkteamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workteam `json:"items"`
}

// Repository type metadata.
var (
	WorkteamKind             = "Workteam"
	WorkteamGroupKind        = schema.GroupKind{Group: Group, Kind: WorkteamKind}.String()
	WorkteamKindAPIVersion   = WorkteamKind + "." + GroupVersion.String()
	WorkteamGroupVersionKind = GroupVersion.WithKind(WorkteamKind)
)

func init() {
	SchemeBuilder.Register(&Workteam{}, &WorkteamList{})
}
