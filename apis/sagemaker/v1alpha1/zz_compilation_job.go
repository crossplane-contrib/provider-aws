/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// CompilationJobParameters defines the desired state of CompilationJob
type CompilationJobParameters struct {
	// Region is which region the CompilationJob will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// A name for the model compilation job. The name must be unique within the
	// AWS Region and within your AWS account.
	// +kubebuilder:validation:Required
	CompilationJobName *string `json:"compilationJobName"`

	// Provides information about the location of input model artifacts, the name
	// and shape of the expected data inputs, and the framework in which the model
	// was trained.
	// +kubebuilder:validation:Required
	InputConfig *InputConfig `json:"inputConfig"`

	// Provides information about the output location for the compiled model and
	// the target device the model runs on.
	// +kubebuilder:validation:Required
	OutputConfig *OutputConfig `json:"outputConfig"`

	// The Amazon Resource Name (ARN) of an IAM role that enables Amazon SageMaker
	// to perform tasks on your behalf.
	//
	// During model compilation, Amazon SageMaker needs your permission to:
	//
	//    * Read input data from an S3 bucket
	//
	//    * Write model artifacts to an S3 bucket
	//
	//    * Write logs to Amazon CloudWatch Logs
	//
	//    * Publish metrics to Amazon CloudWatch
	//
	// You grant permissions for all of these tasks to an IAM role. To pass this
	// role to Amazon SageMaker, the caller of this API must have the iam:PassRole
	// permission. For more information, see Amazon SageMaker Roles. (https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html)
	RoleARN *string `json:"roleARN,omitempty"`

	// RoleARNRef is a reference to an identity/v1beta1/IAMRole used
	// to set the RoleARN field.
	// +optional
	RoleARNRef *xpv1.Reference `json:"roleARNRef,omitempty"`

	// RoleARNSelector selects references to identity/v1beta1/IAMRole
	// used to set the RoleARN.
	// +optional
	RoleARNSelector *xpv1.Selector `json:"roleARNSelector,omitempty"`

	// Specifies a limit to how long a model compilation job can run. When the job
	// reaches the time limit, Amazon SageMaker ends the compilation job. Use this
	// API to cap model training costs.
	// +kubebuilder:validation:Required
	StoppingCondition *StoppingCondition `json:"stoppingCondition"`
}

// CompilationJobSpec defines the desired state of CompilationJob
type CompilationJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CompilationJobParameters `json:"forProvider"`
}

// CompilationJobObservation defines the observed state of CompilationJob
type CompilationJobObservation struct {
	// If the action is successful, the service sends back an HTTP 200 response.
	// Amazon SageMaker returns the following data in JSON format:
	//
	//    * CompilationJobArn: The Amazon Resource Name (ARN) of the compiled job.
	CompilationJobARN *string `json:"compilationJobARN,omitempty"`
}

// CompilationJobStatus defines the observed state of CompilationJob.
type CompilationJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CompilationJobObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// CompilationJob is the Schema for the CompilationJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CompilationJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CompilationJobSpec   `json:"spec,omitempty"`
	Status            CompilationJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CompilationJobList contains a list of CompilationJobs
type CompilationJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CompilationJob `json:"items"`
}

// Repository type metadata.
var (
	CompilationJobKind             = "CompilationJob"
	CompilationJobGroupKind        = schema.GroupKind{Group: Group, Kind: CompilationJobKind}.String()
	CompilationJobKindAPIVersion   = CompilationJobKind + "." + GroupVersion.String()
	CompilationJobGroupVersionKind = GroupVersion.WithKind(CompilationJobKind)
)

func init() {
	SchemeBuilder.Register(&CompilationJob{}, &CompilationJobList{})
}
