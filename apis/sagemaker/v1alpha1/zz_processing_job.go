/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ProcessingJobParameters defines the desired state of ProcessingJob
type ProcessingJobParameters struct {
	// Region is which region the ProcessingJob will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// Configures the processing job to run a specified Docker container image.
	// +kubebuilder:validation:Required
	AppSpecification *AppSpecification `json:"appSpecification"`

	// Sets the environment variables in the Docker container.
	Environment map[string]*string `json:"environment,omitempty"`

	ExperimentConfig *ExperimentConfig `json:"experimentConfig,omitempty"`

	// Networking options for a processing job.
	NetworkConfig *NetworkConfig `json:"networkConfig,omitempty"`

	// For each input, data is downloaded from S3 into the processing container
	// before the processing job begins running if "S3InputMode" is set to File.
	ProcessingInputs []*ProcessingInput `json:"processingInputs,omitempty"`

	// The name of the processing job. The name must be unique within an AWS Region
	// in the AWS account.
	// +kubebuilder:validation:Required
	ProcessingJobName *string `json:"processingJobName"`

	// Output configuration for the processing job.
	ProcessingOutputConfig *ProcessingOutputConfig `json:"processingOutputConfig,omitempty"`

	// Identifies the resources, ML compute instances, and ML storage volumes to
	// deploy for a processing job. In distributed training, you specify more than
	// one instance.
	// +kubebuilder:validation:Required
	ProcessingResources *ProcessingResources `json:"processingResources"`

	// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume
	// to perform tasks on your behalf.
	RoleARN *string `json:"roleARN,omitempty"`

	// RoleARNRef is a reference to an identity/v1beta1/IAMRole used
	// to set the RoleARN field.
	// +optional
	RoleARNRef *xpv1.Reference `json:"roleARNRef,omitempty"`

	// RoleARNSelector selects references to identity/v1beta1/IAMRole
	// used to set the RoleARN.
	// +optional
	RoleARNSelector *xpv1.Selector `json:"roleARNSelector,omitempty"`

	// The time limit for how long the processing job is allowed to run.
	StoppingCondition *ProcessingStoppingCondition `json:"stoppingCondition,omitempty"`

	// (Optional) An array of key-value pairs. For more information, see Using Cost
	// Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-whatURL)
	// in the AWS Billing and Cost Management User Guide.
	Tags []*Tag `json:"tags,omitempty"`
}

// ProcessingJobSpec defines the desired state of ProcessingJob
type ProcessingJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ProcessingJobParameters `json:"forProvider"`
}

// ProcessingJobObservation defines the observed state of ProcessingJob
type ProcessingJobObservation struct {
	// The Amazon Resource Name (ARN) of the processing job.
	ProcessingJobARN *string `json:"processingJobARN,omitempty"`
}

// ProcessingJobStatus defines the observed state of ProcessingJob.
type ProcessingJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ProcessingJobObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// ProcessingJob is the Schema for the ProcessingJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ProcessingJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProcessingJobSpec   `json:"spec,omitempty"`
	Status            ProcessingJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProcessingJobList contains a list of ProcessingJobs
type ProcessingJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProcessingJob `json:"items"`
}

// Repository type metadata.
var (
	ProcessingJobKind             = "ProcessingJob"
	ProcessingJobGroupKind        = schema.GroupKind{Group: Group, Kind: ProcessingJobKind}.String()
	ProcessingJobKindAPIVersion   = ProcessingJobKind + "." + GroupVersion.String()
	ProcessingJobGroupVersionKind = GroupVersion.WithKind(ProcessingJobKind)
)

func init() {
	SchemeBuilder.Register(&ProcessingJob{}, &ProcessingJobList{})
}
