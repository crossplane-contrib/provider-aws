/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// NotebookInstanceLifecycleConfigParameters defines the desired state of NotebookInstanceLifecycleConfig
type NotebookInstanceLifecycleConfigParameters struct {
	// Region is which region the NotebookInstanceLifecycleConfig will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The name of the lifecycle configuration.
	// +kubebuilder:validation:Required
	NotebookInstanceLifecycleConfigName *string `json:"notebookInstanceLifecycleConfigName"`

	// A shell script that runs only once, when you create a notebook instance.
	// The shell script must be a base64-encoded string.
	OnCreate []*NotebookInstanceLifecycleHook `json:"onCreate,omitempty"`

	// A shell script that runs every time you start a notebook instance, including
	// when you create the notebook instance. The shell script must be a base64-encoded
	// string.
	OnStart []*NotebookInstanceLifecycleHook `json:"onStart,omitempty"`
}

// NotebookInstanceLifecycleConfigSpec defines the desired state of NotebookInstanceLifecycleConfig
type NotebookInstanceLifecycleConfigSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NotebookInstanceLifecycleConfigParameters `json:"forProvider"`
}

// NotebookInstanceLifecycleConfigObservation defines the observed state of NotebookInstanceLifecycleConfig
type NotebookInstanceLifecycleConfigObservation struct {
	// The Amazon Resource Name (ARN) of the lifecycle configuration.
	NotebookInstanceLifecycleConfigARN *string `json:"notebookInstanceLifecycleConfigARN,omitempty"`
}

// NotebookInstanceLifecycleConfigStatus defines the observed state of NotebookInstanceLifecycleConfig.
type NotebookInstanceLifecycleConfigStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NotebookInstanceLifecycleConfigObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// NotebookInstanceLifecycleConfig is the Schema for the NotebookInstanceLifecycleConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type NotebookInstanceLifecycleConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotebookInstanceLifecycleConfigSpec   `json:"spec,omitempty"`
	Status            NotebookInstanceLifecycleConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotebookInstanceLifecycleConfigList contains a list of NotebookInstanceLifecycleConfigs
type NotebookInstanceLifecycleConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotebookInstanceLifecycleConfig `json:"items"`
}

// Repository type metadata.
var (
	NotebookInstanceLifecycleConfigKind             = "NotebookInstanceLifecycleConfig"
	NotebookInstanceLifecycleConfigGroupKind        = schema.GroupKind{Group: Group, Kind: NotebookInstanceLifecycleConfigKind}.String()
	NotebookInstanceLifecycleConfigKindAPIVersion   = NotebookInstanceLifecycleConfigKind + "." + GroupVersion.String()
	NotebookInstanceLifecycleConfigGroupVersionKind = GroupVersion.WithKind(NotebookInstanceLifecycleConfigKind)
)

func init() {
	SchemeBuilder.Register(&NotebookInstanceLifecycleConfig{}, &NotebookInstanceLifecycleConfigList{})
}
