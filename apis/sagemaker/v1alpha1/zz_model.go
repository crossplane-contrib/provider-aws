/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ModelParameters defines the desired state of Model
type ModelParameters struct {
	// Region is which region the Model will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// Specifies the containers in the inference pipeline.
	Containers []*ContainerDefinition `json:"containers,omitempty"`

	// Isolates the model container. No inbound or outbound network calls can be
	// made to or from the model container.
	EnableNetworkIsolation *bool `json:"enableNetworkIsolation,omitempty"`

	// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can
	// assume to access model artifacts and docker image for deployment on ML compute
	// instances or for batch transform jobs. Deploying on ML compute instances
	// is part of model hosting. For more information, see Amazon SageMaker Roles
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html).
	//
	// To be able to pass this role to Amazon SageMaker, the caller of this API
	// must have the iam:PassRole permission.
	ExecutionRoleARN *string `json:"executionRoleARN,omitempty"`

	// ExecutionRoleARNRef is a reference to an identity/v1beta1/IAMRole used
	// to set the ExecutionRoleARN field.
	// +optional
	ExecutionRoleARNRef *xpv1.Reference `json:"executionRoleARNRef,omitempty"`

	// ExecutionRoleARNSelector selects references to identity/v1beta1/IAMRole
	// used to set the ExecutionRoleARN.
	// +optional
	ExecutionRoleARNSelector *xpv1.Selector `json:"executionRoleARNSelector,omitempty"`

	// The name of the new model.
	// +kubebuilder:validation:Required
	ModelName *string `json:"modelName"`

	// The location of the primary docker image containing inference code, associated
	// artifacts, and custom environment map that the inference code uses when the
	// model is deployed for predictions.
	PrimaryContainer *ContainerDefinition `json:"primaryContainer,omitempty"`

	// An array of key-value pairs. For more information, see Using Cost Allocation
	// Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what)
	// in the AWS Billing and Cost Management User Guide.
	Tags []*Tag `json:"tags,omitempty"`

	// A VpcConfig object that specifies the VPC that you want your model to connect
	// to. Control access to and from your model container by configuring the VPC.
	// VpcConfig is used in hosting services and in batch transform. For more information,
	// see Protect Endpoints by Using an Amazon Virtual Private Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html)
	// and Protect Data in Batch Transform Jobs by Using an Amazon Virtual Private
	// Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/batch-vpc.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

// ModelSpec defines the desired state of Model
type ModelSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ModelParameters `json:"forProvider"`
}

// ModelObservation defines the observed state of Model
type ModelObservation struct {
	// The ARN of the model created in Amazon SageMaker.
	ModelARN *string `json:"modelARN,omitempty"`
}

// ModelStatus defines the observed state of Model.
type ModelStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ModelObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Model is the Schema for the Models API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Model struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ModelSpec   `json:"spec,omitempty"`
	Status            ModelStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ModelList contains a list of Models
type ModelList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Model `json:"items"`
}

// Repository type metadata.
var (
	ModelKind             = "Model"
	ModelGroupKind        = schema.GroupKind{Group: Group, Kind: ModelKind}.String()
	ModelKindAPIVersion   = ModelKind + "." + GroupVersion.String()
	ModelGroupVersionKind = GroupVersion.WithKind(ModelKind)
)

func init() {
	SchemeBuilder.Register(&Model{}, &ModelList{})
}
