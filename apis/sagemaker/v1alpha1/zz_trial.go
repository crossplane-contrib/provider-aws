/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TrialParameters defines the desired state of Trial
type TrialParameters struct {
	// Region is which region the Trial will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The name of the trial as displayed. The name doesn't need to be unique. If
	// DisplayName isn't specified, TrialName is displayed.
	DisplayName *string `json:"displayName,omitempty"`

	// The name of the experiment to associate the trial with.
	ExperimentName *string `json:"experimentName,omitempty"`

	// ExperimentNameRef is a reference to an sagemaker/v1alpha1/Experiment used
	// to set the ExperimentName field.
	// +optional
	ExperimentNameRef *xpv1.Reference `json:"experimentNameRef,omitempty"`

	// ExperimentNameSelector selects references to sagemaker/v1alpha1/Experiment
	// used to set the ExperimentName.
	// +optional
	ExperimentNameSelector *xpv1.Selector `json:"experimentNameSelector,omitempty"`

	// A list of tags to associate with the trial. You can use Search API to search
	// on the tags.
	Tags []*Tag `json:"tags,omitempty"`

	// The name of the trial. The name must be unique in your AWS account and is
	// not case-sensitive.
	// +kubebuilder:validation:Required
	TrialName *string `json:"trialName"`
}

// TrialSpec defines the desired state of Trial
type TrialSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TrialParameters `json:"forProvider"`
}

// TrialObservation defines the observed state of Trial
type TrialObservation struct {
	// The Amazon Resource Name (ARN) of the trial.
	TrialARN *string `json:"trialARN,omitempty"`
}

// TrialStatus defines the observed state of Trial.
type TrialStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TrialObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Trial is the Schema for the Trials API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Trial struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrialSpec   `json:"spec,omitempty"`
	Status            TrialStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrialList contains a list of Trials
type TrialList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Trial `json:"items"`
}

// Repository type metadata.
var (
	TrialKind             = "Trial"
	TrialGroupKind        = schema.GroupKind{Group: Group, Kind: TrialKind}.String()
	TrialKindAPIVersion   = TrialKind + "." + GroupVersion.String()
	TrialGroupVersionKind = GroupVersion.WithKind(TrialKind)
)

func init() {
	SchemeBuilder.Register(&Trial{}, &TrialList{})
}
