/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ModelPackageParameters defines the desired state of ModelPackage
type ModelPackageParameters struct {
	// Region is which region the ModelPackage will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// Whether to certify the model package for listing on AWS Marketplace.
	CertifyForMarketplace *bool `json:"certifyForMarketplace,omitempty"`

	// Specifies details about inference jobs that can be run with models based
	// on this model package, including the following:
	//
	//    * The Amazon ECR paths of containers that contain the inference code and
	//    model artifacts.
	//
	//    * The instance types that the model package supports for transform jobs
	//    and real-time endpoints used for inference.
	//
	//    * The input and output content formats that the model package supports
	//    for inference.
	InferenceSpecification *InferenceSpecification `json:"inferenceSpecification,omitempty"`

	// A description of the model package.
	ModelPackageDescription *string `json:"modelPackageDescription,omitempty"`

	// The name of the model package. The name must have 1 to 63 characters. Valid
	// characters are a-z, A-Z, 0-9, and - (hyphen).
	// +kubebuilder:validation:Required
	ModelPackageName *string `json:"modelPackageName"`

	// Details about the algorithm that was used to create the model package.
	SourceAlgorithmSpecification *SourceAlgorithmSpecification `json:"sourceAlgorithmSpecification,omitempty"`

	// Specifies configurations for one or more transform jobs that Amazon SageMaker
	// runs to test the model package.
	ValidationSpecification *ModelPackageValidationSpecification `json:"validationSpecification,omitempty"`
}

// ModelPackageSpec defines the desired state of ModelPackage
type ModelPackageSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ModelPackageParameters `json:"forProvider"`
}

// ModelPackageObservation defines the observed state of ModelPackage
type ModelPackageObservation struct {
	// The Amazon Resource Name (ARN) of the new model package.
	ModelPackageARN *string `json:"modelPackageARN,omitempty"`
}

// ModelPackageStatus defines the observed state of ModelPackage.
type ModelPackageStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ModelPackageObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// ModelPackage is the Schema for the ModelPackages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ModelPackage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ModelPackageSpec   `json:"spec,omitempty"`
	Status            ModelPackageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ModelPackageList contains a list of ModelPackages
type ModelPackageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ModelPackage `json:"items"`
}

// Repository type metadata.
var (
	ModelPackageKind             = "ModelPackage"
	ModelPackageGroupKind        = schema.GroupKind{Group: Group, Kind: ModelPackageKind}.String()
	ModelPackageKindAPIVersion   = ModelPackageKind + "." + GroupVersion.String()
	ModelPackageGroupVersionKind = GroupVersion.WithKind(ModelPackageKind)
)

func init() {
	SchemeBuilder.Register(&ModelPackage{}, &ModelPackageList{})
}
