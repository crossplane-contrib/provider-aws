/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// AppParameters defines the desired state of App
type AppParameters struct {
	// Region is which region the App will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The name of the app.
	// +kubebuilder:validation:Required
	AppName *string `json:"appName"`

	// The type of app.
	// +kubebuilder:validation:Required
	AppType *string `json:"appType"`

	// The domain ID.
	DomainID *string `json:"domainID,omitempty"`

	// DomainIDRef is a reference to an sagemaker/v1alpha1/Domain used
	// to set the DomainID field.
	// +optional
	DomainIDRef *xpv1.Reference `json:"domainIDRef,omitempty"`

	// DomainIDSelector selects references to sagemaker/v1alpha1/Domain
	// used to set the DomainID.
	// +optional
	DomainIDSelector *xpv1.Selector `json:"domainIDSelector,omitempty"`

	// The instance type and the Amazon Resource Name (ARN) of the SageMaker image
	// created on the instance.
	ResourceSpec *ResourceSpec `json:"resourceSpec,omitempty"`

	// Each tag consists of a key and an optional value. Tag keys must be unique
	// per resource.
	Tags []*Tag `json:"tags,omitempty"`

	// The user profile name.
	UserProfileName *string `json:"userProfileName,omitempty"`

	// UserProfileNameRef is a reference to an sagemaker/v1alpha1/UserProfile used
	// to set the UserProfileName field.
	// +optional
	UserProfileNameRef *xpv1.Reference `json:"userProfileNameRef,omitempty"`

	// UserProfileNameSelector selects references to sagemaker/v1alpha1/UserProfile
	// used to set the UserProfileName.
	// +optional
	UserProfileNameSelector *xpv1.Selector `json:"userProfileNameSelector,omitempty"`
}

// AppSpec defines the desired state of App
type AppSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AppParameters `json:"forProvider"`
}

// AppObservation defines the observed state of App
type AppObservation struct {
	// The App's Amazon Resource Name (ARN).
	AppARN *string `json:"appARN,omitempty"`
}

// AppStatus defines the observed state of App.
type AppStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AppObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// App is the Schema for the Apps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type App struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AppSpec   `json:"spec,omitempty"`
	Status            AppStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AppList contains a list of Apps
type AppList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []App `json:"items"`
}

// Repository type metadata.
var (
	AppKind             = "App"
	AppGroupKind        = schema.GroupKind{Group: Group, Kind: AppKind}.String()
	AppKindAPIVersion   = AppKind + "." + GroupVersion.String()
	AppGroupVersionKind = GroupVersion.WithKind(AppKind)
)

func init() {
	SchemeBuilder.Register(&App{}, &AppList{})
}
