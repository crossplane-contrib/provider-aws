/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// PresignedDomainURLParameters defines the desired state of PresignedDomainURL
type PresignedDomainURLParameters struct {
	// Region is which region the PresignedDomainURL will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The domain ID.
	DomainID *string `json:"domainID,omitempty"`

	// DomainIDRef is a reference to an sagemaker/v1alpha1/Domain used
	// to set the DomainID field.
	// +optional
	DomainIDRef *xpv1.Reference `json:"domainIDRef,omitempty"`

	// DomainIDSelector selects references to sagemaker/v1alpha1/Domain
	// used to set the DomainID.
	// +optional
	DomainIDSelector *xpv1.Selector `json:"domainIDSelector,omitempty"`

	// The session expiration duration in seconds.
	SessionExpirationDurationInSeconds *int64 `json:"sessionExpirationDurationInSeconds,omitempty"`

	// The name of the UserProfile to sign-in as.
	UserProfileName *string `json:"userProfileName,omitempty"`

	// UserProfileNameRef is a reference to an sagemaker/v1alpha1/UserProfile used
	// to set the UserProfileName field.
	// +optional
	UserProfileNameRef *xpv1.Reference `json:"userProfileNameRef,omitempty"`

	// UserProfileNameSelector selects references to sagemaker/v1alpha1/UserProfile
	// used to set the UserProfileName.
	// +optional
	UserProfileNameSelector *xpv1.Selector `json:"userProfileNameSelector,omitempty"`
}

// PresignedDomainURLSpec defines the desired state of PresignedDomainURL
type PresignedDomainURLSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PresignedDomainURLParameters `json:"forProvider"`
}

// PresignedDomainURLObservation defines the observed state of PresignedDomainURL
type PresignedDomainURLObservation struct {
	// The presigned URL.
	AuthorizedURL *string `json:"authorizedURL,omitempty"`
}

// PresignedDomainURLStatus defines the observed state of PresignedDomainURL.
type PresignedDomainURLStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PresignedDomainURLObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// PresignedDomainURL is the Schema for the PresignedDomainURLS API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type PresignedDomainURL struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PresignedDomainURLSpec   `json:"spec,omitempty"`
	Status            PresignedDomainURLStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PresignedDomainURLList contains a list of PresignedDomainURLS
type PresignedDomainURLList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PresignedDomainURL `json:"items"`
}

// Repository type metadata.
var (
	PresignedDomainURLKind             = "PresignedDomainURL"
	PresignedDomainURLGroupKind        = schema.GroupKind{Group: Group, Kind: PresignedDomainURLKind}.String()
	PresignedDomainURLKindAPIVersion   = PresignedDomainURLKind + "." + GroupVersion.String()
	PresignedDomainURLGroupVersionKind = GroupVersion.WithKind(PresignedDomainURLKind)
)

func init() {
	SchemeBuilder.Register(&PresignedDomainURL{}, &PresignedDomainURLList{})
}
