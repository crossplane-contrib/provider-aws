/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// AlgorithmParameters defines the desired state of Algorithm
type AlgorithmParameters struct {
	// Region is which region the Algorithm will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// A description of the algorithm.
	AlgorithmDescription *string `json:"algorithmDescription,omitempty"`

	// The name of the algorithm.
	// +kubebuilder:validation:Required
	AlgorithmName *string `json:"algorithmName"`

	// Whether to certify the algorithm so that it can be listed in AWS Marketplace.
	CertifyForMarketplace *bool `json:"certifyForMarketplace,omitempty"`

	// Specifies details about inference jobs that the algorithm runs, including
	// the following:
	//
	//    * The Amazon ECR paths of containers that contain the inference code and
	//    model artifacts.
	//
	//    * The instance types that the algorithm supports for transform jobs and
	//    real-time endpoints used for inference.
	//
	//    * The input and output content formats that the algorithm supports for
	//    inference.
	InferenceSpecification *InferenceSpecification `json:"inferenceSpecification,omitempty"`

	// Specifies details about training jobs run by this algorithm, including the
	// following:
	//
	//    * The Amazon ECR path of the container and the version digest of the algorithm.
	//
	//    * The hyperparameters that the algorithm supports.
	//
	//    * The instance types that the algorithm supports for training.
	//
	//    * Whether the algorithm supports distributed training.
	//
	//    * The metrics that the algorithm emits to Amazon CloudWatch.
	//
	//    * Which metrics that the algorithm emits can be used as the objective
	//    metric for hyperparameter tuning jobs.
	//
	//    * The input channels that the algorithm supports for training data. For
	//    example, an algorithm might support train, validation, and test channels.
	// +kubebuilder:validation:Required
	TrainingSpecification *TrainingSpecification `json:"trainingSpecification"`

	// Specifies configurations for one or more training jobs and that Amazon SageMaker
	// runs to test the algorithm's training code and, optionally, one or more batch
	// transform jobs that Amazon SageMaker runs to test the algorithm's inference
	// code.
	ValidationSpecification *AlgorithmValidationSpecification `json:"validationSpecification,omitempty"`
}

// AlgorithmSpec defines the desired state of Algorithm
type AlgorithmSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AlgorithmParameters `json:"forProvider"`
}

// AlgorithmObservation defines the observed state of Algorithm
type AlgorithmObservation struct {
	// The Amazon Resource Name (ARN) of the new algorithm.
	AlgorithmARN *string `json:"algorithmARN,omitempty"`
}

// AlgorithmStatus defines the observed state of Algorithm.
type AlgorithmStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AlgorithmObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Algorithm is the Schema for the Algorithms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Algorithm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlgorithmSpec   `json:"spec,omitempty"`
	Status            AlgorithmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlgorithmList contains a list of Algorithms
type AlgorithmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Algorithm `json:"items"`
}

// Repository type metadata.
var (
	AlgorithmKind             = "Algorithm"
	AlgorithmGroupKind        = schema.GroupKind{Group: Group, Kind: AlgorithmKind}.String()
	AlgorithmKindAPIVersion   = AlgorithmKind + "." + GroupVersion.String()
	AlgorithmGroupVersionKind = GroupVersion.WithKind(AlgorithmKind)
)

func init() {
	SchemeBuilder.Register(&Algorithm{}, &AlgorithmList{})
}
