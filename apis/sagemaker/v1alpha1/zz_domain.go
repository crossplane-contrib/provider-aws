/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// DomainParameters defines the desired state of Domain
type DomainParameters struct {
	// Region is which region the Domain will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The mode of authentication that members use to access the domain.
	// +kubebuilder:validation:Required
	AuthMode *string `json:"authMode"`

	// The default user settings.
	// +kubebuilder:validation:Required
	DefaultUserSettings *UserSettings `json:"defaultUserSettings"`

	// A name for the domain.
	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName"`

	// The AWS Key Management Service (KMS) encryption key ID. Encryption with a
	// customer master key (CMK) is not supported.
	HomeEFSFileSystemKMSKeyID *string `json:"homeEFSFileSystemKMSKeyID,omitempty"`

	// The VPC subnets to use for communication with the EFS volume.
	SubnetIDs []*string `json:"subnetIDs,omitempty"`

	// SubnetIDsRef is a reference to an ec2/v1beta1/Subnet used
	// to set the SubnetIDs field.
	// +optional
	SubnetIDsRef []xpv1.Reference `json:"subnetIDsRef,omitempty"`

	// SubnetIDsSelector selects references to ec2/v1beta1/Subnet
	// used to set the SubnetIDs.
	// +optional
	SubnetIDsSelector *xpv1.Selector `json:"subnetIDsSelector,omitempty"`

	// Tags to associated with the Domain. Each tag consists of a key and an optional
	// value. Tag keys must be unique per resource. Tags are searchable using the
	// Search API.
	Tags []*Tag `json:"tags,omitempty"`

	// The ID of the Amazon Virtual Private Cloud (VPC) to use for communication
	// with the EFS volume.
	VPCID *string `json:"vpcID,omitempty"`

	// VPCIDRef is a reference to an ec2/v1beta1/VPC used
	// to set the VPCID field.
	// +optional
	VPCIDRef *xpv1.Reference `json:"vpcIDRef,omitempty"`

	// VPCIDSelector selects references to ec2/v1beta1/VPC
	// used to set the VPCID.
	// +optional
	VPCIDSelector *xpv1.Selector `json:"vpcIDSelector,omitempty"`
}

// DomainSpec defines the desired state of Domain
type DomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DomainParameters `json:"forProvider"`
}

// DomainObservation defines the observed state of Domain
type DomainObservation struct {
	// The Amazon Resource Name (ARN) of the created domain.
	DomainARN *string `json:"domainARN,omitempty"`
	// The URL to the created domain.
	URL *string `json:"url,omitempty"`
}

// DomainStatus defines the observed state of Domain.
type DomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DomainObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Domain is the Schema for the Domains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSpec   `json:"spec,omitempty"`
	Status            DomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainList contains a list of Domains
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Repository type metadata.
var (
	DomainKind             = "Domain"
	DomainGroupKind        = schema.GroupKind{Group: Group, Kind: DomainKind}.String()
	DomainKindAPIVersion   = DomainKind + "." + GroupVersion.String()
	DomainGroupVersionKind = GroupVersion.WithKind(DomainKind)
)

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
