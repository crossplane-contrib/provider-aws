/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// WorkforceParameters defines the desired state of Workforce
type WorkforceParameters struct {
	// Region is which region the Workforce will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// Use this parameter to configure an Amazon Cognito private workforce. A single
	// Cognito workforce is created using and corresponds to a single Amazon Cognito
	// user pool (https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
	//
	// Do not use OidcConfig if you specify values for CognitoConfig.
	CognitoConfig *CognitoConfig `json:"cognitoConfig,omitempty"`

	// Use this parameter to configure a private workforce using your own OIDC Identity
	// Provider.
	//
	// Do not use CognitoConfig if you specify values for OidcConfig.
	OidcConfig *OidcConfig `json:"oidcConfig,omitempty"`

	SourceIPConfig *SourceIPConfig `json:"sourceIPConfig,omitempty"`

	// An array of key-value pairs that contain metadata to help you categorize
	// and organize our workforce. Each tag consists of a key and a value, both
	// of which you define.
	Tags []*Tag `json:"tags,omitempty"`

	// The name of the private workforce.
	// +kubebuilder:validation:Required
	WorkforceName *string `json:"workforceName"`
}

// WorkforceSpec defines the desired state of Workforce
type WorkforceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WorkforceParameters `json:"forProvider"`
}

// WorkforceObservation defines the observed state of Workforce
type WorkforceObservation struct {
	// The Amazon Resource Name (ARN) of the workforce.
	WorkforceARN *string `json:"workforceARN,omitempty"`
}

// WorkforceStatus defines the observed state of Workforce.
type WorkforceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WorkforceObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Workforce is the Schema for the Workforces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Workforce struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkforceSpec   `json:"spec,omitempty"`
	Status            WorkforceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkforceList contains a list of Workforces
type WorkforceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Workforce `json:"items"`
}

// Repository type metadata.
var (
	WorkforceKind             = "Workforce"
	WorkforceGroupKind        = schema.GroupKind{Group: Group, Kind: WorkforceKind}.String()
	WorkforceKindAPIVersion   = WorkforceKind + "." + GroupVersion.String()
	WorkforceGroupVersionKind = GroupVersion.WithKind(WorkforceKind)
)

func init() {
	SchemeBuilder.Register(&Workforce{}, &WorkforceList{})
}
