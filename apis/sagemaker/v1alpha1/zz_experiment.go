/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ExperimentParameters defines the desired state of Experiment
type ExperimentParameters struct {
	// Region is which region the Experiment will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The description of the experiment.
	Description *string `json:"description,omitempty"`

	// The name of the experiment as displayed. The name doesn't need to be unique.
	// If you don't specify DisplayName, the value in ExperimentName is displayed.
	DisplayName *string `json:"displayName,omitempty"`

	// The name of the experiment. The name must be unique in your AWS account and
	// is not case-sensitive.
	// +kubebuilder:validation:Required
	ExperimentName *string `json:"experimentName"`

	// A list of tags to associate with the experiment. You can use Search API to
	// search on the tags.
	Tags []*Tag `json:"tags,omitempty"`
}

// ExperimentSpec defines the desired state of Experiment
type ExperimentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ExperimentParameters `json:"forProvider"`
}

// ExperimentObservation defines the observed state of Experiment
type ExperimentObservation struct {
	// The Amazon Resource Name (ARN) of the experiment.
	ExperimentARN *string `json:"experimentARN,omitempty"`
}

// ExperimentStatus defines the observed state of Experiment.
type ExperimentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ExperimentObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// Experiment is the Schema for the Experiments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Experiment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExperimentSpec   `json:"spec,omitempty"`
	Status            ExperimentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExperimentList contains a list of Experiments
type ExperimentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Experiment `json:"items"`
}

// Repository type metadata.
var (
	ExperimentKind             = "Experiment"
	ExperimentGroupKind        = schema.GroupKind{Group: Group, Kind: ExperimentKind}.String()
	ExperimentKindAPIVersion   = ExperimentKind + "." + GroupVersion.String()
	ExperimentGroupVersionKind = GroupVersion.WithKind(ExperimentKind)
)

func init() {
	SchemeBuilder.Register(&Experiment{}, &ExperimentList{})
}
