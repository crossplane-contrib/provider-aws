/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// HumanTaskUiParameters defines the desired state of HumanTaskUi
type HumanTaskUiParameters struct {
	// Region is which region the HumanTaskUi will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The name of the user interface you are creating.
	// +kubebuilder:validation:Required
	HumanTaskUiName *string `json:"humanTaskUiName"`

	// An array of key-value pairs that contain metadata to help you categorize
	// and organize a human review workflow user interface. Each tag consists of
	// a key and a value, both of which you define.
	Tags []*Tag `json:"tags,omitempty"`

	// +kubebuilder:validation:Required
	UiTemplate *UiTemplate `json:"uiTemplate"`
}

// HumanTaskUiSpec defines the desired state of HumanTaskUi
type HumanTaskUiSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       HumanTaskUiParameters `json:"forProvider"`
}

// HumanTaskUiObservation defines the observed state of HumanTaskUi
type HumanTaskUiObservation struct {
	// The Amazon Resource Name (ARN) of the human review workflow user interface
	// you create.
	HumanTaskUiARN *string `json:"humanTaskUiARN,omitempty"`
}

// HumanTaskUiStatus defines the observed state of HumanTaskUi.
type HumanTaskUiStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          HumanTaskUiObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// HumanTaskUi is the Schema for the HumanTaskUis API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type HumanTaskUi struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HumanTaskUiSpec   `json:"spec,omitempty"`
	Status            HumanTaskUiStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HumanTaskUiList contains a list of HumanTaskUis
type HumanTaskUiList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HumanTaskUi `json:"items"`
}

// Repository type metadata.
var (
	HumanTaskUiKind             = "HumanTaskUi"
	HumanTaskUiGroupKind        = schema.GroupKind{Group: Group, Kind: HumanTaskUiKind}.String()
	HumanTaskUiKindAPIVersion   = HumanTaskUiKind + "." + GroupVersion.String()
	HumanTaskUiGroupVersionKind = GroupVersion.WithKind(HumanTaskUiKind)
)

func init() {
	SchemeBuilder.Register(&HumanTaskUi{}, &HumanTaskUiList{})
}
