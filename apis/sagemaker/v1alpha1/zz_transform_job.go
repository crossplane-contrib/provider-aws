/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TransformJobParameters defines the desired state of TransformJob
type TransformJobParameters struct {
	// Region is which region the TransformJob will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// Specifies the number of records to include in a mini-batch for an HTTP inference
	// request. A record is a single unit of input data that inference can be made
	// on. For example, a single line in a CSV file is a record.
	//
	// To enable the batch strategy, you must set the SplitType property to Line,
	// RecordIO, or TFRecord.
	//
	// To use only one record when making an HTTP invocation request to a container,
	// set BatchStrategy to SingleRecord and SplitType to Line.
	//
	// To fit as many records in a mini-batch as can fit within the MaxPayloadInMB
	// limit, set BatchStrategy to MultiRecord and SplitType to Line.
	BatchStrategy *string `json:"batchStrategy,omitempty"`

	// The data structure used to specify the data to be used for inference in a
	// batch transform job and to associate the data that is relevant to the prediction
	// results in the output. The input filter provided allows you to exclude input
	// data that is not needed for inference in a batch transform job. The output
	// filter provided allows you to include input data relevant to interpreting
	// the predictions in the output from the job. For more information, see Associate
	// Prediction Results with their Corresponding Input Records (https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
	DataProcessing *DataProcessing `json:"dataProcessing,omitempty"`

	// The environment variables to set in the Docker container. We support up to
	// 16 key and values entries in the map.
	Environment map[string]*string `json:"environment,omitempty"`

	ExperimentConfig *ExperimentConfig `json:"experimentConfig,omitempty"`

	// The maximum number of parallel requests that can be sent to each instance
	// in a transform job. If MaxConcurrentTransforms is set to 0 or left unset,
	// Amazon SageMaker checks the optional execution-parameters to determine the
	// settings for your chosen algorithm. If the execution-parameters endpoint
	// is not enabled, the default value is 1. For more information on execution-parameters,
	// see How Containers Serve Requests (https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms-batch-code.html#your-algorithms-batch-code-how-containe-serves-requests).
	// For built-in algorithms, you don't need to set a value for MaxConcurrentTransforms.
	MaxConcurrentTransforms *int64 `json:"maxConcurrentTransforms,omitempty"`

	// The maximum allowed size of the payload, in MB. A payload is the data portion
	// of a record (without metadata). The value in MaxPayloadInMB must be greater
	// than, or equal to, the size of a single record. To estimate the size of a
	// record in MB, divide the size of your dataset by the number of records. To
	// ensure that the records fit within the maximum payload size, we recommend
	// using a slightly larger value. The default value is 6 MB.
	//
	// For cases where the payload might be arbitrarily large and is transmitted
	// using HTTP chunked encoding, set the value to 0. This feature works only
	// in supported algorithms. Currently, Amazon SageMaker built-in algorithms
	// do not support HTTP chunked encoding.
	MaxPayloadInMB *int64 `json:"maxPayloadInMB,omitempty"`

	// Configures the timeout and maximum number of retries for processing a transform
	// job invocation.
	ModelClientConfig *ModelClientConfig `json:"modelClientConfig,omitempty"`

	// The name of the model that you want to use for the transform job. ModelName
	// must be the name of an existing Amazon SageMaker model within an AWS Region
	// in an AWS account.
	ModelName *string `json:"modelName,omitempty"`

	// ModelNameRef is a reference to an sagemaker/v1alpha1/Model used
	// to set the ModelName field.
	// +optional
	ModelNameRef *xpv1.Reference `json:"modelNameRef,omitempty"`

	// ModelNameSelector selects references to sagemaker/v1alpha1/Model
	// used to set the ModelName.
	// +optional
	ModelNameSelector *xpv1.Selector `json:"modelNameSelector,omitempty"`

	// (Optional) An array of key-value pairs. For more information, see Using Cost
	// Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what)
	// in the AWS Billing and Cost Management User Guide.
	Tags []*Tag `json:"tags,omitempty"`

	// Describes the input source and the way the transform job consumes it.
	// +kubebuilder:validation:Required
	TransformInput *TransformInput `json:"transformInput"`

	// The name of the transform job. The name must be unique within an AWS Region
	// in an AWS account.
	// +kubebuilder:validation:Required
	TransformJobName *string `json:"transformJobName"`

	// Describes the results of the transform job.
	// +kubebuilder:validation:Required
	TransformOutput *TransformOutput `json:"transformOutput"`

	// Describes the resources, including ML instance types and ML instance count,
	// to use for the transform job.
	// +kubebuilder:validation:Required
	TransformResources *TransformResources `json:"transformResources"`
}

// TransformJobSpec defines the desired state of TransformJob
type TransformJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TransformJobParameters `json:"forProvider"`
}

// TransformJobObservation defines the observed state of TransformJob
type TransformJobObservation struct {
	// The Amazon Resource Name (ARN) of the transform job.
	TransformJobARN *string `json:"transformJobARN,omitempty"`
}

// TransformJobStatus defines the observed state of TransformJob.
type TransformJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TransformJobObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// TransformJob is the Schema for the TransformJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type TransformJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransformJobSpec   `json:"spec,omitempty"`
	Status            TransformJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransformJobList contains a list of TransformJobs
type TransformJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransformJob `json:"items"`
}

// Repository type metadata.
var (
	TransformJobKind             = "TransformJob"
	TransformJobGroupKind        = schema.GroupKind{Group: Group, Kind: TransformJobKind}.String()
	TransformJobKindAPIVersion   = TransformJobKind + "." + GroupVersion.String()
	TransformJobGroupVersionKind = GroupVersion.WithKind(TransformJobKind)
)

func init() {
	SchemeBuilder.Register(&TransformJob{}, &TransformJobList{})
}
