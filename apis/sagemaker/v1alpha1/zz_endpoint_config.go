/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// EndpointConfigParameters defines the desired state of EndpointConfig
type EndpointConfigParameters struct {
	// Region is which region the EndpointConfig will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	DataCaptureConfig *DataCaptureConfig `json:"dataCaptureConfig,omitempty"`

	// The name of the endpoint configuration. You specify this name in a CreateEndpoint
	// request.
	// +kubebuilder:validation:Required
	EndpointConfigName *string `json:"endpointConfigName"`

	// The Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon
	// SageMaker uses to encrypt data on the storage volume attached to the ML compute
	// instance that hosts the endpoint.
	//
	// The KmsKeyId can be any of the following formats:
	//
	//    * Key ID: 1234abcd-12ab-34cd-56ef-1234567890ab
	//
	//    * Key ARN: arn:aws:kms:us-west-2:111122223333:key/1234abcd-12ab-34cd-56ef-1234567890ab
	//
	//    * Alias name: alias/ExampleAlias
	//
	//    * Alias name ARN: arn:aws:kms:us-west-2:111122223333:alias/ExampleAlias
	//
	// The KMS key policy must grant permission to the IAM role that you specify
	// in your CreateEndpoint, UpdateEndpoint requests. For more information, refer
	// to the AWS Key Management Service section Using Key Policies in AWS KMS (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html)
	//
	// Certain Nitro-based instances include local storage, dependent on the instance
	// type. Local storage volumes are encrypted using a hardware module on the
	// instance. You can't request a KmsKeyId when using an instance type with local
	// storage. If any of the models that you specify in the ProductionVariants
	// parameter use nitro-based instances with local storage, do not specify a
	// value for the KmsKeyId parameter. If you specify a value for KmsKeyId when
	// using any nitro-based instances with local storage, the call to CreateEndpointConfig
	// fails.
	//
	// For a list of instance types that support local instance storage, see Instance
	// Store Volumes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html#instance-store-volumes).
	//
	// For more information about local instance storage encryption, see SSD Instance
	// Store Volumes (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ssd-instance-store.html).
	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	// An list of ProductionVariant objects, one for each model that you want to
	// host at this endpoint.
	// +kubebuilder:validation:Required
	ProductionVariants []*ProductionVariant `json:"productionVariants"`

	// A list of key-value pairs. For more information, see Using Cost Allocation
	// Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what)
	// in the AWS Billing and Cost Management User Guide.
	Tags []*Tag `json:"tags,omitempty"`
}

// EndpointConfigSpec defines the desired state of EndpointConfig
type EndpointConfigSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       EndpointConfigParameters `json:"forProvider"`
}

// EndpointConfigObservation defines the observed state of EndpointConfig
type EndpointConfigObservation struct {
	// The Amazon Resource Name (ARN) of the endpoint configuration.
	EndpointConfigARN *string `json:"endpointConfigARN,omitempty"`
}

// EndpointConfigStatus defines the observed state of EndpointConfig.
type EndpointConfigStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          EndpointConfigObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// EndpointConfig is the Schema for the EndpointConfigs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type EndpointConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointConfigSpec   `json:"spec,omitempty"`
	Status            EndpointConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointConfigList contains a list of EndpointConfigs
type EndpointConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointConfig `json:"items"`
}

// Repository type metadata.
var (
	EndpointConfigKind             = "EndpointConfig"
	EndpointConfigGroupKind        = schema.GroupKind{Group: Group, Kind: EndpointConfigKind}.String()
	EndpointConfigKindAPIVersion   = EndpointConfigKind + "." + GroupVersion.String()
	EndpointConfigGroupVersionKind = GroupVersion.WithKind(EndpointConfigKind)
)

func init() {
	SchemeBuilder.Register(&EndpointConfig{}, &EndpointConfigList{})
}
