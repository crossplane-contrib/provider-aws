/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TrialComponentParameters defines the desired state of TrialComponent
type TrialComponentParameters struct {
	// Region is which region the TrialComponent will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The name of the component as displayed. The name doesn't need to be unique.
	// If DisplayName isn't specified, TrialComponentName is displayed.
	DisplayName *string `json:"displayName,omitempty"`

	// When the component ended.
	EndTime *metav1.Time `json:"endTime,omitempty"`

	// The input artifacts for the component. Examples of input artifacts are datasets,
	// algorithms, hyperparameters, source code, and instance types.
	InputArtifacts map[string]*TrialComponentArtifact `json:"inputArtifacts,omitempty"`

	// The output artifacts for the component. Examples of output artifacts are
	// metrics, snapshots, logs, and images.
	OutputArtifacts map[string]*TrialComponentArtifact `json:"outputArtifacts,omitempty"`

	// The hyperparameters for the component.
	Parameters map[string]*TrialComponentParameterValue `json:"parameters,omitempty"`

	// When the component started.
	StartTime *metav1.Time `json:"startTime,omitempty"`

	// The status of the component. States include:
	//
	//    * InProgress
	//
	//    * Completed
	//
	//    * Failed
	Status *TrialComponentStatus_SDK `json:"status,omitempty"`

	// A list of tags to associate with the component. You can use Search API to
	// search on the tags.
	Tags []*Tag `json:"tags,omitempty"`

	// The name of the component. The name must be unique in your AWS account and
	// is not case-sensitive.
	// +kubebuilder:validation:Required
	TrialComponentName *string `json:"trialComponentName"`
}

// TrialComponentSpec defines the desired state of TrialComponent
type TrialComponentSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TrialComponentParameters `json:"forProvider"`
}

// TrialComponentObservation defines the observed state of TrialComponent
type TrialComponentObservation struct {
	// The Amazon Resource Name (ARN) of the trial component.
	TrialComponentARN *string `json:"trialComponentARN,omitempty"`
}

// TrialComponentStatus defines the observed state of TrialComponent.
type TrialComponentStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TrialComponentObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// TrialComponent is the Schema for the TrialComponents API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type TrialComponent struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrialComponentSpec   `json:"spec,omitempty"`
	Status            TrialComponentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrialComponentList contains a list of TrialComponents
type TrialComponentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrialComponent `json:"items"`
}

// Repository type metadata.
var (
	TrialComponentKind             = "TrialComponent"
	TrialComponentGroupKind        = schema.GroupKind{Group: Group, Kind: TrialComponentKind}.String()
	TrialComponentKindAPIVersion   = TrialComponentKind + "." + GroupVersion.String()
	TrialComponentGroupVersionKind = GroupVersion.WithKind(TrialComponentKind)
)

func init() {
	SchemeBuilder.Register(&TrialComponent{}, &TrialComponentList{})
}
