/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// LabelingJobParameters defines the desired state of LabelingJob
type LabelingJobParameters struct {
	// Region is which region the LabelingJob will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// Configures the labeling task and how it is presented to workers; including,
	// but not limited to price, keywords, and batch size (task count).
	// +kubebuilder:validation:Required
	HumanTaskConfig *HumanTaskConfig `json:"humanTaskConfig"`

	// Input data for the labeling job, such as the Amazon S3 location of the data
	// objects and the location of the manifest file that describes the data objects.
	// +kubebuilder:validation:Required
	InputConfig *LabelingJobInputConfig `json:"inputConfig"`

	// The attribute name to use for the label in the output manifest file. This
	// is the key for the key/value pair formed with the label that a worker assigns
	// to the object. The name can't end with "-metadata". If you are running a
	// semantic segmentation labeling job, the attribute name must end with "-ref".
	// If you are running any other kind of labeling job, the attribute name must
	// not end with "-ref".
	// +kubebuilder:validation:Required
	LabelAttributeName *string `json:"labelAttributeName"`

	// The S3 URL of the file that defines the categories used to label the data
	// objects.
	//
	// For 3D point cloud task types, see Create a Labeling Category Configuration
	// File for 3D Point Cloud Labeling Jobs (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-point-cloud-label-category-config.html).
	//
	// For all other built-in task types (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-task-types.html)
	// and custom tasks (https://docs.aws.amazon.com/sagemaker/latest/dg/sms-custom-templates.html),
	// your label category configuration file must be a JSON file in the following
	// format. Identify the labels you want to use by replacing label_1, label_2,...,label_n
	// with your label categories.
	//
	// {
	//
	// "document-version": "2018-11-28"
	//
	// "labels": [
	//
	// {
	//
	// "label": "label_1"
	//
	// },
	//
	// {
	//
	// "label": "label_2"
	//
	// },
	//
	// ...
	//
	// {
	//
	// "label": "label_n"
	//
	// }
	//
	// ]
	//
	// }
	LabelCategoryConfigS3URI *string `json:"labelCategoryConfigS3URI,omitempty"`

	// Configures the information required to perform automated data labeling.
	LabelingJobAlgorithmsConfig *LabelingJobAlgorithmsConfig `json:"labelingJobAlgorithmsConfig,omitempty"`

	// The name of the labeling job. This name is used to identify the job in a
	// list of labeling jobs.
	// +kubebuilder:validation:Required
	LabelingJobName *string `json:"labelingJobName"`

	// The location of the output data and the AWS Key Management Service key ID
	// for the key used to encrypt the output data, if any.
	// +kubebuilder:validation:Required
	OutputConfig *LabelingJobOutputConfig `json:"outputConfig"`

	// The Amazon Resource Number (ARN) that Amazon SageMaker assumes to perform
	// tasks on your behalf during data labeling. You must grant this role the necessary
	// permissions so that Amazon SageMaker can successfully complete data labeling.
	RoleARN *string `json:"roleARN,omitempty"`

	// RoleARNRef is a reference to an identity/v1beta1/IAMRole used
	// to set the RoleARN field.
	// +optional
	RoleARNRef *xpv1.Reference `json:"roleARNRef,omitempty"`

	// RoleARNSelector selects references to identity/v1beta1/IAMRole
	// used to set the RoleARN.
	// +optional
	RoleARNSelector *xpv1.Selector `json:"roleARNSelector,omitempty"`

	// A set of conditions for stopping the labeling job. If any of the conditions
	// are met, the job is automatically stopped. You can use these conditions to
	// control the cost of data labeling.
	StoppingConditions *LabelingJobStoppingConditions `json:"stoppingConditions,omitempty"`

	// An array of key/value pairs. For more information, see Using Cost Allocation
	// Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html#allocation-what)
	// in the AWS Billing and Cost Management User Guide.
	Tags []*Tag `json:"tags,omitempty"`
}

// LabelingJobSpec defines the desired state of LabelingJob
type LabelingJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LabelingJobParameters `json:"forProvider"`
}

// LabelingJobObservation defines the observed state of LabelingJob
type LabelingJobObservation struct {
	// The Amazon Resource Name (ARN) of the labeling job. You use this ARN to identify
	// the labeling job.
	LabelingJobARN *string `json:"labelingJobARN,omitempty"`
}

// LabelingJobStatus defines the observed state of LabelingJob.
type LabelingJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LabelingJobObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// LabelingJob is the Schema for the LabelingJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LabelingJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LabelingJobSpec   `json:"spec,omitempty"`
	Status            LabelingJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LabelingJobList contains a list of LabelingJobs
type LabelingJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LabelingJob `json:"items"`
}

// Repository type metadata.
var (
	LabelingJobKind             = "LabelingJob"
	LabelingJobGroupKind        = schema.GroupKind{Group: Group, Kind: LabelingJobKind}.String()
	LabelingJobKindAPIVersion   = LabelingJobKind + "." + GroupVersion.String()
	LabelingJobGroupVersionKind = GroupVersion.WithKind(LabelingJobKind)
)

func init() {
	SchemeBuilder.Register(&LabelingJob{}, &LabelingJobList{})
}
