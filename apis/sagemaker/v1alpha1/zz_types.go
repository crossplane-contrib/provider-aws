/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type AlgorithmSpecification struct {
	AlgorithmName *string `json:"algorithmName,omitempty"`

	// AlgorithmNameRef is a reference to an sagemaker/v1alpha1/Algorithm used
	// to set the AlgorithmName field.
	// +optional
	AlgorithmNameRef *xpv1.Reference `json:"algorithmNameRef,omitempty"`

	// AlgorithmNameSelector selects references to sagemaker/v1alpha1/Algorithm
	// used to set the AlgorithmName.
	// +optional
	AlgorithmNameSelector *xpv1.Selector `json:"algorithmNameSelector,omitempty"`

	EnableSageMakerMetricsTimeSeries *bool `json:"enableSageMakerMetricsTimeSeries,omitempty"`

	MetricDefinitions []*MetricDefinition `json:"metricDefinitions,omitempty"`

	TrainingImage *string `json:"trainingImage,omitempty"`

	TrainingInputMode *string `json:"trainingInputMode,omitempty"`
}

type AlgorithmStatusDetails struct {
	ImageScanStatuses []*AlgorithmStatusItem `json:"imageScanStatuses,omitempty"`

	ValidationStatuses []*AlgorithmStatusItem `json:"validationStatuses,omitempty"`
}

type AlgorithmStatusItem struct {
	FailureReason *string `json:"failureReason,omitempty"`

	Name *string `json:"name,omitempty"`

	Status *string `json:"status,omitempty"`
}

type AlgorithmSummary struct {
	AlgorithmARN *string `json:"algorithmARN,omitempty"`

	AlgorithmDescription *string `json:"algorithmDescription,omitempty"`

	AlgorithmName *string `json:"algorithmName,omitempty"`

	AlgorithmStatus *string `json:"algorithmStatus,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`
}

type AlgorithmValidationProfile struct {
	ProfileName *string `json:"profileName,omitempty"`
	// Defines the input needed to run a training job using the algorithm.
	TrainingJobDefinition *TrainingJobDefinition `json:"trainingJobDefinition,omitempty"`
	// Defines the input needed to run a transform job using the inference specification
	// specified in the algorithm.
	TransformJobDefinition *TransformJobDefinition `json:"transformJobDefinition,omitempty"`
}

type AlgorithmValidationSpecification struct {
	ValidationProfiles []*AlgorithmValidationProfile `json:"validationProfiles,omitempty"`

	ValidationRole *string `json:"validationRole,omitempty"`
}

type AnnotationConsolidationConfig struct {
	AnnotationConsolidationLambdaARN *string `json:"annotationConsolidationLambdaARN,omitempty"`
}

type AppDetails struct {
	AppName *string `json:"appName,omitempty"`

	AppType *string `json:"appType,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DomainID *string `json:"domainID,omitempty"`

	Status *string `json:"status,omitempty"`

	UserProfileName *string `json:"userProfileName,omitempty"`
}

type AppSpecification struct {
	ContainerArguments []*string `json:"containerArguments,omitempty"`

	ContainerEntrypoint []*string `json:"containerEntrypoint,omitempty"`

	ImageURI *string `json:"imageURI,omitempty"`
}

type AutoMLCandidate struct {
	CandidateName *string `json:"candidateName,omitempty"`

	CandidateStatus *string `json:"candidateStatus,omitempty"`

	CandidateSteps []*AutoMLCandidateStep `json:"candidateSteps,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	EndTime *metav1.Time `json:"endTime,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`
	// The best candidate result from an AutoML training job.
	FinalAutoMLJobObjectiveMetric *FinalAutoMLJobObjectiveMetric `json:"finalAutoMLJobObjectiveMetric,omitempty"`

	InferenceContainers []*AutoMLContainerDefinition `json:"inferenceContainers,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	ObjectiveStatus *string `json:"objectiveStatus,omitempty"`
}

type AutoMLCandidateStep struct {
	CandidateStepARN *string `json:"candidateStepARN,omitempty"`

	CandidateStepName *string `json:"candidateStepName,omitempty"`

	CandidateStepType *string `json:"candidateStepType,omitempty"`
}

type AutoMLChannel struct {
	CompressionType *string `json:"compressionType,omitempty"`
	// The data source for the Autopilot job.
	DataSource *AutoMLDataSource `json:"dataSource,omitempty"`

	TargetAttributeName *string `json:"targetAttributeName,omitempty"`
}

type AutoMLContainerDefinition struct {
	Environment map[string]*string `json:"environment,omitempty"`

	Image *string `json:"image,omitempty"`

	ModelDataURL *string `json:"modelDataURL,omitempty"`
}

type AutoMLDataSource struct {
	// The Amazon S3 data source.
	S3DataSource *AutoMLS3DataSource `json:"s3DataSource,omitempty"`
}

type AutoMLJobArtifacts struct {
	CandidateDefinitionNotebookLocation *string `json:"candidateDefinitionNotebookLocation,omitempty"`

	DataExplorationNotebookLocation *string `json:"dataExplorationNotebookLocation,omitempty"`
}

type AutoMLJobCompletionCriteria struct {
	MaxAutoMLJobRuntimeInSeconds *int64 `json:"maxAutoMLJobRuntimeInSeconds,omitempty"`

	MaxCandidates *int64 `json:"maxCandidates,omitempty"`

	MaxRuntimePerTrainingJobInSeconds *int64 `json:"maxRuntimePerTrainingJobInSeconds,omitempty"`
}

type AutoMLJobConfig struct {
	// How long a job is allowed to run, or how many candidates a job is allowed
	// to generate.
	CompletionCriteria *AutoMLJobCompletionCriteria `json:"completionCriteria,omitempty"`
	// Security options.
	SecurityConfig *AutoMLSecurityConfig `json:"securityConfig,omitempty"`
}

type AutoMLJobObjective struct {
	MetricName *string `json:"metricName,omitempty"`
}

type AutoMLJobSummary struct {
	AutoMLJobARN *string `json:"autoMLJobARN,omitempty"`

	AutoMLJobName *string `json:"autoMLJobName,omitempty"`

	AutoMLJobSecondaryStatus *string `json:"autoMLJobSecondaryStatus,omitempty"`

	AutoMLJobStatus *string `json:"autoMLJobStatus,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	EndTime *metav1.Time `json:"endTime,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

type AutoMLOutputDataConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

type AutoMLS3DataSource struct {
	S3DataType *string `json:"s3DataType,omitempty"`

	S3URI *string `json:"s3URI,omitempty"`
}

type AutoMLSecurityConfig struct {
	EnableInterContainerTrafficEncryption *bool `json:"enableInterContainerTrafficEncryption,omitempty"`

	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`
	// Specifies a VPC that your training jobs and hosted models have access to.
	// Control access to and from your training and model containers by configuring
	// the VPC. For more information, see Protect Endpoints by Using an Amazon Virtual
	// Private Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html)
	// and Protect Training Jobs by Using an Amazon Virtual Private Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

type CaptureContentTypeHeader struct {
	CsvContentTypes []*string `json:"csvContentTypes,omitempty"`

	JSONContentTypes []*string `json:"jsonContentTypes,omitempty"`
}

type CaptureOption struct {
	CaptureMode *string `json:"captureMode,omitempty"`
}

type CategoricalParameterRange struct {
	Name *string `json:"name,omitempty"`

	Values []*string `json:"values,omitempty"`
}

type CategoricalParameterRangeSpecification struct {
	Values []*string `json:"values,omitempty"`
}

type Channel struct {
	ChannelName *string `json:"channelName,omitempty"`

	CompressionType *string `json:"compressionType,omitempty"`

	ContentType *string `json:"contentType,omitempty"`
	// Describes the location of the channel data.
	DataSource *DataSource `json:"dataSource,omitempty"`

	InputMode *string `json:"inputMode,omitempty"`

	RecordWrapperType *string `json:"recordWrapperType,omitempty"`
	// A configuration for a shuffle option for input data in a channel. If you
	// use S3Prefix for S3DataType, the results of the S3 key prefix matches are
	// shuffled. If you use ManifestFile, the order of the S3 object references
	// in the ManifestFile is shuffled. If you use AugmentedManifestFile, the order
	// of the JSON lines in the AugmentedManifestFile is shuffled. The shuffling
	// order is determined using the Seed value.
	//
	// For Pipe input mode, when ShuffleConfig is specified shuffling is done at
	// the start of every epoch. With large datasets, this ensures that the order
	// of the training data is different for each epoch, and it helps reduce bias
	// and possible overfitting. In a multi-node training job when ShuffleConfig
	// is combined with S3DataDistributionType of ShardedByS3Key, the data is shuffled
	// across nodes so that the content sent to a particular node on the first epoch
	// might be sent to a different node on the second epoch.
	ShuffleConfig *ShuffleConfig `json:"shuffleConfig,omitempty"`
}

type ChannelSpecification struct {
	Description *string `json:"description,omitempty"`

	IsRequired *bool `json:"isRequired,omitempty"`

	Name *string `json:"name,omitempty"`

	SupportedCompressionTypes []*string `json:"supportedCompressionTypes,omitempty"`

	SupportedContentTypes []*string `json:"supportedContentTypes,omitempty"`

	SupportedInputModes []*string `json:"supportedInputModes,omitempty"`
}

type CheckpointConfig struct {
	LocalPath *string `json:"localPath,omitempty"`

	S3URI *string `json:"s3URI,omitempty"`
}

type CodeRepositorySummary struct {
	CodeRepositoryARN *string `json:"codeRepositoryARN,omitempty"`

	CodeRepositoryName *string `json:"codeRepositoryName,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// Specifies configuration details for a Git repository in your AWS account.
	GitConfig *GitConfig `json:"gitConfig,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

type CognitoConfig struct {
	ClientID *string `json:"clientID,omitempty"`

	UserPool *string `json:"userPool,omitempty"`
}

type CognitoMemberDefinition struct {
	ClientID *string `json:"clientID,omitempty"`

	UserGroup *string `json:"userGroup,omitempty"`

	UserPool *string `json:"userPool,omitempty"`
}

type CollectionConfiguration struct {
	CollectionName *string `json:"collectionName,omitempty"`

	CollectionParameters map[string]*string `json:"collectionParameters,omitempty"`
}

type CompilationJobSummary struct {
	CompilationEndTime *metav1.Time `json:"compilationEndTime,omitempty"`

	CompilationJobARN *string `json:"compilationJobARN,omitempty"`

	CompilationJobName *string `json:"compilationJobName,omitempty"`

	CompilationJobStatus *string `json:"compilationJobStatus,omitempty"`

	CompilationStartTime *metav1.Time `json:"compilationStartTime,omitempty"`

	CompilationTargetDevice *string `json:"compilationTargetDevice,omitempty"`

	CompilationTargetPlatformAccelerator *string `json:"compilationTargetPlatformAccelerator,omitempty"`

	CompilationTargetPlatformArch *string `json:"compilationTargetPlatformArch,omitempty"`

	CompilationTargetPlatformOs *string `json:"compilationTargetPlatformOs,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

type ContainerDefinition struct {
	ContainerHostname *string `json:"containerHostname,omitempty"`

	Environment map[string]*string `json:"environment,omitempty"`

	Image *string `json:"image,omitempty"`
	// Specifies whether the model container is in Amazon ECR or a private Docker
	// registry accessible from your Amazon Virtual Private Cloud (VPC).
	ImageConfig *ImageConfig `json:"imageConfig,omitempty"`

	Mode *string `json:"mode,omitempty"`

	ModelDataURL *string `json:"modelDataURL,omitempty"`

	ModelPackageName *string `json:"modelPackageName,omitempty"`
}

type ContinuousParameterRange struct {
	MaxValue *string `json:"maxValue,omitempty"`

	MinValue *string `json:"minValue,omitempty"`

	Name *string `json:"name,omitempty"`

	ScalingType *string `json:"scalingType,omitempty"`
}

type ContinuousParameterRangeSpecification struct {
	MaxValue *string `json:"maxValue,omitempty"`

	MinValue *string `json:"minValue,omitempty"`
}

type DataCaptureConfig struct {
	CaptureContentTypeHeader *CaptureContentTypeHeader `json:"captureContentTypeHeader,omitempty"`

	CaptureOptions []*CaptureOption `json:"captureOptions,omitempty"`

	DestinationS3URI *string `json:"destinationS3URI,omitempty"`

	EnableCapture *bool `json:"enableCapture,omitempty"`

	InitialSamplingPercentage *int64 `json:"initialSamplingPercentage,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`
}

type DataCaptureConfigSummary struct {
	CaptureStatus *string `json:"captureStatus,omitempty"`

	CurrentSamplingPercentage *int64 `json:"currentSamplingPercentage,omitempty"`

	DestinationS3URI *string `json:"destinationS3URI,omitempty"`

	EnableCapture *bool `json:"enableCapture,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`
}

type DataProcessing struct {
	InputFilter *string `json:"inputFilter,omitempty"`

	JoinSource *string `json:"joinSource,omitempty"`

	OutputFilter *string `json:"outputFilter,omitempty"`
}

type DataSource struct {
	// Specifies a file system data source for a channel.
	FileSystemDataSource *FileSystemDataSource `json:"fileSystemDataSource,omitempty"`
	// Describes the S3 data source.
	S3DataSource *S3DataSource `json:"s3DataSource,omitempty"`
}

type DebugHookConfig struct {
	CollectionConfigurations []*CollectionConfiguration `json:"collectionConfigurations,omitempty"`

	HookParameters map[string]*string `json:"hookParameters,omitempty"`

	LocalPath *string `json:"localPath,omitempty"`

	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

type DebugRuleConfiguration struct {
	InstanceType *string `json:"instanceType,omitempty"`

	LocalPath *string `json:"localPath,omitempty"`

	RuleConfigurationName *string `json:"ruleConfigurationName,omitempty"`

	RuleEvaluatorImage *string `json:"ruleEvaluatorImage,omitempty"`

	RuleParameters map[string]*string `json:"ruleParameters,omitempty"`

	S3OutputPath *string `json:"s3OutputPath,omitempty"`

	VolumeSizeInGB *int64 `json:"volumeSizeInGB,omitempty"`
}

type DebugRuleEvaluationStatus struct {
	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	RuleConfigurationName *string `json:"ruleConfigurationName,omitempty"`

	RuleEvaluationJobARN *string `json:"ruleEvaluationJobARN,omitempty"`

	RuleEvaluationStatus *string `json:"ruleEvaluationStatus,omitempty"`

	StatusDetails *string `json:"statusDetails,omitempty"`
}

type DeployedImage struct {
	ResolutionTime *metav1.Time `json:"resolutionTime,omitempty"`

	ResolvedImage *string `json:"resolvedImage,omitempty"`

	SpecifiedImage *string `json:"specifiedImage,omitempty"`
}

type DesiredWeightAndCapacity struct {
	DesiredInstanceCount *int64 `json:"desiredInstanceCount,omitempty"`

	DesiredWeight *float64 `json:"desiredWeight,omitempty"`

	VariantName *string `json:"variantName,omitempty"`
}

type DomainDetails struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DomainARN *string `json:"domainARN,omitempty"`

	DomainID *string `json:"domainID,omitempty"`

	DomainName *string `json:"domainName,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	Status *string `json:"status,omitempty"`

	URL *string `json:"url,omitempty"`
}

type EndpointConfigSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	EndpointConfigARN *string `json:"endpointConfigARN,omitempty"`

	EndpointConfigName *string `json:"endpointConfigName,omitempty"`
}

type EndpointInput struct {
	EndpointName *string `json:"endpointName,omitempty"`

	// EndpointNameRef is a reference to an sagemaker/v1alpha1/Endpoint used
	// to set the EndpointName field.
	// +optional
	EndpointNameRef *xpv1.Reference `json:"endpointNameRef,omitempty"`

	// EndpointNameSelector selects references to sagemaker/v1alpha1/Endpoint
	// used to set the EndpointName.
	// +optional
	EndpointNameSelector *xpv1.Selector `json:"endpointNameSelector,omitempty"`

	LocalPath *string `json:"localPath,omitempty"`

	S3DataDistributionType *string `json:"s3DataDistributionType,omitempty"`

	S3InputMode *string `json:"s3InputMode,omitempty"`
}

type EndpointSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	EndpointARN *string `json:"endpointARN,omitempty"`

	EndpointName *string `json:"endpointName,omitempty"`

	EndpointStatus *string `json:"endpointStatus,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

type ExperimentConfig struct {
	ExperimentName *string `json:"experimentName,omitempty"`

	// ExperimentNameRef is a reference to an sagemaker/v1alpha1/Experiment used
	// to set the ExperimentName field.
	// +optional
	ExperimentNameRef *xpv1.Reference `json:"experimentNameRef,omitempty"`

	// ExperimentNameSelector selects references to sagemaker/v1alpha1/Experiment
	// used to set the ExperimentName.
	// +optional
	ExperimentNameSelector *xpv1.Selector `json:"experimentNameSelector,omitempty"`

	TrialComponentDisplayName *string `json:"trialComponentDisplayName,omitempty"`

	TrialName *string `json:"trialName,omitempty"`

	// TrialNameRef is a reference to an sagemaker/v1alpha1/Trial used
	// to set the TrialName field.
	// +optional
	TrialNameRef *xpv1.Reference `json:"trialNameRef,omitempty"`

	// TrialNameSelector selects references to sagemaker/v1alpha1/Trial
	// used to set the TrialName.
	// +optional
	TrialNameSelector *xpv1.Selector `json:"trialNameSelector,omitempty"`
}

type ExperimentSource struct {
	SourceARN *string `json:"sourceARN,omitempty"`

	SourceType *string `json:"sourceType,omitempty"`
}

type ExperimentSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DisplayName *string `json:"displayName,omitempty"`

	ExperimentARN *string `json:"experimentARN,omitempty"`

	ExperimentName *string `json:"experimentName,omitempty"`
	// The source of the experiment.
	ExperimentSource *ExperimentSource `json:"experimentSource,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
}

type Experiment_SDK struct {
	// Information about the user who created or modified an experiment, trial,
	// or trial component.
	CreatedBy *UserContext `json:"createdBy,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	Description *string `json:"description,omitempty"`

	DisplayName *string `json:"displayName,omitempty"`

	ExperimentARN *string `json:"experimentARN,omitempty"`

	ExperimentName *string `json:"experimentName,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// or trial component.
	LastModifiedBy *UserContext `json:"lastModifiedBy,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// The source of the experiment.
	Source *ExperimentSource `json:"source,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

type FileSystemDataSource struct {
	DirectoryPath *string `json:"directoryPath,omitempty"`

	FileSystemAccessMode *string `json:"fileSystemAccessMode,omitempty"`

	FileSystemID *string `json:"fileSystemID,omitempty"`

	FileSystemType *string `json:"fileSystemType,omitempty"`
}

type FinalAutoMLJobObjectiveMetric struct {
	MetricName *string `json:"metricName,omitempty"`

	Type *string `json:"type_,omitempty"`

	Value *float64 `json:"value,omitempty"`
}

type FinalHyperParameterTuningJobObjectiveMetric struct {
	MetricName *string `json:"metricName,omitempty"`

	Type *string `json:"type_,omitempty"`

	Value *float64 `json:"value,omitempty"`
}

type FlowDefinitionOutputConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

type FlowDefinitionSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`
}

type GitConfig struct {
	Branch *string `json:"branch,omitempty"`

	RepositoryURL *string `json:"repositoryURL,omitempty"`

	SecretARN *string `json:"secretARN,omitempty"`
}

type GitConfigForUpdate struct {
	SecretARN *string `json:"secretARN,omitempty"`
}

type HumanLoopConfig struct {
	HumanTaskUiARN *string `json:"humanTaskUiARN,omitempty"`
	// Defines the amount of money paid to an Amazon Mechanical Turk worker for
	// each task performed.
	//
	// Use one of the following prices for bounding box tasks. Prices are in US
	// dollars and should be based on the complexity of the task; the longer it
	// takes in your initial testing, the more you should offer.
	//
	//    * 0.036
	//
	//    * 0.048
	//
	//    * 0.060
	//
	//    * 0.072
	//
	//    * 0.120
	//
	//    * 0.240
	//
	//    * 0.360
	//
	//    * 0.480
	//
	//    * 0.600
	//
	//    * 0.720
	//
	//    * 0.840
	//
	//    * 0.960
	//
	//    * 1.080
	//
	//    * 1.200
	//
	// Use one of the following prices for image classification, text classification,
	// and custom tasks. Prices are in US dollars.
	//
	//    * 0.012
	//
	//    * 0.024
	//
	//    * 0.036
	//
	//    * 0.048
	//
	//    * 0.060
	//
	//    * 0.072
	//
	//    * 0.120
	//
	//    * 0.240
	//
	//    * 0.360
	//
	//    * 0.480
	//
	//    * 0.600
	//
	//    * 0.720
	//
	//    * 0.840
	//
	//    * 0.960
	//
	//    * 1.080
	//
	//    * 1.200
	//
	// Use one of the following prices for semantic segmentation tasks. Prices are
	// in US dollars.
	//
	//    * 0.840
	//
	//    * 0.960
	//
	//    * 1.080
	//
	//    * 1.200
	//
	// Use one of the following prices for Textract AnalyzeDocument Important Form
	// Key Amazon Augmented AI review tasks. Prices are in US dollars.
	//
	//    * 2.400
	//
	//    * 2.280
	//
	//    * 2.160
	//
	//    * 2.040
	//
	//    * 1.920
	//
	//    * 1.800
	//
	//    * 1.680
	//
	//    * 1.560
	//
	//    * 1.440
	//
	//    * 1.320
	//
	//    * 1.200
	//
	//    * 1.080
	//
	//    * 0.960
	//
	//    * 0.840
	//
	//    * 0.720
	//
	//    * 0.600
	//
	//    * 0.480
	//
	//    * 0.360
	//
	//    * 0.240
	//
	//    * 0.120
	//
	//    * 0.072
	//
	//    * 0.060
	//
	//    * 0.048
	//
	//    * 0.036
	//
	//    * 0.024
	//
	//    * 0.012
	//
	// Use one of the following prices for Rekognition DetectModerationLabels Amazon
	// Augmented AI review tasks. Prices are in US dollars.
	//
	//    * 1.200
	//
	//    * 1.080
	//
	//    * 0.960
	//
	//    * 0.840
	//
	//    * 0.720
	//
	//    * 0.600
	//
	//    * 0.480
	//
	//    * 0.360
	//
	//    * 0.240
	//
	//    * 0.120
	//
	//    * 0.072
	//
	//    * 0.060
	//
	//    * 0.048
	//
	//    * 0.036
	//
	//    * 0.024
	//
	//    * 0.012
	//
	// Use one of the following prices for Amazon Augmented AI custom human review
	// tasks. Prices are in US dollars.
	//
	//    * 1.200
	//
	//    * 1.080
	//
	//    * 0.960
	//
	//    * 0.840
	//
	//    * 0.720
	//
	//    * 0.600
	//
	//    * 0.480
	//
	//    * 0.360
	//
	//    * 0.240
	//
	//    * 0.120
	//
	//    * 0.072
	//
	//    * 0.060
	//
	//    * 0.048
	//
	//    * 0.036
	//
	//    * 0.024
	//
	//    * 0.012
	PublicWorkforceTaskPrice *PublicWorkforceTaskPrice `json:"publicWorkforceTaskPrice,omitempty"`

	WorkteamARN *string `json:"workteamARN,omitempty"`
}

type HumanTaskConfig struct {
	// Configures how labels are consolidated across human workers and processes
	// output data.
	AnnotationConsolidationConfig *AnnotationConsolidationConfig `json:"annotationConsolidationConfig,omitempty"`

	MaxConcurrentTaskCount *int64 `json:"maxConcurrentTaskCount,omitempty"`

	NumberOfHumanWorkersPerDataObject *int64 `json:"numberOfHumanWorkersPerDataObject,omitempty"`

	PreHumanTaskLambdaARN *string `json:"preHumanTaskLambdaARN,omitempty"`
	// Defines the amount of money paid to an Amazon Mechanical Turk worker for
	// each task performed.
	//
	// Use one of the following prices for bounding box tasks. Prices are in US
	// dollars and should be based on the complexity of the task; the longer it
	// takes in your initial testing, the more you should offer.
	//
	//    * 0.036
	//
	//    * 0.048
	//
	//    * 0.060
	//
	//    * 0.072
	//
	//    * 0.120
	//
	//    * 0.240
	//
	//    * 0.360
	//
	//    * 0.480
	//
	//    * 0.600
	//
	//    * 0.720
	//
	//    * 0.840
	//
	//    * 0.960
	//
	//    * 1.080
	//
	//    * 1.200
	//
	// Use one of the following prices for image classification, text classification,
	// and custom tasks. Prices are in US dollars.
	//
	//    * 0.012
	//
	//    * 0.024
	//
	//    * 0.036
	//
	//    * 0.048
	//
	//    * 0.060
	//
	//    * 0.072
	//
	//    * 0.120
	//
	//    * 0.240
	//
	//    * 0.360
	//
	//    * 0.480
	//
	//    * 0.600
	//
	//    * 0.720
	//
	//    * 0.840
	//
	//    * 0.960
	//
	//    * 1.080
	//
	//    * 1.200
	//
	// Use one of the following prices for semantic segmentation tasks. Prices are
	// in US dollars.
	//
	//    * 0.840
	//
	//    * 0.960
	//
	//    * 1.080
	//
	//    * 1.200
	//
	// Use one of the following prices for Textract AnalyzeDocument Important Form
	// Key Amazon Augmented AI review tasks. Prices are in US dollars.
	//
	//    * 2.400
	//
	//    * 2.280
	//
	//    * 2.160
	//
	//    * 2.040
	//
	//    * 1.920
	//
	//    * 1.800
	//
	//    * 1.680
	//
	//    * 1.560
	//
	//    * 1.440
	//
	//    * 1.320
	//
	//    * 1.200
	//
	//    * 1.080
	//
	//    * 0.960
	//
	//    * 0.840
	//
	//    * 0.720
	//
	//    * 0.600
	//
	//    * 0.480
	//
	//    * 0.360
	//
	//    * 0.240
	//
	//    * 0.120
	//
	//    * 0.072
	//
	//    * 0.060
	//
	//    * 0.048
	//
	//    * 0.036
	//
	//    * 0.024
	//
	//    * 0.012
	//
	// Use one of the following prices for Rekognition DetectModerationLabels Amazon
	// Augmented AI review tasks. Prices are in US dollars.
	//
	//    * 1.200
	//
	//    * 1.080
	//
	//    * 0.960
	//
	//    * 0.840
	//
	//    * 0.720
	//
	//    * 0.600
	//
	//    * 0.480
	//
	//    * 0.360
	//
	//    * 0.240
	//
	//    * 0.120
	//
	//    * 0.072
	//
	//    * 0.060
	//
	//    * 0.048
	//
	//    * 0.036
	//
	//    * 0.024
	//
	//    * 0.012
	//
	// Use one of the following prices for Amazon Augmented AI custom human review
	// tasks. Prices are in US dollars.
	//
	//    * 1.200
	//
	//    * 1.080
	//
	//    * 0.960
	//
	//    * 0.840
	//
	//    * 0.720
	//
	//    * 0.600
	//
	//    * 0.480
	//
	//    * 0.360
	//
	//    * 0.240
	//
	//    * 0.120
	//
	//    * 0.072
	//
	//    * 0.060
	//
	//    * 0.048
	//
	//    * 0.036
	//
	//    * 0.024
	//
	//    * 0.012
	PublicWorkforceTaskPrice *PublicWorkforceTaskPrice `json:"publicWorkforceTaskPrice,omitempty"`

	TaskAvailabilityLifetimeInSeconds *int64 `json:"taskAvailabilityLifetimeInSeconds,omitempty"`

	TaskDescription *string `json:"taskDescription,omitempty"`

	TaskKeywords []*string `json:"taskKeywords,omitempty"`

	TaskTimeLimitInSeconds *int64 `json:"taskTimeLimitInSeconds,omitempty"`

	TaskTitle *string `json:"taskTitle,omitempty"`
	// Provided configuration information for the worker UI for a labeling job.
	UiConfig *UiConfig `json:"uiConfig,omitempty"`

	WorkteamARN *string `json:"workteamARN,omitempty"`

	// WorkteamARNRef is a reference to an sagemaker/v1alpha1/Workteam used
	// to set the WorkteamARN field.
	// +optional
	WorkteamARNRef *xpv1.Reference `json:"workteamARNRef,omitempty"`

	// WorkteamARNSelector selects references to sagemaker/v1alpha1/Workteam
	// used to set the WorkteamARN.
	// +optional
	WorkteamARNSelector *xpv1.Selector `json:"workteamARNSelector,omitempty"`
}

type HumanTaskUiSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	HumanTaskUiARN *string `json:"humanTaskUiARN,omitempty"`

	HumanTaskUiName *string `json:"humanTaskUiName,omitempty"`
}

type HyperParameterAlgorithmSpecification struct {
	AlgorithmName *string `json:"algorithmName,omitempty"`

	// AlgorithmNameRef is a reference to an sagemaker/v1alpha1/Algorithm used
	// to set the AlgorithmName field.
	// +optional
	AlgorithmNameRef *xpv1.Reference `json:"algorithmNameRef,omitempty"`

	// AlgorithmNameSelector selects references to sagemaker/v1alpha1/Algorithm
	// used to set the AlgorithmName.
	// +optional
	AlgorithmNameSelector *xpv1.Selector `json:"algorithmNameSelector,omitempty"`

	MetricDefinitions []*MetricDefinition `json:"metricDefinitions,omitempty"`

	TrainingImage *string `json:"trainingImage,omitempty"`

	TrainingInputMode *string `json:"trainingInputMode,omitempty"`
}

type HyperParameterSpecification struct {
	DefaultValue *string `json:"defaultValue,omitempty"`

	Description *string `json:"description,omitempty"`

	IsRequired *bool `json:"isRequired,omitempty"`

	IsTunable *bool `json:"isTunable,omitempty"`

	Name *string `json:"name,omitempty"`
	// Defines the possible values for categorical, continuous, and integer hyperparameters
	// to be used by an algorithm.
	Range *ParameterRange `json:"range_,omitempty"`

	Type *string `json:"type_,omitempty"`
}

type HyperParameterTrainingJobDefinition struct {
	// Specifies which training algorithm to use for training jobs that a hyperparameter
	// tuning job launches and the metrics to monitor.
	AlgorithmSpecification *HyperParameterAlgorithmSpecification `json:"algorithmSpecification,omitempty"`
	// Contains information about the output location for managed spot training
	// checkpoint data.
	CheckpointConfig *CheckpointConfig `json:"checkpointConfig,omitempty"`

	DefinitionName *string `json:"definitionName,omitempty"`

	EnableInterContainerTrafficEncryption *bool `json:"enableInterContainerTrafficEncryption,omitempty"`

	EnableManagedSpotTraining *bool `json:"enableManagedSpotTraining,omitempty"`

	EnableNetworkIsolation *bool `json:"enableNetworkIsolation,omitempty"`
	// Specifies ranges of integer, continuous, and categorical hyperparameters
	// that a hyperparameter tuning job searches. The hyperparameter tuning job
	// launches training jobs with hyperparameter values within these ranges to
	// find the combination of values that result in the training job with the best
	// performance as measured by the objective metric of the hyperparameter tuning
	// job.
	//
	// You can specify a maximum of 20 hyperparameters that a hyperparameter tuning
	// job can search over. Every possible value of a categorical parameter range
	// counts against this limit.
	HyperParameterRanges *ParameterRanges `json:"hyperParameterRanges,omitempty"`

	InputDataConfig []*Channel `json:"inputDataConfig,omitempty"`
	// Provides information about how to store model training results (model artifacts).
	OutputDataConfig *OutputDataConfig `json:"outputDataConfig,omitempty"`
	// Describes the resources, including ML compute instances and ML storage volumes,
	// to use for model training.
	ResourceConfig *ResourceConfig `json:"resourceConfig,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	// RoleARNRef is a reference to an identity/v1beta1/IAMRole used
	// to set the RoleARN field.
	// +optional
	RoleARNRef *xpv1.Reference `json:"roleARNRef,omitempty"`

	// RoleARNSelector selects references to identity/v1beta1/IAMRole
	// used to set the RoleARN.
	// +optional
	RoleARNSelector *xpv1.Selector `json:"roleARNSelector,omitempty"`

	StaticHyperParameters map[string]*string `json:"staticHyperParameters,omitempty"`
	// Specifies a limit to how long a model training or compilation job can run.
	// It also specifies how long you are willing to wait for a managed spot training
	// job to complete. When the job reaches the time limit, Amazon SageMaker ends
	// the training or compilation job. Use this API to cap model training costs.
	//
	// To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which
	// delays job termination for 120 seconds. Algorithms can use this 120-second
	// window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by Amazon SageMaker automatically save the
	// intermediate results of a model training job when possible. This attempt
	// to save artifacts is only a best effort case as model might not be in a state
	// from which it can be saved. For example, if training has just started, the
	// model might not be ready to save. When saved, this intermediate data is a
	// valid model artifact. You can use it to create a model with CreateModel.
	//
	// The Neural Topic Model (NTM) currently does not support saving intermediate
	// model artifacts. When training NTMs, make sure that the maximum runtime is
	// sufficient for the training job to complete.
	StoppingCondition *StoppingCondition `json:"stoppingCondition,omitempty"`
	// Defines the objective metric for a hyperparameter tuning job. Hyperparameter
	// tuning uses the value of this metric to evaluate the training jobs it launches,
	// and returns the training job that results in either the highest or lowest
	// value for this metric, depending on the value you specify for the Type parameter.
	TuningObjective *HyperParameterTuningJobObjective `json:"tuningObjective,omitempty"`
	// Specifies a VPC that your training jobs and hosted models have access to.
	// Control access to and from your training and model containers by configuring
	// the VPC. For more information, see Protect Endpoints by Using an Amazon Virtual
	// Private Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html)
	// and Protect Training Jobs by Using an Amazon Virtual Private Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

type HyperParameterTrainingJobSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`
	// Shows the final value for the objective metric for a training job that was
	// launched by a hyperparameter tuning job. You define the objective metric
	// in the HyperParameterTuningJobObjective parameter of HyperParameterTuningJobConfig.
	FinalHyperParameterTuningJobObjectiveMetric *FinalHyperParameterTuningJobObjectiveMetric `json:"finalHyperParameterTuningJobObjectiveMetric,omitempty"`

	ObjectiveStatus *string `json:"objectiveStatus,omitempty"`

	TrainingEndTime *metav1.Time `json:"trainingEndTime,omitempty"`

	TrainingJobARN *string `json:"trainingJobARN,omitempty"`

	TrainingJobDefinitionName *string `json:"trainingJobDefinitionName,omitempty"`

	TrainingJobName *string `json:"trainingJobName,omitempty"`

	TrainingJobStatus *string `json:"trainingJobStatus,omitempty"`

	TrainingStartTime *metav1.Time `json:"trainingStartTime,omitempty"`

	TunedHyperParameters map[string]*string `json:"tunedHyperParameters,omitempty"`

	TuningJobName *string `json:"tuningJobName,omitempty"`
}

type HyperParameterTuningJobConfig struct {
	// Defines the objective metric for a hyperparameter tuning job. Hyperparameter
	// tuning uses the value of this metric to evaluate the training jobs it launches,
	// and returns the training job that results in either the highest or lowest
	// value for this metric, depending on the value you specify for the Type parameter.
	HyperParameterTuningJobObjective *HyperParameterTuningJobObjective `json:"hyperParameterTuningJobObjective,omitempty"`
	// Specifies ranges of integer, continuous, and categorical hyperparameters
	// that a hyperparameter tuning job searches. The hyperparameter tuning job
	// launches training jobs with hyperparameter values within these ranges to
	// find the combination of values that result in the training job with the best
	// performance as measured by the objective metric of the hyperparameter tuning
	// job.
	//
	// You can specify a maximum of 20 hyperparameters that a hyperparameter tuning
	// job can search over. Every possible value of a categorical parameter range
	// counts against this limit.
	ParameterRanges *ParameterRanges `json:"parameterRanges,omitempty"`
	// Specifies the maximum number of training jobs and parallel training jobs
	// that a hyperparameter tuning job can launch.
	ResourceLimits *ResourceLimits `json:"resourceLimits,omitempty"`
	// The strategy hyperparameter tuning uses to find the best combination of hyperparameters
	// for your model. Currently, the only supported value is Bayesian.
	Strategy *string `json:"strategy,omitempty"`

	TrainingJobEarlyStoppingType *string `json:"trainingJobEarlyStoppingType,omitempty"`
	// The job completion criteria.
	TuningJobCompletionCriteria *TuningJobCompletionCriteria `json:"tuningJobCompletionCriteria,omitempty"`
}

type HyperParameterTuningJobObjective struct {
	MetricName *string `json:"metricName,omitempty"`

	Type *string `json:"type_,omitempty"`
}

type HyperParameterTuningJobSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	HyperParameterTuningEndTime *metav1.Time `json:"hyperParameterTuningEndTime,omitempty"`

	HyperParameterTuningJobARN *string `json:"hyperParameterTuningJobARN,omitempty"`

	HyperParameterTuningJobName *string `json:"hyperParameterTuningJobName,omitempty"`

	HyperParameterTuningJobStatus *string `json:"hyperParameterTuningJobStatus,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// Specifies the number of training jobs that this hyperparameter tuning job
	// launched, categorized by the status of their objective metric. The objective
	// metric status shows whether the final objective metric for the training job
	// has been evaluated by the tuning job and used in the hyperparameter tuning
	// process.
	ObjectiveStatusCounters *ObjectiveStatusCounters `json:"objectiveStatusCounters,omitempty"`
	// Specifies the maximum number of training jobs and parallel training jobs
	// that a hyperparameter tuning job can launch.
	ResourceLimits *ResourceLimits `json:"resourceLimits,omitempty"`
	// The strategy hyperparameter tuning uses to find the best combination of hyperparameters
	// for your model. Currently, the only supported value is Bayesian.
	Strategy *string `json:"strategy,omitempty"`
	// The numbers of training jobs launched by a hyperparameter tuning job, categorized
	// by status.
	TrainingJobStatusCounters *TrainingJobStatusCounters `json:"trainingJobStatusCounters,omitempty"`
}

type HyperParameterTuningJobWarmStartConfig struct {
	ParentHyperParameterTuningJobs []*ParentHyperParameterTuningJob `json:"parentHyperParameterTuningJobs,omitempty"`

	WarmStartType *string `json:"warmStartType,omitempty"`
}

type ImageConfig struct {
	RepositoryAccessMode *string `json:"repositoryAccessMode,omitempty"`
}

type InferenceSpecification struct {
	Containers []*ModelPackageContainerDefinition `json:"containers,omitempty"`

	SupportedContentTypes []*string `json:"supportedContentTypes,omitempty"`

	SupportedRealtimeInferenceInstanceTypes []*string `json:"supportedRealtimeInferenceInstanceTypes,omitempty"`

	SupportedResponseMIMETypes []*string `json:"supportedResponseMIMETypes,omitempty"`

	SupportedTransformInstanceTypes []*string `json:"supportedTransformInstanceTypes,omitempty"`
}

type InputConfig struct {
	DataInputConfig *string `json:"dataInputConfig,omitempty"`

	Framework *string `json:"framework,omitempty"`

	S3URI *string `json:"s3URI,omitempty"`
}

type IntegerParameterRange struct {
	MaxValue *string `json:"maxValue,omitempty"`

	MinValue *string `json:"minValue,omitempty"`

	Name *string `json:"name,omitempty"`

	ScalingType *string `json:"scalingType,omitempty"`
}

type IntegerParameterRangeSpecification struct {
	MaxValue *string `json:"maxValue,omitempty"`

	MinValue *string `json:"minValue,omitempty"`
}

type JupyterServerAppSettings struct {
	// The instance type and the Amazon Resource Name (ARN) of the SageMaker image
	// created on the instance. The ARN is stored as metadata in SageMaker Studio
	// notebooks.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
}

type KernelGatewayAppSettings struct {
	// The instance type and the Amazon Resource Name (ARN) of the SageMaker image
	// created on the instance. The ARN is stored as metadata in SageMaker Studio
	// notebooks.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
}

type LabelCounters struct {
	FailedNonRetryableError *int64 `json:"failedNonRetryableError,omitempty"`

	HumanLabeled *int64 `json:"humanLabeled,omitempty"`

	MachineLabeled *int64 `json:"machineLabeled,omitempty"`

	TotalLabeled *int64 `json:"totalLabeled,omitempty"`

	Unlabeled *int64 `json:"unlabeled,omitempty"`
}

type LabelCountersForWorkteam struct {
	HumanLabeled *int64 `json:"humanLabeled,omitempty"`

	PendingHuman *int64 `json:"pendingHuman,omitempty"`

	Total *int64 `json:"total,omitempty"`
}

type LabelingJobAlgorithmsConfig struct {
	InitialActiveLearningModelARN *string `json:"initialActiveLearningModelARN,omitempty"`

	LabelingJobAlgorithmSpecificationARN *string `json:"labelingJobAlgorithmSpecificationARN,omitempty"`
	// Provides configuration information for labeling jobs.
	LabelingJobResourceConfig *LabelingJobResourceConfig `json:"labelingJobResourceConfig,omitempty"`
}

type LabelingJobDataAttributes struct {
	ContentClassifiers []*string `json:"contentClassifiers,omitempty"`
}

type LabelingJobDataSource struct {
	// The Amazon S3 location of the input data objects.
	S3DataSource *LabelingJobS3DataSource `json:"s3DataSource,omitempty"`
	// An Amazon SNS data source used for streaming labeling jobs.
	SnsDataSource *LabelingJobSnsDataSource `json:"snsDataSource,omitempty"`
}

type LabelingJobForWorkteamSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	JobReferenceCode *string `json:"jobReferenceCode,omitempty"`

	LabelingJobName *string `json:"labelingJobName,omitempty"`

	NumberOfHumanWorkersPerDataObject *int64 `json:"numberOfHumanWorkersPerDataObject,omitempty"`
}

type LabelingJobInputConfig struct {
	// Attributes of the data specified by the customer. Use these to describe the
	// data to be labeled.
	DataAttributes *LabelingJobDataAttributes `json:"dataAttributes,omitempty"`
	// Provides information about the location of input data.
	//
	// You must specify at least one of the following: S3DataSource or SnsDataSource.
	//
	// Use SnsDataSource to specify an SNS input topic for a streaming labeling
	// job. If you do not specify and SNS input topic ARN, Ground Truth will create
	// a one-time labeling job.
	//
	// Use S3DataSource to specify an input manifest file for both streaming and
	// one-time labeling jobs. Adding an S3DataSource is optional if you use SnsDataSource
	// to create a streaming labeling job.
	DataSource *LabelingJobDataSource `json:"dataSource,omitempty"`
}

type LabelingJobOutput struct {
	FinalActiveLearningModelARN *string `json:"finalActiveLearningModelARN,omitempty"`

	OutputDatasetS3URI *string `json:"outputDatasetS3URI,omitempty"`
}

type LabelingJobOutputConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	S3OutputPath *string `json:"s3OutputPath,omitempty"`

	SnsTopicARN *string `json:"snsTopicARN,omitempty"`

	// SnsTopicARNRef is a reference to an sns/v1alpha1/Topic used
	// to set the SnsTopicARN field.
	// +optional
	SnsTopicARNRef *xpv1.Reference `json:"snsTopicARNRef,omitempty"`

	// SnsTopicARNSelector selects references to sns/v1alpha1/Topic
	// used to set the SnsTopicARN.
	// +optional
	SnsTopicARNSelector *xpv1.Selector `json:"snsTopicARNSelector,omitempty"`
}

type LabelingJobResourceConfig struct {
	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`
}

type LabelingJobS3DataSource struct {
	ManifestS3URI *string `json:"manifestS3URI,omitempty"`
}

type LabelingJobSnsDataSource struct {
	SnsTopicARN *string `json:"snsTopicARN,omitempty"`

	// SnsTopicARNRef is a reference to an sns/v1alpha1/Topic used
	// to set the SnsTopicARN field.
	// +optional
	SnsTopicARNRef *xpv1.Reference `json:"snsTopicARNRef,omitempty"`

	// SnsTopicARNSelector selects references to sns/v1alpha1/Topic
	// used to set the SnsTopicARN.
	// +optional
	SnsTopicARNSelector *xpv1.Selector `json:"snsTopicARNSelector,omitempty"`
}

type LabelingJobStoppingConditions struct {
	MaxHumanLabeledObjectCount *int64 `json:"maxHumanLabeledObjectCount,omitempty"`

	MaxPercentageOfInputDatasetLabeled *int64 `json:"maxPercentageOfInputDatasetLabeled,omitempty"`
}

type LabelingJobSummary struct {
	AnnotationConsolidationLambdaARN *string `json:"annotationConsolidationLambdaARN,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`
	// Input configuration information for a labeling job.
	InputConfig *LabelingJobInputConfig `json:"inputConfig,omitempty"`
	// Provides a breakdown of the number of objects labeled.
	LabelCounters *LabelCounters `json:"labelCounters,omitempty"`

	LabelingJobARN *string `json:"labelingJobARN,omitempty"`

	LabelingJobName *string `json:"labelingJobName,omitempty"`
	// Specifies the location of the output produced by the labeling job.
	LabelingJobOutput *LabelingJobOutput `json:"labelingJobOutput,omitempty"`

	LabelingJobStatus *string `json:"labelingJobStatus,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	PreHumanTaskLambdaARN *string `json:"preHumanTaskLambdaARN,omitempty"`

	WorkteamARN *string `json:"workteamARN,omitempty"`
}

type MemberDefinition struct {
	// Identifies a Amazon Cognito user group. A user group can be used in on or
	// more work teams.
	CognitoMemberDefinition *CognitoMemberDefinition `json:"cognitoMemberDefinition,omitempty"`
	// A list of user groups that exist in your OIDC Identity Provider (IdP). One
	// to ten groups can be used to create a single private work team. When you
	// add a user group to the list of Groups, you can add that user group to one
	// or more private work teams. If you add a user group to a private work team,
	// all workers in that user group are added to the work team.
	OidcMemberDefinition *OidcMemberDefinition `json:"oidcMemberDefinition,omitempty"`
}

type MetricData struct {
	MetricName *string `json:"metricName,omitempty"`

	Timestamp *metav1.Time `json:"timestamp,omitempty"`

	Value *float64 `json:"value,omitempty"`
}

type MetricDefinition struct {
	Name *string `json:"name,omitempty"`

	Regex *string `json:"regex,omitempty"`
}

type ModelArtifacts struct {
	S3ModelArtifacts *string `json:"s3ModelArtifacts,omitempty"`
}

type ModelClientConfig struct {
	InvocationsMaxRetries *int64 `json:"invocationsMaxRetries,omitempty"`

	InvocationsTimeoutInSeconds *int64 `json:"invocationsTimeoutInSeconds,omitempty"`
}

type ModelPackageContainerDefinition struct {
	ContainerHostname *string `json:"containerHostname,omitempty"`

	Image *string `json:"image,omitempty"`

	ImageDigest *string `json:"imageDigest,omitempty"`

	ModelDataURL *string `json:"modelDataURL,omitempty"`

	ProductID *string `json:"productID,omitempty"`
}

type ModelPackageStatusDetails struct {
	ImageScanStatuses []*ModelPackageStatusItem `json:"imageScanStatuses,omitempty"`

	ValidationStatuses []*ModelPackageStatusItem `json:"validationStatuses,omitempty"`
}

type ModelPackageStatusItem struct {
	FailureReason *string `json:"failureReason,omitempty"`

	Name *string `json:"name,omitempty"`

	Status *string `json:"status,omitempty"`
}

type ModelPackageSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	ModelPackageARN *string `json:"modelPackageARN,omitempty"`

	ModelPackageDescription *string `json:"modelPackageDescription,omitempty"`

	ModelPackageName *string `json:"modelPackageName,omitempty"`

	ModelPackageStatus *string `json:"modelPackageStatus,omitempty"`
}

type ModelPackageValidationProfile struct {
	ProfileName *string `json:"profileName,omitempty"`
	// Defines the input needed to run a transform job using the inference specification
	// specified in the algorithm.
	TransformJobDefinition *TransformJobDefinition `json:"transformJobDefinition,omitempty"`
}

type ModelPackageValidationSpecification struct {
	ValidationProfiles []*ModelPackageValidationProfile `json:"validationProfiles,omitempty"`

	ValidationRole *string `json:"validationRole,omitempty"`
}

type ModelSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	ModelARN *string `json:"modelARN,omitempty"`

	ModelName *string `json:"modelName,omitempty"`
}

type MonitoringAppSpecification struct {
	ContainerArguments []*string `json:"containerArguments,omitempty"`

	ContainerEntrypoint []*string `json:"containerEntrypoint,omitempty"`

	ImageURI *string `json:"imageURI,omitempty"`

	PostAnalyticsProcessorSourceURI *string `json:"postAnalyticsProcessorSourceURI,omitempty"`

	RecordPreprocessorSourceURI *string `json:"recordPreprocessorSourceURI,omitempty"`
}

type MonitoringBaselineConfig struct {
	// The constraints resource for a monitoring job.
	ConstraintsResource *MonitoringConstraintsResource `json:"constraintsResource,omitempty"`
	// The statistics resource for a monitoring job.
	StatisticsResource *MonitoringStatisticsResource `json:"statisticsResource,omitempty"`
}

type MonitoringClusterConfig struct {
	InstanceCount *int64 `json:"instanceCount,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`

	VolumeSizeInGB *int64 `json:"volumeSizeInGB,omitempty"`
}

type MonitoringConstraintsResource struct {
	S3URI *string `json:"s3URI,omitempty"`
}

type MonitoringExecutionSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	EndpointName *string `json:"endpointName,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	MonitoringExecutionStatus *string `json:"monitoringExecutionStatus,omitempty"`

	MonitoringScheduleName *string `json:"monitoringScheduleName,omitempty"`

	ProcessingJobARN *string `json:"processingJobARN,omitempty"`

	ScheduledTime *metav1.Time `json:"scheduledTime,omitempty"`
}

type MonitoringInput struct {
	// Input object for the endpoint
	EndpointInput *EndpointInput `json:"endpointInput,omitempty"`
}

type MonitoringJobDefinition struct {
	// Configuration for monitoring constraints and monitoring statistics. These
	// baseline resources are compared against the results of the current job from
	// the series of jobs scheduled to collect data periodically.
	BaselineConfig *MonitoringBaselineConfig `json:"baselineConfig,omitempty"`

	Environment map[string]*string `json:"environment,omitempty"`
	// Container image configuration object for the monitoring job.
	MonitoringAppSpecification *MonitoringAppSpecification `json:"monitoringAppSpecification,omitempty"`

	MonitoringInputs []*MonitoringInput `json:"monitoringInputs,omitempty"`
	// The output configuration for monitoring jobs.
	MonitoringOutputConfig *MonitoringOutputConfig `json:"monitoringOutputConfig,omitempty"`
	// Identifies the resources to deploy for a monitoring job.
	MonitoringResources *MonitoringResources `json:"monitoringResources,omitempty"`
	// Networking options for a job, such as network traffic encryption between
	// containers, whether to allow inbound and outbound network calls to and from
	// containers, and the VPC subnets and security groups to use for VPC-enabled
	// jobs.
	NetworkConfig *NetworkConfig `json:"networkConfig,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	// RoleARNRef is a reference to an identity/v1beta1/IAMRole used
	// to set the RoleARN field.
	// +optional
	RoleARNRef *xpv1.Reference `json:"roleARNRef,omitempty"`

	// RoleARNSelector selects references to identity/v1beta1/IAMRole
	// used to set the RoleARN.
	// +optional
	RoleARNSelector *xpv1.Selector `json:"roleARNSelector,omitempty"`

	// A time limit for how long the monitoring job is allowed to run before stopping.
	StoppingCondition *MonitoringStoppingCondition `json:"stoppingCondition,omitempty"`
}

type MonitoringOutput struct {
	// Information about where and how you want to store the results of a monitoring
	// job.
	S3Output *MonitoringS3Output `json:"s3Output,omitempty"`
}

type MonitoringOutputConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	MonitoringOutputs []*MonitoringOutput `json:"monitoringOutputs,omitempty"`
}

type MonitoringResources struct {
	// Configuration for the cluster used to run model monitoring jobs.
	ClusterConfig *MonitoringClusterConfig `json:"clusterConfig,omitempty"`
}

type MonitoringS3Output struct {
	LocalPath *string `json:"localPath,omitempty"`

	S3UploadMode *string `json:"s3UploadMode,omitempty"`

	S3URI *string `json:"s3URI,omitempty"`
}

type MonitoringScheduleConfig struct {
	// Defines the monitoring job.
	MonitoringJobDefinition *MonitoringJobDefinition `json:"monitoringJobDefinition,omitempty"`
	// Configuration details about the monitoring schedule.
	ScheduleConfig *ScheduleConfig `json:"scheduleConfig,omitempty"`
}

type MonitoringScheduleSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	EndpointName *string `json:"endpointName,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	MonitoringScheduleARN *string `json:"monitoringScheduleARN,omitempty"`

	MonitoringScheduleName *string `json:"monitoringScheduleName,omitempty"`

	MonitoringScheduleStatus *string `json:"monitoringScheduleStatus,omitempty"`
}

type MonitoringStatisticsResource struct {
	S3URI *string `json:"s3URI,omitempty"`
}

type MonitoringStoppingCondition struct {
	MaxRuntimeInSeconds *int64 `json:"maxRuntimeInSeconds,omitempty"`
}

type NetworkConfig struct {
	EnableInterContainerTrafficEncryption *bool `json:"enableInterContainerTrafficEncryption,omitempty"`

	EnableNetworkIsolation *bool `json:"enableNetworkIsolation,omitempty"`
	// Specifies a VPC that your training jobs and hosted models have access to.
	// Control access to and from your training and model containers by configuring
	// the VPC. For more information, see Protect Endpoints by Using an Amazon Virtual
	// Private Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html)
	// and Protect Training Jobs by Using an Amazon Virtual Private Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

type NotebookInstanceLifecycleConfigSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	NotebookInstanceLifecycleConfigARN *string `json:"notebookInstanceLifecycleConfigARN,omitempty"`

	NotebookInstanceLifecycleConfigName *string `json:"notebookInstanceLifecycleConfigName,omitempty"`
}

type NotebookInstanceLifecycleHook struct {
	Content *string `json:"content,omitempty"`
}

type NotebookInstanceSummary struct {
	AdditionalCodeRepositories []*string `json:"additionalCodeRepositories,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DefaultCodeRepository *string `json:"defaultCodeRepository,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	NotebookInstanceARN *string `json:"notebookInstanceARN,omitempty"`

	NotebookInstanceLifecycleConfigName *string `json:"notebookInstanceLifecycleConfigName,omitempty"`

	NotebookInstanceName *string `json:"notebookInstanceName,omitempty"`

	NotebookInstanceStatus *string `json:"notebookInstanceStatus,omitempty"`

	URL *string `json:"url,omitempty"`
}

type NotificationConfiguration struct {
	NotificationTopicARN *string `json:"notificationTopicARN,omitempty"`

	// NotificationTopicARNRef is a reference to an sns/v1alpha1/Topic used
	// to set the NotificationTopicARN field.
	// +optional
	NotificationTopicARNRef *xpv1.Reference `json:"notificationTopicARNRef,omitempty"`

	// NotificationTopicARNSelector selects references to sns/v1alpha1/Topic
	// used to set the NotificationTopicARN.
	// +optional
	NotificationTopicARNSelector *xpv1.Selector `json:"notificationTopicARNSelector,omitempty"`
}

type ObjectiveStatusCounters struct {
	Failed *int64 `json:"failed,omitempty"`

	Pending *int64 `json:"pending,omitempty"`

	Succeeded *int64 `json:"succeeded,omitempty"`
}

type OidcConfig struct {
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty"`

	ClientID *string `json:"clientID,omitempty"`

	ClientSecret *string `json:"clientSecret,omitempty"`

	Issuer *string `json:"issuer,omitempty"`

	JwksURI *string `json:"jwksURI,omitempty"`

	LogoutEndpoint *string `json:"logoutEndpoint,omitempty"`

	TokenEndpoint *string `json:"tokenEndpoint,omitempty"`

	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty"`
}

type OidcConfigForResponse struct {
	AuthorizationEndpoint *string `json:"authorizationEndpoint,omitempty"`

	ClientID *string `json:"clientID,omitempty"`

	Issuer *string `json:"issuer,omitempty"`

	JwksURI *string `json:"jwksURI,omitempty"`

	LogoutEndpoint *string `json:"logoutEndpoint,omitempty"`

	TokenEndpoint *string `json:"tokenEndpoint,omitempty"`

	UserInfoEndpoint *string `json:"userInfoEndpoint,omitempty"`
}

type OidcMemberDefinition struct {
	Groups []*string `json:"groups,omitempty"`
}

type OutputConfig struct {
	CompilerOptions *string `json:"compilerOptions,omitempty"`

	S3OutputLocation *string `json:"s3OutputLocation,omitempty"`

	TargetDevice *string `json:"targetDevice,omitempty"`
	// Contains information about a target platform that you want your model to
	// run on, such as OS, architecture, and accelerators. It is an alternative
	// of TargetDevice.
	TargetPlatform *TargetPlatform `json:"targetPlatform,omitempty"`
}

type OutputDataConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

type ParameterRange struct {
	// Defines the possible values for a categorical hyperparameter.
	CategoricalParameterRangeSpecification *CategoricalParameterRangeSpecification `json:"categoricalParameterRangeSpecification,omitempty"`
	// Defines the possible values for a continuous hyperparameter.
	ContinuousParameterRangeSpecification *ContinuousParameterRangeSpecification `json:"continuousParameterRangeSpecification,omitempty"`
	// Defines the possible values for an integer hyperparameter.
	IntegerParameterRangeSpecification *IntegerParameterRangeSpecification `json:"integerParameterRangeSpecification,omitempty"`
}

type ParameterRanges struct {
	CategoricalParameterRanges []*CategoricalParameterRange `json:"categoricalParameterRanges,omitempty"`

	ContinuousParameterRanges []*ContinuousParameterRange `json:"continuousParameterRanges,omitempty"`

	IntegerParameterRanges []*IntegerParameterRange `json:"integerParameterRanges,omitempty"`
}

type Parent struct {
	ExperimentName *string `json:"experimentName,omitempty"`

	TrialName *string `json:"trialName,omitempty"`
}

type ParentHyperParameterTuningJob struct {
	HyperParameterTuningJobName *string `json:"hyperParameterTuningJobName,omitempty"`
}

type ProcessingClusterConfig struct {
	InstanceCount *int64 `json:"instanceCount,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`

	VolumeSizeInGB *int64 `json:"volumeSizeInGB,omitempty"`
}

type ProcessingInput struct {
	InputName *string `json:"inputName,omitempty"`
	// Information about where and how you want to obtain the inputs for an processing
	// job.
	S3Input *ProcessingS3Input `json:"s3Input,omitempty"`
}

type ProcessingJobSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	ExitMessage *string `json:"exitMessage,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	ProcessingEndTime *metav1.Time `json:"processingEndTime,omitempty"`

	ProcessingJobARN *string `json:"processingJobARN,omitempty"`

	ProcessingJobName *string `json:"processingJobName,omitempty"`

	ProcessingJobStatus *string `json:"processingJobStatus,omitempty"`
}

type ProcessingJob_SDK struct {
	// Configuration to run a processing job in a specified container image.
	AppSpecification *AppSpecification `json:"appSpecification,omitempty"`

	AutoMLJobARN *string `json:"autoMLJobARN,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	Environment map[string]*string `json:"environment,omitempty"`

	ExitMessage *string `json:"exitMessage,omitempty"`
	// Associates a SageMaker job as a trial component with an experiment and trial.
	// Specified when you call the following APIs:
	//
	//    * CreateProcessingJob
	//
	//    * CreateTrainingJob
	//
	//    * CreateTransformJob
	ExperimentConfig *ExperimentConfig `json:"experimentConfig,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	MonitoringScheduleARN *string `json:"monitoringScheduleARN,omitempty"`
	// Networking options for a job, such as network traffic encryption between
	// containers, whether to allow inbound and outbound network calls to and from
	// containers, and the VPC subnets and security groups to use for VPC-enabled
	// jobs.
	NetworkConfig *NetworkConfig `json:"networkConfig,omitempty"`

	ProcessingEndTime *metav1.Time `json:"processingEndTime,omitempty"`

	ProcessingInputs []*ProcessingInput `json:"processingInputs,omitempty"`

	ProcessingJobARN *string `json:"processingJobARN,omitempty"`

	ProcessingJobName *string `json:"processingJobName,omitempty"`

	ProcessingJobStatus *string `json:"processingJobStatus,omitempty"`
	// The output configuration for the processing job.
	ProcessingOutputConfig *ProcessingOutputConfig `json:"processingOutputConfig,omitempty"`
	// Identifies the resources, ML compute instances, and ML storage volumes to
	// deploy for a processing job. In distributed training, you specify more than
	// one instance.
	ProcessingResources *ProcessingResources `json:"processingResources,omitempty"`

	ProcessingStartTime *metav1.Time `json:"processingStartTime,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
	// Specifies a time limit for how long the processing job is allowed to run.
	StoppingCondition *ProcessingStoppingCondition `json:"stoppingCondition,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TrainingJobARN *string `json:"trainingJobARN,omitempty"`
}

type ProcessingOutput struct {
	OutputName *string `json:"outputName,omitempty"`
	// Information about where and how you want to store the results of an processing
	// job.
	S3Output *ProcessingS3Output `json:"s3Output,omitempty"`
}

type ProcessingOutputConfig struct {
	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	Outputs []*ProcessingOutput `json:"outputs,omitempty"`
}

type ProcessingResources struct {
	// Configuration for the cluster used to run a processing job.
	ClusterConfig *ProcessingClusterConfig `json:"clusterConfig,omitempty"`
}

type ProcessingS3Input struct {
	LocalPath *string `json:"localPath,omitempty"`

	S3CompressionType *string `json:"s3CompressionType,omitempty"`

	S3DataDistributionType *string `json:"s3DataDistributionType,omitempty"`

	S3DataType *string `json:"s3DataType,omitempty"`

	S3InputMode *string `json:"s3InputMode,omitempty"`

	S3URI *string `json:"s3URI,omitempty"`
}

type ProcessingS3Output struct {
	LocalPath *string `json:"localPath,omitempty"`

	S3UploadMode *string `json:"s3UploadMode,omitempty"`

	S3URI *string `json:"s3URI,omitempty"`
}

type ProcessingStoppingCondition struct {
	MaxRuntimeInSeconds *int64 `json:"maxRuntimeInSeconds,omitempty"`
}

type ProductionVariant struct {
	AcceleratorType *string `json:"acceleratorType,omitempty"`

	InitialInstanceCount *int64 `json:"initialInstanceCount,omitempty"`

	InitialVariantWeight *float64 `json:"initialVariantWeight,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	ModelName *string `json:"modelName,omitempty"`

	VariantName *string `json:"variantName,omitempty"`
}

type ProductionVariantSummary struct {
	CurrentInstanceCount *int64 `json:"currentInstanceCount,omitempty"`

	CurrentWeight *float64 `json:"currentWeight,omitempty"`

	DeployedImages []*DeployedImage `json:"deployedImages,omitempty"`

	DesiredInstanceCount *int64 `json:"desiredInstanceCount,omitempty"`

	DesiredWeight *float64 `json:"desiredWeight,omitempty"`

	VariantName *string `json:"variantName,omitempty"`
}

type PublicWorkforceTaskPrice struct {
	// Represents an amount of money in United States dollars/
	AmountInUsd *USD `json:"amountInUsd,omitempty"`
}

type RenderingError struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

type ResolvedAttributes struct {
	// Specifies a metric to minimize or maximize as the objective of a job.
	AutoMLJobObjective *AutoMLJobObjective `json:"autoMLJobObjective,omitempty"`
	// How long a job is allowed to run, or how many candidates a job is allowed
	// to generate.
	CompletionCriteria *AutoMLJobCompletionCriteria `json:"completionCriteria,omitempty"`

	ProblemType *string `json:"problemType,omitempty"`
}

type ResourceConfig struct {
	InstanceCount *int64 `json:"instanceCount,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`

	VolumeSizeInGB *int64 `json:"volumeSizeInGB,omitempty"`
}

type ResourceLimits struct {
	MaxNumberOfTrainingJobs *int64 `json:"maxNumberOfTrainingJobs,omitempty"`

	MaxParallelTrainingJobs *int64 `json:"maxParallelTrainingJobs,omitempty"`
}

type ResourceSpec struct {
	InstanceType *string `json:"instanceType,omitempty"`

	SageMakerImageARN *string `json:"sageMakerImageARN,omitempty"`
}

type RetentionPolicy struct {
	HomeEFSFileSystem *string `json:"homeEFSFileSystem,omitempty"`
}

type S3DataSource struct {
	AttributeNames []*string `json:"attributeNames,omitempty"`

	S3DataDistributionType *string `json:"s3DataDistributionType,omitempty"`

	S3DataType *string `json:"s3DataType,omitempty"`

	S3URI *string `json:"s3URI,omitempty"`
}

type ScheduleConfig struct {
	ScheduleExpression *string `json:"scheduleExpression,omitempty"`
}

type SecondaryStatusTransition struct {
	EndTime *metav1.Time `json:"endTime,omitempty"`

	StartTime *metav1.Time `json:"startTime,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`
}

type SharingSettings struct {
	NotebookOutputOption *string `json:"notebookOutputOption,omitempty"`

	S3KMSKeyID *string `json:"s3KMSKeyID,omitempty"`

	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

type ShuffleConfig struct {
	Seed *int64 `json:"seed,omitempty"`
}

type SourceAlgorithm struct {
	AlgorithmName *string `json:"algorithmName,omitempty"`

	// AlgorithmNameRef is a reference to an sagemaker/v1alpha1/Algorithm used
	// to set the AlgorithmName field.
	// +optional
	AlgorithmNameRef *xpv1.Reference `json:"algorithmNameRef,omitempty"`

	// AlgorithmNameSelector selects references to sagemaker/v1alpha1/Algorithm
	// used to set the AlgorithmName.
	// +optional
	AlgorithmNameSelector *xpv1.Selector `json:"algorithmNameSelector,omitempty"`

	ModelDataURL *string `json:"modelDataURL,omitempty"`
}

type SourceAlgorithmSpecification struct {
	SourceAlgorithms []*SourceAlgorithm `json:"sourceAlgorithms,omitempty"`
}

type SourceIPConfig struct {
	CIDRs []*string `json:"cidrs,omitempty"`
}

type StoppingCondition struct {
	MaxRuntimeInSeconds *int64 `json:"maxRuntimeInSeconds,omitempty"`

	MaxWaitTimeInSeconds *int64 `json:"maxWaitTimeInSeconds,omitempty"`
}

type SubscribedWorkteam struct {
	ListingID *string `json:"listingID,omitempty"`

	MarketplaceDescription *string `json:"marketplaceDescription,omitempty"`

	MarketplaceTitle *string `json:"marketplaceTitle,omitempty"`

	SellerName *string `json:"sellerName,omitempty"`

	WorkteamARN *string `json:"workteamARN,omitempty"`
}

type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

type TargetPlatform struct {
	Accelerator *string `json:"accelerator,omitempty"`

	Arch *string `json:"arch,omitempty"`

	Os *string `json:"os,omitempty"`
}

type TensorBoardAppSettings struct {
	// The instance type and the Amazon Resource Name (ARN) of the SageMaker image
	// created on the instance. The ARN is stored as metadata in SageMaker Studio
	// notebooks.
	DefaultResourceSpec *ResourceSpec `json:"defaultResourceSpec,omitempty"`
}

type TensorBoardOutputConfig struct {
	LocalPath *string `json:"localPath,omitempty"`

	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

type TrainingJobDefinition struct {
	HyperParameters map[string]*string `json:"hyperParameters,omitempty"`

	InputDataConfig []*Channel `json:"inputDataConfig,omitempty"`
	// Provides information about how to store model training results (model artifacts).
	OutputDataConfig *OutputDataConfig `json:"outputDataConfig,omitempty"`
	// Describes the resources, including ML compute instances and ML storage volumes,
	// to use for model training.
	ResourceConfig *ResourceConfig `json:"resourceConfig,omitempty"`
	// Specifies a limit to how long a model training or compilation job can run.
	// It also specifies how long you are willing to wait for a managed spot training
	// job to complete. When the job reaches the time limit, Amazon SageMaker ends
	// the training or compilation job. Use this API to cap model training costs.
	//
	// To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which
	// delays job termination for 120 seconds. Algorithms can use this 120-second
	// window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by Amazon SageMaker automatically save the
	// intermediate results of a model training job when possible. This attempt
	// to save artifacts is only a best effort case as model might not be in a state
	// from which it can be saved. For example, if training has just started, the
	// model might not be ready to save. When saved, this intermediate data is a
	// valid model artifact. You can use it to create a model with CreateModel.
	//
	// The Neural Topic Model (NTM) currently does not support saving intermediate
	// model artifacts. When training NTMs, make sure that the maximum runtime is
	// sufficient for the training job to complete.
	StoppingCondition *StoppingCondition `json:"stoppingCondition,omitempty"`

	TrainingInputMode *string `json:"trainingInputMode,omitempty"`
}

type TrainingJobStatusCounters struct {
	Completed *int64 `json:"completed,omitempty"`

	InProgress *int64 `json:"inProgress,omitempty"`

	NonRetryableError *int64 `json:"nonRetryableError,omitempty"`

	RetryableError *int64 `json:"retryableError,omitempty"`

	Stopped *int64 `json:"stopped,omitempty"`
}

type TrainingJobSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	TrainingEndTime *metav1.Time `json:"trainingEndTime,omitempty"`

	TrainingJobARN *string `json:"trainingJobARN,omitempty"`

	TrainingJobName *string `json:"trainingJobName,omitempty"`

	TrainingJobStatus *string `json:"trainingJobStatus,omitempty"`
}

type TrainingJob_SDK struct {
	// Specifies the training algorithm to use in a CreateTrainingJob request.
	//
	// For more information about algorithms provided by Amazon SageMaker, see Algorithms
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/algos.html). For information
	// about using your own algorithms, see Using Your Own Algorithms with Amazon
	// SageMaker (https://docs.aws.amazon.com/sagemaker/latest/dg/your-algorithms.html).
	AlgorithmSpecification *AlgorithmSpecification `json:"algorithmSpecification,omitempty"`

	AutoMLJobARN *string `json:"autoMLJobARN,omitempty"`

	BillableTimeInSeconds *int64 `json:"billableTimeInSeconds,omitempty"`
	// Contains information about the output location for managed spot training
	// checkpoint data.
	CheckpointConfig *CheckpointConfig `json:"checkpointConfig,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// Configuration information for the debug hook parameters, collection configuration,
	// and storage paths.
	DebugHookConfig *DebugHookConfig `json:"debugHookConfig,omitempty"`

	DebugRuleConfigurations []*DebugRuleConfiguration `json:"debugRuleConfigurations,omitempty"`

	DebugRuleEvaluationStatuses []*DebugRuleEvaluationStatus `json:"debugRuleEvaluationStatuses,omitempty"`

	EnableInterContainerTrafficEncryption *bool `json:"enableInterContainerTrafficEncryption,omitempty"`

	EnableManagedSpotTraining *bool `json:"enableManagedSpotTraining,omitempty"`

	EnableNetworkIsolation *bool `json:"enableNetworkIsolation,omitempty"`
	// Associates a SageMaker job as a trial component with an experiment and trial.
	// Specified when you call the following APIs:
	//
	//    * CreateProcessingJob
	//
	//    * CreateTrainingJob
	//
	//    * CreateTransformJob
	ExperimentConfig *ExperimentConfig `json:"experimentConfig,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`

	FinalMetricDataList []*MetricData `json:"finalMetricDataList,omitempty"`

	HyperParameters map[string]*string `json:"hyperParameters,omitempty"`

	InputDataConfig []*Channel `json:"inputDataConfig,omitempty"`

	LabelingJobARN *string `json:"labelingJobARN,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// Provides information about the location that is configured for storing model
	// artifacts.
	//
	// Model artifacts are the output that results from training a model, and typically
	// consist of trained parameters, a model defintion that desribes how to compute
	// inferences, and other metadata.
	ModelArtifacts *ModelArtifacts `json:"modelArtifacts,omitempty"`
	// Provides information about how to store model training results (model artifacts).
	OutputDataConfig *OutputDataConfig `json:"outputDataConfig,omitempty"`
	// Describes the resources, including ML compute instances and ML storage volumes,
	// to use for model training.
	ResourceConfig *ResourceConfig `json:"resourceConfig,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	SecondaryStatus *string `json:"secondaryStatus,omitempty"`

	SecondaryStatusTransitions []*SecondaryStatusTransition `json:"secondaryStatusTransitions,omitempty"`
	// Specifies a limit to how long a model training or compilation job can run.
	// It also specifies how long you are willing to wait for a managed spot training
	// job to complete. When the job reaches the time limit, Amazon SageMaker ends
	// the training or compilation job. Use this API to cap model training costs.
	//
	// To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which
	// delays job termination for 120 seconds. Algorithms can use this 120-second
	// window to save the model artifacts, so the results of training are not lost.
	//
	// The training algorithms provided by Amazon SageMaker automatically save the
	// intermediate results of a model training job when possible. This attempt
	// to save artifacts is only a best effort case as model might not be in a state
	// from which it can be saved. For example, if training has just started, the
	// model might not be ready to save. When saved, this intermediate data is a
	// valid model artifact. You can use it to create a model with CreateModel.
	//
	// The Neural Topic Model (NTM) currently does not support saving intermediate
	// model artifacts. When training NTMs, make sure that the maximum runtime is
	// sufficient for the training job to complete.
	StoppingCondition *StoppingCondition `json:"stoppingCondition,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
	// Configuration of storage locations for TensorBoard output.
	TensorBoardOutputConfig *TensorBoardOutputConfig `json:"tensorBoardOutputConfig,omitempty"`

	TrainingEndTime *metav1.Time `json:"trainingEndTime,omitempty"`

	TrainingJobARN *string `json:"trainingJobARN,omitempty"`

	TrainingJobName *string `json:"trainingJobName,omitempty"`

	TrainingJobStatus *string `json:"trainingJobStatus,omitempty"`

	TrainingStartTime *metav1.Time `json:"trainingStartTime,omitempty"`

	TrainingTimeInSeconds *int64 `json:"trainingTimeInSeconds,omitempty"`

	TuningJobARN *string `json:"tuningJobARN,omitempty"`
	// Specifies a VPC that your training jobs and hosted models have access to.
	// Control access to and from your training and model containers by configuring
	// the VPC. For more information, see Protect Endpoints by Using an Amazon Virtual
	// Private Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/host-vpc.html)
	// and Protect Training Jobs by Using an Amazon Virtual Private Cloud (https://docs.aws.amazon.com/sagemaker/latest/dg/train-vpc.html).
	VPCConfig *VPCConfig `json:"vpcConfig,omitempty"`
}

type TrainingSpecification struct {
	MetricDefinitions []*MetricDefinition `json:"metricDefinitions,omitempty"`

	SupportedHyperParameters []*HyperParameterSpecification `json:"supportedHyperParameters,omitempty"`

	SupportedTrainingInstanceTypes []*string `json:"supportedTrainingInstanceTypes,omitempty"`

	SupportedTuningJobObjectiveMetrics []*HyperParameterTuningJobObjective `json:"supportedTuningJobObjectiveMetrics,omitempty"`

	SupportsDistributedTraining *bool `json:"supportsDistributedTraining,omitempty"`

	TrainingChannels []*ChannelSpecification `json:"trainingChannels,omitempty"`

	TrainingImage *string `json:"trainingImage,omitempty"`

	TrainingImageDigest *string `json:"trainingImageDigest,omitempty"`
}

type TransformDataSource struct {
	// Describes the S3 data source.
	S3DataSource *TransformS3DataSource `json:"s3DataSource,omitempty"`
}

type TransformInput struct {
	CompressionType *string `json:"compressionType,omitempty"`

	ContentType *string `json:"contentType,omitempty"`
	// Describes the location of the channel data.
	DataSource *TransformDataSource `json:"dataSource,omitempty"`

	SplitType *string `json:"splitType,omitempty"`
}

type TransformJobDefinition struct {
	BatchStrategy *string `json:"batchStrategy,omitempty"`

	Environment map[string]*string `json:"environment,omitempty"`

	MaxConcurrentTransforms *int64 `json:"maxConcurrentTransforms,omitempty"`

	MaxPayloadInMB *int64 `json:"maxPayloadInMB,omitempty"`
	// Describes the input source of a transform job and the way the transform job
	// consumes it.
	TransformInput *TransformInput `json:"transformInput,omitempty"`
	// Describes the results of a transform job.
	TransformOutput *TransformOutput `json:"transformOutput,omitempty"`
	// Describes the resources, including ML instance types and ML instance count,
	// to use for transform job.
	TransformResources *TransformResources `json:"transformResources,omitempty"`
}

type TransformJobSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	TransformEndTime *metav1.Time `json:"transformEndTime,omitempty"`

	TransformJobARN *string `json:"transformJobARN,omitempty"`

	TransformJobName *string `json:"transformJobName,omitempty"`

	TransformJobStatus *string `json:"transformJobStatus,omitempty"`
}

type TransformJob_SDK struct {
	AutoMLJobARN *string `json:"autoMLJobARN,omitempty"`

	BatchStrategy *string `json:"batchStrategy,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// The data structure used to specify the data to be used for inference in a
	// batch transform job and to associate the data that is relevant to the prediction
	// results in the output. The input filter provided allows you to exclude input
	// data that is not needed for inference in a batch transform job. The output
	// filter provided allows you to include input data relevant to interpreting
	// the predictions in the output from the job. For more information, see Associate
	// Prediction Results with their Corresponding Input Records (https://docs.aws.amazon.com/sagemaker/latest/dg/batch-transform-data-processing.html).
	DataProcessing *DataProcessing `json:"dataProcessing,omitempty"`

	Environment map[string]*string `json:"environment,omitempty"`
	// Associates a SageMaker job as a trial component with an experiment and trial.
	// Specified when you call the following APIs:
	//
	//    * CreateProcessingJob
	//
	//    * CreateTrainingJob
	//
	//    * CreateTransformJob
	ExperimentConfig *ExperimentConfig `json:"experimentConfig,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`

	LabelingJobARN *string `json:"labelingJobARN,omitempty"`

	MaxConcurrentTransforms *int64 `json:"maxConcurrentTransforms,omitempty"`

	MaxPayloadInMB *int64 `json:"maxPayloadInMB,omitempty"`
	// Configures the timeout and maximum number of retries for processing a transform
	// job invocation.
	ModelClientConfig *ModelClientConfig `json:"modelClientConfig,omitempty"`

	ModelName *string `json:"modelName,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TransformEndTime *metav1.Time `json:"transformEndTime,omitempty"`
	// Describes the input source of a transform job and the way the transform job
	// consumes it.
	TransformInput *TransformInput `json:"transformInput,omitempty"`

	TransformJobARN *string `json:"transformJobARN,omitempty"`

	TransformJobName *string `json:"transformJobName,omitempty"`

	TransformJobStatus *string `json:"transformJobStatus,omitempty"`
	// Describes the results of a transform job.
	TransformOutput *TransformOutput `json:"transformOutput,omitempty"`
	// Describes the resources, including ML instance types and ML instance count,
	// to use for transform job.
	TransformResources *TransformResources `json:"transformResources,omitempty"`

	TransformStartTime *metav1.Time `json:"transformStartTime,omitempty"`
}

type TransformOutput struct {
	Accept *string `json:"accept,omitempty"`

	AssembleWith *string `json:"assembleWith,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	S3OutputPath *string `json:"s3OutputPath,omitempty"`
}

type TransformResources struct {
	InstanceCount *int64 `json:"instanceCount,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	VolumeKMSKeyID *string `json:"volumeKMSKeyID,omitempty"`
}

type TransformS3DataSource struct {
	S3DataType *string `json:"s3DataType,omitempty"`

	S3URI *string `json:"s3URI,omitempty"`
}

type TrialComponentArtifact struct {
	MediaType *string `json:"mediaType,omitempty"`

	Value *string `json:"value,omitempty"`
}

type TrialComponentMetricSummary struct {
	Avg *float64 `json:"avg,omitempty"`

	Count *int64 `json:"count,omitempty"`

	Last *float64 `json:"last,omitempty"`

	Max *float64 `json:"max,omitempty"`

	MetricName *string `json:"metricName,omitempty"`

	Min *float64 `json:"min,omitempty"`

	SourceARN *string `json:"sourceARN,omitempty"`

	StdDev *float64 `json:"stdDev,omitempty"`

	TimeStamp *metav1.Time `json:"timeStamp,omitempty"`
}

type TrialComponentParameterValue struct {
	NumberValue *float64 `json:"numberValue,omitempty"`

	StringValue *string `json:"stringValue,omitempty"`
}

type TrialComponentSimpleSummary struct {
	// Information about the user who created or modified an experiment, trial,
	// or trial component.
	CreatedBy *UserContext `json:"createdBy,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	TrialComponentARN *string `json:"trialComponentARN,omitempty"`

	TrialComponentName *string `json:"trialComponentName,omitempty"`
	// The Amazon Resource Name (ARN) and job type of the source of a trial component.
	TrialComponentSource *TrialComponentSource `json:"trialComponentSource,omitempty"`
}

type TrialComponentSource struct {
	SourceARN *string `json:"sourceARN,omitempty"`

	SourceType *string `json:"sourceType,omitempty"`
}

type TrialComponentSourceDetail struct {
	SourceARN *string `json:"sourceARN,omitempty"`
}

type TrialComponentStatus_SDK struct {
	Message *string `json:"message,omitempty"`

	PrimaryStatus *string `json:"primaryStatus,omitempty"`
}

type TrialComponentSummary struct {
	// Information about the user who created or modified an experiment, trial,
	// or trial component.
	CreatedBy *UserContext `json:"createdBy,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DisplayName *string `json:"displayName,omitempty"`

	EndTime *metav1.Time `json:"endTime,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// or trial component.
	LastModifiedBy *UserContext `json:"lastModifiedBy,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	StartTime *metav1.Time `json:"startTime,omitempty"`
	// The status of the trial component.
	Status *TrialComponentStatus_SDK `json:"status,omitempty"`

	TrialComponentARN *string `json:"trialComponentARN,omitempty"`

	TrialComponentName *string `json:"trialComponentName,omitempty"`
	// The Amazon Resource Name (ARN) and job type of the source of a trial component.
	TrialComponentSource *TrialComponentSource `json:"trialComponentSource,omitempty"`
}

type TrialComponent_SDK struct {
	// Information about the user who created or modified an experiment, trial,
	// or trial component.
	CreatedBy *UserContext `json:"createdBy,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DisplayName *string `json:"displayName,omitempty"`

	EndTime *metav1.Time `json:"endTime,omitempty"`

	InputArtifacts []map[string]*TrialComponentArtifact `json:"inputArtifacts,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// or trial component.
	LastModifiedBy *UserContext `json:"lastModifiedBy,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	Metrics []*TrialComponentMetricSummary `json:"metrics,omitempty"`

	OutputArtifacts []map[string]*TrialComponentArtifact `json:"outputArtifacts,omitempty"`

	Parameters []map[string]*TrialComponentParameterValue `json:"parameters,omitempty"`
	// The Amazon Resource Name (ARN) and job type of the source of a trial component.
	Source *TrialComponentSource `json:"source,omitempty"`

	StartTime *metav1.Time `json:"startTime,omitempty"`
	// The status of the trial component.
	Status *TrialComponentStatus_SDK `json:"status,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TrialComponentARN *string `json:"trialComponentARN,omitempty"`

	TrialComponentName *string `json:"trialComponentName,omitempty"`
}

type TrialSource struct {
	SourceARN *string `json:"sourceARN,omitempty"`

	SourceType *string `json:"sourceType,omitempty"`
}

type TrialSummary struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DisplayName *string `json:"displayName,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	TrialARN *string `json:"trialARN,omitempty"`

	TrialName *string `json:"trialName,omitempty"`
	// The source of the trial.
	TrialSource *TrialSource `json:"trialSource,omitempty"`
}

type Trial_SDK struct {
	// Information about the user who created or modified an experiment, trial,
	// or trial component.
	CreatedBy *UserContext `json:"createdBy,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DisplayName *string `json:"displayName,omitempty"`

	ExperimentName *string `json:"experimentName,omitempty"`
	// Information about the user who created or modified an experiment, trial,
	// or trial component.
	LastModifiedBy *UserContext `json:"lastModifiedBy,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`
	// The source of the trial.
	Source *TrialSource `json:"source,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TrialARN *string `json:"trialARN,omitempty"`

	TrialName *string `json:"trialName,omitempty"`
}

type TuningJobCompletionCriteria struct {
	TargetObjectiveMetricValue *float64 `json:"targetObjectiveMetricValue,omitempty"`
}

type USD struct {
	Cents *int64 `json:"cents,omitempty"`

	Dollars *int64 `json:"dollars,omitempty"`

	TenthFractionsOfACent *int64 `json:"tenthFractionsOfACent,omitempty"`
}

type UiConfig struct {
	HumanTaskUiARN *string `json:"humanTaskUiARN,omitempty"`

	// HumanTaskUiARNRef is a reference to an sagemaker/v1alpha1/HumanTaskUi used
	// to set the HumanTaskUiARN field.
	// +optional
	HumanTaskUiARNRef *xpv1.Reference `json:"humanTaskUiARNRef,omitempty"`

	// HumanTaskUiARNSelector selects references to sagemaker/v1alpha1/HumanTaskUi
	// used to set the HumanTaskUiARN.
	// +optional
	HumanTaskUiARNSelector *xpv1.Selector `json:"humanTaskUiARNSelector,omitempty"`

	UiTemplateS3URI *string `json:"uiTemplateS3URI,omitempty"`
}

type UiTemplate struct {
	Content *string `json:"content,omitempty"`
}

type UiTemplateInfo struct {
	ContentSha256 *string `json:"contentSha256,omitempty"`

	URL *string `json:"url,omitempty"`
}

type UserContext struct {
	DomainID *string `json:"domainID,omitempty"`

	UserProfileARN *string `json:"userProfileARN,omitempty"`

	UserProfileName *string `json:"userProfileName,omitempty"`
}

type UserProfileDetails struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DomainID *string `json:"domainID,omitempty"`

	LastModifiedTime *metav1.Time `json:"lastModifiedTime,omitempty"`

	Status *string `json:"status,omitempty"`

	UserProfileName *string `json:"userProfileName,omitempty"`
}

type UserSettings struct {
	ExecutionRole *string `json:"executionRole,omitempty"`

	// ExecutionRoleRef is a reference to an identity/v1beta1/IAMRole used
	// to set the ExecutionRole field.
	// +optional
	ExecutionRoleRef *xpv1.Reference `json:"executionRoleRef,omitempty"`

	// ExecutionRoleSelector selects references to identity/v1beta1/IAMRole
	// used to set the ExecutionRole.
	// +optional
	ExecutionRoleSelector *xpv1.Selector `json:"executionRoleSelector,omitempty"`

	// Jupyter server's app settings.
	JupyterServerAppSettings *JupyterServerAppSettings `json:"jupyterServerAppSettings,omitempty"`
	// The kernel gateway app settings.
	KernelGatewayAppSettings *KernelGatewayAppSettings `json:"kernelGatewayAppSettings,omitempty"`

	SecurityGroups []*string `json:"securityGroups,omitempty"`

	// SecurityGroupsRef is a reference to an ec2/v1beta1/SecurityGroup used
	// to set the SecurityGroups field.
	// +optional
	SecurityGroupsRef []xpv1.Reference `json:"securityGroupsRef,omitempty"`

	// SecurityGroupsSelector selects references to ec2/v1beta1/SecurityGroup
	// used to set the SecurityGroups.
	// +optional
	SecurityGroupsSelector *xpv1.Selector `json:"securityGroupsSelector,omitempty"`

	// Specifies options when sharing an Amazon SageMaker Studio notebook. These
	// settings are specified as part of DefaultUserSettings when the CreateDomain
	// API is called, and as part of UserSettings when the CreateUserProfile API
	// is called.
	SharingSettings *SharingSettings `json:"sharingSettings,omitempty"`
	// The TensorBoard app settings.
	TensorBoardAppSettings *TensorBoardAppSettings `json:"tensorBoardAppSettings,omitempty"`
}

type VPCConfig struct {
	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`

	// SecurityGroupIDsRef is a reference to an ec2/v1beta1/SecurityGroup used
	// to set the SecurityGroupIDs field.
	// +optional
	SecurityGroupIDsRef []xpv1.Reference `json:"securityGroupIDsRef,omitempty"`

	// SecurityGroupIDsSelector selects references to ec2/v1beta1/SecurityGroup
	// used to set the SecurityGroupIDs.
	// +optional
	SecurityGroupIDsSelector *xpv1.Selector `json:"securityGroupIDsSelector,omitempty"`

	Subnets []*string `json:"subnets,omitempty"`

	// SubnetsRef is a reference to an ec2/v1beta1/Subnet used
	// to set the Subnets field.
	// +optional
	SubnetsRef []xpv1.Reference `json:"subnetsRef,omitempty"`

	// SubnetsSelector selects references to ec2/v1beta1/Subnet
	// used to set the Subnets.
	// +optional
	SubnetsSelector *xpv1.Selector `json:"subnetsSelector,omitempty"`
}

type VariantProperty struct {
	VariantPropertyType *string `json:"variantPropertyType,omitempty"`
}

type Workforce_SDK struct {
	// Use this parameter to configure your Amazon Cognito workforce. A single Cognito
	// workforce is created using and corresponds to a single Amazon Cognito user
	// pool (https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-identity-pools.html).
	CognitoConfig *CognitoConfig `json:"cognitoConfig,omitempty"`

	CreateDate *metav1.Time `json:"createDate,omitempty"`

	LastUpdatedDate *metav1.Time `json:"lastUpdatedDate,omitempty"`
	// Your OIDC IdP workforce configuration.
	OidcConfig *OidcConfigForResponse `json:"oidcConfig,omitempty"`
	// A list of IP address ranges (CIDRs (https://docs.aws.amazon.com/vpc/latest/userguide/VPC_Subnets.html)).
	// Used to create an allow list of IP addresses for a private workforce. Workers
	// will only be able to login to their worker portal from an IP address within
	// this range. By default, a workforce isn't restricted to specific IP addresses.
	SourceIPConfig *SourceIPConfig `json:"sourceIPConfig,omitempty"`

	SubDomain *string `json:"subDomain,omitempty"`

	WorkforceARN *string `json:"workforceARN,omitempty"`

	WorkforceName *string `json:"workforceName,omitempty"`
}

type Workteam_SDK struct {
	CreateDate *metav1.Time `json:"createDate,omitempty"`

	Description *string `json:"description,omitempty"`

	LastUpdatedDate *metav1.Time `json:"lastUpdatedDate,omitempty"`

	MemberDefinitions []*MemberDefinition `json:"memberDefinitions,omitempty"`
	// Configures SNS notifications of available or expiring work items for work
	// teams.
	NotificationConfiguration *NotificationConfiguration `json:"notificationConfiguration,omitempty"`

	ProductListingIDs []*string `json:"productListingIDs,omitempty"`

	SubDomain *string `json:"subDomain,omitempty"`

	WorkforceARN *string `json:"workforceARN,omitempty"`

	WorkteamARN *string `json:"workteamARN,omitempty"`

	WorkteamName *string `json:"workteamName,omitempty"`
}
