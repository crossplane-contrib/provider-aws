/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// CodeRepositoryParameters defines the desired state of CodeRepository
type CodeRepositoryParameters struct {
	// Region is which region the CodeRepository will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// The name of the Git repository. The name must have 1 to 63 characters. Valid
	// characters are a-z, A-Z, 0-9, and - (hyphen).
	// +kubebuilder:validation:Required
	CodeRepositoryName *string `json:"codeRepositoryName"`

	// Specifies details about the repository, including the URL where the repository
	// is located, the default branch, and credentials to use to access the repository.
	// +kubebuilder:validation:Required
	GitConfig *GitConfig `json:"gitConfig"`
}

// CodeRepositorySpec defines the desired state of CodeRepository
type CodeRepositorySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CodeRepositoryParameters `json:"forProvider"`
}

// CodeRepositoryObservation defines the observed state of CodeRepository
type CodeRepositoryObservation struct {
	// The Amazon Resource Name (ARN) of the new repository.
	CodeRepositoryARN *string `json:"codeRepositoryARN,omitempty"`
}

// CodeRepositoryStatus defines the observed state of CodeRepository.
type CodeRepositoryStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CodeRepositoryObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// CodeRepository is the Schema for the CodeRepositories API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CodeRepository struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CodeRepositorySpec   `json:"spec,omitempty"`
	Status            CodeRepositoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CodeRepositoryList contains a list of CodeRepositories
type CodeRepositoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CodeRepository `json:"items"`
}

// Repository type metadata.
var (
	CodeRepositoryKind             = "CodeRepository"
	CodeRepositoryGroupKind        = schema.GroupKind{Group: Group, Kind: CodeRepositoryKind}.String()
	CodeRepositoryKindAPIVersion   = CodeRepositoryKind + "." + GroupVersion.String()
	CodeRepositoryGroupVersionKind = GroupVersion.WithKind(CodeRepositoryKind)
)

func init() {
	SchemeBuilder.Register(&CodeRepository{}, &CodeRepositoryList{})
}
