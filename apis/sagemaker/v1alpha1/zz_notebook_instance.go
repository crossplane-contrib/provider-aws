/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// NotebookInstanceParameters defines the desired state of NotebookInstance
type NotebookInstanceParameters struct {
	// Region is which region the NotebookInstance will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// A list of Elastic Inference (EI) instance types to associate with this notebook
	// instance. Currently, only one instance type can be associated with a notebook
	// instance. For more information, see Using Elastic Inference in Amazon SageMaker
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/ei.html).
	AcceleratorTypes []*string `json:"acceleratorTypes,omitempty"`

	// An array of up to three Git repositories to associate with the notebook instance.
	// These can be either the names of Git repositories stored as resources in
	// your account, or the URL of Git repositories in AWS CodeCommit (https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)
	// or in any other Git repository. These repositories are cloned at the same
	// level as the default repository of your notebook instance. For more information,
	// see Associating Git Repositories with Amazon SageMaker Notebook Instances
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
	AdditionalCodeRepositories []*string `json:"additionalCodeRepositories,omitempty"`

	// A Git repository to associate with the notebook instance as its default code
	// repository. This can be either the name of a Git repository stored as a resource
	// in your account, or the URL of a Git repository in AWS CodeCommit (https://docs.aws.amazon.com/codecommit/latest/userguide/welcome.html)
	// or in any other Git repository. When you open a notebook instance, it opens
	// in the directory that contains this repository. For more information, see
	// Associating Git Repositories with Amazon SageMaker Notebook Instances (https://docs.aws.amazon.com/sagemaker/latest/dg/nbi-git-repo.html).
	DefaultCodeRepository *string `json:"defaultCodeRepository,omitempty"`

	// Sets whether Amazon SageMaker provides internet access to the notebook instance.
	// If you set this to Disabled this notebook instance will be able to access
	// resources only in your VPC, and will not be able to connect to Amazon SageMaker
	// training and endpoint services unless your configure a NAT Gateway in your
	// VPC.
	//
	// For more information, see Notebook Instances Are Internet-Enabled by Default
	// (https://docs.aws.amazon.com/sagemaker/latest/dg/appendix-additional-considerations.html#appendix-notebook-and-internet-access).
	// You can set the value of this parameter to Disabled only if you set a value
	// for the SubnetId parameter.
	DirectInternetAccess *string `json:"directInternetAccess,omitempty"`

	// The type of ML compute instance to launch for the notebook instance.
	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType"`

	// The Amazon Resource Name (ARN) of a AWS Key Management Service key that Amazon
	// SageMaker uses to encrypt data on the storage volume attached to your notebook
	// instance. The KMS key you provide must be enabled. For information, see Enabling
	// and Disabling Keys (https://docs.aws.amazon.com/kms/latest/developerguide/enabling-keys.html)
	// in the AWS Key Management Service Developer Guide.
	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	// The name of a lifecycle configuration to associate with the notebook instance.
	// For information about lifestyle configurations, see Step 2.1: (Optional)
	// Customize a Notebook Instance (https://docs.aws.amazon.com/sagemaker/latest/dg/notebook-lifecycle-config.html).
	LifecycleConfigName *string `json:"lifecycleConfigName,omitempty"`

	// LifecycleConfigNameRef is a reference to an sagemaker/v1alpha1/NotebookInstanceLifecycleConfig used
	// to set the LifecycleConfigName field.
	// +optional
	LifecycleConfigNameRef *xpv1.Reference `json:"lifecycleConfigNameRef,omitempty"`

	// LifecycleConfigNameSelector selects references to sagemaker/v1alpha1/NotebookInstanceLifecycleConfig
	// used to set the LifecycleConfigName.
	// +optional
	LifecycleConfigNameSelector *xpv1.Selector `json:"lifecycleConfigNameSelector,omitempty"`

	// The name of the new notebook instance.
	// +kubebuilder:validation:Required
	NotebookInstanceName *string `json:"notebookInstanceName"`

	// When you send any requests to AWS resources from the notebook instance, Amazon
	// SageMaker assumes this role to perform tasks on your behalf. You must grant
	// this role necessary permissions so Amazon SageMaker can perform these tasks.
	// The policy must allow the Amazon SageMaker service principal (sagemaker.amazonaws.com)
	// permissions to assume this role. For more information, see Amazon SageMaker
	// Roles (https://docs.aws.amazon.com/sagemaker/latest/dg/sagemaker-roles.html).
	//
	// To be able to pass this role to Amazon SageMaker, the caller of this API
	// must have the iam:PassRole permission.
	RoleARN *string `json:"roleARN,omitempty"`

	// RoleARNRef is a reference to an identity/v1beta1/IAMRole used
	// to set the RoleARN field.
	// +optional
	RoleARNRef *xpv1.Reference `json:"roleARNRef,omitempty"`

	// RoleARNSelector selects references to identity/v1beta1/IAMRole
	// used to set the RoleARN.
	// +optional
	RoleARNSelector *xpv1.Selector `json:"roleARNSelector,omitempty"`

	// Whether root access is enabled or disabled for users of the notebook instance.
	// The default value is Enabled.
	//
	// Lifecycle configurations need root access to be able to set up a notebook
	// instance. Because of this, lifecycle configurations associated with a notebook
	// instance always run with root access even if you disable root access for
	// users.
	RootAccess *string `json:"rootAccess,omitempty"`

	// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups
	// must be for the same VPC as specified in the subnet.
	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`

	// SecurityGroupIDsRef is a reference to an ec2/v1beta1/SecurityGroup used
	// to set the SecurityGroupIDs field.
	// +optional
	SecurityGroupIDsRef []xpv1.Reference `json:"securityGroupIDsRef,omitempty"`

	// SecurityGroupIDsSelector selects references to ec2/v1beta1/SecurityGroup
	// used to set the SecurityGroupIDs.
	// +optional
	SecurityGroupIDsSelector *xpv1.Selector `json:"securityGroupIDsSelector,omitempty"`

	// The ID of the subnet in a VPC to which you would like to have a connectivity
	// from your ML compute instance.
	SubnetID *string `json:"subnetID,omitempty"`

	// SubnetIDRef is a reference to an ec2/v1beta1/Subnet used
	// to set the SubnetID field.
	// +optional
	SubnetIDRef *xpv1.Reference `json:"subnetIDRef,omitempty"`

	// SubnetIDSelector selects references to ec2/v1beta1/Subnet
	// used to set the SubnetID.
	// +optional
	SubnetIDSelector *xpv1.Selector `json:"subnetIDSelector,omitempty"`

	// A list of tags to associate with the notebook instance. You can add tags
	// later by using the CreateTags API.
	Tags []*Tag `json:"tags,omitempty"`

	// The size, in GB, of the ML storage volume to attach to the notebook instance.
	// The default value is 5 GB.
	VolumeSizeInGB *int64 `json:"volumeSizeInGB,omitempty"`
}

// NotebookInstanceSpec defines the desired state of NotebookInstance
type NotebookInstanceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       NotebookInstanceParameters `json:"forProvider"`
}

// NotebookInstanceObservation defines the observed state of NotebookInstance
type NotebookInstanceObservation struct {
	// The Amazon Resource Name (ARN) of the notebook instance.
	NotebookInstanceARN *string `json:"notebookInstanceARN,omitempty"`
}

// NotebookInstanceStatus defines the observed state of NotebookInstance.
type NotebookInstanceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          NotebookInstanceObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// NotebookInstance is the Schema for the NotebookInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type NotebookInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotebookInstanceSpec   `json:"spec,omitempty"`
	Status            NotebookInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotebookInstanceList contains a list of NotebookInstances
type NotebookInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotebookInstance `json:"items"`
}

// Repository type metadata.
var (
	NotebookInstanceKind             = "NotebookInstance"
	NotebookInstanceGroupKind        = schema.GroupKind{Group: Group, Kind: NotebookInstanceKind}.String()
	NotebookInstanceKindAPIVersion   = NotebookInstanceKind + "." + GroupVersion.String()
	NotebookInstanceGroupVersionKind = GroupVersion.WithKind(NotebookInstanceKind)
)

func init() {
	SchemeBuilder.Register(&NotebookInstance{}, &NotebookInstanceList{})
}
