/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// AutoMLJobParameters defines the desired state of AutoMLJob
type AutoMLJobParameters struct {
	// Region is which region the AutoMLJob will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// Contains CompletionCriteria and SecurityConfig.
	AutoMLJobConfig *AutoMLJobConfig `json:"autoMLJobConfig,omitempty"`

	// Identifies an Autopilot job. Must be unique to your account and is case-insensitive.
	// +kubebuilder:validation:Required
	AutoMLJobName *string `json:"autoMLJobName"`

	// Defines the objective of a an AutoML job. You provide a AutoMLJobObjective$MetricName
	// and Autopilot infers whether to minimize or maximize it. If a metric is not
	// specified, the most commonly used ObjectiveMetric for problem type is automaically
	// selected.
	AutoMLJobObjective *AutoMLJobObjective `json:"autoMLJobObjective,omitempty"`

	// Generates possible candidates without training a model. A candidate is a
	// combination of data preprocessors, algorithms, and algorithm parameter settings.
	GenerateCandidateDefinitionsOnly *bool `json:"generateCandidateDefinitionsOnly,omitempty"`

	// Similar to InputDataConfig supported by Tuning. Format(s) supported: CSV.
	// Minimum of 1000 rows.
	// +kubebuilder:validation:Required
	InputDataConfig []*AutoMLChannel `json:"inputDataConfig"`

	// Similar to OutputDataConfig supported by Tuning. Format(s) supported: CSV.
	// +kubebuilder:validation:Required
	OutputDataConfig *AutoMLOutputDataConfig `json:"outputDataConfig"`

	// Defines the kind of preprocessing and algorithms intended for the candidates.
	// Options include: BinaryClassification, MulticlassClassification, and Regression.
	ProblemType *string `json:"problemType,omitempty"`

	// The ARN of the role that is used to access the data.
	RoleARN *string `json:"roleARN,omitempty"`

	// RoleARNRef is a reference to an identity/v1beta1/IAMRole used
	// to set the RoleARN field.
	// +optional
	RoleARNRef *xpv1.Reference `json:"roleARNRef,omitempty"`

	// RoleARNSelector selects references to identity/v1beta1/IAMRole
	// used to set the RoleARN.
	// +optional
	RoleARNSelector *xpv1.Selector `json:"roleARNSelector,omitempty"`

	// Each tag consists of a key and an optional value. Tag keys must be unique
	// per resource.
	Tags []*Tag `json:"tags,omitempty"`
}

// AutoMLJobSpec defines the desired state of AutoMLJob
type AutoMLJobSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutoMLJobParameters `json:"forProvider"`
}

// AutoMLJobObservation defines the observed state of AutoMLJob
type AutoMLJobObservation struct {
	// When a job is created, it is assigned a unique ARN.
	AutoMLJobARN *string `json:"autoMLJobARN,omitempty"`
}

// AutoMLJobStatus defines the observed state of AutoMLJob.
type AutoMLJobStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutoMLJobObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// AutoMLJob is the Schema for the AutoMLJobs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AutoMLJob struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutoMLJobSpec   `json:"spec,omitempty"`
	Status            AutoMLJobStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoMLJobList contains a list of AutoMLJobs
type AutoMLJobList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoMLJob `json:"items"`
}

// Repository type metadata.
var (
	AutoMLJobKind             = "AutoMLJob"
	AutoMLJobGroupKind        = schema.GroupKind{Group: Group, Kind: AutoMLJobKind}.String()
	AutoMLJobKindAPIVersion   = AutoMLJobKind + "." + GroupVersion.String()
	AutoMLJobGroupVersionKind = GroupVersion.WithKind(AutoMLJobKind)
)

func init() {
	SchemeBuilder.Register(&AutoMLJob{}, &AutoMLJobList{})
}
