/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1beta1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// AutoScalingGroupParameters defines the desired state of AutoScalingGroup
type AutoScalingGroupParameters struct {
	// Region is which region the AutoScalingGroup will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A list of Availability Zones where instances in the Auto Scaling group can
	// be created. Used for launching into the default VPC subnet in each Availability
	// Zone when not using the VPCZoneIdentifier property, or for attaching a network
	// interface when an existing network interface ID is specified in a launch
	// template.
	AvailabilityZones []*string `json:"availabilityZones,omitempty"`
	// Indicates whether Capacity Rebalancing is enabled. Otherwise, Capacity Rebalancing
	// is disabled. When you turn on Capacity Rebalancing, Amazon EC2 Auto Scaling
	// attempts to launch a Spot Instance whenever Amazon EC2 notifies that a Spot
	// Instance is at an elevated risk of interruption. After launching a new instance,
	// it then terminates an old instance. For more information, see Use Capacity
	// Rebalancing to handle Amazon EC2 Spot Interruptions (https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-capacity-rebalancing.html)
	// in the in the Amazon EC2 Auto Scaling User Guide.
	CapacityRebalance *bool `json:"capacityRebalance,omitempty"`
	// Reserved.
	Context *string `json:"context,omitempty"`
	// Only needed if you use simple scaling policies.
	//
	// The amount of time, in seconds, between one scaling activity ending and another
	// one starting due to simple scaling policies. For more information, see Scaling
	// cooldowns for Amazon EC2 Auto Scaling (https://docs.aws.amazon.com/autoscaling/ec2/userguide/Cooldown.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	//
	// Default: 300 seconds
	DefaultCooldown *int64 `json:"defaultCooldown,omitempty"`
	// The amount of time, in seconds, until a new instance is considered to have
	// finished initializing and resource consumption to become stable after it
	// enters the InService state.
	//
	// During an instance refresh, Amazon EC2 Auto Scaling waits for the warm-up
	// period after it replaces an instance before it moves on to replacing the
	// next instance. Amazon EC2 Auto Scaling also waits for the warm-up period
	// before aggregating the metrics for new instances with existing instances
	// in the Amazon CloudWatch metrics that are used for scaling, resulting in
	// more reliable usage data. For more information, see Set the default instance
	// warmup for an Auto Scaling group (https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-default-instance-warmup.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	//
	// To manage various warm-up settings at the group level, we recommend that
	// you set the default instance warmup, even if it is set to 0 seconds. To remove
	// a value that you previously set, include the property but specify -1 for
	// the value. However, we strongly recommend keeping the default instance warmup
	// enabled by specifying a value of 0 or other nominal value.
	//
	// Default: None
	DefaultInstanceWarmup *int64 `json:"defaultInstanceWarmup,omitempty"`
	// The desired capacity is the initial capacity of the Auto Scaling group at
	// the time of its creation and the capacity it attempts to maintain. It can
	// scale beyond this capacity if you configure auto scaling. This number must
	// be greater than or equal to the minimum size of the group and less than or
	// equal to the maximum size of the group. If you do not specify a desired capacity,
	// the default is the minimum size of the group.
	DesiredCapacity *int64 `json:"desiredCapacity,omitempty"`
	// The unit of measurement for the value specified for desired capacity. Amazon
	// EC2 Auto Scaling supports DesiredCapacityType for attribute-based instance
	// type selection only. For more information, see Creating an Auto Scaling group
	// using attribute-based instance type selection (https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-instance-type-requirements.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	//
	// By default, Amazon EC2 Auto Scaling specifies units, which translates into
	// number of instances.
	//
	// Valid values: units | vcpu | memory-mib
	DesiredCapacityType *string `json:"desiredCapacityType,omitempty"`
	// The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before
	// checking the health status of an EC2 instance that has come into service
	// and marking it unhealthy due to a failed health check. This is useful if
	// your instances do not immediately pass their health checks after they enter
	// the InService state. For more information, see Set the health check grace
	// period for an Auto Scaling group (https://docs.aws.amazon.com/autoscaling/ec2/userguide/health-check-grace-period.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	//
	// Default: 0 seconds
	HealthCheckGracePeriod *int64 `json:"healthCheckGracePeriod,omitempty"`
	// A comma-separated value string of one or more health check types.
	//
	// The valid values are EC2, ELB, and VPC_LATTICE. EC2 is the default health
	// check and cannot be disabled. For more information, see Health checks for
	// Auto Scaling instances (https://docs.aws.amazon.com/autoscaling/ec2/userguide/healthcheck.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	//
	// Only specify EC2 if you must clear a value that was previously set.
	HealthCheckType *string `json:"healthCheckType,omitempty"`
	// The ID of the instance used to base the launch configuration on. If specified,
	// Amazon EC2 Auto Scaling uses the configuration values from the specified
	// instance to create a new launch configuration. To get the instance ID, use
	// the Amazon EC2 DescribeInstances (https://docs.aws.amazon.com/AWSEC2/latest/APIReference/API_DescribeInstances.html)
	// API operation. For more information, see Creating an Auto Scaling group using
	// an EC2 instance (https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-asg-from-instance.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	InstanceID *string `json:"instanceID,omitempty"`
	// An instance maintenance policy. For more information, see Set instance maintenance
	// policy (https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-maintenance-policy.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	InstanceMaintenancePolicy *InstanceMaintenancePolicy `json:"instanceMaintenancePolicy,omitempty"`
	// The name of the launch configuration to use to launch instances.
	//
	// Conditional: You must specify either a launch template (LaunchTemplate or
	// MixedInstancesPolicy) or a launch configuration (LaunchConfigurationName
	// or InstanceId).
	LaunchConfigurationName *string `json:"launchConfigurationName,omitempty"`
	// Information used to specify the launch template and version to use to launch
	// instances.
	//
	// Conditional: You must specify either a launch template (LaunchTemplate or
	// MixedInstancesPolicy) or a launch configuration (LaunchConfigurationName
	// or InstanceId).
	//
	// The launch template that is specified must be configured for use with an
	// Auto Scaling group. For more information, see Creating a launch template
	// for an Auto Scaling group (https://docs.aws.amazon.com/autoscaling/ec2/userguide/create-launch-template.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	LaunchTemplate *LaunchTemplateSpecification `json:"launchTemplate,omitempty"`
	// One or more lifecycle hooks to add to the Auto Scaling group before instances
	// are launched.
	LifecycleHookSpecificationList []*LifecycleHookSpecification `json:"lifecycleHookSpecificationList,omitempty"`
	// A list of Classic Load Balancers associated with this Auto Scaling group.
	// For Application Load Balancers, Network Load Balancers, and Gateway Load
	// Balancers, specify the TargetGroupARNs property instead.
	LoadBalancerNames []*string `json:"loadBalancerNames,omitempty"`
	// The maximum amount of time, in seconds, that an instance can be in service.
	// The default is null. If specified, the value must be either 0 or a number
	// equal to or greater than 86,400 seconds (1 day). For more information, see
	// Replacing Auto Scaling instances based on maximum instance lifetime (https://docs.aws.amazon.com/autoscaling/ec2/userguide/asg-max-instance-lifetime.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	MaxInstanceLifetime *int64 `json:"maxInstanceLifetime,omitempty"`
	// The maximum size of the group.
	//
	// With a mixed instances policy that uses instance weighting, Amazon EC2 Auto
	// Scaling may need to go above MaxSize to meet your capacity requirements.
	// In this event, Amazon EC2 Auto Scaling will never go above MaxSize by more
	// than your largest instance weight (weights that define how many units each
	// instance contributes to the desired capacity of the group).
	// +kubebuilder:validation:Required
	MaxSize *int64 `json:"maxSize"`
	// The minimum size of the group.
	// +kubebuilder:validation:Required
	MinSize *int64 `json:"minSize"`
	// The mixed instances policy. For more information, see Auto Scaling groups
	// with multiple instance types and purchase options (https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-mixed-instances-groups.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	MixedInstancesPolicy *MixedInstancesPolicy `json:"mixedInstancesPolicy,omitempty"`
	// Indicates whether newly launched instances are protected from termination
	// by Amazon EC2 Auto Scaling when scaling in. For more information about preventing
	// instances from terminating on scale in, see Using instance scale-in protection
	// (https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-instance-protection.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	NewInstancesProtectedFromScaleIn *bool `json:"newInstancesProtectedFromScaleIn,omitempty"`
	// The name of the placement group into which to launch your instances. For
	// more information, see Placement groups (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/placement-groups.html)
	// in the Amazon EC2 User Guide for Linux Instances.
	//
	// A cluster placement group is a logical grouping of instances within a single
	// Availability Zone. You cannot specify multiple Availability Zones and a cluster
	// placement group.
	PlacementGroup *string `json:"placementGroup,omitempty"`
	// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling
	// group uses to call other Amazon Web Services service on your behalf. By default,
	// Amazon EC2 Auto Scaling uses a service-linked role named AWSServiceRoleForAutoScaling,
	// which it creates if it does not exist. For more information, see Service-linked
	// roles (https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-service-linked-role.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	ServiceLinkedRoleARN *string `json:"serviceLinkedRoleARN,omitempty"`
	// One or more tags. You can tag your Auto Scaling group and propagate the tags
	// to the Amazon EC2 instances it launches. Tags are not propagated to Amazon
	// EBS volumes. To add tags to Amazon EBS volumes, specify the tags in a launch
	// template but use caution. If the launch template specifies an instance tag
	// with a key that is also specified for the Auto Scaling group, Amazon EC2
	// Auto Scaling overrides the value of that instance tag with the value specified
	// by the Auto Scaling group. For more information, see Tag Auto Scaling groups
	// and instances (https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-tagging.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	Tags []*Tag `json:"tags,omitempty"`
	// The Amazon Resource Names (ARN) of the Elastic Load Balancing target groups
	// to associate with the Auto Scaling group. Instances are registered as targets
	// with the target groups. The target groups receive incoming traffic and route
	// requests to one or more registered targets. For more information, see Use
	// Elastic Load Balancing to distribute traffic across the instances in your
	// Auto Scaling group (https://docs.aws.amazon.com/autoscaling/ec2/userguide/autoscaling-load-balancer.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	TargetGroupARNs []*string `json:"targetGroupARNs,omitempty"`
	// A policy or a list of policies that are used to select the instance to terminate.
	// These policies are executed in the order that you list them. For more information,
	// see Work with Amazon EC2 Auto Scaling termination policies (https://docs.aws.amazon.com/autoscaling/ec2/userguide/ec2-auto-scaling-termination-policies.html)
	// in the Amazon EC2 Auto Scaling User Guide.
	//
	// Valid values: Default | AllocationStrategy | ClosestToNextInstanceHour |
	// NewestInstance | OldestInstance | OldestLaunchConfiguration | OldestLaunchTemplate
	// | arn:aws:lambda:region:account-id:function:my-function:my-alias
	TerminationPolicies []*string `json:"terminationPolicies,omitempty"`
	// A comma-separated list of subnet IDs for a virtual private cloud (VPC) where
	// instances in the Auto Scaling group can be created. If you specify VPCZoneIdentifier
	// with AvailabilityZones, the subnets that you specify must reside in those
	// Availability Zones.
	VPCZoneIdentifier                *string `json:"vpcZoneIdentifier,omitempty"`
	CustomAutoScalingGroupParameters `json:",inline"`
}

// AutoScalingGroupSpec defines the desired state of AutoScalingGroup
type AutoScalingGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AutoScalingGroupParameters `json:"forProvider"`
}

// AutoScalingGroupObservation defines the observed state of AutoScalingGroup
type AutoScalingGroupObservation struct {
	// The Amazon Resource Name (ARN) of the Auto Scaling group.
	AutoScalingGroupARN *string `json:"autoScalingGroupARN,omitempty"`
	// The name of the Auto Scaling group.
	AutoScalingGroupName *string `json:"autoScalingGroupName,omitempty"`
	// One or more Availability Zones for the group.
	AvailabilityZones []*string `json:"availabilityZones,omitempty"`
	// Indicates whether Capacity Rebalancing is enabled.
	CapacityRebalance *bool `json:"capacityRebalance,omitempty"`
	// The duration of the default cooldown period, in seconds.
	DefaultCooldown *int64 `json:"defaultCooldown,omitempty"`
	// The duration of the default instance warmup, in seconds.
	DefaultInstanceWarmup *int64 `json:"defaultInstanceWarmup,omitempty"`
	// The desired size of the group.
	DesiredCapacity *int64 `json:"desiredCapacity,omitempty"`
	// The date and time the group was created.
	DesiredCapacityType *metav1.Time `json:"desiredCapacityType,omitempty"`
	// The metrics enabled for the group.
	EnabledMetrics []*EnabledMetric `json:"enabledMetrics,omitempty"`
	// The duration of the health check grace period, in seconds.
	HealthCheckGracePeriod *int64 `json:"healthCheckGracePeriod,omitempty"`
	// A comma-separated value string of one or more health check types.
	HealthCheckType *string `json:"healthCheckType,omitempty"`
	// The EC2 instances associated with the group.
	Instances []*Instance `json:"instances,omitempty"`
	// The name of the associated launch configuration.
	LaunchConfigurationName *string `json:"launchConfigurationName,omitempty"`
	// The launch template for the group.
	LaunchTemplate *LaunchTemplateSpecification `json:"launchTemplate,omitempty"`
	// One or more load balancers associated with the group.
	LoadBalancerNames []*string `json:"loadBalancerNames,omitempty"`
	// The maximum amount of time, in seconds, that an instance can be in service.
	//
	// Valid Range: Minimum value of 0.
	MaxInstanceLifetime *int64 `json:"maxInstanceLifetime,omitempty"`
	// The maximum size of the group.
	MaxSize *int64 `json:"maxSize,omitempty"`
	// The minimum size of the group.
	MinSize *int64 `json:"minSize,omitempty"`
	// The mixed instances policy for the group.
	MixedInstancesPolicy *MixedInstancesPolicy `json:"mixedInstancesPolicy,omitempty"`
	// Indicates whether newly launched instances are protected from termination
	// by Amazon EC2 Auto Scaling when scaling in.
	NewInstancesProtectedFromScaleIn *bool `json:"newInstancesProtectedFromScaleIn,omitempty"`
	// The name of the placement group into which to launch your instances, if any.
	PlacementGroup *string `json:"placementGroup,omitempty"`
	// The predicted capacity of the group when it has a predictive scaling policy.
	PredictedCapacity *int64 `json:"predictedCapacity,omitempty"`
	// The Amazon Resource Name (ARN) of the service-linked role that the Auto Scaling
	// group uses to call other Amazon Web Services on your behalf.
	ServiceLinkedRoleARN *string `json:"serviceLinkedRoleARN,omitempty"`
	// The current state of the group when the DeleteAutoScalingGroup operation
	// is in progress.
	Status *string `json:"status,omitempty"`
	// The suspended processes associated with the group.
	SuspendedProcesses []*SuspendedProcess `json:"suspendedProcesses,omitempty"`
	// The tags for the group.
	Tags []*TagDescription `json:"tags,omitempty"`
	// The Amazon Resource Names (ARN) of the target groups for your load balancer.
	TargetGroupARNs []*string `json:"targetGroupARNs,omitempty"`
	// The termination policies for the group.
	TerminationPolicies []*string `json:"terminationPolicies,omitempty"`
	// The traffic sources associated with this Auto Scaling group.
	TrafficSources []*TrafficSourceIdentifier `json:"trafficSources,omitempty"`
	// One or more subnet IDs, if applicable, separated by commas.
	VPCZoneIdentifier *string `json:"vpcZoneIdentifier,omitempty"`
	// The warm pool for the group.
	WarmPoolConfiguration *WarmPoolConfiguration `json:"warmPoolConfiguration,omitempty"`
	// The current size of the warm pool.
	WarmPoolSize *int64 `json:"warmPoolSize,omitempty"`

	CustomAutoScalingGroupObservation `json:",inline"`
}

// AutoScalingGroupStatus defines the observed state of AutoScalingGroup.
type AutoScalingGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AutoScalingGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AutoScalingGroup is the Schema for the AutoScalingGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type AutoScalingGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AutoScalingGroupSpec   `json:"spec"`
	Status            AutoScalingGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AutoScalingGroupList contains a list of AutoScalingGroups
type AutoScalingGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AutoScalingGroup `json:"items"`
}

// Repository type metadata.
var (
	AutoScalingGroupKind             = "AutoScalingGroup"
	AutoScalingGroupGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AutoScalingGroupKind}.String()
	AutoScalingGroupKindAPIVersion   = AutoScalingGroupKind + "." + GroupVersion.String()
	AutoScalingGroupGroupVersionKind = GroupVersion.WithKind(AutoScalingGroupKind)
)

func init() {
	SchemeBuilder.Register(&AutoScalingGroup{}, &AutoScalingGroupList{})
}
