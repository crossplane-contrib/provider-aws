/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// WorkGroupParameters defines the desired state of WorkGroup
type WorkGroupParameters struct {
	// Region is which region the WorkGroup will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The configuration for the workgroup, which includes the location in Amazon
	// S3 where query results are stored, the encryption configuration, if any,
	// used for encrypting query results, whether the Amazon CloudWatch Metrics
	// are enabled for the workgroup, the limit for the amount of bytes scanned
	// (cutoff) per query, if it is specified, and whether workgroup's settings
	// (specified with EnforceWorkGroupConfiguration) in the WorkGroupConfiguration
	// override client-side settings. See WorkGroupConfiguration$EnforceWorkGroupConfiguration.
	Configuration *WorkGroupConfiguration `json:"configuration,omitempty"`
	// The workgroup description.
	Description *string `json:"description,omitempty"`
	// A list of comma separated tags to add to the workgroup that is created.
	Tags                      []*Tag `json:"tags,omitempty"`
	CustomWorkGroupParameters `json:",inline"`
}

// WorkGroupSpec defines the desired state of WorkGroup
type WorkGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       WorkGroupParameters `json:"forProvider"`
}

// WorkGroupObservation defines the observed state of WorkGroup
type WorkGroupObservation struct {
}

// WorkGroupStatus defines the observed state of WorkGroup.
type WorkGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          WorkGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WorkGroup is the Schema for the WorkGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type WorkGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkGroupSpec   `json:"spec"`
	Status            WorkGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkGroupList contains a list of WorkGroups
type WorkGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkGroup `json:"items"`
}

// Repository type metadata.
var (
	WorkGroupKind             = "WorkGroup"
	WorkGroupGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkGroupKind}.String()
	WorkGroupKindAPIVersion   = WorkGroupKind + "." + GroupVersion.String()
	WorkGroupGroupVersionKind = GroupVersion.WithKind(WorkGroupKind)
)

func init() {
	SchemeBuilder.Register(&WorkGroup{}, &WorkGroupList{})
}
