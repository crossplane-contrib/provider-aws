/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1beta1 "github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1"
	v1beta11 "github.com/crossplane-contrib/provider-aws/apis/iam/v1beta1"
	v1alpha1 "github.com/crossplane-contrib/provider-aws/apis/kms/v1alpha1"
	v1beta12 "github.com/crossplane-contrib/provider-aws/apis/sqs/v1beta1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Connection.
func (mg *Connection) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	if mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput != nil {
		if mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements != nil {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SecurityGroupIDList,
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SecurityGroupIDRefs,
				Selector:      mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SecurityGroupIDSelector,
				To: reference.To{
					List:    &v1beta1.SecurityGroupList{},
					Managed: &v1beta1.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SecurityGroupIDList")
			}
			mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SecurityGroupIDList = mrsp.ResolvedValues
			mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SecurityGroupIDRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput != nil {
		if mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SubnetID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SubnetIDRef,
				Selector:     mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SubnetIDSelector,
				To: reference.To{
					List:    &v1beta1.SubnetList{},
					Managed: &v1beta1.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SubnetID")
			}
			mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SubnetID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.CustomConnectionParameters.CustomConnectionInput.CustomPhysicalConnectionRequirements.SubnetIDRef = rsp.ResolvedReference

		}
	}

	return nil
}

// ResolveReferences of this Crawler.
func (mg *Crawler) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomCrawlerParameters.Classifiers),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomCrawlerParameters.ClassifierRefs,
		Selector:      mg.Spec.ForProvider.CustomCrawlerParameters.ClassifierSelector,
		To: reference.To{
			List:    &ClassifierList{},
			Managed: &Classifier{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.Classifiers")
	}
	mg.Spec.ForProvider.CustomCrawlerParameters.Classifiers = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomCrawlerParameters.ClassifierRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomCrawlerParameters.CrawlerSecurityConfiguration),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CustomCrawlerParameters.CrawlerSecurityConfigurationRef,
		Selector:     mg.Spec.ForProvider.CustomCrawlerParameters.CrawlerSecurityConfigurationSelector,
		To: reference.To{
			List:    &SecurityConfigurationList{},
			Managed: &SecurityConfiguration{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.CrawlerSecurityConfiguration")
	}
	mg.Spec.ForProvider.CustomCrawlerParameters.CrawlerSecurityConfiguration = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomCrawlerParameters.CrawlerSecurityConfigurationRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomCrawlerParameters.DatabaseName),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CustomCrawlerParameters.DatabaseNameRef,
		Selector:     mg.Spec.ForProvider.CustomCrawlerParameters.DatabaseNameSelector,
		To: reference.To{
			List:    &DatabaseList{},
			Managed: &Database{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.DatabaseName")
	}
	mg.Spec.ForProvider.CustomCrawlerParameters.DatabaseName = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomCrawlerParameters.DatabaseNameRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: mg.Spec.ForProvider.CustomCrawlerParameters.Role,
		Extract:      v1beta11.RoleARN(),
		Reference:    mg.Spec.ForProvider.CustomCrawlerParameters.RoleRef,
		Selector:     mg.Spec.ForProvider.CustomCrawlerParameters.RoleSelector,
		To: reference.To{
			List:    &v1beta11.RoleList{},
			Managed: &v1beta11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.Role")
	}
	mg.Spec.ForProvider.CustomCrawlerParameters.Role = rsp.ResolvedValue
	mg.Spec.ForProvider.CustomCrawlerParameters.RoleRef = rsp.ResolvedReference

	for i5 := 0; i5 < len(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.CatalogTargets); i5++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: mg.Spec.ForProvider.CustomCrawlerParameters.Targets.CatalogTargets[i5].DatabaseName,
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CustomCrawlerParameters.Targets.CatalogTargets[i5].DatabaseNameRef,
			Selector:     mg.Spec.ForProvider.CustomCrawlerParameters.Targets.CatalogTargets[i5].DatabaseNameSelector,
			To: reference.To{
				List:    &DatabaseList{},
				Managed: &Database{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.Targets.CatalogTargets[i5].DatabaseName")
		}
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.CatalogTargets[i5].DatabaseName = rsp.ResolvedValue
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.CatalogTargets[i5].DatabaseNameRef = rsp.ResolvedReference

	}
	for i5 := 0; i5 < len(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.JDBCTargets); i5++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.JDBCTargets[i5].ConnectionName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CustomCrawlerParameters.Targets.JDBCTargets[i5].ConnectionNameRef,
			Selector:     mg.Spec.ForProvider.CustomCrawlerParameters.Targets.JDBCTargets[i5].ConnectionNameSelector,
			To: reference.To{
				List:    &ConnectionList{},
				Managed: &Connection{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.Targets.JDBCTargets[i5].ConnectionName")
		}
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.JDBCTargets[i5].ConnectionName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.JDBCTargets[i5].ConnectionNameRef = rsp.ResolvedReference

	}
	for i5 := 0; i5 < len(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.MongoDBTargets); i5++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.MongoDBTargets[i5].ConnectionName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CustomCrawlerParameters.Targets.MongoDBTargets[i5].ConnectionNameRef,
			Selector:     mg.Spec.ForProvider.CustomCrawlerParameters.Targets.MongoDBTargets[i5].ConnectionNameSelector,
			To: reference.To{
				List:    &ConnectionList{},
				Managed: &Connection{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.Targets.MongoDBTargets[i5].ConnectionName")
		}
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.MongoDBTargets[i5].ConnectionName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.MongoDBTargets[i5].ConnectionNameRef = rsp.ResolvedReference

	}
	for i5 := 0; i5 < len(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets); i5++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].ConnectionName),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].ConnectionNameRef,
			Selector:     mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].ConnectionNameSelector,
			To: reference.To{
				List:    &ConnectionList{},
				Managed: &Connection{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].ConnectionName")
		}
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].ConnectionName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].ConnectionNameRef = rsp.ResolvedReference

	}
	for i5 := 0; i5 < len(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets); i5++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].DlqEventQueueARN),
			Extract:      v1beta12.QueueARN(),
			Reference:    mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].DlqEventQueueARNRef,
			Selector:     mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].DlqEventQueueARNSelector,
			To: reference.To{
				List:    &v1beta12.QueueList{},
				Managed: &v1beta12.Queue{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].DlqEventQueueARN")
		}
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].DlqEventQueueARN = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].DlqEventQueueARNRef = rsp.ResolvedReference

	}
	for i5 := 0; i5 < len(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets); i5++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].EventQueueARN),
			Extract:      v1beta12.QueueARN(),
			Reference:    mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].EventQueueARNRef,
			Selector:     mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].EventQueueARNSelector,
			To: reference.To{
				List:    &v1beta12.QueueList{},
				Managed: &v1beta12.Queue{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].EventQueueARN")
		}
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].EventQueueARN = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomCrawlerParameters.Targets.S3Targets[i5].EventQueueARNRef = rsp.ResolvedReference

	}

	return nil
}

// ResolveReferences of this Job.
func (mg *Job) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
		CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomJobParameters.Connections),
		Extract:       reference.ExternalName(),
		References:    mg.Spec.ForProvider.CustomJobParameters.ConnectionRefs,
		Selector:      mg.Spec.ForProvider.CustomJobParameters.ConnectionSelector,
		To: reference.To{
			List:    &ConnectionList{},
			Managed: &Connection{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomJobParameters.Connections")
	}
	mg.Spec.ForProvider.CustomJobParameters.Connections = reference.ToPtrValues(mrsp.ResolvedValues)
	mg.Spec.ForProvider.CustomJobParameters.ConnectionRefs = mrsp.ResolvedReferences

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: mg.Spec.ForProvider.CustomJobParameters.Role,
		Extract:      v1beta11.RoleARN(),
		Reference:    mg.Spec.ForProvider.CustomJobParameters.RoleRef,
		Selector:     mg.Spec.ForProvider.CustomJobParameters.RoleSelector,
		To: reference.To{
			List:    &v1beta11.RoleList{},
			Managed: &v1beta11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomJobParameters.Role")
	}
	mg.Spec.ForProvider.CustomJobParameters.Role = rsp.ResolvedValue
	mg.Spec.ForProvider.CustomJobParameters.RoleRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomJobParameters.SecurityConfiguration),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CustomJobParameters.SecurityConfigurationRef,
		Selector:     mg.Spec.ForProvider.CustomJobParameters.SecurityConfigurationSelector,
		To: reference.To{
			List:    &SecurityConfigurationList{},
			Managed: &SecurityConfiguration{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomJobParameters.SecurityConfiguration")
	}
	mg.Spec.ForProvider.CustomJobParameters.SecurityConfiguration = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomJobParameters.SecurityConfigurationRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this SecurityConfiguration.
func (mg *SecurityConfiguration) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	if mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration != nil {
		if mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomCloudWatchEncryption != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomCloudWatchEncryption.KMSKeyARN),
				Extract:      v1alpha1.KMSKeyARN(),
				Reference:    mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomCloudWatchEncryption.KMSKeyARNRef,
				Selector:     mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomCloudWatchEncryption.KMSKeyARNSelector,
				To: reference.To{
					List:    &v1alpha1.KeyList{},
					Managed: &v1alpha1.Key{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomCloudWatchEncryption.KMSKeyARN")
			}
			mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomCloudWatchEncryption.KMSKeyARN = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomCloudWatchEncryption.KMSKeyARNRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration != nil {
		if mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomJobBookmarksEncryption != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomJobBookmarksEncryption.KMSKeyARN),
				Extract:      v1alpha1.KMSKeyARN(),
				Reference:    mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomJobBookmarksEncryption.KMSKeyARNRef,
				Selector:     mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomJobBookmarksEncryption.KMSKeyARNSelector,
				To: reference.To{
					List:    &v1alpha1.KeyList{},
					Managed: &v1alpha1.Key{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomJobBookmarksEncryption.KMSKeyARN")
			}
			mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomJobBookmarksEncryption.KMSKeyARN = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomJobBookmarksEncryption.KMSKeyARNRef = rsp.ResolvedReference

		}
	}
	if mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration != nil {
		for i5 := 0; i5 < len(mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomS3Encryption); i5++ {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomS3Encryption[i5].KMSKeyARN),
				Extract:      v1alpha1.KMSKeyARN(),
				Reference:    mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomS3Encryption[i5].KMSKeyARNRef,
				Selector:     mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomS3Encryption[i5].KMSKeyARNSelector,
				To: reference.To{
					List:    &v1alpha1.KeyList{},
					Managed: &v1alpha1.Key{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomS3Encryption[i5].KMSKeyARN")
			}
			mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomS3Encryption[i5].KMSKeyARN = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.CustomSecurityConfigurationParameters.CustomEncryptionConfiguration.CustomS3Encryption[i5].KMSKeyARNRef = rsp.ResolvedReference

		}
	}

	return nil
}
