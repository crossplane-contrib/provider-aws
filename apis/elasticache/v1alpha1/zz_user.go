/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// UserParameters defines the desired state of User
type UserParameters struct {
	// Region is which region the User will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Access permissions string used for this user.
	// +kubebuilder:validation:Required
	AccessString *string `json:"accessString"`
	// The current supported value is Redis.
	// +kubebuilder:validation:Required
	Engine *string `json:"engine"`
	// Indicates a password is not required for this user.
	NoPasswordRequired *bool `json:"noPasswordRequired,omitempty"`
	// Passwords used for this user. You can create up to two passwords for each
	// user.
	Passwords []*string `json:"passwords,omitempty"`
	// The ID of the user.
	// +kubebuilder:validation:Required
	UserID *string `json:"userID"`
	// The username of the user.
	// +kubebuilder:validation:Required
	UserName             *string `json:"userName"`
	CustomUserParameters `json:",inline"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       UserParameters `json:"forProvider"`
}

// UserObservation defines the observed state of User
type UserObservation struct {
	// The Amazon Resource Name (ARN) of the user.
	ARN *string `json:"arn,omitempty"`
	// Denotes whether the user requires a password to authenticate.
	Authentication *Authentication `json:"authentication,omitempty"`
	// Indicates the user status. Can be "active", "modifying" or "deleting".
	Status *string `json:"status,omitempty"`
	// Returns a list of the user group IDs the user belongs to.
	UserGroupIDs []*string `json:"userGroupIDs,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          UserObservation `json:"atProvider"`
}

// +kubebuilder:object:root=true

// User is the Schema for the Users API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserSpec   `json:"spec,omitempty"`
	Status            UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	UserKind             = "User"
	UserGroupKind        = schema.GroupKind{Group: Group, Kind: UserKind}.String()
	UserKindAPIVersion   = UserKind + "." + GroupVersion.String()
	UserGroupVersionKind = GroupVersion.WithKind(UserKind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
