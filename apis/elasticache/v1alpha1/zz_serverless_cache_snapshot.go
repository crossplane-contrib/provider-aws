/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ServerlessCacheSnapshotParameters defines the desired state of ServerlessCacheSnapshot
type ServerlessCacheSnapshotParameters struct {
	// Region is which region the ServerlessCacheSnapshot will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The ID of the KMS key used to encrypt the snapshot. Available for Redis only.
	// Default: NULL
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// The name of an existing serverless cache. The snapshot is created from this
	// cache. Available for Redis only.
	// +kubebuilder:validation:Required
	ServerlessCacheName *string `json:"serverlessCacheName"`
	// The name for the snapshot being created. Must be unique for the customer
	// account. Available for Redis only. Must be between 1 and 255 characters.
	// +kubebuilder:validation:Required
	ServerlessCacheSnapshotName *string `json:"serverlessCacheSnapshotName"`
	// A list of tags to be added to the snapshot resource. A tag is a key-value
	// pair. Available for Redis only.
	Tags                                    []*Tag `json:"tags,omitempty"`
	CustomServerlessCacheSnapshotParameters `json:",inline"`
}

// ServerlessCacheSnapshotSpec defines the desired state of ServerlessCacheSnapshot
type ServerlessCacheSnapshotSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServerlessCacheSnapshotParameters `json:"forProvider"`
}

// ServerlessCacheSnapshotObservation defines the observed state of ServerlessCacheSnapshot
type ServerlessCacheSnapshotObservation struct {
	// The Amazon Resource Name (ARN) of a serverless cache snapshot. Available
	// for Redis only.
	ARN *string `json:"arn,omitempty"`
	// The total size of a serverless cache snapshot, in bytes. Available for Redis
	// only.
	BytesUsedForCache *string `json:"bytesUsedForCache,omitempty"`
	// The date and time that the source serverless cache's metadata and cache data
	// set was obtained for the snapshot. Available for Redis only.
	CreateTime *metav1.Time `json:"createTime,omitempty"`
	// The time that the serverless cache snapshot will expire. Available for Redis
	// only.
	ExpiryTime *metav1.Time `json:"expiryTime,omitempty"`
	// The configuration of the serverless cache, at the time the snapshot was taken.
	// Available for Redis only.
	ServerlessCacheConfiguration *ServerlessCacheConfiguration `json:"serverlessCacheConfiguration,omitempty"`
	// The type of snapshot of serverless cache. Available for Redis only.
	SnapshotType *string `json:"snapshotType,omitempty"`
	// The current status of the serverless cache. Available for Redis only.
	Status *string `json:"status,omitempty"`

	CustomServerlessCacheSnapshotObservation `json:",inline"`
}

// ServerlessCacheSnapshotStatus defines the observed state of ServerlessCacheSnapshot.
type ServerlessCacheSnapshotStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServerlessCacheSnapshotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerlessCacheSnapshot is the Schema for the ServerlessCacheSnapshots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ServerlessCacheSnapshot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerlessCacheSnapshotSpec   `json:"spec"`
	Status            ServerlessCacheSnapshotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerlessCacheSnapshotList contains a list of ServerlessCacheSnapshots
type ServerlessCacheSnapshotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerlessCacheSnapshot `json:"items"`
}

// Repository type metadata.
var (
	ServerlessCacheSnapshotKind             = "ServerlessCacheSnapshot"
	ServerlessCacheSnapshotGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerlessCacheSnapshotKind}.String()
	ServerlessCacheSnapshotKindAPIVersion   = ServerlessCacheSnapshotKind + "." + GroupVersion.String()
	ServerlessCacheSnapshotGroupVersionKind = GroupVersion.WithKind(ServerlessCacheSnapshotKind)
)

func init() {
	SchemeBuilder.Register(&ServerlessCacheSnapshot{}, &ServerlessCacheSnapshotList{})
}
