/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ServerlessCacheParameters defines the desired state of ServerlessCache
type ServerlessCacheParameters struct {
	// Region is which region the ServerlessCache will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Sets the cache usage limits for storage and ElastiCache Processing Units
	// for the cache.
	CacheUsageLimits *CacheUsageLimits `json:"cacheUsageLimits,omitempty"`
	// The daily time that snapshots will be created from the new serverless cache.
	// By default this number is populated with 0, i.e. no snapshots will be created
	// on an automatic daily basis. Available for Redis only.
	DailySnapshotTime *string `json:"dailySnapshotTime,omitempty"`
	// User-provided description for the serverless cache. The default is NULL,
	// i.e. if no description is provided then an empty string will be returned.
	// The maximum length is 255 characters.
	Description *string `json:"description,omitempty"`
	// The name of the cache engine to be used for creating the serverless cache.
	// +kubebuilder:validation:Required
	Engine *string `json:"engine"`
	// ARN of the customer managed key for encrypting the data at rest. If no KMS
	// key is provided, a default service key is used.
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// The version of the cache engine that will be used to create the serverless
	// cache.
	MajorEngineVersion *string `json:"majorEngineVersion,omitempty"`
	// A list of the one or more VPC security groups to be associated with the serverless
	// cache. The security group will authorize traffic access for the VPC end-point
	// (private-link). If no other information is given this will be the VPCâ€™s
	// Default Security Group that is associated with the cluster VPC end-point.
	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`
	// User-provided identifier for the serverless cache. This parameter is stored
	// as a lowercase string.
	// +kubebuilder:validation:Required
	ServerlessCacheName *string `json:"serverlessCacheName"`
	// The ARN(s) of the snapshot that the new serverless cache will be created
	// from. Available for Redis only.
	SnapshotARNsToRestore []*string `json:"snapshotARNsToRestore,omitempty"`
	// The number of snapshots that will be retained for the serverless cache that
	// is being created. As new snapshots beyond this limit are added, the oldest
	// snapshots will be deleted on a rolling basis. Available for Redis only.
	SnapshotRetentionLimit *int64 `json:"snapshotRetentionLimit,omitempty"`
	// A list of the identifiers of the subnets where the VPC endpoint for the serverless
	// cache will be deployed. All the subnetIds must belong to the same VPC.
	SubnetIDs []*string `json:"subnetIDs,omitempty"`
	// The list of tags (key, value) pairs to be added to the serverless cache resource.
	// Default is NULL.
	Tags []*Tag `json:"tags,omitempty"`
	// The identifier of the UserGroup to be associated with the serverless cache.
	// Available for Redis only. Default is NULL.
	UserGroupID                     *string `json:"userGroupID,omitempty"`
	CustomServerlessCacheParameters `json:",inline"`
}

// ServerlessCacheSpec defines the desired state of ServerlessCache
type ServerlessCacheSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServerlessCacheParameters `json:"forProvider"`
}

// ServerlessCacheObservation defines the observed state of ServerlessCache
type ServerlessCacheObservation struct {
	// The Amazon Resource Name (ARN) of the serverless cache.
	ARN *string `json:"arn,omitempty"`
	// When the serverless cache was created.
	CreateTime *metav1.Time `json:"createTime,omitempty"`

	Endpoint *Endpoint `json:"endpoint,omitempty"`
	// The name and version number of the engine the serverless cache is compatible
	// with.
	FullEngineVersion *string `json:"fullEngineVersion,omitempty"`

	ReaderEndpoint *Endpoint `json:"readerEndpoint,omitempty"`
	// The current status of the serverless cache. The allowed values are CREATING,
	// AVAILABLE, DELETING, CREATE-FAILED and MODIFYING.
	Status *string `json:"status,omitempty"`

	CustomServerlessCacheObservation `json:",inline"`
}

// ServerlessCacheStatus defines the observed state of ServerlessCache.
type ServerlessCacheStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServerlessCacheObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerlessCache is the Schema for the ServerlessCaches API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ServerlessCache struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerlessCacheSpec   `json:"spec"`
	Status            ServerlessCacheStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerlessCacheList contains a list of ServerlessCaches
type ServerlessCacheList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerlessCache `json:"items"`
}

// Repository type metadata.
var (
	ServerlessCacheKind             = "ServerlessCache"
	ServerlessCacheGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerlessCacheKind}.String()
	ServerlessCacheKindAPIVersion   = ServerlessCacheKind + "." + GroupVersion.String()
	ServerlessCacheGroupVersionKind = GroupVersion.WithKind(ServerlessCacheKind)
)

func init() {
	SchemeBuilder.Register(&ServerlessCache{}, &ServerlessCacheList{})
}
