/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

type Authentication struct {
	PasswordCount *int64 `json:"passwordCount,omitempty"`

	Type *string `json:"type_,omitempty"`
}

type AvailabilityZone struct {
	Name *string `json:"name,omitempty"`
}

type CacheCluster struct {
	ARN *string `json:"arn,omitempty"`

	AtRestEncryptionEnabled *bool `json:"atRestEncryptionEnabled,omitempty"`

	AuthTokenEnabled *bool `json:"authTokenEnabled,omitempty"`

	CacheClusterID *string `json:"cacheClusterID,omitempty"`

	CacheClusterStatus *string `json:"cacheClusterStatus,omitempty"`

	CacheNodeType *string `json:"cacheNodeType,omitempty"`

	CacheSubnetGroupName *string `json:"cacheSubnetGroupName,omitempty"`

	ClientDownloadLandingPage *string `json:"clientDownloadLandingPage,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	NumCacheNodes *int64 `json:"numCacheNodes,omitempty"`

	PreferredAvailabilityZone *string `json:"preferredAvailabilityZone,omitempty"`

	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`

	PreferredOutpostARN *string `json:"preferredOutpostARN,omitempty"`

	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`

	SnapshotRetentionLimit *int64 `json:"snapshotRetentionLimit,omitempty"`

	SnapshotWindow *string `json:"snapshotWindow,omitempty"`

	TransitEncryptionEnabled *bool `json:"transitEncryptionEnabled,omitempty"`
}

type CacheEngineVersion struct {
	CacheEngineDescription *string `json:"cacheEngineDescription,omitempty"`

	CacheEngineVersionDescription *string `json:"cacheEngineVersionDescription,omitempty"`

	CacheParameterGroupFamily *string `json:"cacheParameterGroupFamily,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`
}

type CacheNode struct {
	CacheNodeID *string `json:"cacheNodeID,omitempty"`

	CacheNodeStatus *string `json:"cacheNodeStatus,omitempty"`

	CustomerAvailabilityZone *string `json:"customerAvailabilityZone,omitempty"`

	CustomerOutpostARN *string `json:"customerOutpostARN,omitempty"`

	ParameterGroupStatus *string `json:"parameterGroupStatus,omitempty"`

	SourceCacheNodeID *string `json:"sourceCacheNodeID,omitempty"`
}

type CacheNodeTypeSpecificParameter struct {
	AllowedValues *string `json:"allowedValues,omitempty"`

	DataType *string `json:"dataType,omitempty"`

	Description *string `json:"description,omitempty"`

	MinimumEngineVersion *string `json:"minimumEngineVersion,omitempty"`

	ParameterName *string `json:"parameterName,omitempty"`

	Source *string `json:"source,omitempty"`
}

type CacheNodeTypeSpecificValue struct {
	CacheNodeType *string `json:"cacheNodeType,omitempty"`

	Value *string `json:"value,omitempty"`
}

type CacheNodeUpdateStatus struct {
	CacheNodeID *string `json:"cacheNodeID,omitempty"`
}

type CacheParameterGroup struct {
	ARN *string `json:"arn,omitempty"`

	CacheParameterGroupFamily *string `json:"cacheParameterGroupFamily,omitempty"`

	CacheParameterGroupName *string `json:"cacheParameterGroupName,omitempty"`

	Description *string `json:"description,omitempty"`
}

type CacheParameterGroupStatus struct {
	CacheParameterGroupName *string `json:"cacheParameterGroupName,omitempty"`

	ParameterApplyStatus *string `json:"parameterApplyStatus,omitempty"`
}

type CacheSecurityGroup struct {
	ARN *string `json:"arn,omitempty"`

	CacheSecurityGroupName *string `json:"cacheSecurityGroupName,omitempty"`

	Description *string `json:"description,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`
}

type CacheSecurityGroupMembership struct {
	CacheSecurityGroupName *string `json:"cacheSecurityGroupName,omitempty"`

	Status *string `json:"status,omitempty"`
}

type CacheSubnetGroup struct {
	ARN *string `json:"arn,omitempty"`

	CacheSubnetGroupDescription *string `json:"cacheSubnetGroupDescription,omitempty"`

	CacheSubnetGroupName *string `json:"cacheSubnetGroupName,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

type CustomerNodeEndpoint struct {
	Address *string `json:"address,omitempty"`

	Port *int64 `json:"port,omitempty"`
}

type EC2SecurityGroup struct {
	EC2SecurityGroupName *string `json:"ec2SecurityGroupName,omitempty"`

	EC2SecurityGroupOwnerID *string `json:"ec2SecurityGroupOwnerID,omitempty"`

	Status *string `json:"status,omitempty"`
}

type Endpoint struct {
	Address *string `json:"address,omitempty"`
}

type EngineDefaults struct {
	CacheParameterGroupFamily *string `json:"cacheParameterGroupFamily,omitempty"`

	Marker *string `json:"marker,omitempty"`
}

type Event struct {
	Message *string `json:"message,omitempty"`

	SourceIdentifier *string `json:"sourceIdentifier,omitempty"`
}

type Filter struct {
	Name *string `json:"name,omitempty"`

	Values []*string `json:"values,omitempty"`
}

type GlobalNodeGroup struct {
	GlobalNodeGroupID *string `json:"globalNodeGroupID,omitempty"`

	Slots *string `json:"slots,omitempty"`
}

type GlobalReplicationGroup struct {
	ARN *string `json:"arn,omitempty"`

	AtRestEncryptionEnabled *bool `json:"atRestEncryptionEnabled,omitempty"`

	AuthTokenEnabled *bool `json:"authTokenEnabled,omitempty"`

	CacheNodeType *string `json:"cacheNodeType,omitempty"`

	ClusterEnabled *bool `json:"clusterEnabled,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	GlobalReplicationGroupDescription *string `json:"globalReplicationGroupDescription,omitempty"`

	GlobalReplicationGroupID *string `json:"globalReplicationGroupID,omitempty"`

	Status *string `json:"status,omitempty"`

	TransitEncryptionEnabled *bool `json:"transitEncryptionEnabled,omitempty"`
}

type GlobalReplicationGroupInfo struct {
	GlobalReplicationGroupID *string `json:"globalReplicationGroupID,omitempty"`

	GlobalReplicationGroupMemberRole *string `json:"globalReplicationGroupMemberRole,omitempty"`
}

type GlobalReplicationGroupMember struct {
	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`

	ReplicationGroupRegion *string `json:"replicationGroupRegion,omitempty"`

	Role *string `json:"role,omitempty"`

	Status *string `json:"status,omitempty"`
}

type NodeGroup struct {
	NodeGroupID *string `json:"nodeGroupID,omitempty"`

	Slots *string `json:"slots,omitempty"`

	Status *string `json:"status,omitempty"`
}

type NodeGroupConfiguration struct {
	PrimaryAvailabilityZone *string `json:"primaryAvailabilityZone,omitempty"`

	PrimaryOutpostARN *string `json:"primaryOutpostARN,omitempty"`

	ReplicaCount *int64 `json:"replicaCount,omitempty"`

	Slots *string `json:"slots,omitempty"`
}

type NodeGroupMember struct {
	CacheClusterID *string `json:"cacheClusterID,omitempty"`

	CacheNodeID *string `json:"cacheNodeID,omitempty"`

	CurrentRole *string `json:"currentRole,omitempty"`

	PreferredAvailabilityZone *string `json:"preferredAvailabilityZone,omitempty"`

	PreferredOutpostARN *string `json:"preferredOutpostARN,omitempty"`
}

type NodeGroupMemberUpdateStatus struct {
	CacheClusterID *string `json:"cacheClusterID,omitempty"`

	CacheNodeID *string `json:"cacheNodeID,omitempty"`
}

type NodeGroupUpdateStatus struct {
	NodeGroupID *string `json:"nodeGroupID,omitempty"`
}

type NodeSnapshot struct {
	CacheClusterID *string `json:"cacheClusterID,omitempty"`

	CacheNodeID *string `json:"cacheNodeID,omitempty"`

	CacheSize *string `json:"cacheSize,omitempty"`

	NodeGroupID *string `json:"nodeGroupID,omitempty"`
}

type NotificationConfiguration struct {
	TopicARN *string `json:"topicARN,omitempty"`

	TopicStatus *string `json:"topicStatus,omitempty"`
}

type Parameter struct {
	AllowedValues *string `json:"allowedValues,omitempty"`

	DataType *string `json:"dataType,omitempty"`

	Description *string `json:"description,omitempty"`

	MinimumEngineVersion *string `json:"minimumEngineVersion,omitempty"`

	ParameterName *string `json:"parameterName,omitempty"`

	ParameterValue *string `json:"parameterValue,omitempty"`

	Source *string `json:"source,omitempty"`
}

type ParameterNameValue struct {
	ParameterName *string `json:"parameterName,omitempty"`

	ParameterValue *string `json:"parameterValue,omitempty"`
}

type PendingModifiedValues struct {
	CacheNodeType *string `json:"cacheNodeType,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	NumCacheNodes *int64 `json:"numCacheNodes,omitempty"`
}

type ProcessedUpdateAction struct {
	CacheClusterID *string `json:"cacheClusterID,omitempty"`

	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`

	ServiceUpdateName *string `json:"serviceUpdateName,omitempty"`
}

type RecurringCharge struct {
	RecurringChargeFrequency *string `json:"recurringChargeFrequency,omitempty"`
}

type RegionalConfiguration struct {
	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`

	ReplicationGroupRegion *string `json:"replicationGroupRegion,omitempty"`
}

type ReplicationGroup struct {
	ARN *string `json:"arn,omitempty"`

	AtRestEncryptionEnabled *bool `json:"atRestEncryptionEnabled,omitempty"`

	AuthTokenEnabled *bool `json:"authTokenEnabled,omitempty"`

	CacheNodeType *string `json:"cacheNodeType,omitempty"`

	ClusterEnabled *bool `json:"clusterEnabled,omitempty"`

	Description *string `json:"description,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`

	SnapshotRetentionLimit *int64 `json:"snapshotRetentionLimit,omitempty"`

	SnapshotWindow *string `json:"snapshotWindow,omitempty"`

	SnapshottingClusterID *string `json:"snapshottingClusterID,omitempty"`

	Status *string `json:"status,omitempty"`

	TransitEncryptionEnabled *bool `json:"transitEncryptionEnabled,omitempty"`

	UserGroupIDs []*string `json:"userGroupIDs,omitempty"`
}

type ReplicationGroupPendingModifiedValues struct {
	PrimaryClusterID *string `json:"primaryClusterID,omitempty"`
}

type ReservedCacheNode struct {
	CacheNodeType *string `json:"cacheNodeType,omitempty"`

	OfferingType *string `json:"offeringType,omitempty"`

	ProductDescription *string `json:"productDescription,omitempty"`

	ReservationARN *string `json:"reservationARN,omitempty"`

	ReservedCacheNodeID *string `json:"reservedCacheNodeID,omitempty"`

	ReservedCacheNodesOfferingID *string `json:"reservedCacheNodesOfferingID,omitempty"`

	State *string `json:"state,omitempty"`
}

type ReservedCacheNodesOffering struct {
	CacheNodeType *string `json:"cacheNodeType,omitempty"`

	OfferingType *string `json:"offeringType,omitempty"`

	ProductDescription *string `json:"productDescription,omitempty"`

	ReservedCacheNodesOfferingID *string `json:"reservedCacheNodesOfferingID,omitempty"`
}

type SecurityGroupMembership struct {
	SecurityGroupID *string `json:"securityGroupID,omitempty"`

	Status *string `json:"status,omitempty"`
}

type ServiceUpdate struct {
	AutoUpdateAfterRecommendedApplyByDate *bool `json:"autoUpdateAfterRecommendedApplyByDate,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	EstimatedUpdateTime *string `json:"estimatedUpdateTime,omitempty"`

	ServiceUpdateDescription *string `json:"serviceUpdateDescription,omitempty"`

	ServiceUpdateName *string `json:"serviceUpdateName,omitempty"`
}

type Snapshot struct {
	ARN *string `json:"arn,omitempty"`

	CacheClusterID *string `json:"cacheClusterID,omitempty"`

	CacheNodeType *string `json:"cacheNodeType,omitempty"`

	CacheParameterGroupName *string `json:"cacheParameterGroupName,omitempty"`

	CacheSubnetGroupName *string `json:"cacheSubnetGroupName,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	NumCacheNodes *int64 `json:"numCacheNodes,omitempty"`

	NumNodeGroups *int64 `json:"numNodeGroups,omitempty"`

	Port *int64 `json:"port,omitempty"`

	PreferredAvailabilityZone *string `json:"preferredAvailabilityZone,omitempty"`

	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`

	PreferredOutpostARN *string `json:"preferredOutpostARN,omitempty"`

	ReplicationGroupDescription *string `json:"replicationGroupDescription,omitempty"`

	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`

	SnapshotName *string `json:"snapshotName,omitempty"`

	SnapshotRetentionLimit *int64 `json:"snapshotRetentionLimit,omitempty"`

	SnapshotSource *string `json:"snapshotSource,omitempty"`

	SnapshotStatus *string `json:"snapshotStatus,omitempty"`

	SnapshotWindow *string `json:"snapshotWindow,omitempty"`

	TopicARN *string `json:"topicARN,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

type Subnet struct {
	SubnetIdentifier *string `json:"subnetIdentifier,omitempty"`
}

type SubnetOutpost struct {
	SubnetOutpostARN *string `json:"subnetOutpostARN,omitempty"`
}

type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

type UnprocessedUpdateAction struct {
	CacheClusterID *string `json:"cacheClusterID,omitempty"`

	ErrorMessage *string `json:"errorMessage,omitempty"`

	ErrorType *string `json:"errorType,omitempty"`

	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`

	ServiceUpdateName *string `json:"serviceUpdateName,omitempty"`
}

type UpdateAction struct {
	CacheClusterID *string `json:"cacheClusterID,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EstimatedUpdateTime *string `json:"estimatedUpdateTime,omitempty"`

	NodesUpdated *string `json:"nodesUpdated,omitempty"`

	ReplicationGroupID *string `json:"replicationGroupID,omitempty"`

	ServiceUpdateName *string `json:"serviceUpdateName,omitempty"`
}

type UserGroup struct {
	ARN *string `json:"arn,omitempty"`

	Engine *string `json:"engine,omitempty"`

	Status *string `json:"status,omitempty"`

	UserGroupID *string `json:"userGroupID,omitempty"`
}

type UserGroupsUpdateStatus struct {
	UserGroupIDsToAdd []*string `json:"userGroupIDsToAdd,omitempty"`

	UserGroupIDsToRemove []*string `json:"userGroupIDsToRemove,omitempty"`
}

type User_SDK struct {
	ARN *string `json:"arn,omitempty"`

	AccessString *string `json:"accessString,omitempty"`
	// Indicates whether the user requires a password to authenticate.
	Authentication *Authentication `json:"authentication,omitempty"`

	Engine *string `json:"engine,omitempty"`

	Status *string `json:"status,omitempty"`

	UserGroupIDs []*string `json:"userGroupIDs,omitempty"`

	UserID *string `json:"userID,omitempty"`

	UserName *string `json:"userName,omitempty"`
}
