/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import (
	"context"
	v1beta1 "github.com/crossplane-contrib/provider-aws/apis/ec2/v1beta1"
	v1alpha11 "github.com/crossplane-contrib/provider-aws/apis/efs/v1alpha1"
	v1alpha1 "github.com/crossplane-contrib/provider-aws/apis/elbv2/v1alpha1"
	v1beta11 "github.com/crossplane-contrib/provider-aws/apis/iam/v1beta1"
	reference "github.com/crossplane/crossplane-runtime/pkg/reference"
	errors "github.com/pkg/errors"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// ResolveReferences of this Service.
func (mg *Service) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var mrsp reference.MultiResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomServiceParameters.Cluster),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CustomServiceParameters.ClusterRef,
		Selector:     mg.Spec.ForProvider.CustomServiceParameters.ClusterSelector,
		To: reference.To{
			List:    &ClusterList{},
			Managed: &Cluster{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomServiceParameters.Cluster")
	}
	mg.Spec.ForProvider.CustomServiceParameters.Cluster = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomServiceParameters.ClusterRef = rsp.ResolvedReference

	for i4 := 0; i4 < len(mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers); i4++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].LoadBalancerName),
			Extract:      LoadBalancerName(),
			Reference:    mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].LoadBalancerNameRef,
			Selector:     mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].LoadBalancerNameSelector,
			To: reference.To{
				List:    &v1alpha1.LoadBalancerList{},
				Managed: &v1alpha1.LoadBalancer{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].LoadBalancerName")
		}
		mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].LoadBalancerName = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].LoadBalancerNameRef = rsp.ResolvedReference

	}
	for i4 := 0; i4 < len(mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers); i4++ {
		rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
			CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].TargetGroupARN),
			Extract:      reference.ExternalName(),
			Reference:    mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].TargetGroupARNRef,
			Selector:     mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].TargetGroupARNSelector,
			To: reference.To{
				List:    &v1alpha1.TargetGroupList{},
				Managed: &v1alpha1.TargetGroup{},
			},
		})
		if err != nil {
			return errors.Wrap(err, "mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].TargetGroupARN")
		}
		mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].TargetGroupARN = reference.ToPtrValue(rsp.ResolvedValue)
		mg.Spec.ForProvider.CustomServiceParameters.LoadBalancers[i4].TargetGroupARNRef = rsp.ResolvedReference

	}
	if mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration != nil {
		if mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration != nil {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.SecurityGroups),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.SecurityGroupRefs,
				Selector:      mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.SecurityGroupSelector,
				To: reference.To{
					List:    &v1beta1.SecurityGroupList{},
					Managed: &v1beta1.SecurityGroup{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.SecurityGroups")
			}
			mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.SecurityGroups = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.SecurityGroupRefs = mrsp.ResolvedReferences

		}
	}
	if mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration != nil {
		if mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration != nil {
			mrsp, err = r.ResolveMultiple(ctx, reference.MultiResolutionRequest{
				CurrentValues: reference.FromPtrValues(mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.Subnets),
				Extract:       reference.ExternalName(),
				References:    mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.SubnetRefs,
				Selector:      mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.SubnetSelector,
				To: reference.To{
					List:    &v1beta1.SubnetList{},
					Managed: &v1beta1.Subnet{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.Subnets")
			}
			mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.Subnets = reference.ToPtrValues(mrsp.ResolvedValues)
			mg.Spec.ForProvider.CustomServiceParameters.NetworkConfiguration.AWSvpcConfiguration.SubnetRefs = mrsp.ResolvedReferences

		}
	}
	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomServiceParameters.TaskDefinition),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CustomServiceParameters.TaskDefinitionRef,
		Selector:     mg.Spec.ForProvider.CustomServiceParameters.TaskDefinitionSelector,
		To: reference.To{
			List:    &TaskDefinitionList{},
			Managed: &TaskDefinition{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomServiceParameters.TaskDefinition")
	}
	mg.Spec.ForProvider.CustomServiceParameters.TaskDefinition = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomServiceParameters.TaskDefinitionRef = rsp.ResolvedReference

	return nil
}

// ResolveReferences of this TaskDefinition.
func (mg *TaskDefinition) ResolveReferences(ctx context.Context, c client.Reader) error {
	r := reference.NewAPIResolver(c, mg)

	var rsp reference.ResolutionResponse
	var err error

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomTaskDefinitionParameters.ExecutionRoleARN),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CustomTaskDefinitionParameters.ExecutionRoleARNRef,
		Selector:     mg.Spec.ForProvider.CustomTaskDefinitionParameters.ExecutionRoleARNSelector,
		To: reference.To{
			List:    &v1beta11.RoleList{},
			Managed: &v1beta11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomTaskDefinitionParameters.ExecutionRoleARN")
	}
	mg.Spec.ForProvider.CustomTaskDefinitionParameters.ExecutionRoleARN = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomTaskDefinitionParameters.ExecutionRoleARNRef = rsp.ResolvedReference

	rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
		CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomTaskDefinitionParameters.TaskRoleARN),
		Extract:      reference.ExternalName(),
		Reference:    mg.Spec.ForProvider.CustomTaskDefinitionParameters.TaskRoleARNRef,
		Selector:     mg.Spec.ForProvider.CustomTaskDefinitionParameters.TaskRoleARNSelector,
		To: reference.To{
			List:    &v1beta11.RoleList{},
			Managed: &v1beta11.Role{},
		},
	})
	if err != nil {
		return errors.Wrap(err, "mg.Spec.ForProvider.CustomTaskDefinitionParameters.TaskRoleARN")
	}
	mg.Spec.ForProvider.CustomTaskDefinitionParameters.TaskRoleARN = reference.ToPtrValue(rsp.ResolvedValue)
	mg.Spec.ForProvider.CustomTaskDefinitionParameters.TaskRoleARNRef = rsp.ResolvedReference

	for i4 := 0; i4 < len(mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes); i4++ {
		if mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration != nil {
			if mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.AuthorizationConfig != nil {
				rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
					CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.AuthorizationConfig.AccessPointID),
					Extract:      reference.ExternalName(),
					Reference:    mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.AuthorizationConfig.AccessPointIDRef,
					Selector:     mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.AuthorizationConfig.AccessPointIDSelector,
					To: reference.To{
						List:    &v1alpha11.AccessPointList{},
						Managed: &v1alpha11.AccessPoint{},
					},
				})
				if err != nil {
					return errors.Wrap(err, "mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.AuthorizationConfig.AccessPointID")
				}
				mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.AuthorizationConfig.AccessPointID = reference.ToPtrValue(rsp.ResolvedValue)
				mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.AuthorizationConfig.AccessPointIDRef = rsp.ResolvedReference

			}
		}
	}
	for i4 := 0; i4 < len(mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes); i4++ {
		if mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration != nil {
			rsp, err = r.Resolve(ctx, reference.ResolutionRequest{
				CurrentValue: reference.FromPtrValue(mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.FileSystemID),
				Extract:      reference.ExternalName(),
				Reference:    mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.FileSystemIDRef,
				Selector:     mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.FileSystemIDSelector,
				To: reference.To{
					List:    &v1alpha11.FileSystemList{},
					Managed: &v1alpha11.FileSystem{},
				},
			})
			if err != nil {
				return errors.Wrap(err, "mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.FileSystemID")
			}
			mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.FileSystemID = reference.ToPtrValue(rsp.ResolvedValue)
			mg.Spec.ForProvider.CustomTaskDefinitionParameters.Volumes[i4].EFSVolumeConfiguration.FileSystemIDRef = rsp.ResolvedReference

		}
	}

	return nil
}
