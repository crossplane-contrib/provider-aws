/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ServiceParameters defines the desired state of Service
type ServiceParameters struct {
	// Region is which region the Service will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The capacity provider strategy to use for the service.
	//
	// If a capacityProviderStrategy is specified, the launchType parameter must
	// be omitted. If no capacityProviderStrategy or launchType is specified, the
	// defaultCapacityProviderStrategy for the cluster is used.
	//
	// A capacity provider strategy may contain a maximum of 6 capacity providers.
	CapacityProviderStrategy []*CapacityProviderStrategyItem `json:"capacityProviderStrategy,omitempty"`
	// Optional deployment parameters that control how many tasks run during the
	// deployment and the ordering of stopping and starting tasks.
	DeploymentConfiguration *DeploymentConfiguration `json:"deploymentConfiguration,omitempty"`
	// The deployment controller to use for the service. If no deployment controller
	// is specified, the default value of ECS is used.
	DeploymentController *DeploymentController `json:"deploymentController,omitempty"`
	// The number of instantiations of the specified task definition to place and
	// keep running on your cluster.
	//
	// This is required if schedulingStrategy is REPLICA or isn't specified. If
	// schedulingStrategy is DAEMON then this isn't required.
	DesiredCount *int64 `json:"desiredCount,omitempty"`
	// Specifies whether to turn on Amazon ECS managed tags for the tasks within
	// the service. For more information, see Tagging Your Amazon ECS Resources
	// (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs-using-tags.html)
	// in the Amazon Elastic Container Service Developer Guide.
	EnableECSManagedTags *bool `json:"enableECSManagedTags,omitempty"`
	// Determines whether the execute command functionality is enabled for the service.
	// If true, this enables execute command functionality on all containers in
	// the service tasks.
	EnableExecuteCommand *bool `json:"enableExecuteCommand,omitempty"`
	// The period of time, in seconds, that the Amazon ECS service scheduler ignores
	// unhealthy Elastic Load Balancing target health checks after a task has first
	// started. This is only used when your service is configured to use a load
	// balancer. If your service has a load balancer defined and you don't specify
	// a health check grace period value, the default value of 0 is used.
	//
	// If you do not use an Elastic Load Balancing, we recomend that you use the
	// startPeriod in the task definition healtch check parameters. For more information,
	// see Health check (https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_HealthCheck.html).
	//
	// If your service's tasks take a while to start and respond to Elastic Load
	// Balancing health checks, you can specify a health check grace period of up
	// to 2,147,483,647 seconds (about 69 years). During that time, the Amazon ECS
	// service scheduler ignores health check status. This grace period can prevent
	// the service scheduler from marking tasks as unhealthy and stopping them before
	// they have time to come up.
	HealthCheckGracePeriodSeconds *int64 `json:"healthCheckGracePeriodSeconds,omitempty"`
	// The infrastructure that you run your service on. For more information, see
	// Amazon ECS launch types (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// The FARGATE launch type runs your tasks on Fargate On-Demand infrastructure.
	//
	// Fargate Spot infrastructure is available for use but a capacity provider
	// strategy must be used. For more information, see Fargate capacity providers
	// (https://docs.aws.amazon.com/AmazonECS/latest/userguide/fargate-capacity-providers.html)
	// in the Amazon ECS User Guide for Fargate.
	//
	// The EC2 launch type runs your tasks on Amazon EC2 instances registered to
	// your cluster.
	//
	// The EXTERNAL launch type runs your tasks on your on-premises server or virtual
	// machine (VM) capacity registered to your cluster.
	//
	// A service can use either a launch type or a capacity provider strategy. If
	// a launchType is specified, the capacityProviderStrategy parameter must be
	// omitted.
	LaunchType *string `json:"launchType,omitempty"`
	// An array of placement constraint objects to use for tasks in your service.
	// You can specify a maximum of 10 constraints for each task. This limit includes
	// constraints in the task definition and those specified at runtime.
	PlacementConstraints []*PlacementConstraint `json:"placementConstraints,omitempty"`
	// The placement strategy objects to use for tasks in your service. You can
	// specify a maximum of 5 strategy rules for each service.
	PlacementStrategy []*PlacementStrategy `json:"placementStrategy,omitempty"`
	// The platform version that your tasks in the service are running on. A platform
	// version is specified only for tasks using the Fargate launch type. If one
	// isn't specified, the LATEST platform version is used. For more information,
	// see Fargate platform versions (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html)
	// in the Amazon Elastic Container Service Developer Guide.
	PlatformVersion *string `json:"platformVersion,omitempty"`
	// Specifies whether to propagate the tags from the task definition to the task.
	// If no value is specified, the tags aren't propagated. Tags can only be propagated
	// to the task during task creation. To add tags to a task after task creation,
	// use the TagResource API action.
	PropagateTags *string `json:"propagateTags,omitempty"`
	// The name or full Amazon Resource Name (ARN) of the IAM role that allows Amazon
	// ECS to make calls to your load balancer on your behalf. This parameter is
	// only permitted if you are using a load balancer with your service and your
	// task definition doesn't use the awsvpc network mode. If you specify the role
	// parameter, you must also specify a load balancer object with the loadBalancers
	// parameter.
	//
	// If your account has already created the Amazon ECS service-linked role, that
	// role is used for your service unless you specify a role here. The service-linked
	// role is required if your task definition uses the awsvpc network mode or
	// if the service is configured to use service discovery, an external deployment
	// controller, multiple target groups, or Elastic Inference accelerators in
	// which case you don't specify a role here. For more information, see Using
	// service-linked roles for Amazon ECS (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/using-service-linked-roles.html)
	// in the Amazon Elastic Container Service Developer Guide.
	//
	// If your specified role has a path other than /, then you must either specify
	// the full role ARN (this is recommended) or prefix the role name with the
	// path. For example, if a role with the name bar has a path of /foo/ then you
	// would specify /foo/bar as the role name. For more information, see Friendly
	// names and paths (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html#identifiers-friendly-names)
	// in the IAM User Guide.
	Role *string `json:"role,omitempty"`
	// The scheduling strategy to use for the service. For more information, see
	// Services (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ecs_services.html).
	//
	// There are two service scheduler strategies available:
	//
	//    * REPLICA-The replica scheduling strategy places and maintains the desired
	//    number of tasks across your cluster. By default, the service scheduler
	//    spreads tasks across Availability Zones. You can use task placement strategies
	//    and constraints to customize task placement decisions. This scheduler
	//    strategy is required if the service uses the CODE_DEPLOY or EXTERNAL deployment
	//    controller types.
	//
	//    * DAEMON-The daemon scheduling strategy deploys exactly one task on each
	//    active container instance that meets all of the task placement constraints
	//    that you specify in your cluster. The service scheduler also evaluates
	//    the task placement constraints for running tasks and will stop tasks that
	//    don't meet the placement constraints. When you're using this strategy,
	//    you don't need to specify a desired number of tasks, a task placement
	//    strategy, or use Service Auto Scaling policies. Tasks using the Fargate
	//    launch type or the CODE_DEPLOY or EXTERNAL deployment controller types
	//    don't support the DAEMON scheduling strategy.
	SchedulingStrategy *string `json:"schedulingStrategy,omitempty"`
	// The details of the service discovery registry to associate with this service.
	// For more information, see Service discovery (https://docs.aws.amazon.com/AmazonECS/latest/developerguide/service-discovery.html).
	//
	// Each service may be associated with one service registry. Multiple service
	// registries for each service isn't supported.
	ServiceRegistries []*ServiceRegistry `json:"serviceRegistries,omitempty"`
	// The metadata that you apply to the service to help you categorize and organize
	// them. Each tag consists of a key and an optional value, both of which you
	// define. When a service is deleted, the tags are deleted as well.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource - 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length - 128 Unicode characters in UTF-8
	//
	//    * Maximum value length - 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags                    []*Tag `json:"tags,omitempty"`
	CustomServiceParameters `json:",inline"`
}

// ServiceSpec defines the desired state of Service
type ServiceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ServiceParameters `json:"forProvider"`
}

// ServiceObservation defines the observed state of Service
type ServiceObservation struct {
	// The Amazon Resource Name (ARN) of the cluster that hosts the service.
	ClusterARN *string `json:"clusterARN,omitempty"`
	// The Unix timestamp for the time when the service was created.
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The principal that created the service.
	CreatedBy *string `json:"createdBy,omitempty"`
	// The current state of deployments for the service.
	Deployments []*Deployment `json:"deployments,omitempty"`
	// The event stream for your service. A maximum of 100 of the latest events
	// are displayed.
	Events []*ServiceEvent `json:"events,omitempty"`
	// A list of Elastic Load Balancing load balancer objects. It contains the load
	// balancer name, the container name, and the container port to access from
	// the load balancer. The container name is as it appears in a container definition.
	LoadBalancers []*LoadBalancer `json:"loadBalancers,omitempty"`
	// The VPC subnet and security group configuration for tasks that receive their
	// own elastic network interface by using the awsvpc networking mode.
	NetworkConfiguration *NetworkConfiguration `json:"networkConfiguration,omitempty"`
	// The number of tasks in the cluster that are in the PENDING state.
	PendingCount *int64 `json:"pendingCount,omitempty"`
	// The operating system that your tasks in the service run on. A platform family
	// is specified only for tasks using the Fargate launch type.
	//
	// All tasks that run as part of this service must use the same platformFamily
	// value as the service (for example, LINUX).
	PlatformFamily *string `json:"platformFamily,omitempty"`
	// The ARN of the IAM role that's associated with the service. It allows the
	// Amazon ECS container agent to register container instances with an Elastic
	// Load Balancing load balancer.
	RoleARN *string `json:"roleARN,omitempty"`
	// The number of tasks in the cluster that are in the RUNNING state.
	RunningCount *int64 `json:"runningCount,omitempty"`
	// The ARN that identifies the service. The ARN contains the arn:aws:ecs namespace,
	// followed by the Region of the service, the Amazon Web Services account ID
	// of the service owner, the service namespace, and then the service name. For
	// example, arn:aws:ecs:region:012345678910:service/my-service.
	ServiceARN *string `json:"serviceARN,omitempty"`
	// The name of your service. Up to 255 letters (uppercase and lowercase), numbers,
	// underscores, and hyphens are allowed. Service names must be unique within
	// a cluster. However, you can have similarly named services in multiple clusters
	// within a Region or across multiple Regions.
	ServiceName *string `json:"serviceName,omitempty"`
	// The status of the service. The valid values are ACTIVE, DRAINING, or INACTIVE.
	Status *string `json:"status,omitempty"`
	// The task definition to use for tasks in the service. This value is specified
	// when the service is created with CreateService, and it can be modified with
	// UpdateService.
	TaskDefinition *string `json:"taskDefinition,omitempty"`
	// Information about a set of Amazon ECS tasks in either an CodeDeploy or an
	// EXTERNAL deployment. An Amazon ECS task set includes details such as the
	// desired number of tasks, how many tasks are running, and whether the task
	// set serves production traffic.
	TaskSets []*TaskSet `json:"taskSets,omitempty"`
}

// ServiceStatus defines the observed state of Service.
type ServiceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Service is the Schema for the Services API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Service struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSpec   `json:"spec"`
	Status            ServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceList contains a list of Services
type ServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Service `json:"items"`
}

// Repository type metadata.
var (
	ServiceKind             = "Service"
	ServiceGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceKind}.String()
	ServiceKindAPIVersion   = ServiceKind + "." + GroupVersion.String()
	ServiceGroupVersionKind = GroupVersion.WithKind(ServiceKind)
)

func init() {
	SchemeBuilder.Register(&Service{}, &ServiceList{})
}
