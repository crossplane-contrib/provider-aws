/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ResolverEndpointParameters defines the desired state of ResolverEndpoint
type ResolverEndpointParameters struct {
	// Region is which region the ResolverEndpoint will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Specify the applicable value:
	//
	//    * INBOUND: Resolver forwards DNS queries to the DNS service for a VPC
	//    from your network
	//
	//    * OUTBOUND: Resolver forwards DNS queries from the DNS service for a VPC
	//    to your network
	// +kubebuilder:validation:Required
	Direction *string `json:"direction"`
	// A friendly name that lets you easily find a configuration in the Resolver
	// dashboard in the Route 53 console.
	Name *string `json:"name,omitempty"`
	// A list of the tag keys and values that you want to associate with the endpoint.
	Tags                             []*Tag `json:"tags,omitempty"`
	CustomResolverEndpointParameters `json:",inline"`
}

// ResolverEndpointSpec defines the desired state of ResolverEndpoint
type ResolverEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ResolverEndpointParameters `json:"forProvider"`
}

// ResolverEndpointObservation defines the observed state of ResolverEndpoint
type ResolverEndpointObservation struct {
	// The ARN (Amazon Resource Name) for the Resolver endpoint.
	ARN *string `json:"arn,omitempty"`
	// The date and time that the endpoint was created, in Unix time format and
	// Coordinated Universal Time (UTC).
	CreationTime *string `json:"creationTime,omitempty"`
	// A unique string that identifies the request that created the Resolver endpoint.
	// The CreatorRequestId allows failed requests to be retried without the risk
	// of running the operation twice.
	CreatorRequestID *string `json:"creatorRequestID,omitempty"`
	// The ID of the VPC that you want to create the Resolver endpoint in.
	HostVPCID *string `json:"hostVPCID,omitempty"`
	// The ID of the Resolver endpoint.
	ID *string `json:"id,omitempty"`
	// The number of IP addresses that the Resolver endpoint can use for DNS queries.
	IPAddressCount *int64 `json:"ipAddressCount,omitempty"`
	// The date and time that the endpoint was last modified, in Unix time format
	// and Coordinated Universal Time (UTC).
	ModificationTime *string `json:"modificationTime,omitempty"`
	// The ID of one or more security groups that control access to this VPC. The
	// security group must include one or more inbound rules (for inbound endpoints)
	// or outbound rules (for outbound endpoints). Inbound and outbound rules must
	// allow TCP and UDP access. For inbound access, open port 53. For outbound
	// access, open the port that you're using for DNS queries on your network.
	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`
	// A code that specifies the current status of the Resolver endpoint. Valid
	// values include the following:
	//
	//    * CREATING: Resolver is creating and configuring one or more Amazon VPC
	//    network interfaces for this endpoint.
	//
	//    * OPERATIONAL: The Amazon VPC network interfaces for this endpoint are
	//    correctly configured and able to pass inbound or outbound DNS queries
	//    between your network and Resolver.
	//
	//    * UPDATING: Resolver is associating or disassociating one or more network
	//    interfaces with this endpoint.
	//
	//    * AUTO_RECOVERING: Resolver is trying to recover one or more of the network
	//    interfaces that are associated with this endpoint. During the recovery
	//    process, the endpoint functions with limited capacity because of the limit
	//    on the number of DNS queries per IP address (per network interface). For
	//    the current limit, see Limits on Route 53 Resolver (https://docs.aws.amazon.com/Route53/latest/DeveloperGuide/DNSLimitations.html#limits-api-entities-resolver).
	//
	//    * ACTION_NEEDED: This endpoint is unhealthy, and Resolver can't automatically
	//    recover it. To resolve the problem, we recommend that you check each IP
	//    address that you associated with the endpoint. For each IP address that
	//    isn't available, add another IP address and then delete the IP address
	//    that isn't available. (An endpoint must always include at least two IP
	//    addresses.) A status of ACTION_NEEDED can have a variety of causes. Here
	//    are two common causes: One or more of the network interfaces that are
	//    associated with the endpoint were deleted using Amazon VPC. The network
	//    interface couldn't be created for some reason that's outside the control
	//    of Resolver.
	//
	//    * DELETING: Resolver is deleting this endpoint and the associated network
	//    interfaces.
	Status *string `json:"status,omitempty"`
	// A detailed description of the status of the Resolver endpoint.
	StatusMessage *string `json:"statusMessage,omitempty"`
}

// ResolverEndpointStatus defines the observed state of ResolverEndpoint.
type ResolverEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ResolverEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverEndpoint is the Schema for the ResolverEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type ResolverEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ResolverEndpointSpec   `json:"spec"`
	Status            ResolverEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ResolverEndpointList contains a list of ResolverEndpoints
type ResolverEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ResolverEndpoint `json:"items"`
}

// Repository type metadata.
var (
	ResolverEndpointKind             = "ResolverEndpoint"
	ResolverEndpointGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ResolverEndpointKind}.String()
	ResolverEndpointKindAPIVersion   = ResolverEndpointKind + "." + GroupVersion.String()
	ResolverEndpointGroupVersionKind = GroupVersion.WithKind(ResolverEndpointKind)
)

func init() {
	SchemeBuilder.Register(&ResolverEndpoint{}, &ResolverEndpointList{})
}
