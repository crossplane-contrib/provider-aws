/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// OutboundCrossClusterSearchConnectionParameters defines the desired state of OutboundCrossClusterSearchConnection
type OutboundCrossClusterSearchConnectionParameters struct {
	// Region is which region the OutboundCrossClusterSearchConnection will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Specifies the connection alias that will be used by the customer for this
	// connection.
	// +kubebuilder:validation:Required
	ConnectionAlias *string `json:"connectionAlias"`
	// Specifies the DomainInformation for the destination Elasticsearch domain.
	// +kubebuilder:validation:Required
	DestinationDomainInfo *DomainInformation `json:"destinationDomainInfo"`
	// Specifies the DomainInformation for the source Elasticsearch domain.
	// +kubebuilder:validation:Required
	SourceDomainInfo                                     *DomainInformation `json:"sourceDomainInfo"`
	CustomOutboundCrossClusterSearchConnectionParameters `json:",inline"`
}

// OutboundCrossClusterSearchConnectionSpec defines the desired state of OutboundCrossClusterSearchConnection
type OutboundCrossClusterSearchConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       OutboundCrossClusterSearchConnectionParameters `json:"forProvider"`
}

// OutboundCrossClusterSearchConnectionObservation defines the observed state of OutboundCrossClusterSearchConnection
type OutboundCrossClusterSearchConnectionObservation struct {
	// Specifies the OutboundCrossClusterSearchConnectionStatus for the newly created
	// connection.
	ConnectionStatus *OutboundCrossClusterSearchConnectionStatus_SDK `json:"connectionStatus,omitempty"`
	// Unique id for the created outbound connection, which is used for subsequent
	// operations on connection.
	CrossClusterSearchConnectionID *string `json:"crossClusterSearchConnectionID,omitempty"`
}

// OutboundCrossClusterSearchConnectionStatus defines the observed state of OutboundCrossClusterSearchConnection.
type OutboundCrossClusterSearchConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          OutboundCrossClusterSearchConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// OutboundCrossClusterSearchConnection is the Schema for the OutboundCrossClusterSearchConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type OutboundCrossClusterSearchConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              OutboundCrossClusterSearchConnectionSpec   `json:"spec"`
	Status            OutboundCrossClusterSearchConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// OutboundCrossClusterSearchConnectionList contains a list of OutboundCrossClusterSearchConnections
type OutboundCrossClusterSearchConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OutboundCrossClusterSearchConnection `json:"items"`
}

// Repository type metadata.
var (
	OutboundCrossClusterSearchConnectionKind             = "OutboundCrossClusterSearchConnection"
	OutboundCrossClusterSearchConnectionGroupKind        = schema.GroupKind{Group: Group, Kind: OutboundCrossClusterSearchConnectionKind}.String()
	OutboundCrossClusterSearchConnectionKindAPIVersion   = OutboundCrossClusterSearchConnectionKind + "." + GroupVersion.String()
	OutboundCrossClusterSearchConnectionGroupVersionKind = GroupVersion.WithKind(OutboundCrossClusterSearchConnectionKind)
)

func init() {
	SchemeBuilder.Register(&OutboundCrossClusterSearchConnection{}, &OutboundCrossClusterSearchConnectionList{})
}
