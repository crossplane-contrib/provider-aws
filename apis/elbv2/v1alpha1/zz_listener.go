/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ListenerParameters defines the desired state of Listener
type ListenerParameters struct {
	// Region is which region the Listener will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// [TLS listeners] The name of the Application-Layer Protocol Negotiation (ALPN)
	// policy. You can specify one policy name. The following are the possible values:
	//
	//    * HTTP1Only
	//
	//    * HTTP2Only
	//
	//    * HTTP2Optional
	//
	//    * HTTP2Preferred
	//
	//    * None
	//
	// For more information, see ALPN policies (https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#alpn-policies)
	// in the Network Load Balancers Guide.
	AlpnPolicy []*string `json:"alpnPolicy,omitempty"`
	// The port on which the load balancer is listening. You cannot specify a port
	// for a Gateway Load Balancer.
	Port *int64 `json:"port,omitempty"`
	// The protocol for connections from clients to the load balancer. For Application
	// Load Balancers, the supported protocols are HTTP and HTTPS. For Network Load
	// Balancers, the supported protocols are TCP, TLS, UDP, and TCP_UDP. You canâ€™t
	// specify the UDP or TCP_UDP protocol if dual-stack mode is enabled. You cannot
	// specify a protocol for a Gateway Load Balancer.
	Protocol *string `json:"protocol,omitempty"`
	// [HTTPS and TLS listeners] The security policy that defines which protocols
	// and ciphers are supported.
	//
	// For more information, see Security policies (https://docs.aws.amazon.com/elasticloadbalancing/latest/application/create-https-listener.html#describe-ssl-policies)
	// in the Application Load Balancers Guide and Security policies (https://docs.aws.amazon.com/elasticloadbalancing/latest/network/create-tls-listener.html#describe-ssl-policies)
	// in the Network Load Balancers Guide.
	SSLPolicy *string `json:"sslPolicy,omitempty"`
	// The tags to assign to the listener.
	Tags                     []*Tag `json:"tags,omitempty"`
	CustomListenerParameters `json:",inline"`
}

// ListenerSpec defines the desired state of Listener
type ListenerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ListenerParameters `json:"forProvider"`
}

// ListenerObservation defines the observed state of Listener
type ListenerObservation struct {
	// [HTTPS or TLS listener] The default certificate for the listener.
	Certificates []*Certificate `json:"certificates,omitempty"`
	// The default actions for the listener.
	DefaultActions []*Action `json:"defaultActions,omitempty"`
	// The Amazon Resource Name (ARN) of the listener.
	ListenerARN *string `json:"listenerARN,omitempty"`
	// The Amazon Resource Name (ARN) of the load balancer.
	LoadBalancerARN *string `json:"loadBalancerARN,omitempty"`
}

// ListenerStatus defines the observed state of Listener.
type ListenerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ListenerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Listener is the Schema for the Listeners API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Listener struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ListenerSpec   `json:"spec"`
	Status            ListenerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ListenerList contains a list of Listeners
type ListenerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Listener `json:"items"`
}

// Repository type metadata.
var (
	ListenerKind             = "Listener"
	ListenerGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ListenerKind}.String()
	ListenerKindAPIVersion   = ListenerKind + "." + GroupVersion.String()
	ListenerGroupVersionKind = GroupVersion.WithKind(ListenerKind)
)

func init() {
	SchemeBuilder.Register(&Listener{}, &ListenerList{})
}
