/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TrustStoreParameters defines the desired state of TrustStore
type TrustStoreParameters struct {
	// Region is which region the TrustStore will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The Amazon S3 bucket for the ca certificates bundle.
	// +kubebuilder:validation:Required
	CaCertificatesBundleS3Bucket *string `json:"caCertificatesBundleS3Bucket"`
	// The Amazon S3 path for the ca certificates bundle.
	// +kubebuilder:validation:Required
	CaCertificatesBundleS3Key *string `json:"caCertificatesBundleS3Key"`
	// The Amazon S3 object version for the ca certificates bundle. If undefined
	// the current version is used.
	CaCertificatesBundleS3ObjectVersion *string `json:"caCertificatesBundleS3ObjectVersion,omitempty"`
	// The name of the trust store.
	//
	// This name must be unique per region and cannot be changed after creation.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// The tags to assign to the trust store.
	Tags                       []*Tag `json:"tags,omitempty"`
	CustomTrustStoreParameters `json:",inline"`
}

// TrustStoreSpec defines the desired state of TrustStore
type TrustStoreSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TrustStoreParameters `json:"forProvider"`
}

// TrustStoreObservation defines the observed state of TrustStore
type TrustStoreObservation struct {
	// Information about the trust store created.
	TrustStores []*TrustStore_SDK `json:"trustStores,omitempty"`

	CustomTrustStoreObservation `json:",inline"`
}

// TrustStoreStatus defines the observed state of TrustStore.
type TrustStoreStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TrustStoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TrustStore is the Schema for the TrustStores API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type TrustStore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TrustStoreSpec   `json:"spec"`
	Status            TrustStoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TrustStoreList contains a list of TrustStores
type TrustStoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TrustStore `json:"items"`
}

// Repository type metadata.
var (
	TrustStoreKind             = "TrustStore"
	TrustStoreGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TrustStoreKind}.String()
	TrustStoreKindAPIVersion   = TrustStoreKind + "." + GroupVersion.String()
	TrustStoreGroupVersionKind = GroupVersion.WithKind(TrustStoreKind)
)

func init() {
	SchemeBuilder.Register(&TrustStore{}, &TrustStoreList{})
}
