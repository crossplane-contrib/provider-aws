/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// DeliveryStreamParameters defines the desired state of DeliveryStream
type DeliveryStreamParameters struct {
	// Region is which region the DeliveryStream will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The destination in the Serverless offering for Amazon OpenSearch Service.
	// You can specify only one destination.
	AmazonOpenSearchServerlessDestinationConfiguration *AmazonOpenSearchServerlessDestinationConfiguration `json:"amazonOpenSearchServerlessDestinationConfiguration,omitempty"`
	// The destination in Amazon OpenSearch Service. You can specify only one destination.
	AmazonopensearchserviceDestinationConfiguration *AmazonopensearchserviceDestinationConfiguration `json:"amazonopensearchserviceDestinationConfiguration,omitempty"`
	// Used to specify the type and Amazon Resource Name (ARN) of the KMS key needed
	// for Server-Side Encryption (SSE).
	DeliveryStreamEncryptionConfigurationInput *DeliveryStreamEncryptionConfigurationInput `json:"deliveryStreamEncryptionConfigurationInput,omitempty"`
	// The name of the delivery stream. This name must be unique per Amazon Web
	// Services account in the same Amazon Web Services Region. If the delivery
	// streams are in different accounts or different Regions, you can have multiple
	// delivery streams with the same name.
	// +kubebuilder:validation:Required
	DeliveryStreamName *string `json:"deliveryStreamName"`
	// The delivery stream type. This parameter can be one of the following values:
	//
	//    * DirectPut: Provider applications access the delivery stream directly.
	//
	//    * KinesisStreamAsSource: The delivery stream uses a Kinesis data stream
	//    as a source.
	DeliveryStreamType *string `json:"deliveryStreamType,omitempty"`
	// The destination in Amazon ES. You can specify only one destination.
	ElasticsearchDestinationConfiguration *ElasticsearchDestinationConfiguration `json:"elasticsearchDestinationConfiguration,omitempty"`
	// The destination in Amazon S3. You can specify only one destination.
	ExtendedS3DestinationConfiguration *ExtendedS3DestinationConfiguration `json:"extendedS3DestinationConfiguration,omitempty"`
	// Enables configuring Kinesis Firehose to deliver data to any HTTP endpoint
	// destination. You can specify only one destination.
	HTTPEndpointDestinationConfiguration *HTTPEndpointDestinationConfiguration `json:"httpEndpointDestinationConfiguration,omitempty"`
	// When a Kinesis data stream is used as the source for the delivery stream,
	// a KinesisStreamSourceConfiguration containing the Kinesis data stream Amazon
	// Resource Name (ARN) and the role ARN for the source stream.
	KinesisStreamSourceConfiguration *KinesisStreamSourceConfiguration `json:"kinesisStreamSourceConfiguration,omitempty"`

	MSKSourceConfiguration *MSKSourceConfiguration `json:"mSKSourceConfiguration,omitempty"`
	// The destination in Amazon Redshift. You can specify only one destination.
	RedshiftDestinationConfiguration *RedshiftDestinationConfiguration `json:"redshiftDestinationConfiguration,omitempty"`
	// [Deprecated] The destination in Amazon S3. You can specify only one destination.
	S3DestinationConfiguration *S3DestinationConfiguration `json:"s3DestinationConfiguration,omitempty"`
	// Configure Snowflake destination
	SnowflakeDestinationConfiguration *SnowflakeDestinationConfiguration `json:"snowflakeDestinationConfiguration,omitempty"`
	// The destination in Splunk. You can specify only one destination.
	SplunkDestinationConfiguration *SplunkDestinationConfiguration `json:"splunkDestinationConfiguration,omitempty"`
	// A set of tags to assign to the delivery stream. A tag is a key-value pair
	// that you can define and assign to Amazon Web Services resources. Tags are
	// metadata. For example, you can add friendly names and descriptions or other
	// types of information that can help you distinguish the delivery stream. For
	// more information about tags, see Using Cost Allocation Tags (https://docs.aws.amazon.com/awsaccountbilling/latest/aboutv2/cost-alloc-tags.html)
	// in the Amazon Web Services Billing and Cost Management User Guide.
	//
	// You can specify up to 50 tags when creating a delivery stream.
	Tags                           []*Tag `json:"tags,omitempty"`
	CustomDeliveryStreamParameters `json:",inline"`
}

// DeliveryStreamSpec defines the desired state of DeliveryStream
type DeliveryStreamSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DeliveryStreamParameters `json:"forProvider"`
}

// DeliveryStreamObservation defines the observed state of DeliveryStream
type DeliveryStreamObservation struct {
	// The Amazon Resource Name (ARN) of the delivery stream. For more information,
	// see Amazon Resource Names (ARNs) and Amazon Web Services Service Namespaces
	// (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).
	DeliveryStreamARN *string `json:"deliveryStreamARN,omitempty"`
	// The status of the delivery stream. If the status of a delivery stream is
	// CREATING_FAILED, this status doesn't change, and you can't invoke CreateDeliveryStream
	// again on it. However, you can invoke the DeleteDeliveryStream operation to
	// delete it.
	DeliveryStreamStatus *string `json:"deliveryStreamStatus,omitempty"`

	CustomDeliveryStreamObservation `json:",inline"`
}

// DeliveryStreamStatus defines the observed state of DeliveryStream.
type DeliveryStreamStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DeliveryStreamObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DeliveryStream is the Schema for the DeliveryStreams API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DeliveryStream struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DeliveryStreamSpec   `json:"spec"`
	Status            DeliveryStreamStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DeliveryStreamList contains a list of DeliveryStreams
type DeliveryStreamList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DeliveryStream `json:"items"`
}

// Repository type metadata.
var (
	DeliveryStreamKind             = "DeliveryStream"
	DeliveryStreamGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DeliveryStreamKind}.String()
	DeliveryStreamKindAPIVersion   = DeliveryStreamKind + "." + GroupVersion.String()
	DeliveryStreamGroupVersionKind = GroupVersion.WithKind(DeliveryStreamKind)
)

func init() {
	SchemeBuilder.Register(&DeliveryStream{}, &DeliveryStreamList{})
}
