/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type AmazonOpenSearchServerlessBufferingHints struct {
	IntervalInSeconds *int64 `json:"intervalInSeconds,omitempty"`

	SizeInMBs *int64 `json:"sizeInMBs,omitempty"`
}

// +kubebuilder:skipversion
type AmazonOpenSearchServerlessDestinationConfiguration struct {
	// Describes the buffering to perform before delivering data to the Serverless
	// offering for Amazon OpenSearch Service destination.
	BufferingHints *AmazonOpenSearchServerlessBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	CollectionEndpoint *string `json:"collectionEndpoint,omitempty"`

	IndexName *string `json:"indexName,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to the Serverless offering for Amazon OpenSearch Service.
	RetryOptions *AmazonOpenSearchServerlessRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes the configuration of a destination in Amazon S3.
	S3Configuration *S3DestinationConfiguration `json:"s3Configuration,omitempty"`
	// The details of the VPC of the Amazon OpenSearch or Amazon OpenSearch Serverless
	// destination.
	VPCConfiguration *VPCConfiguration `json:"vpcConfiguration,omitempty"`
}

// +kubebuilder:skipversion
type AmazonOpenSearchServerlessDestinationDescription struct {
	// Describes the buffering to perform before delivering data to the Serverless
	// offering for Amazon OpenSearch Service destination.
	BufferingHints *AmazonOpenSearchServerlessBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	CollectionEndpoint *string `json:"collectionEndpoint,omitempty"`

	IndexName *string `json:"indexName,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to the Serverless offering for Amazon OpenSearch Service.
	RetryOptions *AmazonOpenSearchServerlessRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes a destination in Amazon S3.
	S3DestinationDescription *S3DestinationDescription `json:"s3DestinationDescription,omitempty"`
	// The details of the VPC of the Amazon ES destination.
	VPCConfigurationDescription *VPCConfigurationDescription `json:"vpcConfigurationDescription,omitempty"`
}

// +kubebuilder:skipversion
type AmazonOpenSearchServerlessDestinationUpdate struct {
	// Describes the buffering to perform before delivering data to the Serverless
	// offering for Amazon OpenSearch Service destination.
	BufferingHints *AmazonOpenSearchServerlessBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	CollectionEndpoint *string `json:"collectionEndpoint,omitempty"`

	IndexName *string `json:"indexName,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to the Serverless offering for Amazon OpenSearch Service.
	RetryOptions *AmazonOpenSearchServerlessRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
}

// +kubebuilder:skipversion
type AmazonOpenSearchServerlessRetryOptions struct {
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`
}

// +kubebuilder:skipversion
type AmazonopensearchserviceBufferingHints struct {
	IntervalInSeconds *int64 `json:"intervalInSeconds,omitempty"`

	SizeInMBs *int64 `json:"sizeInMBs,omitempty"`
}

// +kubebuilder:skipversion
type AmazonopensearchserviceDestinationConfiguration struct {
	// Describes the buffering to perform before delivering data to the Amazon OpenSearch
	// Service destination.
	BufferingHints *AmazonopensearchserviceBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ClusterEndpoint *string `json:"clusterEndpoint,omitempty"`
	// Indicates the method for setting up document ID. The supported methods are
	// Kinesis Data Firehose generated document ID and OpenSearch Service generated
	// document ID.
	DocumentIDOptions *DocumentIDOptions `json:"documentIDOptions,omitempty"`

	DomainARN *string `json:"domainARN,omitempty"`

	IndexName *string `json:"indexName,omitempty"`

	IndexRotationPeriod *string `json:"indexRotationPeriod,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon OpenSearch Service.
	RetryOptions *AmazonopensearchserviceRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes the configuration of a destination in Amazon S3.
	S3Configuration *S3DestinationConfiguration `json:"s3Configuration,omitempty"`

	TypeName *string `json:"typeName,omitempty"`
	// The details of the VPC of the Amazon OpenSearch or Amazon OpenSearch Serverless
	// destination.
	VPCConfiguration *VPCConfiguration `json:"vpcConfiguration,omitempty"`
}

// +kubebuilder:skipversion
type AmazonopensearchserviceDestinationDescription struct {
	// Describes the buffering to perform before delivering data to the Amazon OpenSearch
	// Service destination.
	BufferingHints *AmazonopensearchserviceBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ClusterEndpoint *string `json:"clusterEndpoint,omitempty"`
	// Indicates the method for setting up document ID. The supported methods are
	// Kinesis Data Firehose generated document ID and OpenSearch Service generated
	// document ID.
	DocumentIDOptions *DocumentIDOptions `json:"documentIDOptions,omitempty"`

	DomainARN *string `json:"domainARN,omitempty"`

	IndexName *string `json:"indexName,omitempty"`

	IndexRotationPeriod *string `json:"indexRotationPeriod,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon OpenSearch Service.
	RetryOptions *AmazonopensearchserviceRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes a destination in Amazon S3.
	S3DestinationDescription *S3DestinationDescription `json:"s3DestinationDescription,omitempty"`

	TypeName *string `json:"typeName,omitempty"`
	// The details of the VPC of the Amazon ES destination.
	VPCConfigurationDescription *VPCConfigurationDescription `json:"vpcConfigurationDescription,omitempty"`
}

// +kubebuilder:skipversion
type AmazonopensearchserviceDestinationUpdate struct {
	// Describes the buffering to perform before delivering data to the Amazon OpenSearch
	// Service destination.
	BufferingHints *AmazonopensearchserviceBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ClusterEndpoint *string `json:"clusterEndpoint,omitempty"`
	// Indicates the method for setting up document ID. The supported methods are
	// Kinesis Data Firehose generated document ID and OpenSearch Service generated
	// document ID.
	DocumentIDOptions *DocumentIDOptions `json:"documentIDOptions,omitempty"`

	DomainARN *string `json:"domainARN,omitempty"`

	IndexName *string `json:"indexName,omitempty"`

	IndexRotationPeriod *string `json:"indexRotationPeriod,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon OpenSearch Service.
	RetryOptions *AmazonopensearchserviceRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	TypeName *string `json:"typeName,omitempty"`
}

// +kubebuilder:skipversion
type AmazonopensearchserviceRetryOptions struct {
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`
}

// +kubebuilder:skipversion
type AuthenticationConfiguration struct {
	Connectivity *string `json:"connectivity,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
}

// +kubebuilder:skipversion
type BufferingHints struct {
	IntervalInSeconds *int64 `json:"intervalInSeconds,omitempty"`

	SizeInMBs *int64 `json:"sizeInMBs,omitempty"`
}

// +kubebuilder:skipversion
type CloudWatchLoggingOptions struct {
	Enabled *bool `json:"enabled,omitempty"`

	LogGroupName *string `json:"logGroupName,omitempty"`

	LogStreamName *string `json:"logStreamName,omitempty"`
}

// +kubebuilder:skipversion
type CopyCommand struct {
	CopyOptions *string `json:"copyOptions,omitempty"`

	DataTableColumns *string `json:"dataTableColumns,omitempty"`

	DataTableName *string `json:"dataTableName,omitempty"`
}

// +kubebuilder:skipversion
type DataFormatConversionConfiguration struct {
	Enabled *bool `json:"enabled,omitempty"`
	// Specifies the deserializer you want to use to convert the format of the input
	// data. This parameter is required if Enabled is set to true.
	InputFormatConfiguration *InputFormatConfiguration `json:"inputFormatConfiguration,omitempty"`
	// Specifies the serializer that you want Kinesis Data Firehose to use to convert
	// the format of your data before it writes it to Amazon S3. This parameter
	// is required if Enabled is set to true.
	OutputFormatConfiguration *OutputFormatConfiguration `json:"outputFormatConfiguration,omitempty"`
	// Specifies the schema to which you want Kinesis Data Firehose to configure
	// your data before it writes it to Amazon S3. This parameter is required if
	// Enabled is set to true.
	SchemaConfiguration *SchemaConfiguration `json:"schemaConfiguration,omitempty"`
}

// +kubebuilder:skipversion
type DeliveryStreamDescription struct {
	CreateTimestamp *metav1.Time `json:"createTimestamp,omitempty"`

	DeliveryStreamARN *string `json:"deliveryStreamARN,omitempty"`
	// Contains information about the server-side encryption (SSE) status for the
	// delivery stream, the type customer master key (CMK) in use, if any, and the
	// ARN of the CMK. You can get DeliveryStreamEncryptionConfiguration by invoking
	// the DescribeDeliveryStream operation.
	DeliveryStreamEncryptionConfiguration *DeliveryStreamEncryptionConfiguration `json:"deliveryStreamEncryptionConfiguration,omitempty"`

	DeliveryStreamName *string `json:"deliveryStreamName,omitempty"`

	DeliveryStreamStatus *string `json:"deliveryStreamStatus,omitempty"`

	DeliveryStreamType *string `json:"deliveryStreamType,omitempty"`

	Destinations []*DestinationDescription `json:"destinations,omitempty"`
	// Provides details in case one of the following operations fails due to an
	// error related to KMS: CreateDeliveryStream, DeleteDeliveryStream, StartDeliveryStreamEncryption,
	// StopDeliveryStreamEncryption.
	FailureDescription *FailureDescription `json:"failureDescription,omitempty"`

	HasMoreDestinations *bool `json:"hasMoreDestinations,omitempty"`

	LastUpdateTimestamp *metav1.Time `json:"lastUpdateTimestamp,omitempty"`
	// Details about a Kinesis data stream used as the source for a Kinesis Data
	// Firehose delivery stream.
	Source *SourceDescription `json:"source,omitempty"`

	VersionID *string `json:"versionID,omitempty"`
}

// +kubebuilder:skipversion
type DeliveryStreamEncryptionConfiguration struct {
	// Provides details in case one of the following operations fails due to an
	// error related to KMS: CreateDeliveryStream, DeleteDeliveryStream, StartDeliveryStreamEncryption,
	// StopDeliveryStreamEncryption.
	FailureDescription *FailureDescription `json:"failureDescription,omitempty"`

	KeyARN *string `json:"keyARN,omitempty"`

	KeyType *string `json:"keyType,omitempty"`

	Status *string `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type DeliveryStreamEncryptionConfigurationInput struct {
	KeyARN *string `json:"keyARN,omitempty"`

	KeyType *string `json:"keyType,omitempty"`
}

// +kubebuilder:skipversion
type Deserializer struct {
	// The native Hive / HCatalog JsonSerDe. Used by Kinesis Data Firehose for deserializing
	// data, which means converting it from the JSON format in preparation for serializing
	// it to the Parquet or ORC format. This is one of two deserializers you can
	// choose, depending on which one offers the functionality you need. The other
	// option is the OpenX SerDe.
	HiveJSONSerDe *HiveJSONSerDe `json:"hiveJSONSerDe,omitempty"`
	// The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which
	// means converting it from the JSON format in preparation for serializing it
	// to the Parquet or ORC format. This is one of two deserializers you can choose,
	// depending on which one offers the functionality you need. The other option
	// is the native Hive / HCatalog JsonSerDe.
	OpenXJSONSerDe *OpenXJSONSerDe `json:"openXJSONSerDe,omitempty"`
}

// +kubebuilder:skipversion
type DestinationDescription struct {
	// The destination description in the Serverless offering for Amazon OpenSearch
	// Service.
	AmazonOpenSearchServerlessDestinationDescription *AmazonOpenSearchServerlessDestinationDescription `json:"amazonOpenSearchServerlessDestinationDescription,omitempty"`
	// The destination description in Amazon OpenSearch Service.
	AmazonopensearchserviceDestinationDescription *AmazonopensearchserviceDestinationDescription `json:"amazonopensearchserviceDestinationDescription,omitempty"`

	DestinationID *string `json:"destinationID,omitempty"`
	// The destination description in Amazon ES.
	ElasticsearchDestinationDescription *ElasticsearchDestinationDescription `json:"elasticsearchDestinationDescription,omitempty"`
	// Describes a destination in Amazon S3.
	ExtendedS3DestinationDescription *ExtendedS3DestinationDescription `json:"extendedS3DestinationDescription,omitempty"`
	// Describes the HTTP endpoint destination.
	HTTPEndpointDestinationDescription *HTTPEndpointDestinationDescription `json:"httpEndpointDestinationDescription,omitempty"`
	// Describes a destination in Amazon Redshift.
	RedshiftDestinationDescription *RedshiftDestinationDescription `json:"redshiftDestinationDescription,omitempty"`
	// Describes a destination in Amazon S3.
	S3DestinationDescription *S3DestinationDescription `json:"s3DestinationDescription,omitempty"`
	// Optional Snowflake destination description
	SnowflakeDestinationDescription *SnowflakeDestinationDescription `json:"snowflakeDestinationDescription,omitempty"`
	// Describes a destination in Splunk.
	SplunkDestinationDescription *SplunkDestinationDescription `json:"splunkDestinationDescription,omitempty"`
}

// +kubebuilder:skipversion
type DocumentIDOptions struct {
	DefaultDocumentIDFormat *string `json:"defaultDocumentIDFormat,omitempty"`
}

// +kubebuilder:skipversion
type DynamicPartitioningConfiguration struct {
	Enabled *bool `json:"enabled,omitempty"`
	// The retry behavior in case Kinesis Data Firehose is unable to deliver data
	// to an Amazon S3 prefix.
	RetryOptions *RetryOptions `json:"retryOptions,omitempty"`
}

// +kubebuilder:skipversion
type ElasticsearchBufferingHints struct {
	IntervalInSeconds *int64 `json:"intervalInSeconds,omitempty"`

	SizeInMBs *int64 `json:"sizeInMBs,omitempty"`
}

// +kubebuilder:skipversion
type ElasticsearchDestinationConfiguration struct {
	// Describes the buffering to perform before delivering data to the Amazon ES
	// destination.
	BufferingHints *ElasticsearchBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ClusterEndpoint *string `json:"clusterEndpoint,omitempty"`
	// Indicates the method for setting up document ID. The supported methods are
	// Kinesis Data Firehose generated document ID and OpenSearch Service generated
	// document ID.
	DocumentIDOptions *DocumentIDOptions `json:"documentIDOptions,omitempty"`

	DomainARN *string `json:"domainARN,omitempty"`

	IndexName *string `json:"indexName,omitempty"`

	IndexRotationPeriod *string `json:"indexRotationPeriod,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon ES.
	RetryOptions *ElasticsearchRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes the configuration of a destination in Amazon S3.
	S3Configuration *S3DestinationConfiguration `json:"s3Configuration,omitempty"`

	TypeName *string `json:"typeName,omitempty"`
	// The details of the VPC of the Amazon OpenSearch or Amazon OpenSearch Serverless
	// destination.
	VPCConfiguration *VPCConfiguration `json:"vpcConfiguration,omitempty"`
}

// +kubebuilder:skipversion
type ElasticsearchDestinationDescription struct {
	// Describes the buffering to perform before delivering data to the Amazon ES
	// destination.
	BufferingHints *ElasticsearchBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ClusterEndpoint *string `json:"clusterEndpoint,omitempty"`
	// Indicates the method for setting up document ID. The supported methods are
	// Kinesis Data Firehose generated document ID and OpenSearch Service generated
	// document ID.
	DocumentIDOptions *DocumentIDOptions `json:"documentIDOptions,omitempty"`

	DomainARN *string `json:"domainARN,omitempty"`

	IndexName *string `json:"indexName,omitempty"`

	IndexRotationPeriod *string `json:"indexRotationPeriod,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon ES.
	RetryOptions *ElasticsearchRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes a destination in Amazon S3.
	S3DestinationDescription *S3DestinationDescription `json:"s3DestinationDescription,omitempty"`

	TypeName *string `json:"typeName,omitempty"`
	// The details of the VPC of the Amazon ES destination.
	VPCConfigurationDescription *VPCConfigurationDescription `json:"vpcConfigurationDescription,omitempty"`
}

// +kubebuilder:skipversion
type ElasticsearchDestinationUpdate struct {
	// Describes the buffering to perform before delivering data to the Amazon ES
	// destination.
	BufferingHints *ElasticsearchBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ClusterEndpoint *string `json:"clusterEndpoint,omitempty"`
	// Indicates the method for setting up document ID. The supported methods are
	// Kinesis Data Firehose generated document ID and OpenSearch Service generated
	// document ID.
	DocumentIDOptions *DocumentIDOptions `json:"documentIDOptions,omitempty"`

	DomainARN *string `json:"domainARN,omitempty"`

	IndexName *string `json:"indexName,omitempty"`

	IndexRotationPeriod *string `json:"indexRotationPeriod,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon ES.
	RetryOptions *ElasticsearchRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	TypeName *string `json:"typeName,omitempty"`
}

// +kubebuilder:skipversion
type ElasticsearchRetryOptions struct {
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`
}

// +kubebuilder:skipversion
type EncryptionConfiguration struct {
	// Describes an encryption key for a destination in Amazon S3.
	KMSEncryptionConfig *KMSEncryptionConfig `json:"kmsEncryptionConfig,omitempty"`

	NoEncryptionConfig *string `json:"noEncryptionConfig,omitempty"`
}

// +kubebuilder:skipversion
type ExtendedS3DestinationConfiguration struct {
	BucketARN *string `json:"bucketARN,omitempty"`
	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	BufferingHints *BufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	CompressionFormat *string `json:"compressionFormat,omitempty"`
	// Specifies that you want Kinesis Data Firehose to convert data from the JSON
	// format to the Parquet or ORC format before writing it to Amazon S3. Kinesis
	// Data Firehose uses the serializer and deserializer that you specify, in addition
	// to the column information from the Amazon Web Services Glue table, to deserialize
	// your input data from JSON and then serialize it to the Parquet or ORC format.
	// For more information, see Kinesis Data Firehose Record Format Conversion
	// (https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
	DataFormatConversionConfiguration *DataFormatConversionConfiguration `json:"dataFormatConversionConfiguration,omitempty"`
	// The configuration of the dynamic partitioning mechanism that creates smaller
	// data sets from the streaming data by partitioning it based on partition keys.
	// Currently, dynamic partitioning is only supported for Amazon S3 destinations.
	DynamicPartitioningConfiguration *DynamicPartitioningConfiguration `json:"dynamicPartitioningConfiguration,omitempty"`
	// Describes the encryption for a destination in Amazon S3.
	EncryptionConfiguration *EncryptionConfiguration `json:"encryptionConfiguration,omitempty"`

	ErrorOutputPrefix *string `json:"errorOutputPrefix,omitempty"`

	Prefix *string `json:"prefix,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
	// Describes the configuration of a destination in Amazon S3.
	S3BackupConfiguration *S3DestinationConfiguration `json:"s3BackupConfiguration,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
}

// +kubebuilder:skipversion
type ExtendedS3DestinationDescription struct {
	BucketARN *string `json:"bucketARN,omitempty"`
	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	BufferingHints *BufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	CompressionFormat *string `json:"compressionFormat,omitempty"`
	// Specifies that you want Kinesis Data Firehose to convert data from the JSON
	// format to the Parquet or ORC format before writing it to Amazon S3. Kinesis
	// Data Firehose uses the serializer and deserializer that you specify, in addition
	// to the column information from the Amazon Web Services Glue table, to deserialize
	// your input data from JSON and then serialize it to the Parquet or ORC format.
	// For more information, see Kinesis Data Firehose Record Format Conversion
	// (https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
	DataFormatConversionConfiguration *DataFormatConversionConfiguration `json:"dataFormatConversionConfiguration,omitempty"`
	// The configuration of the dynamic partitioning mechanism that creates smaller
	// data sets from the streaming data by partitioning it based on partition keys.
	// Currently, dynamic partitioning is only supported for Amazon S3 destinations.
	DynamicPartitioningConfiguration *DynamicPartitioningConfiguration `json:"dynamicPartitioningConfiguration,omitempty"`
	// Describes the encryption for a destination in Amazon S3.
	EncryptionConfiguration *EncryptionConfiguration `json:"encryptionConfiguration,omitempty"`

	ErrorOutputPrefix *string `json:"errorOutputPrefix,omitempty"`

	Prefix *string `json:"prefix,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
	// Describes a destination in Amazon S3.
	S3BackupDescription *S3DestinationDescription `json:"s3BackupDescription,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
}

// +kubebuilder:skipversion
type ExtendedS3DestinationUpdate struct {
	BucketARN *string `json:"bucketARN,omitempty"`
	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	BufferingHints *BufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	CompressionFormat *string `json:"compressionFormat,omitempty"`
	// Specifies that you want Kinesis Data Firehose to convert data from the JSON
	// format to the Parquet or ORC format before writing it to Amazon S3. Kinesis
	// Data Firehose uses the serializer and deserializer that you specify, in addition
	// to the column information from the Amazon Web Services Glue table, to deserialize
	// your input data from JSON and then serialize it to the Parquet or ORC format.
	// For more information, see Kinesis Data Firehose Record Format Conversion
	// (https://docs.aws.amazon.com/firehose/latest/dev/record-format-conversion.html).
	DataFormatConversionConfiguration *DataFormatConversionConfiguration `json:"dataFormatConversionConfiguration,omitempty"`
	// The configuration of the dynamic partitioning mechanism that creates smaller
	// data sets from the streaming data by partitioning it based on partition keys.
	// Currently, dynamic partitioning is only supported for Amazon S3 destinations.
	DynamicPartitioningConfiguration *DynamicPartitioningConfiguration `json:"dynamicPartitioningConfiguration,omitempty"`
	// Describes the encryption for a destination in Amazon S3.
	EncryptionConfiguration *EncryptionConfiguration `json:"encryptionConfiguration,omitempty"`

	ErrorOutputPrefix *string `json:"errorOutputPrefix,omitempty"`

	Prefix *string `json:"prefix,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
}

// +kubebuilder:skipversion
type FailureDescription struct {
	Details *string `json:"details,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type HTTPEndpointBufferingHints struct {
	IntervalInSeconds *int64 `json:"intervalInSeconds,omitempty"`

	SizeInMBs *int64 `json:"sizeInMBs,omitempty"`
}

// +kubebuilder:skipversion
type HTTPEndpointCommonAttribute struct {
	AttributeName *string `json:"attributeName,omitempty"`

	AttributeValue *string `json:"attributeValue,omitempty"`
}

// +kubebuilder:skipversion
type HTTPEndpointConfiguration struct {
	AccessKey *string `json:"accessKey,omitempty"`

	Name *string `json:"name,omitempty"`

	URL *string `json:"url,omitempty"`
}

// +kubebuilder:skipversion
type HTTPEndpointDescription struct {
	Name *string `json:"name,omitempty"`

	URL *string `json:"url,omitempty"`
}

// +kubebuilder:skipversion
type HTTPEndpointDestinationConfiguration struct {
	// Describes the buffering options that can be applied before data is delivered
	// to the HTTP endpoint destination. Kinesis Data Firehose treats these options
	// as hints, and it might choose to use more optimal values. The SizeInMBs and
	// IntervalInSeconds parameters are optional. However, if specify a value for
	// one of them, you must also provide a value for the other.
	BufferingHints *HTTPEndpointBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`
	// Describes the configuration of the HTTP endpoint to which Kinesis Firehose
	// delivers data.
	EndpointConfiguration *HTTPEndpointConfiguration `json:"endpointConfiguration,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// The configuration of the HTTP endpoint request.
	RequestConfiguration *HTTPEndpointRequestConfiguration `json:"requestConfiguration,omitempty"`
	// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver
	// data to the specified HTTP endpoint destination, or if it doesn't receive
	// a valid acknowledgment of receipt from the specified HTTP endpoint destination.
	RetryOptions *HTTPEndpointRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes the configuration of a destination in Amazon S3.
	S3Configuration *S3DestinationConfiguration `json:"s3Configuration,omitempty"`
}

// +kubebuilder:skipversion
type HTTPEndpointDestinationDescription struct {
	// Describes the buffering options that can be applied before data is delivered
	// to the HTTP endpoint destination. Kinesis Data Firehose treats these options
	// as hints, and it might choose to use more optimal values. The SizeInMBs and
	// IntervalInSeconds parameters are optional. However, if specify a value for
	// one of them, you must also provide a value for the other.
	BufferingHints *HTTPEndpointBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`
	// Describes the HTTP endpoint selected as the destination.
	EndpointConfiguration *HTTPEndpointDescription `json:"endpointConfiguration,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// The configuration of the HTTP endpoint request.
	RequestConfiguration *HTTPEndpointRequestConfiguration `json:"requestConfiguration,omitempty"`
	// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver
	// data to the specified HTTP endpoint destination, or if it doesn't receive
	// a valid acknowledgment of receipt from the specified HTTP endpoint destination.
	RetryOptions *HTTPEndpointRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes a destination in Amazon S3.
	S3DestinationDescription *S3DestinationDescription `json:"s3DestinationDescription,omitempty"`
}

// +kubebuilder:skipversion
type HTTPEndpointDestinationUpdate struct {
	// Describes the buffering options that can be applied before data is delivered
	// to the HTTP endpoint destination. Kinesis Data Firehose treats these options
	// as hints, and it might choose to use more optimal values. The SizeInMBs and
	// IntervalInSeconds parameters are optional. However, if specify a value for
	// one of them, you must also provide a value for the other.
	BufferingHints *HTTPEndpointBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`
	// Describes the configuration of the HTTP endpoint to which Kinesis Firehose
	// delivers data.
	EndpointConfiguration *HTTPEndpointConfiguration `json:"endpointConfiguration,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// The configuration of the HTTP endpoint request.
	RequestConfiguration *HTTPEndpointRequestConfiguration `json:"requestConfiguration,omitempty"`
	// Describes the retry behavior in case Kinesis Data Firehose is unable to deliver
	// data to the specified HTTP endpoint destination, or if it doesn't receive
	// a valid acknowledgment of receipt from the specified HTTP endpoint destination.
	RetryOptions *HTTPEndpointRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
}

// +kubebuilder:skipversion
type HTTPEndpointRequestConfiguration struct {
	CommonAttributes []*HTTPEndpointCommonAttribute `json:"commonAttributes,omitempty"`

	ContentEncoding *string `json:"contentEncoding,omitempty"`
}

// +kubebuilder:skipversion
type HTTPEndpointRetryOptions struct {
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`
}

// +kubebuilder:skipversion
type HiveJSONSerDe struct {
	TimestampFormats []*string `json:"timestampFormats,omitempty"`
}

// +kubebuilder:skipversion
type InputFormatConfiguration struct {
	// The deserializer you want Kinesis Data Firehose to use for converting the
	// input data from JSON. Kinesis Data Firehose then serializes the data to its
	// final format using the Serializer. Kinesis Data Firehose supports two types
	// of deserializers: the Apache Hive JSON SerDe (https://cwiki.apache.org/confluence/display/Hive/LanguageManual+DDL#LanguageManualDDL-JSON)
	// and the OpenX JSON SerDe (https://github.com/rcongiu/Hive-JSON-Serde).
	Deserializer *Deserializer `json:"deserializer,omitempty"`
}

// +kubebuilder:skipversion
type KMSEncryptionConfig struct {
	AWSKMSKeyARN *string `json:"awsKMSKeyARN,omitempty"`
}

// +kubebuilder:skipversion
type KinesisStreamSourceConfiguration struct {
	KinesisStreamARN *string `json:"kinesisStreamARN,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
}

// +kubebuilder:skipversion
type KinesisStreamSourceDescription struct {
	DeliveryStartTimestamp *metav1.Time `json:"deliveryStartTimestamp,omitempty"`

	KinesisStreamARN *string `json:"kinesisStreamARN,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
}

// +kubebuilder:skipversion
type MSKSourceConfiguration struct {
	// The authentication configuration of the Amazon MSK cluster.
	AuthenticationConfiguration *AuthenticationConfiguration `json:"authenticationConfiguration,omitempty"`

	MSKClusterARN *string `json:"mSKClusterARN,omitempty"`

	TopicName *string `json:"topicName,omitempty"`
}

// +kubebuilder:skipversion
type MSKSourceDescription struct {
	// The authentication configuration of the Amazon MSK cluster.
	AuthenticationConfiguration *AuthenticationConfiguration `json:"authenticationConfiguration,omitempty"`

	DeliveryStartTimestamp *metav1.Time `json:"deliveryStartTimestamp,omitempty"`

	MSKClusterARN *string `json:"mSKClusterARN,omitempty"`

	TopicName *string `json:"topicName,omitempty"`
}

// +kubebuilder:skipversion
type OpenXJSONSerDe struct {
	CaseInsensitive *bool `json:"caseInsensitive,omitempty"`

	ColumnToJSONKeyMappings map[string]*string `json:"columnToJSONKeyMappings,omitempty"`

	ConvertDotsInJSONKeysToUnderscores *bool `json:"convertDotsInJSONKeysToUnderscores,omitempty"`
}

// +kubebuilder:skipversion
type OrcSerDe struct {
	BlockSizeBytes *int64 `json:"blockSizeBytes,omitempty"`

	BloomFilterColumns []*string `json:"bloomFilterColumns,omitempty"`

	BloomFilterFalsePositiveProbability *float64 `json:"bloomFilterFalsePositiveProbability,omitempty"`

	Compression *string `json:"compression,omitempty"`

	DictionaryKeyThreshold *float64 `json:"dictionaryKeyThreshold,omitempty"`

	EnablePadding *bool `json:"enablePadding,omitempty"`

	FormatVersion *string `json:"formatVersion,omitempty"`

	PaddingTolerance *float64 `json:"paddingTolerance,omitempty"`

	RowIndexStride *int64 `json:"rowIndexStride,omitempty"`

	StripeSizeBytes *int64 `json:"stripeSizeBytes,omitempty"`
}

// +kubebuilder:skipversion
type OutputFormatConfiguration struct {
	// The serializer that you want Kinesis Data Firehose to use to convert data
	// to the target format before writing it to Amazon S3. Kinesis Data Firehose
	// supports two types of serializers: the ORC SerDe (https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/orc/OrcSerde.html)
	// and the Parquet SerDe (https://hive.apache.org/javadocs/r1.2.2/api/org/apache/hadoop/hive/ql/io/parquet/serde/ParquetHiveSerDe.html).
	Serializer *Serializer `json:"serializer,omitempty"`
}

// +kubebuilder:skipversion
type ParquetSerDe struct {
	BlockSizeBytes *int64 `json:"blockSizeBytes,omitempty"`

	Compression *string `json:"compression,omitempty"`

	EnableDictionaryCompression *bool `json:"enableDictionaryCompression,omitempty"`

	MaxPaddingBytes *int64 `json:"maxPaddingBytes,omitempty"`

	PageSizeBytes *int64 `json:"pageSizeBytes,omitempty"`

	WriterVersion *string `json:"writerVersion,omitempty"`
}

// +kubebuilder:skipversion
type ProcessingConfiguration struct {
	Enabled *bool `json:"enabled,omitempty"`

	Processors []*Processor `json:"processors,omitempty"`
}

// +kubebuilder:skipversion
type Processor struct {
	Parameters []*ProcessorParameter `json:"parameters,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type ProcessorParameter struct {
	ParameterName *string `json:"parameterName,omitempty"`

	ParameterValue *string `json:"parameterValue,omitempty"`
}

// +kubebuilder:skipversion
type RedshiftDestinationConfiguration struct {
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ClusterJDBCURL *string `json:"clusterJDBCURL,omitempty"`
	// Describes a COPY command for Amazon Redshift.
	CopyCommand *CopyCommand `json:"copyCommand,omitempty"`

	Password *string `json:"password,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon Redshift.
	RetryOptions *RedshiftRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
	// Describes the configuration of a destination in Amazon S3.
	S3BackupConfiguration *S3DestinationConfiguration `json:"s3BackupConfiguration,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes the configuration of a destination in Amazon S3.
	S3Configuration *S3DestinationConfiguration `json:"s3Configuration,omitempty"`

	Username *string `json:"username,omitempty"`
}

// +kubebuilder:skipversion
type RedshiftDestinationDescription struct {
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ClusterJDBCURL *string `json:"clusterJDBCURL,omitempty"`
	// Describes a COPY command for Amazon Redshift.
	CopyCommand *CopyCommand `json:"copyCommand,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon Redshift.
	RetryOptions *RedshiftRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
	// Describes a destination in Amazon S3.
	S3BackupDescription *S3DestinationDescription `json:"s3BackupDescription,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes a destination in Amazon S3.
	S3DestinationDescription *S3DestinationDescription `json:"s3DestinationDescription,omitempty"`

	Username *string `json:"username,omitempty"`
}

// +kubebuilder:skipversion
type RedshiftDestinationUpdate struct {
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ClusterJDBCURL *string `json:"clusterJDBCURL,omitempty"`
	// Describes a COPY command for Amazon Redshift.
	CopyCommand *CopyCommand `json:"copyCommand,omitempty"`

	Password *string `json:"password,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Amazon Redshift.
	RetryOptions *RedshiftRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`

	Username *string `json:"username,omitempty"`
}

// +kubebuilder:skipversion
type RedshiftRetryOptions struct {
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`
}

// +kubebuilder:skipversion
type RetryOptions struct {
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`
}

// +kubebuilder:skipversion
type S3DestinationConfiguration struct {
	BucketARN *string `json:"bucketARN,omitempty"`
	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	BufferingHints *BufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	CompressionFormat *string `json:"compressionFormat,omitempty"`
	// Describes the encryption for a destination in Amazon S3.
	EncryptionConfiguration *EncryptionConfiguration `json:"encryptionConfiguration,omitempty"`

	ErrorOutputPrefix *string `json:"errorOutputPrefix,omitempty"`

	Prefix *string `json:"prefix,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
}

// +kubebuilder:skipversion
type S3DestinationDescription struct {
	BucketARN *string `json:"bucketARN,omitempty"`
	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	BufferingHints *BufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	CompressionFormat *string `json:"compressionFormat,omitempty"`
	// Describes the encryption for a destination in Amazon S3.
	EncryptionConfiguration *EncryptionConfiguration `json:"encryptionConfiguration,omitempty"`

	ErrorOutputPrefix *string `json:"errorOutputPrefix,omitempty"`

	Prefix *string `json:"prefix,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
}

// +kubebuilder:skipversion
type S3DestinationUpdate struct {
	BucketARN *string `json:"bucketARN,omitempty"`
	// Describes hints for the buffering to perform before delivering data to the
	// destination. These options are treated as hints, and therefore Kinesis Data
	// Firehose might choose to use different values when it is optimal. The SizeInMBs
	// and IntervalInSeconds parameters are optional. However, if specify a value
	// for one of them, you must also provide a value for the other.
	BufferingHints *BufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	CompressionFormat *string `json:"compressionFormat,omitempty"`
	// Describes the encryption for a destination in Amazon S3.
	EncryptionConfiguration *EncryptionConfiguration `json:"encryptionConfiguration,omitempty"`

	ErrorOutputPrefix *string `json:"errorOutputPrefix,omitempty"`

	Prefix *string `json:"prefix,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`
}

// +kubebuilder:skipversion
type SchemaConfiguration struct {
	CatalogID *string `json:"catalogID,omitempty"`

	DatabaseName *string `json:"databaseName,omitempty"`

	Region *string `json:"region,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	TableName *string `json:"tableName,omitempty"`

	VersionID *string `json:"versionID,omitempty"`
}

// +kubebuilder:skipversion
type Serializer struct {
	// A serializer to use for converting data to the ORC format before storing
	// it in Amazon S3. For more information, see Apache ORC (https://orc.apache.org/docs/).
	OrcSerDe *OrcSerDe `json:"orcSerDe,omitempty"`
	// A serializer to use for converting data to the Parquet format before storing
	// it in Amazon S3. For more information, see Apache Parquet (https://parquet.apache.org/documentation/latest/).
	ParquetSerDe *ParquetSerDe `json:"parquetSerDe,omitempty"`
}

// +kubebuilder:skipversion
type SnowflakeDestinationConfiguration struct {
	AccountURL *string `json:"accountURL,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ContentColumnName *string `json:"contentColumnName,omitempty"`

	DataLoadingOption *string `json:"dataLoadingOption,omitempty"`

	Database *string `json:"database,omitempty"`

	KeyPassphrase *string `json:"keyPassphrase,omitempty"`

	MetaDataColumnName *string `json:"metaDataColumnName,omitempty"`

	PrivateKey *string `json:"privateKey,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Specify how long Kinesis Data Firehose retries sending data to the New Relic
	// HTTP endpoint. After sending data, Kinesis Data Firehose first waits for
	// an acknowledgment from the HTTP endpoint. If an error occurs or the acknowledgment
	// doesn’t arrive within the acknowledgment timeout period, Kinesis Data Firehose
	// starts the retry duration counter. It keeps retrying until the retry duration
	// expires. After that, Kinesis Data Firehose considers it a data delivery failure
	// and backs up the data to your Amazon S3 bucket. Every time that Kinesis Data
	// Firehose sends data to the HTTP endpoint (either the initial attempt or a
	// retry), it restarts the acknowledgement timeout counter and waits for an
	// acknowledgement from the HTTP endpoint. Even if the retry duration expires,
	// Kinesis Data Firehose still waits for the acknowledgment until it receives
	// it or the acknowledgement timeout period is reached. If the acknowledgment
	// times out, Kinesis Data Firehose determines whether there's time left in
	// the retry counter. If there is time left, it retries again and repeats the
	// logic until it receives an acknowledgment or determines that the retry time
	// has expired. If you don't want Kinesis Data Firehose to retry sending data,
	// set this value to 0.
	RetryOptions *SnowflakeRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes the configuration of a destination in Amazon S3.
	S3Configuration *S3DestinationConfiguration `json:"s3Configuration,omitempty"`

	Schema *string `json:"schema,omitempty"`
	// Optionally configure a Snowflake role. Otherwise the default user role will
	// be used.
	SnowflakeRoleConfiguration *SnowflakeRoleConfiguration `json:"snowflakeRoleConfiguration,omitempty"`
	// Configure a Snowflake VPC
	SnowflakeVPCConfiguration *SnowflakeVPCConfiguration `json:"snowflakeVPCConfiguration,omitempty"`

	Table *string `json:"table,omitempty"`

	User *string `json:"user,omitempty"`
}

// +kubebuilder:skipversion
type SnowflakeDestinationDescription struct {
	AccountURL *string `json:"accountURL,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ContentColumnName *string `json:"contentColumnName,omitempty"`

	DataLoadingOption *string `json:"dataLoadingOption,omitempty"`

	Database *string `json:"database,omitempty"`

	MetaDataColumnName *string `json:"metaDataColumnName,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Specify how long Kinesis Data Firehose retries sending data to the New Relic
	// HTTP endpoint. After sending data, Kinesis Data Firehose first waits for
	// an acknowledgment from the HTTP endpoint. If an error occurs or the acknowledgment
	// doesn’t arrive within the acknowledgment timeout period, Kinesis Data Firehose
	// starts the retry duration counter. It keeps retrying until the retry duration
	// expires. After that, Kinesis Data Firehose considers it a data delivery failure
	// and backs up the data to your Amazon S3 bucket. Every time that Kinesis Data
	// Firehose sends data to the HTTP endpoint (either the initial attempt or a
	// retry), it restarts the acknowledgement timeout counter and waits for an
	// acknowledgement from the HTTP endpoint. Even if the retry duration expires,
	// Kinesis Data Firehose still waits for the acknowledgment until it receives
	// it or the acknowledgement timeout period is reached. If the acknowledgment
	// times out, Kinesis Data Firehose determines whether there's time left in
	// the retry counter. If there is time left, it retries again and repeats the
	// logic until it receives an acknowledgment or determines that the retry time
	// has expired. If you don't want Kinesis Data Firehose to retry sending data,
	// set this value to 0.
	RetryOptions *SnowflakeRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes a destination in Amazon S3.
	S3DestinationDescription *S3DestinationDescription `json:"s3DestinationDescription,omitempty"`

	Schema *string `json:"schema,omitempty"`
	// Optionally configure a Snowflake role. Otherwise the default user role will
	// be used.
	SnowflakeRoleConfiguration *SnowflakeRoleConfiguration `json:"snowflakeRoleConfiguration,omitempty"`
	// Configure a Snowflake VPC
	SnowflakeVPCConfiguration *SnowflakeVPCConfiguration `json:"snowflakeVPCConfiguration,omitempty"`

	Table *string `json:"table,omitempty"`

	User *string `json:"user,omitempty"`
}

// +kubebuilder:skipversion
type SnowflakeDestinationUpdate struct {
	AccountURL *string `json:"accountURL,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	ContentColumnName *string `json:"contentColumnName,omitempty"`

	DataLoadingOption *string `json:"dataLoadingOption,omitempty"`

	Database *string `json:"database,omitempty"`

	KeyPassphrase *string `json:"keyPassphrase,omitempty"`

	MetaDataColumnName *string `json:"metaDataColumnName,omitempty"`

	PrivateKey *string `json:"privateKey,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Specify how long Kinesis Data Firehose retries sending data to the New Relic
	// HTTP endpoint. After sending data, Kinesis Data Firehose first waits for
	// an acknowledgment from the HTTP endpoint. If an error occurs or the acknowledgment
	// doesn’t arrive within the acknowledgment timeout period, Kinesis Data Firehose
	// starts the retry duration counter. It keeps retrying until the retry duration
	// expires. After that, Kinesis Data Firehose considers it a data delivery failure
	// and backs up the data to your Amazon S3 bucket. Every time that Kinesis Data
	// Firehose sends data to the HTTP endpoint (either the initial attempt or a
	// retry), it restarts the acknowledgement timeout counter and waits for an
	// acknowledgement from the HTTP endpoint. Even if the retry duration expires,
	// Kinesis Data Firehose still waits for the acknowledgment until it receives
	// it or the acknowledgement timeout period is reached. If the acknowledgment
	// times out, Kinesis Data Firehose determines whether there's time left in
	// the retry counter. If there is time left, it retries again and repeats the
	// logic until it receives an acknowledgment or determines that the retry time
	// has expired. If you don't want Kinesis Data Firehose to retry sending data,
	// set this value to 0.
	RetryOptions *SnowflakeRetryOptions `json:"retryOptions,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`

	Schema *string `json:"schema,omitempty"`
	// Optionally configure a Snowflake role. Otherwise the default user role will
	// be used.
	SnowflakeRoleConfiguration *SnowflakeRoleConfiguration `json:"snowflakeRoleConfiguration,omitempty"`

	Table *string `json:"table,omitempty"`

	User *string `json:"user,omitempty"`
}

// +kubebuilder:skipversion
type SnowflakeRetryOptions struct {
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`
}

// +kubebuilder:skipversion
type SnowflakeRoleConfiguration struct {
	Enabled *bool `json:"enabled,omitempty"`

	SnowflakeRole *string `json:"snowflakeRole,omitempty"`
}

// +kubebuilder:skipversion
type SnowflakeVPCConfiguration struct {
	PrivateLinkVPCeID *string `json:"privateLinkVPCeID,omitempty"`
}

// +kubebuilder:skipversion
type SourceDescription struct {
	// Details about a Kinesis data stream used as the source for a Kinesis Data
	// Firehose delivery stream.
	KinesisStreamSourceDescription *KinesisStreamSourceDescription `json:"kinesisStreamSourceDescription,omitempty"`
	// Details about the Amazon MSK cluster used as the source for a Kinesis Data
	// Firehose delivery stream.
	MSKSourceDescription *MSKSourceDescription `json:"mSKSourceDescription,omitempty"`
}

// +kubebuilder:skipversion
type SplunkBufferingHints struct {
	IntervalInSeconds *int64 `json:"intervalInSeconds,omitempty"`

	SizeInMBs *int64 `json:"sizeInMBs,omitempty"`
}

// +kubebuilder:skipversion
type SplunkDestinationConfiguration struct {
	// The buffering options. If no value is specified, the default values for Splunk
	// are used.
	BufferingHints *SplunkBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	HECAcknowledgmentTimeoutInSeconds *int64 `json:"hECAcknowledgmentTimeoutInSeconds,omitempty"`

	HECEndpoint *string `json:"hECEndpoint,omitempty"`

	HECEndpointType *string `json:"hECEndpointType,omitempty"`

	HECToken *string `json:"hECToken,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
	RetryOptions *SplunkRetryOptions `json:"retryOptions,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes the configuration of a destination in Amazon S3.
	S3Configuration *S3DestinationConfiguration `json:"s3Configuration,omitempty"`
}

// +kubebuilder:skipversion
type SplunkDestinationDescription struct {
	// The buffering options. If no value is specified, the default values for Splunk
	// are used.
	BufferingHints *SplunkBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	HECAcknowledgmentTimeoutInSeconds *int64 `json:"hECAcknowledgmentTimeoutInSeconds,omitempty"`

	HECEndpoint *string `json:"hECEndpoint,omitempty"`

	HECEndpointType *string `json:"hECEndpointType,omitempty"`

	HECToken *string `json:"hECToken,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
	RetryOptions *SplunkRetryOptions `json:"retryOptions,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
	// Describes a destination in Amazon S3.
	S3DestinationDescription *S3DestinationDescription `json:"s3DestinationDescription,omitempty"`
}

// +kubebuilder:skipversion
type SplunkDestinationUpdate struct {
	// The buffering options. If no value is specified, the default values for Splunk
	// are used.
	BufferingHints *SplunkBufferingHints `json:"bufferingHints,omitempty"`
	// Describes the Amazon CloudWatch logging options for your delivery stream.
	CloudWatchLoggingOptions *CloudWatchLoggingOptions `json:"cloudWatchLoggingOptions,omitempty"`

	HECAcknowledgmentTimeoutInSeconds *int64 `json:"hECAcknowledgmentTimeoutInSeconds,omitempty"`

	HECEndpoint *string `json:"hECEndpoint,omitempty"`

	HECEndpointType *string `json:"hECEndpointType,omitempty"`

	HECToken *string `json:"hECToken,omitempty"`
	// Describes a data processing configuration.
	ProcessingConfiguration *ProcessingConfiguration `json:"processingConfiguration,omitempty"`
	// Configures retry behavior in case Kinesis Data Firehose is unable to deliver
	// documents to Splunk, or if it doesn't receive an acknowledgment from Splunk.
	RetryOptions *SplunkRetryOptions `json:"retryOptions,omitempty"`

	S3BackupMode *string `json:"s3BackupMode,omitempty"`
}

// +kubebuilder:skipversion
type SplunkRetryOptions struct {
	DurationInSeconds *int64 `json:"durationInSeconds,omitempty"`
}

// +kubebuilder:skipversion
type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type VPCConfiguration struct {
	RoleARN *string `json:"roleARN,omitempty"`

	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`

	SubnetIDs []*string `json:"subnetIDs,omitempty"`
}

// +kubebuilder:skipversion
type VPCConfigurationDescription struct {
	RoleARN *string `json:"roleARN,omitempty"`

	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`

	SubnetIDs []*string `json:"subnetIDs,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}
