/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// MethodParameters defines the desired state of Method
type MethodParameters struct {
	// Region is which region the Method will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Specifies whether the method required a valid ApiKey.
	APIKeyRequired *bool `json:"apiKeyRequired,omitempty"`
	// A list of authorization scopes configured on the method. The scopes are used
	// with a COGNITO_USER_POOLS authorizer to authorize the method invocation.
	// The authorization works by matching the method scopes against the scopes
	// parsed from the access token in the incoming request. The method invocation
	// is authorized if any method scopes matches a claimed scope in the access
	// token. Otherwise, the invocation is not authorized. When the method scope
	// is configured, the client must provide an access token instead of an identity
	// token for authorization purposes.
	AuthorizationScopes []*string `json:"authorizationScopes,omitempty"`
	// [Required] The method's authorization type. Valid values are NONE for open
	// access, AWS_IAM for using AWS IAM permissions, CUSTOM for using a custom
	// authorizer, or COGNITO_USER_POOLS for using a Cognito user pool.
	// +kubebuilder:validation:Required
	AuthorizationType *string `json:"authorizationType"`
	// Specifies the identifier of an Authorizer to use on this Method, if the type
	// is CUSTOM or COGNITO_USER_POOLS. The authorizer identifier is generated by
	// API Gateway when you created the authorizer.
	AuthorizerID *string `json:"authorizerID,omitempty"`
	// [Required] Specifies the method request's HTTP method type.
	// +kubebuilder:validation:Required
	HTTPMethod *string `json:"httpMethod"`
	// A human-friendly operation identifier for the method. For example, you can
	// assign the operationName of ListPets for the GET /pets method in the PetStore
	// example.
	OperationName *string `json:"operationName,omitempty"`
	// Specifies the Model resources used for the request's content type. Request
	// models are represented as a key/value map, with a content type as the key
	// and a Model name as the value.
	RequestModels map[string]*string `json:"requestModels,omitempty"`
	// A key-value map defining required or optional method request parameters that
	// can be accepted by API Gateway. A key defines a method request parameter
	// name matching the pattern of method.request.{location}.{name}, where location
	// is querystring, path, or header and name is a valid and unique parameter
	// name. The value associated with the key is a Boolean flag indicating whether
	// the parameter is required (true) or optional (false). The method request
	// parameter names defined here are available in Integration to be mapped to
	// integration request parameters or body-mapping templates.
	RequestParameters map[string]*bool `json:"requestParameters,omitempty"`
	// The identifier of a RequestValidator for validating the method request.
	RequestValidatorID     *string `json:"requestValidatorID,omitempty"`
	CustomMethodParameters `json:",inline"`
}

// MethodSpec defines the desired state of Method
type MethodSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       MethodParameters `json:"forProvider"`
}

// MethodObservation defines the observed state of Method
type MethodObservation struct {
}

// MethodStatus defines the observed state of Method.
type MethodStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          MethodObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Method is the Schema for the Methods API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Method struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MethodSpec   `json:"spec"`
	Status            MethodStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MethodList contains a list of Methods
type MethodList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Method `json:"items"`
}

// Repository type metadata.
var (
	MethodKind             = "Method"
	MethodGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MethodKind}.String()
	MethodKindAPIVersion   = MethodKind + "." + GroupVersion.String()
	MethodGroupVersionKind = GroupVersion.WithKind(MethodKind)
)

func init() {
	SchemeBuilder.Register(&Method{}, &MethodList{})
}
