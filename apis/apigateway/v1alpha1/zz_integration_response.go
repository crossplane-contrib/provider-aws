/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// IntegrationResponseParameters defines the desired state of IntegrationResponse
type IntegrationResponseParameters struct {
	// Region is which region the IntegrationResponse will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Specifies how to handle response payload content type conversions. Supported
	// values are CONVERT_TO_BINARY and CONVERT_TO_TEXT, with the following behaviors:
	//
	//    * CONVERT_TO_BINARY: Converts a response payload from a Base64-encoded
	//    string to the corresponding binary blob.
	//
	//    * CONVERT_TO_TEXT: Converts a response payload from a binary blob to a
	//    Base64-encoded string.
	//
	// If this property is not defined, the response payload will be passed through
	// from the integration response to the method response without modification.
	ContentHandling *string `json:"contentHandling,omitempty"`
	// [Required] Specifies a put integration response request's HTTP method.
	// +kubebuilder:validation:Required
	HTTPMethod *string `json:"httpMethod"`
	// A key-value map specifying response parameters that are passed to the method
	// response from the back end. The key is a method response header parameter
	// name and the mapped value is an integration response header value, a static
	// value enclosed within a pair of single quotes, or a JSON expression from
	// the integration response body. The mapping key must match the pattern of
	// method.response.header.{name}, where name is a valid and unique header name.
	// The mapped non-static value must match the pattern of integration.response.header.{name}
	// or integration.response.body.{JSON-expression}, where name must be a valid
	// and unique response header name and JSON-expression a valid JSON expression
	// without the $ prefix.
	ResponseParameters map[string]*string `json:"responseParameters,omitempty"`
	// Specifies a put integration response's templates.
	ResponseTemplates map[string]*string `json:"responseTemplates,omitempty"`
	// Specifies the selection pattern of a put integration response.
	SelectionPattern *string `json:"selectionPattern,omitempty"`
	// [Required] Specifies the status code that is used to map the integration
	// response to an existing MethodResponse.
	// +kubebuilder:validation:Required
	StatusCode                          *string `json:"statusCode"`
	CustomIntegrationResponseParameters `json:",inline"`
}

// IntegrationResponseSpec defines the desired state of IntegrationResponse
type IntegrationResponseSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       IntegrationResponseParameters `json:"forProvider"`
}

// IntegrationResponseObservation defines the observed state of IntegrationResponse
type IntegrationResponseObservation struct {
}

// IntegrationResponseStatus defines the observed state of IntegrationResponse.
type IntegrationResponseStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          IntegrationResponseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IntegrationResponse is the Schema for the IntegrationResponses API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type IntegrationResponse struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IntegrationResponseSpec   `json:"spec"`
	Status            IntegrationResponseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IntegrationResponseList contains a list of IntegrationResponses
type IntegrationResponseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IntegrationResponse `json:"items"`
}

// Repository type metadata.
var (
	IntegrationResponseKind             = "IntegrationResponse"
	IntegrationResponseGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IntegrationResponseKind}.String()
	IntegrationResponseKindAPIVersion   = IntegrationResponseKind + "." + GroupVersion.String()
	IntegrationResponseGroupVersionKind = GroupVersion.WithKind(IntegrationResponseKind)
)

func init() {
	SchemeBuilder.Register(&IntegrationResponse{}, &IntegrationResponseList{})
}
