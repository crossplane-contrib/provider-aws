/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// DomainNameParameters defines the desired state of DomainName
type DomainNameParameters struct {
	// Region is which region the DomainName will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The reference to an AWS-managed certificate that will be used by edge-optimized
	// endpoint for this domain name. AWS Certificate Manager is the only supported
	// source.
	CertificateARN *string `json:"certificateARN,omitempty"`
	// [Deprecated] The body of the server certificate that will be used by edge-optimized
	// endpoint for this domain name provided by your certificate authority.
	CertificateBody *string `json:"certificateBody,omitempty"`
	// [Deprecated] The intermediate certificates and optionally the root certificate,
	// one after the other without any blank lines, used by an edge-optimized endpoint
	// for this domain name. If you include the root certificate, your certificate
	// chain must start with intermediate certificates and end with the root certificate.
	// Use the intermediate certificates that were provided by your certificate
	// authority. Do not include any intermediaries that are not in the chain of
	// trust path.
	CertificateChain *string `json:"certificateChain,omitempty"`
	// The user-friendly name of the certificate that will be used by edge-optimized
	// endpoint for this domain name.
	CertificateName *string `json:"certificateName,omitempty"`
	// [Deprecated] Your edge-optimized endpoint's domain name certificate's private
	// key.
	CertificatePrivateKey *string `json:"certificatePrivateKey,omitempty"`
	// [Required] The name of the DomainName resource.
	// +kubebuilder:validation:Required
	DomainName *string `json:"domainName"`
	// The endpoint configuration of this DomainName showing the endpoint types
	// of the domain name.
	EndpointConfiguration *EndpointConfiguration `json:"endpointConfiguration,omitempty"`

	MutualTLSAuthentication *MutualTLSAuthenticationInput `json:"mutualTLSAuthentication,omitempty"`
	// The ARN of the public certificate issued by ACM to validate ownership of
	// your custom domain. Only required when configuring mutual TLS and using an
	// ACM imported or private CA certificate ARN as the regionalCertificateArn.
	OwnershipVerificationCertificateARN *string `json:"ownershipVerificationCertificateARN,omitempty"`
	// The reference to an AWS-managed certificate that will be used by regional
	// endpoint for this domain name. AWS Certificate Manager is the only supported
	// source.
	RegionalCertificateARN *string `json:"regionalCertificateARN,omitempty"`
	// The user-friendly name of the certificate that will be used by regional endpoint
	// for this domain name.
	RegionalCertificateName *string `json:"regionalCertificateName,omitempty"`
	// The Transport Layer Security (TLS) version + cipher suite for this DomainName.
	// The valid values are TLS_1_0 and TLS_1_2.
	SecurityPolicy *string `json:"securityPolicy,omitempty"`
	// The key-value map of strings. The valid character set is [a-zA-Z+-=._:/].
	// The tag key can be up to 128 characters and must not start with aws:. The
	// tag value can be up to 256 characters.
	Tags                       map[string]*string `json:"tags,omitempty"`
	CustomDomainNameParameters `json:",inline"`
}

// DomainNameSpec defines the desired state of DomainName
type DomainNameSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DomainNameParameters `json:"forProvider"`
}

// DomainNameObservation defines the observed state of DomainName
type DomainNameObservation struct {
	// The timestamp when the certificate that was used by edge-optimized endpoint
	// for this domain name was uploaded.
	CertificateUploadDate *metav1.Time `json:"certificateUploadDate,omitempty"`
	// The domain name of the Amazon CloudFront distribution associated with this
	// custom domain name for an edge-optimized endpoint. You set up this association
	// when adding a DNS record pointing the custom domain name to this distribution
	// name. For more information about CloudFront distributions, see the Amazon
	// CloudFront documentation (https://aws.amazon.com/documentation/cloudfront/).
	DistributionDomainName *string `json:"distributionDomainName,omitempty"`
	// The region-agnostic Amazon Route 53 Hosted Zone ID of the edge-optimized
	// endpoint. The valid value is Z2FDTNDATAQYW2 for all the regions. For more
	// information, see Set up a Regional Custom Domain Name (https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-regional-api-custom-domain-create.html)
	// and AWS Regions and Endpoints for API Gateway (https://docs.aws.amazon.com/general/latest/gr/rande.html#apigateway_region).
	DistributionHostedZoneID *string `json:"distributionHostedZoneID,omitempty"`
	// The status of the DomainName migration. The valid values are AVAILABLE, UPDATING,
	// PENDING_CERTIFICATE_REIMPORT, and PENDING_OWNERSHIP_VERIFICATION. If the
	// status is UPDATING, the domain cannot be modified further until the existing
	// operation is complete. If it is AVAILABLE, the domain can be updated.
	DomainNameStatus *string `json:"domainNameStatus,omitempty"`
	// An optional text message containing detailed information about status of
	// the DomainName migration.
	DomainNameStatusMessage *string `json:"domainNameStatusMessage,omitempty"`
	// The domain name associated with the regional endpoint for this custom domain
	// name. You set up this association by adding a DNS record that points the
	// custom domain name to this regional domain name. The regional domain name
	// is returned by API Gateway when you create a regional endpoint.
	RegionalDomainName *string `json:"regionalDomainName,omitempty"`
	// The region-specific Amazon Route 53 Hosted Zone ID of the regional endpoint.
	// For more information, see Set up a Regional Custom Domain Name (https://docs.aws.amazon.com/apigateway/latest/developerguide/apigateway-regional-api-custom-domain-create.html)
	// and AWS Regions and Endpoints for API Gateway (https://docs.aws.amazon.com/general/latest/gr/rande.html#apigateway_region).
	RegionalHostedZoneID *string `json:"regionalHostedZoneID,omitempty"`
}

// DomainNameStatus defines the observed state of DomainName.
type DomainNameStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DomainNameObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DomainName is the Schema for the DomainNames API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DomainName struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainNameSpec   `json:"spec"`
	Status            DomainNameStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainNameList contains a list of DomainNames
type DomainNameList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DomainName `json:"items"`
}

// Repository type metadata.
var (
	DomainNameKind             = "DomainName"
	DomainNameGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainNameKind}.String()
	DomainNameKindAPIVersion   = DomainNameKind + "." + GroupVersion.String()
	DomainNameGroupVersionKind = GroupVersion.WithKind(DomainNameKind)
)

func init() {
	SchemeBuilder.Register(&DomainName{}, &DomainNameList{})
}
