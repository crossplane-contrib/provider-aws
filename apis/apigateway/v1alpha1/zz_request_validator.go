/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// RequestValidatorParameters defines the desired state of RequestValidator
type RequestValidatorParameters struct {
	// Region is which region the RequestValidator will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The name of the to-be-created RequestValidator.
	Name *string `json:"name,omitempty"`
	// A Boolean flag to indicate whether to validate request body according to
	// the configured model schema for the method (true) or not (false).
	ValidateRequestBody *bool `json:"validateRequestBody,omitempty"`
	// A Boolean flag to indicate whether to validate request parameters, true,
	// or not false.
	ValidateRequestParameters        *bool `json:"validateRequestParameters,omitempty"`
	CustomRequestValidatorParameters `json:",inline"`
}

// RequestValidatorSpec defines the desired state of RequestValidator
type RequestValidatorSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RequestValidatorParameters `json:"forProvider"`
}

// RequestValidatorObservation defines the observed state of RequestValidator
type RequestValidatorObservation struct {
	// The identifier of this RequestValidator.
	ID *string `json:"id,omitempty"`
}

// RequestValidatorStatus defines the observed state of RequestValidator.
type RequestValidatorStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RequestValidatorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RequestValidator is the Schema for the RequestValidators API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type RequestValidator struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RequestValidatorSpec   `json:"spec"`
	Status            RequestValidatorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RequestValidatorList contains a list of RequestValidators
type RequestValidatorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RequestValidator `json:"items"`
}

// Repository type metadata.
var (
	RequestValidatorKind             = "RequestValidator"
	RequestValidatorGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RequestValidatorKind}.String()
	RequestValidatorKindAPIVersion   = RequestValidatorKind + "." + GroupVersion.String()
	RequestValidatorGroupVersionKind = GroupVersion.WithKind(RequestValidatorKind)
)

func init() {
	SchemeBuilder.Register(&RequestValidator{}, &RequestValidatorList{})
}
