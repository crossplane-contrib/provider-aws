/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// RouteTableParameters defines the desired state of RouteTable
type RouteTableParameters struct {
	// Region is which region the RouteTable will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The tags to assign to the route table.
	TagSpecifications          []*TagSpecification `json:"tagSpecifications,omitempty"`
	CustomRouteTableParameters `json:",inline"`
}

// RouteTableSpec defines the desired state of RouteTable
type RouteTableSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       RouteTableParameters `json:"forProvider"`
}

// RouteTableObservation defines the observed state of RouteTable
type RouteTableObservation struct {
	// The associations between the route table and one or more subnets or a gateway.
	Associations []*RouteTableAssociation `json:"associations,omitempty"`
	// The ID of the AWS account that owns the route table.
	OwnerID *string `json:"ownerID,omitempty"`
	// Any virtual private gateway (VGW) propagating routes.
	PropagatingVGWs []*PropagatingVGW `json:"propagatingVGWs,omitempty"`
	// The ID of the route table.
	RouteTableID *string `json:"routeTableID,omitempty"`
	// The routes in the route table.
	Routes []*Route_SDK `json:"routes,omitempty"`
	// Any tags assigned to the route table.
	Tags []*Tag `json:"tags,omitempty"`
	// The ID of the VPC.
	VPCID *string `json:"vpcID,omitempty"`
}

// RouteTableStatus defines the observed state of RouteTable.
type RouteTableStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          RouteTableObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteTable is the Schema for the RouteTables API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type RouteTable struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteTableSpec   `json:"spec"`
	Status            RouteTableStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteTableList contains a list of RouteTables
type RouteTableList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteTable `json:"items"`
}

// Repository type metadata.
var (
	RouteTableKind             = "RouteTable"
	RouteTableGroupKind        = schema.GroupKind{Group: Group, Kind: RouteTableKind}.String()
	RouteTableKindAPIVersion   = RouteTableKind + "." + GroupVersion.String()
	RouteTableGroupVersionKind = GroupVersion.WithKind(RouteTableKind)
)

func init() {
	SchemeBuilder.Register(&RouteTable{}, &RouteTableList{})
}
