/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// CapacityReservationParameters defines the desired state of CapacityReservation
type CapacityReservationParameters struct {
	// Region is which region the CapacityReservation will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The Availability Zone in which to create the Capacity Reservation.
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
	// The ID of the Availability Zone in which to create the Capacity Reservation.
	AvailabilityZoneID *string `json:"availabilityZoneID,omitempty"`
	// Indicates whether the Capacity Reservation supports EBS-optimized instances.
	// This optimization provides dedicated throughput to Amazon EBS and an optimized
	// configuration stack to provide optimal I/O performance. This optimization
	// isn't available with all instance types. Additional usage charges apply when
	// using an EBS- optimized instance.
	EBSOptimized *bool `json:"ebsOptimized,omitempty"`
	// The date and time at which the Capacity Reservation expires. When a Capacity
	// Reservation expires, the reserved capacity is released and you can no longer
	// launch instances into it. The Capacity Reservation's state changes to expired
	// when it reaches its end date and time.
	//
	// You must provide an EndDate value if EndDateType is limited. Omit EndDate
	// if EndDateType is unlimited.
	//
	// If the EndDateType is limited, the Capacity Reservation is cancelled within
	// an hour from the specified time. For example, if you specify 5/31/2019, 13:30:55,
	// the Capacity Reservation is guaranteed to end between 13:30:55 and 14:30:55
	// on 5/31/2019.
	EndDate *metav1.Time `json:"endDate,omitempty"`
	// Indicates the way in which the Capacity Reservation ends. A Capacity Reservation
	// can have one of the following end types:
	//
	//    * unlimited - The Capacity Reservation remains active until you explicitly
	//    cancel it. Do not provide an EndDate if the EndDateType is unlimited.
	//
	//    * limited - The Capacity Reservation expires automatically at a specified
	//    date and time. You must provide an EndDate value if the EndDateType value
	//    is limited.
	EndDateType *string `json:"endDateType,omitempty"`
	// Deprecated.
	EphemeralStorage *bool `json:"ephemeralStorage,omitempty"`
	// The number of instances for which to reserve capacity.
	//
	// Valid range: 1 - 1000
	// +kubebuilder:validation:Required
	InstanceCount *int64 `json:"instanceCount"`
	// Indicates the type of instance launches that the Capacity Reservation accepts.
	// The options include:
	//
	//    * open - The Capacity Reservation automatically matches all instances
	//    that have matching attributes (instance type, platform, and Availability
	//    Zone). Instances that have matching attributes run in the Capacity Reservation
	//    automatically without specifying any additional parameters.
	//
	//    * targeted - The Capacity Reservation only accepts instances that have
	//    matching attributes (instance type, platform, and Availability Zone),
	//    and explicitly target the Capacity Reservation. This ensures that only
	//    permitted instances can use the reserved capacity.
	//
	// Default: open
	InstanceMatchCriteria *string `json:"instanceMatchCriteria,omitempty"`
	// The type of operating system for which to reserve capacity.
	// +kubebuilder:validation:Required
	InstancePlatform *string `json:"instancePlatform"`
	// The instance type for which to reserve capacity. For more information, see
	// Instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html)
	// in the Amazon EC2 User Guide.
	// +kubebuilder:validation:Required
	InstanceType *string `json:"instanceType"`
	// The Amazon Resource Name (ARN) of the Outpost on which to create the Capacity
	// Reservation.
	OutpostARN *string `json:"outpostARN,omitempty"`
	// The Amazon Resource Name (ARN) of the cluster placement group in which to
	// create the Capacity Reservation. For more information, see Capacity Reservations
	// for cluster placement groups (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/cr-cpg.html)
	// in the Amazon EC2 User Guide.
	PlacementGroupARN *string `json:"placementGroupARN,omitempty"`
	// The tags to apply to the Capacity Reservation during launch.
	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`
	// Indicates the tenancy of the Capacity Reservation. A Capacity Reservation
	// can have one of the following tenancy settings:
	//
	//    * default - The Capacity Reservation is created on hardware that is shared
	//    with other Amazon Web Services accounts.
	//
	//    * dedicated - The Capacity Reservation is created on single-tenant hardware
	//    that is dedicated to a single Amazon Web Services account.
	Tenancy                             *string `json:"tenancy,omitempty"`
	CustomCapacityReservationParameters `json:",inline"`
}

// CapacityReservationSpec defines the desired state of CapacityReservation
type CapacityReservationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CapacityReservationParameters `json:"forProvider"`
}

// CapacityReservationObservation defines the observed state of CapacityReservation
type CapacityReservationObservation struct {
	// The remaining capacity. Indicates the number of instances that can be launched
	// in the Capacity Reservation.
	AvailableInstanceCount *int64 `json:"availableInstanceCount,omitempty"`
	// Information about instance capacity usage.
	CapacityAllocations []*CapacityAllocation `json:"capacityAllocations,omitempty"`
	// The Amazon Resource Name (ARN) of the Capacity Reservation.
	CapacityReservationARN *string `json:"capacityReservationARN,omitempty"`
	// The ID of the Capacity Reservation Fleet to which the Capacity Reservation
	// belongs. Only valid for Capacity Reservations that were created by a Capacity
	// Reservation Fleet.
	CapacityReservationFleetID *string `json:"capacityReservationFleetID,omitempty"`
	// The ID of the Capacity Reservation.
	CapacityReservationID *string `json:"capacityReservationID,omitempty"`
	// The date and time at which the Capacity Reservation was created.
	CreateDate *metav1.Time `json:"createDate,omitempty"`
	// The ID of the Amazon Web Services account that owns the Capacity Reservation.
	OwnerID *string `json:"ownerID,omitempty"`
	// The date and time at which the Capacity Reservation was started.
	StartDate *metav1.Time `json:"startDate,omitempty"`
	// The current state of the Capacity Reservation. A Capacity Reservation can
	// be in one of the following states:
	//
	//    * active - The Capacity Reservation is active and the capacity is available
	//    for your use.
	//
	//    * expired - The Capacity Reservation expired automatically at the date
	//    and time specified in your request. The reserved capacity is no longer
	//    available for your use.
	//
	//    * cancelled - The Capacity Reservation was cancelled. The reserved capacity
	//    is no longer available for your use.
	//
	//    * pending - The Capacity Reservation request was successful but the capacity
	//    provisioning is still pending.
	//
	//    * failed - The Capacity Reservation request has failed. A request might
	//    fail due to invalid request parameters, capacity constraints, or instance
	//    limit constraints. Failed requests are retained for 60 minutes.
	State *string `json:"state,omitempty"`
	// Any tags assigned to the Capacity Reservation.
	Tags []*Tag `json:"tags,omitempty"`
	// The total number of instances for which the Capacity Reservation reserves
	// capacity.
	TotalInstanceCount *int64 `json:"totalInstanceCount,omitempty"`
}

// CapacityReservationStatus defines the observed state of CapacityReservation.
type CapacityReservationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CapacityReservationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CapacityReservation is the Schema for the CapacityReservations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CapacityReservation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CapacityReservationSpec   `json:"spec"`
	Status            CapacityReservationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CapacityReservationList contains a list of CapacityReservations
type CapacityReservationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CapacityReservation `json:"items"`
}

// Repository type metadata.
var (
	CapacityReservationKind             = "CapacityReservation"
	CapacityReservationGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CapacityReservationKind}.String()
	CapacityReservationKindAPIVersion   = CapacityReservationKind + "." + GroupVersion.String()
	CapacityReservationGroupVersionKind = GroupVersion.WithKind(CapacityReservationKind)
)

func init() {
	SchemeBuilder.Register(&CapacityReservation{}, &CapacityReservationList{})
}
