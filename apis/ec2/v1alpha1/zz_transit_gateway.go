/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// TransitGatewayParameters defines the desired state of TransitGateway
type TransitGatewayParameters struct {
	// Region is which region the TransitGateway will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A description of the transit gateway.
	Description *string `json:"description,omitempty"`
	// The transit gateway options.
	Options *TransitGatewayRequestOptions `json:"options,omitempty"`
	// The tags to apply to the transit gateway.
	TagSpecifications              []*TagSpecification `json:"tagSpecifications,omitempty"`
	CustomTransitGatewayParameters `json:",inline"`
}

// TransitGatewaySpec defines the desired state of TransitGateway
type TransitGatewaySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       TransitGatewayParameters `json:"forProvider"`
}

// TransitGatewayObservation defines the observed state of TransitGateway
type TransitGatewayObservation struct {
	// The creation time.
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// The ID of the Amazon Web Services account that owns the transit gateway.
	OwnerID *string `json:"ownerID,omitempty"`
	// The state of the transit gateway.
	State *string `json:"state,omitempty"`
	// The tags for the transit gateway.
	Tags []*Tag `json:"tags,omitempty"`
	// The Amazon Resource Name (ARN) of the transit gateway.
	TransitGatewayARN *string `json:"transitGatewayARN,omitempty"`
	// The ID of the transit gateway.
	TransitGatewayID *string `json:"transitGatewayID,omitempty"`
}

// TransitGatewayStatus defines the observed state of TransitGateway.
type TransitGatewayStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          TransitGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransitGateway is the Schema for the TransitGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type TransitGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TransitGatewaySpec   `json:"spec"`
	Status            TransitGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransitGatewayList contains a list of TransitGateways
type TransitGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransitGateway `json:"items"`
}

// Repository type metadata.
var (
	TransitGatewayKind             = "TransitGateway"
	TransitGatewayGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransitGatewayKind}.String()
	TransitGatewayKindAPIVersion   = TransitGatewayKind + "." + GroupVersion.String()
	TransitGatewayGroupVersionKind = GroupVersion.WithKind(TransitGatewayKind)
)

func init() {
	SchemeBuilder.Register(&TransitGateway{}, &TransitGatewayList{})
}
