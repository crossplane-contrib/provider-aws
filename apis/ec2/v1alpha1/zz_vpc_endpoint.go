/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// VPCEndpointParameters defines the desired state of VPCEndpoint
type VPCEndpointParameters struct {
	// Region is which region the VPCEndpoint will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// (Interface and gateway endpoints) A policy to attach to the endpoint that
	// controls access to the service. The policy must be in valid JSON format.
	// If this parameter is not specified, we attach a default policy that allows
	// full access to the service.
	PolicyDocument *string `json:"policyDocument,omitempty"`
	// (Interface endpoint) Indicates whether to associate a private hosted zone
	// with the specified VPC. The private hosted zone contains a record set for
	// the default public DNS name for the service for the Region (for example,
	// kinesis.us-east-1.amazonaws.com), which resolves to the private IP addresses
	// of the endpoint network interfaces in the VPC. This enables you to make requests
	// to the default public DNS name for the service instead of the public DNS
	// names that are automatically generated by the VPC endpoint service.
	//
	// To use a private hosted zone, you must set the following VPC attributes to
	// true: enableDnsHostnames and enableDnsSupport. Use ModifyVpcAttribute to
	// set the VPC attributes.
	//
	// Default: true
	PrivateDNSEnabled *bool `json:"privateDNSEnabled,omitempty"`
	// The service name. To get a list of available services, use the DescribeVpcEndpointServices
	// request, or get the name from the service provider.
	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName"`
	// The tags to associate with the endpoint.
	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`
	// The type of endpoint.
	//
	// Default: Gateway
	VPCEndpointType             *string `json:"vpcEndpointType,omitempty"`
	CustomVPCEndpointParameters `json:",inline"`
}

// VPCEndpointSpec defines the desired state of VPCEndpoint
type VPCEndpointSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VPCEndpointParameters `json:"forProvider"`
}

// VPCEndpointObservation defines the observed state of VPCEndpoint
type VPCEndpointObservation struct {
	// The date and time that the VPC endpoint was created.
	CreationTimestamp *metav1.Time `json:"creationTimestamp,omitempty"`
	// (Interface endpoint) The DNS entries for the endpoint.
	DNSEntries []*DNSEntry `json:"dnsEntries,omitempty"`
	// (Interface endpoint) Information about the security groups that are associated
	// with the network interface.
	Groups []*SecurityGroupIdentifier `json:"groups,omitempty"`
	// The last error that occurred for VPC endpoint.
	LastError *LastError `json:"lastError,omitempty"`
	// (Interface endpoint) One or more network interfaces for the endpoint.
	NetworkInterfaceIDs []*string `json:"networkInterfaceIDs,omitempty"`
	// The ID of the Amazon Web Services account that owns the VPC endpoint.
	OwnerID *string `json:"ownerID,omitempty"`
	// Indicates whether the VPC endpoint is being managed by its service.
	RequesterManaged *bool `json:"requesterManaged,omitempty"`
	// (Gateway endpoint) One or more route tables associated with the endpoint.
	RouteTableIDs []*string `json:"routeTableIDs,omitempty"`
	// The state of the VPC endpoint.
	State *string `json:"state,omitempty"`
	// (Interface endpoint) One or more subnets in which the endpoint is located.
	SubnetIDs []*string `json:"subnetIDs,omitempty"`
	// Any tags assigned to the VPC endpoint.
	Tags []*Tag `json:"tags,omitempty"`
	// The ID of the VPC endpoint.
	VPCEndpointID *string `json:"vpcEndpointID,omitempty"`
	// The ID of the VPC to which the endpoint is associated.
	VPCID *string `json:"vpcID,omitempty"`
}

// VPCEndpointStatus defines the observed state of VPCEndpoint.
type VPCEndpointStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VPCEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEndpoint is the Schema for the VPCEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VPCEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCEndpointSpec   `json:"spec"`
	Status            VPCEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCEndpointList contains a list of VPCEndpoints
type VPCEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCEndpoint `json:"items"`
}

// Repository type metadata.
var (
	VPCEndpointKind             = "VPCEndpoint"
	VPCEndpointGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCEndpointKind}.String()
	VPCEndpointKindAPIVersion   = VPCEndpointKind + "." + GroupVersion.String()
	VPCEndpointGroupVersionKind = GroupVersion.WithKind(VPCEndpointKind)
)

func init() {
	SchemeBuilder.Register(&VPCEndpoint{}, &VPCEndpointList{})
}
