/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// LaunchTemplateParameters defines the desired state of LaunchTemplate
type LaunchTemplateParameters struct {
	// Region is which region the LaunchTemplate will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The information for the launch template.
	// +kubebuilder:validation:Required
	LaunchTemplateData *RequestLaunchTemplateData `json:"launchTemplateData"`
	// A name for the launch template.
	// +kubebuilder:validation:Required
	LaunchTemplateName *string `json:"launchTemplateName"`
	// The tags to apply to the launch template during creation.
	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`
	// A description for the first version of the launch template.
	VersionDescription             *string `json:"versionDescription,omitempty"`
	CustomLaunchTemplateParameters `json:",inline"`
}

// LaunchTemplateSpec defines the desired state of LaunchTemplate
type LaunchTemplateSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LaunchTemplateParameters `json:"forProvider"`
}

// LaunchTemplateObservation defines the observed state of LaunchTemplate
type LaunchTemplateObservation struct {
	// Information about the launch template.
	LaunchTemplate *LaunchTemplate_SDK `json:"launchTemplate,omitempty"`
	// If the launch template contains parameters or parameter combinations that
	// are not valid, an error code and an error message are returned for each issue
	// that's found.
	Warning *ValidationWarning `json:"warning,omitempty"`
}

// LaunchTemplateStatus defines the observed state of LaunchTemplate.
type LaunchTemplateStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LaunchTemplateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LaunchTemplate is the Schema for the LaunchTemplates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LaunchTemplate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LaunchTemplateSpec   `json:"spec"`
	Status            LaunchTemplateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LaunchTemplateList contains a list of LaunchTemplates
type LaunchTemplateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LaunchTemplate `json:"items"`
}

// Repository type metadata.
var (
	LaunchTemplateKind             = "LaunchTemplate"
	LaunchTemplateGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LaunchTemplateKind}.String()
	LaunchTemplateKindAPIVersion   = LaunchTemplateKind + "." + GroupVersion.String()
	LaunchTemplateGroupVersionKind = GroupVersion.WithKind(LaunchTemplateKind)
)

func init() {
	SchemeBuilder.Register(&LaunchTemplate{}, &LaunchTemplateList{})
}
