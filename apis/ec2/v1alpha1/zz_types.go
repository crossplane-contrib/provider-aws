/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type AccountAttribute struct {
	AttributeName *string `json:"attributeName,omitempty"`
}

// +kubebuilder:skipversion
type AccountAttributeValue struct {
	AttributeValue *string `json:"attributeValue,omitempty"`
}

// +kubebuilder:skipversion
type ActiveInstance struct {
	InstanceID *string `json:"instanceID,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	SpotInstanceRequestID *string `json:"spotInstanceRequestID,omitempty"`
}

// +kubebuilder:skipversion
type AddPrefixListEntry struct {
	CIDR *string `json:"cidr,omitempty"`

	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type Address struct {
	AllocationID *string `json:"allocationID,omitempty"`

	AssociationID *string `json:"associationID,omitempty"`

	CarrierIP *string `json:"carrierIP,omitempty"`

	CustomerOwnedIP *string `json:"customerOwnedIP,omitempty"`

	CustomerOwnedIPv4Pool *string `json:"customerOwnedIPv4Pool,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`

	NetworkBorderGroup *string `json:"networkBorderGroup,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	NetworkInterfaceOwnerID *string `json:"networkInterfaceOwnerID,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	PublicIP *string `json:"publicIP,omitempty"`

	PublicIPv4Pool *string `json:"publicIPv4Pool,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type AddressAttribute struct {
	PtrRecord *string `json:"ptrRecord,omitempty"`
}

// +kubebuilder:skipversion
type AllowedPrincipal struct {
	Principal *string `json:"principal,omitempty"`
}

// +kubebuilder:skipversion
type AlternatePathHint struct {
	ComponentARN *string `json:"componentARN,omitempty"`

	ComponentID *string `json:"componentID,omitempty"`
}

// +kubebuilder:skipversion
type AnalysisACLRule struct {
	CIDR *string `json:"cidr,omitempty"`

	Egress *bool `json:"egress,omitempty"`

	Protocol *string `json:"protocol,omitempty"`

	RuleAction *string `json:"ruleAction,omitempty"`
}

// +kubebuilder:skipversion
type AnalysisComponent struct {
	ARN *string `json:"arn,omitempty"`

	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type AnalysisLoadBalancerTarget struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
}

// +kubebuilder:skipversion
type AnalysisPacketHeader struct {
	Protocol *string `json:"protocol,omitempty"`
}

// +kubebuilder:skipversion
type AnalysisRouteTableRoute struct {
	DestinationCIDR *string `json:"destinationCIDR,omitempty"`

	DestinationPrefixListID *string `json:"destinationPrefixListID,omitempty"`

	EgressOnlyInternetGatewayID *string `json:"egressOnlyInternetGatewayID,omitempty"`

	GatewayID *string `json:"gatewayID,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`

	NATGatewayID *string `json:"natGatewayID,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	Origin *string `json:"origin,omitempty"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty"`

	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionID,omitempty"`
}

// +kubebuilder:skipversion
type AnalysisSecurityGroupRule struct {
	CIDR *string `json:"cidr,omitempty"`

	Direction *string `json:"direction,omitempty"`

	PrefixListID *string `json:"prefixListID,omitempty"`

	Protocol *string `json:"protocol,omitempty"`

	SecurityGroupID *string `json:"securityGroupID,omitempty"`
}

// +kubebuilder:skipversion
type AssignedPrivateIPAddress struct {
	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
}

// +kubebuilder:skipversion
type AssociatedRole struct {
	CertificateS3BucketName *string `json:"certificateS3BucketName,omitempty"`

	CertificateS3ObjectKey *string `json:"certificateS3ObjectKey,omitempty"`

	EncryptionKMSKeyID *string `json:"encryptionKMSKeyID,omitempty"`
}

// +kubebuilder:skipversion
type AssociatedTargetNetwork struct {
	NetworkID *string `json:"networkID,omitempty"`
}

// +kubebuilder:skipversion
type AssociationStatus struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type AttributeBooleanValue struct {
	Value *bool `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type AttributeValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type AuthorizationRule struct {
	AccessAll *bool `json:"accessAll,omitempty"`

	ClientVPNEndpointID *string `json:"clientVPNEndpointID,omitempty"`

	Description *string `json:"description,omitempty"`

	DestinationCIDR *string `json:"destinationCIDR,omitempty"`

	GroupID *string `json:"groupID,omitempty"`
}

// +kubebuilder:skipversion
type AvailabilityZone struct {
	GroupName *string `json:"groupName,omitempty"`

	NetworkBorderGroup *string `json:"networkBorderGroup,omitempty"`

	ParentZoneID *string `json:"parentZoneID,omitempty"`

	ParentZoneName *string `json:"parentZoneName,omitempty"`

	RegionName *string `json:"regionName,omitempty"`

	ZoneID *string `json:"zoneID,omitempty"`

	ZoneName *string `json:"zoneName,omitempty"`

	ZoneType *string `json:"zoneType,omitempty"`
}

// +kubebuilder:skipversion
type AvailabilityZoneMessage struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type BlockDeviceMapping struct {
	DeviceName *string `json:"deviceName,omitempty"`

	NoDevice *string `json:"noDevice,omitempty"`

	VirtualName *string `json:"virtualName,omitempty"`
}

// +kubebuilder:skipversion
type BundleTask struct {
	BundleID *string `json:"bundleID,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`

	Progress *string `json:"progress,omitempty"`

	StartTime *metav1.Time `json:"startTime,omitempty"`

	UpdateTime *metav1.Time `json:"updateTime,omitempty"`
}

// +kubebuilder:skipversion
type BundleTaskError struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type ByoipCIDR struct {
	CIDR *string `json:"cidr,omitempty"`

	Description *string `json:"description,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`
}

// +kubebuilder:skipversion
type CIDRAuthorizationContext struct {
	Message *string `json:"message,omitempty"`

	Signature *string `json:"signature,omitempty"`
}

// +kubebuilder:skipversion
type CIDRBlock struct {
	CIDRBlock *string `json:"cidrBlock,omitempty"`
}

// +kubebuilder:skipversion
type CancelSpotFleetRequestsError struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type CancelSpotFleetRequestsErrorItem struct {
	SpotFleetRequestID *string `json:"spotFleetRequestID,omitempty"`
}

// +kubebuilder:skipversion
type CancelSpotFleetRequestsSuccessItem struct {
	SpotFleetRequestID *string `json:"spotFleetRequestID,omitempty"`
}

// +kubebuilder:skipversion
type CancelledSpotInstanceRequest struct {
	SpotInstanceRequestID *string `json:"spotInstanceRequestID,omitempty"`
}

// +kubebuilder:skipversion
type CapacityReservation struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	AvailabilityZoneID *string `json:"availabilityZoneID,omitempty"`

	CapacityReservationARN *string `json:"capacityReservationARN,omitempty"`

	CapacityReservationID *string `json:"capacityReservationID,omitempty"`

	CreateDate *metav1.Time `json:"createDate,omitempty"`

	EBSOptimized *bool `json:"ebsOptimized,omitempty"`

	EndDate *metav1.Time `json:"endDate,omitempty"`

	EphemeralStorage *bool `json:"ephemeralStorage,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type CapacityReservationGroup struct {
	GroupARN *string `json:"groupARN,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`
}

// +kubebuilder:skipversion
type CapacityReservationTarget struct {
	CapacityReservationResourceGroupARN *string `json:"capacityReservationResourceGroupARN,omitempty"`
}

// +kubebuilder:skipversion
type CapacityReservationTargetResponse struct {
	CapacityReservationID *string `json:"capacityReservationID,omitempty"`

	CapacityReservationResourceGroupARN *string `json:"capacityReservationResourceGroupARN,omitempty"`
}

// +kubebuilder:skipversion
type CarrierGateway struct {
	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type CertificateAuthentication struct {
	ClientRootCertificateChain *string `json:"clientRootCertificateChain,omitempty"`
}

// +kubebuilder:skipversion
type CertificateAuthenticationRequest struct {
	ClientRootCertificateChainARN *string `json:"clientRootCertificateChainARN,omitempty"`
}

// +kubebuilder:skipversion
type ClassicLinkDNSSupport struct {
	ClassicLinkDNSSupported *bool `json:"classicLinkDNSSupported,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type ClassicLinkInstance struct {
	InstanceID *string `json:"instanceID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type ClassicLoadBalancer struct {
	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type ClientCertificateRevocationListStatus struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type ClientConnectOptions struct {
	Enabled *bool `json:"enabled,omitempty"`

	LambdaFunctionARN *string `json:"lambdaFunctionARN,omitempty"`
}

// +kubebuilder:skipversion
type ClientConnectResponseOptions struct {
	Enabled *bool `json:"enabled,omitempty"`

	LambdaFunctionARN *string `json:"lambdaFunctionARN,omitempty"`
}

// +kubebuilder:skipversion
type ClientData struct {
	Comment *string `json:"comment,omitempty"`

	UploadEnd *metav1.Time `json:"uploadEnd,omitempty"`

	UploadStart *metav1.Time `json:"uploadStart,omitempty"`
}

// +kubebuilder:skipversion
type ClientVPNAuthorizationRuleStatus struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type ClientVPNConnection struct {
	ClientIP *string `json:"clientIP,omitempty"`

	ClientVPNEndpointID *string `json:"clientVPNEndpointID,omitempty"`

	CommonName *string `json:"commonName,omitempty"`

	ConnectionEndTime *string `json:"connectionEndTime,omitempty"`

	ConnectionEstablishedTime *string `json:"connectionEstablishedTime,omitempty"`

	ConnectionID *string `json:"connectionID,omitempty"`

	EgressBytes *string `json:"egressBytes,omitempty"`

	EgressPackets *string `json:"egressPackets,omitempty"`

	IngressBytes *string `json:"ingressBytes,omitempty"`

	IngressPackets *string `json:"ingressPackets,omitempty"`

	PostureComplianceStatuses []*string `json:"postureComplianceStatuses,omitempty"`

	Timestamp *string `json:"timestamp,omitempty"`

	Username *string `json:"username,omitempty"`
}

// +kubebuilder:skipversion
type ClientVPNConnectionStatus struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type ClientVPNEndpoint struct {
	ClientCIDRBlock *string `json:"clientCIDRBlock,omitempty"`

	ClientVPNEndpointID *string `json:"clientVPNEndpointID,omitempty"`

	CreationTime *string `json:"creationTime,omitempty"`

	DeletionTime *string `json:"deletionTime,omitempty"`

	Description *string `json:"description,omitempty"`

	DNSName *string `json:"dnsName,omitempty"`

	DNSServers []*string `json:"dnsServers,omitempty"`

	SelfServicePortalURL *string `json:"selfServicePortalURL,omitempty"`

	ServerCertificateARN *string `json:"serverCertificateARN,omitempty"`

	SplitTunnel *bool `json:"splitTunnel,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type ClientVPNEndpointAttributeStatus struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type ClientVPNEndpointStatus struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type ClientVPNRoute struct {
	ClientVPNEndpointID *string `json:"clientVPNEndpointID,omitempty"`

	Description *string `json:"description,omitempty"`

	DestinationCIDR *string `json:"destinationCIDR,omitempty"`

	Origin *string `json:"origin,omitempty"`

	TargetSubnet *string `json:"targetSubnet,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type ClientVPNRouteStatus struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type CoipAddressUsage struct {
	AllocationID *string `json:"allocationID,omitempty"`

	AWSAccountID *string `json:"awsAccountID,omitempty"`

	AWSService *string `json:"awsService,omitempty"`

	CoIP *string `json:"coIP,omitempty"`
}

// +kubebuilder:skipversion
type CoipPool struct {
	PoolCIDRs []*string `json:"poolCIDRs,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ConnectionLogOptions struct {
	CloudwatchLogGroup *string `json:"cloudwatchLogGroup,omitempty"`

	CloudwatchLogStream *string `json:"cloudwatchLogStream,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type ConnectionLogResponseOptions struct {
	CloudwatchLogGroup *string `json:"cloudwatchLogGroup,omitempty"`

	CloudwatchLogStream *string `json:"cloudwatchLogStream,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type ConnectionNotification struct {
	ConnectionEvents []*string `json:"connectionEvents,omitempty"`

	ConnectionNotificationARN *string `json:"connectionNotificationARN,omitempty"`

	ConnectionNotificationID *string `json:"connectionNotificationID,omitempty"`

	ServiceID *string `json:"serviceID,omitempty"`

	VPCEndpointID *string `json:"vpcEndpointID,omitempty"`
}

// +kubebuilder:skipversion
type ConversionTask struct {
	ConversionTaskID *string `json:"conversionTaskID,omitempty"`

	ExpirationTime *string `json:"expirationTime,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type CreateFleetError struct {
	ErrorCode *string `json:"errorCode,omitempty"`

	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// +kubebuilder:skipversion
type CreateVolumePermission struct {
	UserID *string `json:"userID,omitempty"`
}

// +kubebuilder:skipversion
type CreditSpecification struct {
	CPUCredits *string `json:"cpuCredits,omitempty"`
}

// +kubebuilder:skipversion
type CreditSpecificationRequest struct {
	CPUCredits *string `json:"cpuCredits,omitempty"`
}

// +kubebuilder:skipversion
type CustomerGateway struct {
	BGPASN *string `json:"bgpASN,omitempty"`

	CertificateARN *string `json:"certificateARN,omitempty"`

	CustomerGatewayID *string `json:"customerGatewayID,omitempty"`

	DeviceName *string `json:"deviceName,omitempty"`

	IPAddress *string `json:"ipAddress,omitempty"`

	State *string `json:"state,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type DHCPConfiguration struct {
	Key *string `json:"key,omitempty"`
}

// +kubebuilder:skipversion
type DHCPOptions struct {
	DHCPOptionsID *string `json:"dhcpOptionsID,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type DNSEntry struct {
	DNSName *string `json:"dnsName,omitempty"`

	HostedZoneID *string `json:"hostedZoneID,omitempty"`
}

// +kubebuilder:skipversion
type DNSServersOptionsModifyStructure struct {
	CustomDNSServers []*string `json:"customDNSServers,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type DeleteFleetError struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type DeleteLaunchTemplateVersionsResponseErrorItem struct {
	LaunchTemplateID *string `json:"launchTemplateID,omitempty"`

	LaunchTemplateName *string `json:"launchTemplateName,omitempty"`
}

// +kubebuilder:skipversion
type DeleteLaunchTemplateVersionsResponseSuccessItem struct {
	LaunchTemplateID *string `json:"launchTemplateID,omitempty"`

	LaunchTemplateName *string `json:"launchTemplateName,omitempty"`
}

// +kubebuilder:skipversion
type DeleteQueuedReservedInstancesError struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type DeregisterInstanceTagAttributeRequest struct {
	IncludeAllTagsOfInstance *bool `json:"includeAllTagsOfInstance,omitempty"`
}

// +kubebuilder:skipversion
type DescribeFastSnapshotRestoreSuccessItem struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	OwnerAlias *string `json:"ownerAlias,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	SnapshotID *string `json:"snapshotID,omitempty"`

	StateTransitionReason *string `json:"stateTransitionReason,omitempty"`
}

// +kubebuilder:skipversion
type DescribeFleetError struct {
	ErrorCode *string `json:"errorCode,omitempty"`

	ErrorMessage *string `json:"errorMessage,omitempty"`
}

// +kubebuilder:skipversion
type DirectoryServiceAuthentication struct {
	DirectoryID *string `json:"directoryID,omitempty"`
}

// +kubebuilder:skipversion
type DirectoryServiceAuthenticationRequest struct {
	DirectoryID *string `json:"directoryID,omitempty"`
}

// +kubebuilder:skipversion
type DisableFastSnapshotRestoreErrorItem struct {
	SnapshotID *string `json:"snapshotID,omitempty"`
}

// +kubebuilder:skipversion
type DisableFastSnapshotRestoreStateError struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type DisableFastSnapshotRestoreStateErrorItem struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
}

// +kubebuilder:skipversion
type DisableFastSnapshotRestoreSuccessItem struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	OwnerAlias *string `json:"ownerAlias,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	SnapshotID *string `json:"snapshotID,omitempty"`

	StateTransitionReason *string `json:"stateTransitionReason,omitempty"`
}

// +kubebuilder:skipversion
type DiskImage struct {
	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type DiskImageDescription struct {
	Checksum *string `json:"checksum,omitempty"`

	ImportManifestURL *string `json:"importManifestURL,omitempty"`
}

// +kubebuilder:skipversion
type DiskImageDetail struct {
	ImportManifestURL *string `json:"importManifestURL,omitempty"`
}

// +kubebuilder:skipversion
type DiskImageVolumeDescription struct {
	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type EBSBlockDevice struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	OutpostARN *string `json:"outpostARN,omitempty"`

	SnapshotID *string `json:"snapshotID,omitempty"`
}

// +kubebuilder:skipversion
type EBSInstanceBlockDevice struct {
	AttachTime *metav1.Time `json:"attachTime,omitempty"`

	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	VolumeID *string `json:"volumeID,omitempty"`
}

// +kubebuilder:skipversion
type EBSInstanceBlockDeviceSpecification struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`
}

// +kubebuilder:skipversion
type EgressOnlyInternetGateway struct {
	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ElasticGPUAssociation struct {
	ElasticGPUAssociationID *string `json:"elasticGPUAssociationID,omitempty"`

	ElasticGPUAssociationState *string `json:"elasticGPUAssociationState,omitempty"`

	ElasticGPUAssociationTime *string `json:"elasticGPUAssociationTime,omitempty"`

	ElasticGPUID *string `json:"elasticGPUID,omitempty"`
}

// +kubebuilder:skipversion
type ElasticGPUSpecification struct {
	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type ElasticGPUSpecificationResponse struct {
	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type ElasticGPUs struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	ElasticGPUID *string `json:"elasticGPUID,omitempty"`

	ElasticGPUType *string `json:"elasticGPUType,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ElasticInferenceAccelerator struct {
	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type ElasticInferenceAcceleratorAssociation struct {
	ElasticInferenceAcceleratorARN *string `json:"elasticInferenceAcceleratorARN,omitempty"`

	ElasticInferenceAcceleratorAssociationID *string `json:"elasticInferenceAcceleratorAssociationID,omitempty"`

	ElasticInferenceAcceleratorAssociationState *string `json:"elasticInferenceAcceleratorAssociationState,omitempty"`

	ElasticInferenceAcceleratorAssociationTime *metav1.Time `json:"elasticInferenceAcceleratorAssociationTime,omitempty"`
}

// +kubebuilder:skipversion
type EnableFastSnapshotRestoreErrorItem struct {
	SnapshotID *string `json:"snapshotID,omitempty"`
}

// +kubebuilder:skipversion
type EnableFastSnapshotRestoreStateError struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type EnableFastSnapshotRestoreStateErrorItem struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
}

// +kubebuilder:skipversion
type EnableFastSnapshotRestoreSuccessItem struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	OwnerAlias *string `json:"ownerAlias,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	SnapshotID *string `json:"snapshotID,omitempty"`

	StateTransitionReason *string `json:"stateTransitionReason,omitempty"`
}

// +kubebuilder:skipversion
type EnclaveOptions struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type EnclaveOptionsRequest struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type EventInformation struct {
	EventDescription *string `json:"eventDescription,omitempty"`

	EventSubType *string `json:"eventSubType,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`
}

// +kubebuilder:skipversion
type Explanation struct {
	AvailabilityZones []*string `json:"availabilityZones,omitempty"`

	CIDRs []*string `json:"cidrs,omitempty"`

	Direction *string `json:"direction,omitempty"`

	ExplanationCode *string `json:"explanationCode,omitempty"`

	MissingComponent *string `json:"missingComponent,omitempty"`

	PacketField *string `json:"packetField,omitempty"`

	State *string `json:"state,omitempty"`
}

// +kubebuilder:skipversion
type ExportImageTask struct {
	Description *string `json:"description,omitempty"`

	ExportImageTaskID *string `json:"exportImageTaskID,omitempty"`

	ImageID *string `json:"imageID,omitempty"`

	Progress *string `json:"progress,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ExportTask struct {
	Description *string `json:"description,omitempty"`

	ExportTaskID *string `json:"exportTaskID,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ExportTaskS3Location struct {
	S3Bucket *string `json:"s3Bucket,omitempty"`

	S3Prefix *string `json:"s3Prefix,omitempty"`
}

// +kubebuilder:skipversion
type ExportTaskS3LocationRequest struct {
	S3Bucket *string `json:"s3Bucket,omitempty"`

	S3Prefix *string `json:"s3Prefix,omitempty"`
}

// +kubebuilder:skipversion
type ExportToS3Task struct {
	S3Bucket *string `json:"s3Bucket,omitempty"`

	S3Key *string `json:"s3Key,omitempty"`
}

// +kubebuilder:skipversion
type ExportToS3TaskSpecification struct {
	S3Bucket *string `json:"s3Bucket,omitempty"`

	S3Prefix *string `json:"s3Prefix,omitempty"`
}

// +kubebuilder:skipversion
type FPGAImage struct {
	CreateTime *metav1.Time `json:"createTime,omitempty"`

	DataRetentionSupport *bool `json:"dataRetentionSupport,omitempty"`

	Description *string `json:"description,omitempty"`

	FPGAImageGlobalID *string `json:"fpgaImageGlobalID,omitempty"`

	FPGAImageID *string `json:"fpgaImageID,omitempty"`

	Name *string `json:"name,omitempty"`

	OwnerAlias *string `json:"ownerAlias,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Public *bool `json:"public,omitempty"`

	ShellVersion *string `json:"shellVersion,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	UpdateTime *metav1.Time `json:"updateTime,omitempty"`
}

// +kubebuilder:skipversion
type FPGAImageAttribute struct {
	Description *string `json:"description,omitempty"`

	FPGAImageID *string `json:"fpgaImageID,omitempty"`

	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type FPGAImageState struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type FailedQueuedPurchaseDeletion struct {
	ReservedInstancesID *string `json:"reservedInstancesID,omitempty"`
}

// +kubebuilder:skipversion
type FederatedAuthentication struct {
	SamlProviderARN *string `json:"samlProviderARN,omitempty"`

	SelfServiceSamlProviderARN *string `json:"selfServiceSamlProviderARN,omitempty"`
}

// +kubebuilder:skipversion
type FederatedAuthenticationRequest struct {
	SAMLProviderARN *string `json:"sAMLProviderARN,omitempty"`

	SelfServiceSAMLProviderARN *string `json:"selfServiceSAMLProviderARN,omitempty"`
}

// +kubebuilder:skipversion
type Filter struct {
	Name *string `json:"name,omitempty"`

	Values []*string `json:"values,omitempty"`
}

// +kubebuilder:skipversion
type FleetData struct {
	ClientToken *string `json:"clientToken,omitempty"`

	CreateTime *metav1.Time `json:"createTime,omitempty"`

	ReplaceUnhealthyInstances *bool `json:"replaceUnhealthyInstances,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TerminateInstancesWithExpiration *bool `json:"terminateInstancesWithExpiration,omitempty"`

	ValidFrom *metav1.Time `json:"validFrom,omitempty"`

	ValidUntil *metav1.Time `json:"validUntil,omitempty"`
}

// +kubebuilder:skipversion
type FleetLaunchTemplateOverrides struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	MaxPrice *string `json:"maxPrice,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`
}

// +kubebuilder:skipversion
type FleetLaunchTemplateOverridesRequest struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	MaxPrice *string `json:"maxPrice,omitempty"`
}

// +kubebuilder:skipversion
type FleetLaunchTemplateSpecification struct {
	LaunchTemplateID *string `json:"launchTemplateID,omitempty"`

	Version *string `json:"version,omitempty"`
}

// +kubebuilder:skipversion
type FleetLaunchTemplateSpecificationRequest struct {
	Version *string `json:"version,omitempty"`
}

// +kubebuilder:skipversion
type FlowLog struct {
	DeliverLogsErrorMessage *string `json:"deliverLogsErrorMessage,omitempty"`

	DeliverLogsPermissionARN *string `json:"deliverLogsPermissionARN,omitempty"`

	DeliverLogsStatus *string `json:"deliverLogsStatus,omitempty"`

	FlowLogID *string `json:"flowLogID,omitempty"`

	FlowLogStatus *string `json:"flowLogStatus,omitempty"`

	LogDestination *string `json:"logDestination,omitempty"`

	LogFormat *string `json:"logFormat,omitempty"`

	LogGroupName *string `json:"logGroupName,omitempty"`

	ResourceID *string `json:"resourceID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type GroupIdentifier struct {
	GroupID *string `json:"groupID,omitempty"`

	GroupName *string `json:"groupName,omitempty"`
}

// +kubebuilder:skipversion
type HibernationOptions struct {
	Configured *bool `json:"configured,omitempty"`
}

// +kubebuilder:skipversion
type HibernationOptionsRequest struct {
	Configured *bool `json:"configured,omitempty"`
}

// +kubebuilder:skipversion
type HistoryRecord struct {
	Timestamp *metav1.Time `json:"timestamp,omitempty"`
}

// +kubebuilder:skipversion
type HistoryRecordEntry struct {
	Timestamp *metav1.Time `json:"timestamp,omitempty"`
}

// +kubebuilder:skipversion
type Host struct {
	AllocationTime *metav1.Time `json:"allocationTime,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	AvailabilityZoneID *string `json:"availabilityZoneID,omitempty"`

	ClientToken *string `json:"clientToken,omitempty"`

	HostID *string `json:"hostID,omitempty"`

	HostReservationID *string `json:"hostReservationID,omitempty"`

	MemberOfServiceLinkedResourceGroup *bool `json:"memberOfServiceLinkedResourceGroup,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	ReleaseTime *metav1.Time `json:"releaseTime,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type HostInstance struct {
	InstanceID *string `json:"instanceID,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`
}

// +kubebuilder:skipversion
type HostOffering struct {
	HourlyPrice *string `json:"hourlyPrice,omitempty"`

	InstanceFamily *string `json:"instanceFamily,omitempty"`

	OfferingID *string `json:"offeringID,omitempty"`

	UpfrontPrice *string `json:"upfrontPrice,omitempty"`
}

// +kubebuilder:skipversion
type HostProperties struct {
	InstanceFamily *string `json:"instanceFamily,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`
}

// +kubebuilder:skipversion
type HostReservation struct {
	End *metav1.Time `json:"end,omitempty"`

	HostReservationID *string `json:"hostReservationID,omitempty"`

	HourlyPrice *string `json:"hourlyPrice,omitempty"`

	InstanceFamily *string `json:"instanceFamily,omitempty"`

	OfferingID *string `json:"offeringID,omitempty"`

	Start *metav1.Time `json:"start,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	UpfrontPrice *string `json:"upfrontPrice,omitempty"`
}

// +kubebuilder:skipversion
type IAMInstanceProfile struct {
	ARN *string `json:"arn,omitempty"`

	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type IAMInstanceProfileAssociation struct {
	AssociationID *string `json:"associationID,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`

	Timestamp *metav1.Time `json:"timestamp,omitempty"`
}

// +kubebuilder:skipversion
type IAMInstanceProfileSpecification struct {
	ARN *string `json:"arn,omitempty"`

	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type IDFormat struct {
	Deadline *metav1.Time `json:"deadline,omitempty"`

	Resource *string `json:"resource,omitempty"`

	UseLongIDs *bool `json:"useLongIDs,omitempty"`
}

// +kubebuilder:skipversion
type IKEVersionsListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type IKEVersionsRequestListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type IPPermission struct {
	IPProtocol *string `json:"ipProtocol,omitempty"`
}

// +kubebuilder:skipversion
type IPRange struct {
	CIDRIP *string `json:"cidrIP,omitempty"`

	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type IPv6CIDRAssociation struct {
	AssociatedResource *string `json:"associatedResource,omitempty"`

	IPv6CIDR *string `json:"ipv6CIDR,omitempty"`
}

// +kubebuilder:skipversion
type IPv6CIDRBlock struct {
	IPv6CIDRBlock *string `json:"ipv6CIDRBlock,omitempty"`
}

// +kubebuilder:skipversion
type IPv6Pool struct {
	Description *string `json:"description,omitempty"`

	PoolID *string `json:"poolID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type IPv6Range struct {
	CIDRIPv6 *string `json:"cidrIPv6,omitempty"`

	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type Image struct {
	CreationDate *string `json:"creationDate,omitempty"`

	Description *string `json:"description,omitempty"`

	ENASupport *bool `json:"enaSupport,omitempty"`

	ImageID *string `json:"imageID,omitempty"`

	ImageLocation *string `json:"imageLocation,omitempty"`

	ImageOwnerAlias *string `json:"imageOwnerAlias,omitempty"`

	KernelID *string `json:"kernelID,omitempty"`

	Name *string `json:"name,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	PlatformDetails *string `json:"platformDetails,omitempty"`

	Public *bool `json:"public,omitempty"`

	RamdiskID *string `json:"ramdiskID,omitempty"`

	RootDeviceName *string `json:"rootDeviceName,omitempty"`

	SriovNetSupport *string `json:"sriovNetSupport,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	UsageOperation *string `json:"usageOperation,omitempty"`
}

// +kubebuilder:skipversion
type ImageDiskContainer struct {
	Description *string `json:"description,omitempty"`

	DeviceName *string `json:"deviceName,omitempty"`

	Format *string `json:"format,omitempty"`

	URL *string `json:"url,omitempty"`
}

// +kubebuilder:skipversion
type ImportImageLicenseConfigurationRequest struct {
	LicenseConfigurationARN *string `json:"licenseConfigurationARN,omitempty"`
}

// +kubebuilder:skipversion
type ImportImageLicenseConfigurationResponse struct {
	LicenseConfigurationARN *string `json:"licenseConfigurationARN,omitempty"`
}

// +kubebuilder:skipversion
type ImportImageTask struct {
	Architecture *string `json:"architecture,omitempty"`

	Description *string `json:"description,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty"`

	Hypervisor *string `json:"hypervisor,omitempty"`

	ImageID *string `json:"imageID,omitempty"`

	ImportTaskID *string `json:"importTaskID,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	LicenseType *string `json:"licenseType,omitempty"`

	Platform *string `json:"platform,omitempty"`

	Progress *string `json:"progress,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ImportInstanceLaunchSpecification struct {
	AdditionalInfo *string `json:"additionalInfo,omitempty"`

	Monitoring *bool `json:"monitoring,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
}

// +kubebuilder:skipversion
type ImportInstanceTaskDetails struct {
	Description *string `json:"description,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`
}

// +kubebuilder:skipversion
type ImportInstanceVolumeDetailItem struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	Description *string `json:"description,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`
}

// +kubebuilder:skipversion
type ImportSnapshotTask struct {
	Description *string `json:"description,omitempty"`

	ImportTaskID *string `json:"importTaskID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ImportVolumeTaskDetails struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type InstanceBlockDeviceMapping struct {
	DeviceName *string `json:"deviceName,omitempty"`
}

// +kubebuilder:skipversion
type InstanceBlockDeviceMappingSpecification struct {
	DeviceName *string `json:"deviceName,omitempty"`

	NoDevice *string `json:"noDevice,omitempty"`

	VirtualName *string `json:"virtualName,omitempty"`
}

// +kubebuilder:skipversion
type InstanceCapacity struct {
	InstanceType *string `json:"instanceType,omitempty"`
}

// +kubebuilder:skipversion
type InstanceCreditSpecification struct {
	CPUCredits *string `json:"cpuCredits,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`
}

// +kubebuilder:skipversion
type InstanceCreditSpecificationRequest struct {
	CPUCredits *string `json:"cpuCredits,omitempty"`
}

// +kubebuilder:skipversion
type InstanceExportDetails struct {
	InstanceID *string `json:"instanceID,omitempty"`
}

// +kubebuilder:skipversion
type InstanceFamilyCreditSpecification struct {
	CPUCredits *string `json:"cpuCredits,omitempty"`
}

// +kubebuilder:skipversion
type InstanceIPv6Address struct {
	IPv6Address *string `json:"ipv6Address,omitempty"`
}

// +kubebuilder:skipversion
type InstanceIPv6AddressRequest struct {
	IPv6Address *string `json:"ipv6Address,omitempty"`
}

// +kubebuilder:skipversion
type InstanceMonitoring struct {
	InstanceID *string `json:"instanceID,omitempty"`
}

// +kubebuilder:skipversion
type InstanceNetworkInterface struct {
	Description *string `json:"description,omitempty"`

	InterfaceType *string `json:"interfaceType,omitempty"`

	MacAddress *string `json:"macAddress,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	PrivateDNSName *string `json:"privateDNSName,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	SourceDestCheck *bool `json:"sourceDestCheck,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type InstanceNetworkInterfaceAssociation struct {
	CarrierIP *string `json:"carrierIP,omitempty"`

	IPOwnerID *string `json:"ipOwnerID,omitempty"`

	PublicDNSName *string `json:"publicDNSName,omitempty"`

	PublicIP *string `json:"publicIP,omitempty"`
}

// +kubebuilder:skipversion
type InstanceNetworkInterfaceAttachment struct {
	AttachTime *metav1.Time `json:"attachTime,omitempty"`

	AttachmentID *string `json:"attachmentID,omitempty"`

	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`
}

// +kubebuilder:skipversion
type InstanceNetworkInterfaceSpecification struct {
	AssociateCarrierIPAddress *bool `json:"associateCarrierIPAddress,omitempty"`

	AssociatePublicIPAddress *bool `json:"associatePublicIPAddress,omitempty"`

	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	Description *string `json:"description,omitempty"`

	InterfaceType *string `json:"interfaceType,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`
}

// +kubebuilder:skipversion
type InstancePrivateIPAddress struct {
	Primary *bool `json:"primary,omitempty"`

	PrivateDNSName *string `json:"privateDNSName,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
}

// +kubebuilder:skipversion
type InstanceSpecification struct {
	ExcludeBootVolume *bool `json:"excludeBootVolume,omitempty"`
}

// +kubebuilder:skipversion
type InstanceStateChange struct {
	InstanceID *string `json:"instanceID,omitempty"`
}

// +kubebuilder:skipversion
type InstanceStatus struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`

	OutpostARN *string `json:"outpostARN,omitempty"`
}

// +kubebuilder:skipversion
type InstanceStatusDetails struct {
	ImpairedSince *metav1.Time `json:"impairedSince,omitempty"`
}

// +kubebuilder:skipversion
type InstanceStatusEvent struct {
	Description *string `json:"description,omitempty"`

	NotAfter *metav1.Time `json:"notAfter,omitempty"`

	NotBefore *metav1.Time `json:"notBefore,omitempty"`

	NotBeforeDeadline *metav1.Time `json:"notBeforeDeadline,omitempty"`
}

// +kubebuilder:skipversion
type InstanceTagNotificationAttribute struct {
	IncludeAllTagsOfInstance *bool `json:"includeAllTagsOfInstance,omitempty"`
}

// +kubebuilder:skipversion
type InstanceUsage struct {
	AccountID *string `json:"accountID,omitempty"`
}

// +kubebuilder:skipversion
type InternetGateway struct {
	InternetGatewayID *string `json:"internetGatewayID,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type InternetGatewayAttachment struct {
	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type KeyPairInfo struct {
	KeyFingerprint *string `json:"keyFingerprint,omitempty"`

	KeyName *string `json:"keyName,omitempty"`

	KeyPairID *string `json:"keyPairID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type LastError struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type LaunchPermission struct {
	UserID *string `json:"userID,omitempty"`
}

// +kubebuilder:skipversion
type LaunchSpecification struct {
	AddressingType *string `json:"addressingType,omitempty"`

	EBSOptimized *bool `json:"ebsOptimized,omitempty"`

	ImageID *string `json:"imageID,omitempty"`

	KernelID *string `json:"kernelID,omitempty"`

	KeyName *string `json:"keyName,omitempty"`

	RamdiskID *string `json:"ramdiskID,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`

	UserData *string `json:"userData,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplate struct {
	CreateTime *metav1.Time `json:"createTime,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty"`

	LaunchTemplateID *string `json:"launchTemplateID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateBlockDeviceMapping struct {
	DeviceName *string `json:"deviceName,omitempty"`

	NoDevice *string `json:"noDevice,omitempty"`

	VirtualName *string `json:"virtualName,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateBlockDeviceMappingRequest struct {
	DeviceName *string `json:"deviceName,omitempty"`

	NoDevice *string `json:"noDevice,omitempty"`

	VirtualName *string `json:"virtualName,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateEBSBlockDevice struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateEBSBlockDeviceRequest struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateElasticInferenceAccelerator struct {
	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateElasticInferenceAcceleratorResponse struct {
	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateEnclaveOptions struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateEnclaveOptionsRequest struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateHibernationOptions struct {
	Configured *bool `json:"configured,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateHibernationOptionsRequest struct {
	Configured *bool `json:"configured,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateIAMInstanceProfileSpecification struct {
	ARN *string `json:"arn,omitempty"`

	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateIAMInstanceProfileSpecificationRequest struct {
	ARN *string `json:"arn,omitempty"`

	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateInstanceNetworkInterfaceSpecification struct {
	AssociateCarrierIPAddress *bool `json:"associateCarrierIPAddress,omitempty"`

	AssociatePublicIPAddress *bool `json:"associatePublicIPAddress,omitempty"`

	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	Description *string `json:"description,omitempty"`

	InterfaceType *string `json:"interfaceType,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateInstanceNetworkInterfaceSpecificationRequest struct {
	AssociateCarrierIPAddress *bool `json:"associateCarrierIPAddress,omitempty"`

	AssociatePublicIPAddress *bool `json:"associatePublicIPAddress,omitempty"`

	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	Description *string `json:"description,omitempty"`

	InterfaceType *string `json:"interfaceType,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateLicenseConfiguration struct {
	LicenseConfigurationARN *string `json:"licenseConfigurationARN,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateLicenseConfigurationRequest struct {
	LicenseConfigurationARN *string `json:"licenseConfigurationARN,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateOverrides struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	SpotPrice *string `json:"spotPrice,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplatePlacement struct {
	Affinity *string `json:"affinity,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	GroupName *string `json:"groupName,omitempty"`

	HostID *string `json:"hostID,omitempty"`

	HostResourceGroupARN *string `json:"hostResourceGroupARN,omitempty"`

	SpreadDomain *string `json:"spreadDomain,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplatePlacementRequest struct {
	Affinity *string `json:"affinity,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	HostResourceGroupARN *string `json:"hostResourceGroupARN,omitempty"`

	SpreadDomain *string `json:"spreadDomain,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateSpecification struct {
	LaunchTemplateName *string `json:"launchTemplateName,omitempty"`

	Version *string `json:"version,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateSpotMarketOptions struct {
	MaxPrice *string `json:"maxPrice,omitempty"`

	ValidUntil *metav1.Time `json:"validUntil,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateSpotMarketOptionsRequest struct {
	MaxPrice *string `json:"maxPrice,omitempty"`

	ValidUntil *metav1.Time `json:"validUntil,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateTagSpecification struct {
	ResourceType *string `json:"resourceType,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateTagSpecificationRequest struct {
	ResourceType *string `json:"resourceType,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplateVersion struct {
	CreateTime *metav1.Time `json:"createTime,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty"`

	DefaultVersion *bool `json:"defaultVersion,omitempty"`

	LaunchTemplateID *string `json:"launchTemplateID,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplatesMonitoring struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type LaunchTemplatesMonitoringRequest struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type LicenseConfiguration struct {
	LicenseConfigurationARN *string `json:"licenseConfigurationARN,omitempty"`
}

// +kubebuilder:skipversion
type LicenseConfigurationRequest struct {
	LicenseConfigurationARN *string `json:"licenseConfigurationARN,omitempty"`
}

// +kubebuilder:skipversion
type LoadPermission struct {
	UserID *string `json:"userID,omitempty"`
}

// +kubebuilder:skipversion
type LoadPermissionRequest struct {
	UserID *string `json:"userID,omitempty"`
}

// +kubebuilder:skipversion
type LocalGateway struct {
	OutpostARN *string `json:"outpostARN,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	State *string `json:"state,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type LocalGatewayRoute struct {
	DestinationCIDRBlock *string `json:"destinationCIDRBlock,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`
}

// +kubebuilder:skipversion
type LocalGatewayRouteTable struct {
	LocalGatewayRouteTableID *string `json:"localGatewayRouteTableID,omitempty"`

	OutpostARN *string `json:"outpostARN,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	State *string `json:"state,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type LocalGatewayRouteTableVPCAssociation struct {
	LocalGatewayID *string `json:"localGatewayID,omitempty"`

	LocalGatewayRouteTableID *string `json:"localGatewayRouteTableID,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	State *string `json:"state,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type LocalGatewayRouteTableVirtualInterfaceGroupAssociation struct {
	LocalGatewayID *string `json:"localGatewayID,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	State *string `json:"state,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type LocalGatewayVirtualInterface struct {
	LocalAddress *string `json:"localAddress,omitempty"`

	LocalGatewayID *string `json:"localGatewayID,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	PeerAddress *string `json:"peerAddress,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type LocalGatewayVirtualInterfaceGroup struct {
	LocalGatewayID *string `json:"localGatewayID,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ManagedPrefixList struct {
	AddressFamily *string `json:"addressFamily,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	PrefixListName *string `json:"prefixListName,omitempty"`

	StateMessage *string `json:"stateMessage,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ModifyVPNTunnelOptionsSpecification struct {
	DPDTimeoutAction *string `json:"dpdTimeoutAction,omitempty"`

	PreSharedKey *string `json:"preSharedKey,omitempty"`

	StartupAction *string `json:"startupAction,omitempty"`

	TunnelInsideCIDR *string `json:"tunnelInsideCIDR,omitempty"`

	TunnelInsideIPv6CIDR *string `json:"tunnelInsideIPv6CIDR,omitempty"`
}

// +kubebuilder:skipversion
type MovingAddressStatus struct {
	PublicIP *string `json:"publicIP,omitempty"`
}

// +kubebuilder:skipversion
type NATGateway struct {
	CreateTime *metav1.Time `json:"createTime,omitempty"`

	DeleteTime *metav1.Time `json:"deleteTime,omitempty"`

	FailureCode *string `json:"failureCode,omitempty"`

	FailureMessage *string `json:"failureMessage,omitempty"`

	NATGatewayID *string `json:"natGatewayID,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type NATGatewayAddress struct {
	AllocationID *string `json:"allocationID,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	PrivateIP *string `json:"privateIP,omitempty"`

	PublicIP *string `json:"publicIP,omitempty"`
}

// +kubebuilder:skipversion
type NetworkACL struct {
	IsDefault *bool `json:"isDefault,omitempty"`

	NetworkACLID *string `json:"networkACLID,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type NetworkACLAssociation struct {
	NetworkACLAssociationID *string `json:"networkACLAssociationID,omitempty"`

	NetworkACLID *string `json:"networkACLID,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`
}

// +kubebuilder:skipversion
type NetworkACLEntry struct {
	CIDRBlock *string `json:"cidrBlock,omitempty"`

	Egress *bool `json:"egress,omitempty"`

	IPv6CIDRBlock *string `json:"ipv6CIDRBlock,omitempty"`

	Protocol *string `json:"protocol,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInsightsAnalysis struct {
	NetworkPathFound *bool `json:"networkPathFound,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInsightsPath struct {
	Destination *string `json:"destination,omitempty"`

	Source *string `json:"source,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInterface struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	Description *string `json:"description,omitempty"`

	MacAddress *string `json:"macAddress,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	OutpostARN *string `json:"outpostARN,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	PrivateDNSName *string `json:"privateDNSName,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`

	RequesterID *string `json:"requesterID,omitempty"`

	RequesterManaged *bool `json:"requesterManaged,omitempty"`

	SourceDestCheck *bool `json:"sourceDestCheck,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`

	TagSet []*Tag `json:"tagSet,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInterfaceAssociation struct {
	AllocationID *string `json:"allocationID,omitempty"`

	AssociationID *string `json:"associationID,omitempty"`

	CarrierIP *string `json:"carrierIP,omitempty"`

	CustomerOwnedIP *string `json:"customerOwnedIP,omitempty"`

	IPOwnerID *string `json:"ipOwnerID,omitempty"`

	PublicDNSName *string `json:"publicDNSName,omitempty"`

	PublicIP *string `json:"publicIP,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInterfaceAttachment struct {
	AttachTime *metav1.Time `json:"attachTime,omitempty"`

	AttachmentID *string `json:"attachmentID,omitempty"`

	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`

	InstanceOwnerID *string `json:"instanceOwnerID,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInterfaceAttachmentChanges struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInterfaceIPv6Address struct {
	IPv6Address *string `json:"ipv6Address,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInterfacePermission struct {
	AWSAccountID *string `json:"awsAccountID,omitempty"`

	AWSService *string `json:"awsService,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	NetworkInterfacePermissionID *string `json:"networkInterfacePermissionID,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInterfacePermissionState struct {
	StatusMessage *string `json:"statusMessage,omitempty"`
}

// +kubebuilder:skipversion
type NetworkInterfacePrivateIPAddress struct {
	Primary *bool `json:"primary,omitempty"`

	PrivateDNSName *string `json:"privateDNSName,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
}

// +kubebuilder:skipversion
type NewDHCPConfiguration struct {
	Key *string `json:"key,omitempty"`

	Values []*string `json:"values,omitempty"`
}

// +kubebuilder:skipversion
type OnDemandOptions struct {
	MaxTotalPrice *string `json:"maxTotalPrice,omitempty"`

	SingleAvailabilityZone *bool `json:"singleAvailabilityZone,omitempty"`

	SingleInstanceType *bool `json:"singleInstanceType,omitempty"`
}

// +kubebuilder:skipversion
type OnDemandOptionsRequest struct {
	MaxTotalPrice *string `json:"maxTotalPrice,omitempty"`

	SingleAvailabilityZone *bool `json:"singleAvailabilityZone,omitempty"`

	SingleInstanceType *bool `json:"singleInstanceType,omitempty"`
}

// +kubebuilder:skipversion
type PciID struct {
	DeviceID *string `json:"deviceID,omitempty"`

	SubsystemID *string `json:"subsystemID,omitempty"`

	SubsystemVendorID *string `json:"subsystemVendorID,omitempty"`

	VendorID *string `json:"vendorID,omitempty"`
}

// +kubebuilder:skipversion
type PeeringAttachmentStatus struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type PeeringConnectionOptions struct {
	AllowDNSResolutionFromRemoteVPC *bool `json:"allowDNSResolutionFromRemoteVPC,omitempty"`

	AllowEgressFromLocalClassicLinkToRemoteVPC *bool `json:"allowEgressFromLocalClassicLinkToRemoteVPC,omitempty"`

	AllowEgressFromLocalVPCToRemoteClassicLink *bool `json:"allowEgressFromLocalVPCToRemoteClassicLink,omitempty"`
}

// +kubebuilder:skipversion
type PeeringConnectionOptionsRequest struct {
	AllowDNSResolutionFromRemoteVPC *bool `json:"allowDNSResolutionFromRemoteVPC,omitempty"`

	AllowEgressFromLocalClassicLinkToRemoteVPC *bool `json:"allowEgressFromLocalClassicLinkToRemoteVPC,omitempty"`

	AllowEgressFromLocalVPCToRemoteClassicLink *bool `json:"allowEgressFromLocalVPCToRemoteClassicLink,omitempty"`
}

// +kubebuilder:skipversion
type PeeringTgwInfo struct {
	OwnerID *string `json:"ownerID,omitempty"`

	Region *string `json:"region,omitempty"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty"`
}

// +kubebuilder:skipversion
type Phase1EncryptionAlgorithmsListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Phase1EncryptionAlgorithmsRequestListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Phase1IntegrityAlgorithmsListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Phase1IntegrityAlgorithmsRequestListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Phase2EncryptionAlgorithmsListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Phase2EncryptionAlgorithmsRequestListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Phase2IntegrityAlgorithmsListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Phase2IntegrityAlgorithmsRequestListValue struct {
	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Placement struct {
	Affinity *string `json:"affinity,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	GroupName *string `json:"groupName,omitempty"`

	HostID *string `json:"hostID,omitempty"`

	HostResourceGroupARN *string `json:"hostResourceGroupARN,omitempty"`

	SpreadDomain *string `json:"spreadDomain,omitempty"`
}

// +kubebuilder:skipversion
type PlacementGroup struct {
	GroupID *string `json:"groupID,omitempty"`

	GroupName *string `json:"groupName,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type PlacementResponse struct {
	GroupName *string `json:"groupName,omitempty"`
}

// +kubebuilder:skipversion
type PoolCIDRBlock struct {
	CIDR *string `json:"cidr,omitempty"`
}

// +kubebuilder:skipversion
type PrefixList struct {
	CIDRs []*string `json:"cidrs,omitempty"`

	PrefixListID *string `json:"prefixListID,omitempty"`

	PrefixListName *string `json:"prefixListName,omitempty"`
}

// +kubebuilder:skipversion
type PrefixListAssociation struct {
	ResourceID *string `json:"resourceID,omitempty"`

	ResourceOwner *string `json:"resourceOwner,omitempty"`
}

// +kubebuilder:skipversion
type PrefixListEntry struct {
	CIDR *string `json:"cidr,omitempty"`

	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type PrefixListID struct {
	Description *string `json:"description,omitempty"`

	PrefixListID *string `json:"prefixListID,omitempty"`
}

// +kubebuilder:skipversion
type PriceSchedule struct {
	Active *bool `json:"active,omitempty"`
}

// +kubebuilder:skipversion
type PrincipalIDFormat struct {
	ARN *string `json:"arn,omitempty"`
}

// +kubebuilder:skipversion
type PrivateDNSDetails struct {
	PrivateDNSName *string `json:"privateDNSName,omitempty"`
}

// +kubebuilder:skipversion
type PrivateDNSNameConfiguration struct {
	Name *string `json:"name,omitempty"`

	Type *string `json:"type_,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type PrivateIPAddressSpecification struct {
	Primary *bool `json:"primary,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
}

// +kubebuilder:skipversion
type ProductCode struct {
	ProductCodeID *string `json:"productCodeID,omitempty"`
}

// +kubebuilder:skipversion
type PropagatingVGW struct {
	GatewayID *string `json:"gatewayID,omitempty"`
}

// +kubebuilder:skipversion
type ProvisionedBandwidth struct {
	ProvisionTime *metav1.Time `json:"provisionTime,omitempty"`

	Provisioned *string `json:"provisioned,omitempty"`

	RequestTime *metav1.Time `json:"requestTime,omitempty"`

	Requested *string `json:"requested,omitempty"`

	Status *string `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type PtrUpdateStatus struct {
	Reason *string `json:"reason,omitempty"`

	Status *string `json:"status,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type PublicIPv4Pool struct {
	Description *string `json:"description,omitempty"`

	NetworkBorderGroup *string `json:"networkBorderGroup,omitempty"`

	PoolID *string `json:"poolID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type PublicIPv4PoolRange struct {
	FirstAddress *string `json:"firstAddress,omitempty"`

	LastAddress *string `json:"lastAddress,omitempty"`
}

// +kubebuilder:skipversion
type Purchase struct {
	HostReservationID *string `json:"hostReservationID,omitempty"`

	HourlyPrice *string `json:"hourlyPrice,omitempty"`

	InstanceFamily *string `json:"instanceFamily,omitempty"`

	UpfrontPrice *string `json:"upfrontPrice,omitempty"`
}

// +kubebuilder:skipversion
type PurchaseRequest struct {
	PurchaseToken *string `json:"purchaseToken,omitempty"`
}

// +kubebuilder:skipversion
type Region struct {
	Endpoint *string `json:"endpoint,omitempty"`

	OptInStatus *string `json:"optInStatus,omitempty"`

	RegionName *string `json:"regionName,omitempty"`
}

// +kubebuilder:skipversion
type RegisterInstanceTagAttributeRequest struct {
	IncludeAllTagsOfInstance *bool `json:"includeAllTagsOfInstance,omitempty"`
}

// +kubebuilder:skipversion
type RemovePrefixListEntry struct {
	CIDR *string `json:"cidr,omitempty"`
}

// +kubebuilder:skipversion
type RequestLaunchTemplateData struct {
	DisableAPITermination *bool `json:"disableAPITermination,omitempty"`

	EBSOptimized *bool `json:"ebsOptimized,omitempty"`

	UserData *string `json:"userData,omitempty"`
}

// +kubebuilder:skipversion
type RequestSpotLaunchSpecification struct {
	AddressingType *string `json:"addressingType,omitempty"`

	EBSOptimized *bool `json:"ebsOptimized,omitempty"`

	UserData *string `json:"userData,omitempty"`
}

// +kubebuilder:skipversion
type ReservationValue struct {
	HourlyPrice *string `json:"hourlyPrice,omitempty"`

	RemainingTotalValue *string `json:"remainingTotalValue,omitempty"`

	RemainingUpfrontValue *string `json:"remainingUpfrontValue,omitempty"`
}

// +kubebuilder:skipversion
type ReservedInstanceReservationValue struct {
	ReservedInstanceID *string `json:"reservedInstanceID,omitempty"`
}

// +kubebuilder:skipversion
type ReservedInstances struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	End *metav1.Time `json:"end,omitempty"`

	ReservedInstancesID *string `json:"reservedInstancesID,omitempty"`

	Start *metav1.Time `json:"start,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ReservedInstancesConfiguration struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	Platform *string `json:"platform,omitempty"`
}

// +kubebuilder:skipversion
type ReservedInstancesID struct {
	ReservedInstancesID *string `json:"reservedInstancesID,omitempty"`
}

// +kubebuilder:skipversion
type ReservedInstancesListing struct {
	ClientToken *string `json:"clientToken,omitempty"`

	CreateDate *metav1.Time `json:"createDate,omitempty"`

	ReservedInstancesID *string `json:"reservedInstancesID,omitempty"`

	ReservedInstancesListingID *string `json:"reservedInstancesListingID,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	UpdateDate *metav1.Time `json:"updateDate,omitempty"`
}

// +kubebuilder:skipversion
type ReservedInstancesModification struct {
	ClientToken *string `json:"clientToken,omitempty"`

	CreateDate *metav1.Time `json:"createDate,omitempty"`

	EffectiveDate *metav1.Time `json:"effectiveDate,omitempty"`

	ReservedInstancesModificationID *string `json:"reservedInstancesModificationID,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	UpdateDate *metav1.Time `json:"updateDate,omitempty"`
}

// +kubebuilder:skipversion
type ReservedInstancesModificationResult struct {
	ReservedInstancesID *string `json:"reservedInstancesID,omitempty"`
}

// +kubebuilder:skipversion
type ReservedInstancesOffering struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	Marketplace *bool `json:"marketplace,omitempty"`

	ReservedInstancesOfferingID *string `json:"reservedInstancesOfferingID,omitempty"`
}

// +kubebuilder:skipversion
type ResponseError struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type ResponseLaunchTemplateData struct {
	DisableAPITermination *bool `json:"disableAPITermination,omitempty"`

	EBSOptimized *bool `json:"ebsOptimized,omitempty"`

	ImageID *string `json:"imageID,omitempty"`

	KernelID *string `json:"kernelID,omitempty"`

	KeyName *string `json:"keyName,omitempty"`

	RamDiskID *string `json:"ramDiskID,omitempty"`

	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`

	SecurityGroups []*string `json:"securityGroups,omitempty"`

	UserData *string `json:"userData,omitempty"`
}

// +kubebuilder:skipversion
type Route struct {
	DestinationCIDRBlock *string `json:"destinationCIDRBlock,omitempty"`

	DestinationIPv6CIDRBlock *string `json:"destinationIPv6CIDRBlock,omitempty"`

	DestinationPrefixListID *string `json:"destinationPrefixListID,omitempty"`

	EgressOnlyInternetGatewayID *string `json:"egressOnlyInternetGatewayID,omitempty"`

	GatewayID *string `json:"gatewayID,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`

	InstanceOwnerID *string `json:"instanceOwnerID,omitempty"`

	LocalGatewayID *string `json:"localGatewayID,omitempty"`

	NATGatewayID *string `json:"natGatewayID,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty"`

	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionID,omitempty"`
}

// +kubebuilder:skipversion
type RouteTable struct {
	OwnerID *string `json:"ownerID,omitempty"`

	RouteTableID *string `json:"routeTableID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type RouteTableAssociation struct {
	GatewayID *string `json:"gatewayID,omitempty"`

	Main *bool `json:"main,omitempty"`

	RouteTableAssociationID *string `json:"routeTableAssociationID,omitempty"`

	RouteTableID *string `json:"routeTableID,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`
}

// +kubebuilder:skipversion
type RouteTableAssociationState struct {
	StatusMessage *string `json:"statusMessage,omitempty"`
}

// +kubebuilder:skipversion
type RunInstancesMonitoringEnabled struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type S3Storage struct {
	AWSAccessKeyID *string `json:"awsAccessKeyID,omitempty"`

	Bucket *string `json:"bucket,omitempty"`

	Prefix *string `json:"prefix,omitempty"`

	UploadPolicySignature *string `json:"uploadPolicySignature,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstance struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	CreateDate *metav1.Time `json:"createDate,omitempty"`

	HourlyPrice *string `json:"hourlyPrice,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	NetworkPlatform *string `json:"networkPlatform,omitempty"`

	NextSlotStartTime *metav1.Time `json:"nextSlotStartTime,omitempty"`

	Platform *string `json:"platform,omitempty"`

	PreviousSlotEndTime *metav1.Time `json:"previousSlotEndTime,omitempty"`

	ScheduledInstanceID *string `json:"scheduledInstanceID,omitempty"`

	TermEndDate *metav1.Time `json:"termEndDate,omitempty"`

	TermStartDate *metav1.Time `json:"termStartDate,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstanceAvailability struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	FirstSlotStartTime *metav1.Time `json:"firstSlotStartTime,omitempty"`

	HourlyPrice *string `json:"hourlyPrice,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	NetworkPlatform *string `json:"networkPlatform,omitempty"`

	Platform *string `json:"platform,omitempty"`

	PurchaseToken *string `json:"purchaseToken,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstanceRecurrence struct {
	Frequency *string `json:"frequency,omitempty"`

	OccurrenceRelativeToEnd *bool `json:"occurrenceRelativeToEnd,omitempty"`

	OccurrenceUnit *string `json:"occurrenceUnit,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstanceRecurrenceRequest struct {
	Frequency *string `json:"frequency,omitempty"`

	OccurrenceRelativeToEnd *bool `json:"occurrenceRelativeToEnd,omitempty"`

	OccurrenceUnit *string `json:"occurrenceUnit,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstancesBlockDeviceMapping struct {
	DeviceName *string `json:"deviceName,omitempty"`

	NoDevice *string `json:"noDevice,omitempty"`

	VirtualName *string `json:"virtualName,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstancesEBS struct {
	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty"`

	VolumeType *string `json:"volumeType,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstancesIAMInstanceProfile struct {
	ARN *string `json:"arn,omitempty"`

	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstancesLaunchSpecification struct {
	EBSOptimized *bool `json:"ebsOptimized,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	UserData *string `json:"userData,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstancesMonitoring struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstancesNetworkInterface struct {
	AssociatePublicIPAddress *bool `json:"associatePublicIPAddress,omitempty"`

	DeleteOnTermination *bool `json:"deleteOnTermination,omitempty"`

	Description *string `json:"description,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstancesPlacement struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`
}

// +kubebuilder:skipversion
type ScheduledInstancesPrivateIPAddressConfig struct {
	Primary *bool `json:"primary,omitempty"`

	PrivateIPAddress *string `json:"privateIPAddress,omitempty"`
}

// +kubebuilder:skipversion
type SecurityGroup struct {
	Description *string `json:"description,omitempty"`

	GroupID *string `json:"groupID,omitempty"`

	GroupName *string `json:"groupName,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type SecurityGroupIdentifier struct {
	GroupID *string `json:"groupID,omitempty"`

	GroupName *string `json:"groupName,omitempty"`
}

// +kubebuilder:skipversion
type SecurityGroupReference struct {
	GroupID *string `json:"groupID,omitempty"`

	ReferencingVPCID *string `json:"referencingVPCID,omitempty"`

	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionID,omitempty"`
}

// +kubebuilder:skipversion
type ServiceConfiguration struct {
	AcceptanceRequired *bool `json:"acceptanceRequired,omitempty"`

	AvailabilityZones []*string `json:"availabilityZones,omitempty"`

	BaseEndpointDNSNames []*string `json:"baseEndpointDNSNames,omitempty"`

	GatewayLoadBalancerARNs []*string `json:"gatewayLoadBalancerARNs,omitempty"`

	ManagesVPCEndpoints *bool `json:"managesVPCEndpoints,omitempty"`

	NetworkLoadBalancerARNs []*string `json:"networkLoadBalancerARNs,omitempty"`

	PrivateDNSName *string `json:"privateDNSName,omitempty"`

	ServiceID *string `json:"serviceID,omitempty"`

	ServiceName *string `json:"serviceName,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type ServiceDetail struct {
	AcceptanceRequired *bool `json:"acceptanceRequired,omitempty"`

	AvailabilityZones []*string `json:"availabilityZones,omitempty"`

	BaseEndpointDNSNames []*string `json:"baseEndpointDNSNames,omitempty"`

	ManagesVPCEndpoints *bool `json:"managesVPCEndpoints,omitempty"`

	Owner *string `json:"owner,omitempty"`

	PrivateDNSName *string `json:"privateDNSName,omitempty"`

	ServiceID *string `json:"serviceID,omitempty"`

	ServiceName *string `json:"serviceName,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCEndpointPolicySupported *bool `json:"vpcEndpointPolicySupported,omitempty"`
}

// +kubebuilder:skipversion
type SlotDateTimeRangeRequest struct {
	EarliestTime *metav1.Time `json:"earliestTime,omitempty"`

	LatestTime *metav1.Time `json:"latestTime,omitempty"`
}

// +kubebuilder:skipversion
type SlotStartTimeRangeRequest struct {
	EarliestTime *metav1.Time `json:"earliestTime,omitempty"`

	LatestTime *metav1.Time `json:"latestTime,omitempty"`
}

// +kubebuilder:skipversion
type SnapshotDetail struct {
	Description *string `json:"description,omitempty"`

	DeviceName *string `json:"deviceName,omitempty"`

	Format *string `json:"format,omitempty"`

	Progress *string `json:"progress,omitempty"`

	SnapshotID *string `json:"snapshotID,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	URL *string `json:"url,omitempty"`
}

// +kubebuilder:skipversion
type SnapshotDiskContainer struct {
	Description *string `json:"description,omitempty"`

	Format *string `json:"format,omitempty"`

	URL *string `json:"url,omitempty"`
}

// +kubebuilder:skipversion
type SnapshotInfo struct {
	Description *string `json:"description,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty"`

	OutpostARN *string `json:"outpostARN,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Progress *string `json:"progress,omitempty"`

	SnapshotID *string `json:"snapshotID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VolumeID *string `json:"volumeID,omitempty"`
}

// +kubebuilder:skipversion
type SnapshotTaskDetail struct {
	Description *string `json:"description,omitempty"`

	Encrypted *bool `json:"encrypted,omitempty"`

	Format *string `json:"format,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	Progress *string `json:"progress,omitempty"`

	SnapshotID *string `json:"snapshotID,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	URL *string `json:"url,omitempty"`
}

// +kubebuilder:skipversion
type SpotDatafeedSubscription struct {
	Bucket *string `json:"bucket,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Prefix *string `json:"prefix,omitempty"`
}

// +kubebuilder:skipversion
type SpotFleetLaunchSpecification struct {
	AddressingType *string `json:"addressingType,omitempty"`

	EBSOptimized *bool `json:"ebsOptimized,omitempty"`

	ImageID *string `json:"imageID,omitempty"`

	KernelID *string `json:"kernelID,omitempty"`

	KeyName *string `json:"keyName,omitempty"`

	RamdiskID *string `json:"ramdiskID,omitempty"`

	SpotPrice *string `json:"spotPrice,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`

	UserData *string `json:"userData,omitempty"`
}

// +kubebuilder:skipversion
type SpotFleetMonitoring struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type SpotFleetRequestConfig struct {
	SpotFleetRequestID *string `json:"spotFleetRequestID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type SpotFleetRequestConfigData struct {
	ClientToken *string `json:"clientToken,omitempty"`

	IAMFleetRole *string `json:"iamFleetRole,omitempty"`

	OnDemandMaxTotalPrice *string `json:"onDemandMaxTotalPrice,omitempty"`

	ReplaceUnhealthyInstances *bool `json:"replaceUnhealthyInstances,omitempty"`

	SpotMaxTotalPrice *string `json:"spotMaxTotalPrice,omitempty"`

	SpotPrice *string `json:"spotPrice,omitempty"`

	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`

	TerminateInstancesWithExpiration *bool `json:"terminateInstancesWithExpiration,omitempty"`

	ValidFrom *metav1.Time `json:"validFrom,omitempty"`

	ValidUntil *metav1.Time `json:"validUntil,omitempty"`
}

// +kubebuilder:skipversion
type SpotFleetTagSpecification struct {
	ResourceType *string `json:"resourceType,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type SpotInstanceRequest struct {
	ActualBlockHourlyPrice *string `json:"actualBlockHourlyPrice,omitempty"`

	AvailabilityZoneGroup *string `json:"availabilityZoneGroup,omitempty"`

	CreateTime *metav1.Time `json:"createTime,omitempty"`

	LaunchGroup *string `json:"launchGroup,omitempty"`

	LaunchedAvailabilityZone *string `json:"launchedAvailabilityZone,omitempty"`

	SpotInstanceRequestID *string `json:"spotInstanceRequestID,omitempty"`

	SpotPrice *string `json:"spotPrice,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	ValidFrom *metav1.Time `json:"validFrom,omitempty"`

	ValidUntil *metav1.Time `json:"validUntil,omitempty"`
}

// +kubebuilder:skipversion
type SpotInstanceStateFault struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type SpotInstanceStatus struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`

	UpdateTime *metav1.Time `json:"updateTime,omitempty"`
}

// +kubebuilder:skipversion
type SpotMarketOptions struct {
	MaxPrice *string `json:"maxPrice,omitempty"`

	ValidUntil *metav1.Time `json:"validUntil,omitempty"`
}

// +kubebuilder:skipversion
type SpotOptions struct {
	MaxTotalPrice *string `json:"maxTotalPrice,omitempty"`

	SingleAvailabilityZone *bool `json:"singleAvailabilityZone,omitempty"`

	SingleInstanceType *bool `json:"singleInstanceType,omitempty"`
}

// +kubebuilder:skipversion
type SpotOptionsRequest struct {
	MaxTotalPrice *string `json:"maxTotalPrice,omitempty"`

	SingleAvailabilityZone *bool `json:"singleAvailabilityZone,omitempty"`

	SingleInstanceType *bool `json:"singleInstanceType,omitempty"`
}

// +kubebuilder:skipversion
type SpotPlacement struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	GroupName *string `json:"groupName,omitempty"`
}

// +kubebuilder:skipversion
type SpotPrice struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	SpotPrice *string `json:"spotPrice,omitempty"`

	Timestamp *metav1.Time `json:"timestamp,omitempty"`
}

// +kubebuilder:skipversion
type StaleIPPermission struct {
	IPProtocol *string `json:"ipProtocol,omitempty"`
}

// +kubebuilder:skipversion
type StaleSecurityGroup struct {
	Description *string `json:"description,omitempty"`

	GroupID *string `json:"groupID,omitempty"`

	GroupName *string `json:"groupName,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type StateReason struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type StorageLocation struct {
	Bucket *string `json:"bucket,omitempty"`

	Key *string `json:"key,omitempty"`
}

// +kubebuilder:skipversion
type Subnet struct {
	AssignIPv6AddressOnCreation *bool `json:"assignIPv6AddressOnCreation,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	AvailabilityZoneID *string `json:"availabilityZoneID,omitempty"`

	CIDRBlock *string `json:"cidrBlock,omitempty"`

	DefaultForAZ *bool `json:"defaultForAZ,omitempty"`

	MapCustomerOwnedIPOnLaunch *bool `json:"mapCustomerOwnedIPOnLaunch,omitempty"`

	MapPublicIPOnLaunch *bool `json:"mapPublicIPOnLaunch,omitempty"`

	OutpostARN *string `json:"outpostARN,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	SubnetARN *string `json:"subnetARN,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type SubnetAssociation struct {
	SubnetID *string `json:"subnetID,omitempty"`
}

// +kubebuilder:skipversion
type SubnetCIDRBlockState struct {
	StatusMessage *string `json:"statusMessage,omitempty"`
}

// +kubebuilder:skipversion
type SubnetIPv6CIDRBlockAssociation struct {
	AssociationID *string `json:"associationID,omitempty"`

	IPv6CIDRBlock *string `json:"ipv6CIDRBlock,omitempty"`
}

// +kubebuilder:skipversion
type SuccessfulInstanceCreditSpecificationItem struct {
	InstanceID *string `json:"instanceID,omitempty"`
}

// +kubebuilder:skipversion
type SuccessfulQueuedPurchaseDeletion struct {
	ReservedInstancesID *string `json:"reservedInstancesID,omitempty"`
}

// +kubebuilder:skipversion
type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type TagDescription struct {
	Key *string `json:"key,omitempty"`

	ResourceID *string `json:"resourceID,omitempty"`

	ResourceType *string `json:"resourceType,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type TagSpecification struct {
	ResourceType *string `json:"resourceType,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type TargetConfiguration struct {
	OfferingID *string `json:"offeringID,omitempty"`
}

// +kubebuilder:skipversion
type TargetGroup struct {
	ARN *string `json:"arn,omitempty"`
}

// +kubebuilder:skipversion
type TargetNetwork struct {
	AssociationID *string `json:"associationID,omitempty"`

	ClientVPNEndpointID *string `json:"clientVPNEndpointID,omitempty"`

	SecurityGroups []*string `json:"securityGroups,omitempty"`

	TargetNetworkID *string `json:"targetNetworkID,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type TerminateConnectionStatus struct {
	ConnectionID *string `json:"connectionID,omitempty"`
}

// +kubebuilder:skipversion
type TrafficMirrorFilter struct {
	Description *string `json:"description,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TrafficMirrorFilterID *string `json:"trafficMirrorFilterID,omitempty"`
}

// +kubebuilder:skipversion
type TrafficMirrorFilterRule struct {
	Description *string `json:"description,omitempty"`

	DestinationCIDRBlock *string `json:"destinationCIDRBlock,omitempty"`

	SourceCIDRBlock *string `json:"sourceCIDRBlock,omitempty"`

	TrafficMirrorFilterID *string `json:"trafficMirrorFilterID,omitempty"`

	TrafficMirrorFilterRuleID *string `json:"trafficMirrorFilterRuleID,omitempty"`
}

// +kubebuilder:skipversion
type TrafficMirrorSession struct {
	Description *string `json:"description,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TrafficMirrorFilterID *string `json:"trafficMirrorFilterID,omitempty"`

	TrafficMirrorSessionID *string `json:"trafficMirrorSessionID,omitempty"`

	TrafficMirrorTargetID *string `json:"trafficMirrorTargetID,omitempty"`
}

// +kubebuilder:skipversion
type TrafficMirrorTarget struct {
	Description *string `json:"description,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	NetworkLoadBalancerARN *string `json:"networkLoadBalancerARN,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TrafficMirrorTargetID *string `json:"trafficMirrorTargetID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGateway struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	Description *string `json:"description,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TransitGatewayARN *string `json:"transitGatewayARN,omitempty"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayAssociation struct {
	ResourceID *string `json:"resourceID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayAttachment struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	ResourceID *string `json:"resourceID,omitempty"`

	ResourceOwnerID *string `json:"resourceOwnerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TransitGatewayAttachmentID *string `json:"transitGatewayAttachmentID,omitempty"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty"`

	TransitGatewayOwnerID *string `json:"transitGatewayOwnerID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayAttachmentAssociation struct {
	TransitGatewayRouteTableID *string `json:"transitGatewayRouteTableID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayAttachmentBGPConfiguration struct {
	PeerAddress *string `json:"peerAddress,omitempty"`

	TransitGatewayAddress *string `json:"transitGatewayAddress,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayAttachmentPropagation struct {
	TransitGatewayRouteTableID *string `json:"transitGatewayRouteTableID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayConnect struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayConnectPeer struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayConnectPeerConfiguration struct {
	PeerAddress *string `json:"peerAddress,omitempty"`

	TransitGatewayAddress *string `json:"transitGatewayAddress,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayMulticastDeregisteredGroupMembers struct {
	DeregisteredNetworkInterfaceIDs []*string `json:"deregisteredNetworkInterfaceIDs,omitempty"`

	GroupIPAddress *string `json:"groupIPAddress,omitempty"`

	TransitGatewayMulticastDomainID *string `json:"transitGatewayMulticastDomainID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayMulticastDeregisteredGroupSources struct {
	DeregisteredNetworkInterfaceIDs []*string `json:"deregisteredNetworkInterfaceIDs,omitempty"`

	GroupIPAddress *string `json:"groupIPAddress,omitempty"`

	TransitGatewayMulticastDomainID *string `json:"transitGatewayMulticastDomainID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayMulticastDomain struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty"`

	TransitGatewayMulticastDomainARN *string `json:"transitGatewayMulticastDomainARN,omitempty"`

	TransitGatewayMulticastDomainID *string `json:"transitGatewayMulticastDomainID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayMulticastDomainAssociation struct {
	ResourceID *string `json:"resourceID,omitempty"`

	ResourceOwnerID *string `json:"resourceOwnerID,omitempty"`

	TransitGatewayAttachmentID *string `json:"transitGatewayAttachmentID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayMulticastDomainAssociations struct {
	ResourceID *string `json:"resourceID,omitempty"`

	ResourceOwnerID *string `json:"resourceOwnerID,omitempty"`

	TransitGatewayAttachmentID *string `json:"transitGatewayAttachmentID,omitempty"`

	TransitGatewayMulticastDomainID *string `json:"transitGatewayMulticastDomainID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayMulticastGroup struct {
	GroupIPAddress *string `json:"groupIPAddress,omitempty"`

	GroupMember *bool `json:"groupMember,omitempty"`

	GroupSource *bool `json:"groupSource,omitempty"`

	NetworkInterfaceID *string `json:"networkInterfaceID,omitempty"`

	ResourceID *string `json:"resourceID,omitempty"`

	ResourceOwnerID *string `json:"resourceOwnerID,omitempty"`

	SubnetID *string `json:"subnetID,omitempty"`

	TransitGatewayAttachmentID *string `json:"transitGatewayAttachmentID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayMulticastRegisteredGroupMembers struct {
	GroupIPAddress *string `json:"groupIPAddress,omitempty"`

	RegisteredNetworkInterfaceIDs []*string `json:"registeredNetworkInterfaceIDs,omitempty"`

	TransitGatewayMulticastDomainID *string `json:"transitGatewayMulticastDomainID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayMulticastRegisteredGroupSources struct {
	GroupIPAddress *string `json:"groupIPAddress,omitempty"`

	RegisteredNetworkInterfaceIDs []*string `json:"registeredNetworkInterfaceIDs,omitempty"`

	TransitGatewayMulticastDomainID *string `json:"transitGatewayMulticastDomainID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayOptions struct {
	AssociationDefaultRouteTableID *string `json:"associationDefaultRouteTableID,omitempty"`

	PropagationDefaultRouteTableID *string `json:"propagationDefaultRouteTableID,omitempty"`

	TransitGatewayCIDRBlocks []*string `json:"transitGatewayCIDRBlocks,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayPeeringAttachment struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TransitGatewayAttachmentID *string `json:"transitGatewayAttachmentID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayPrefixListAttachment struct {
	ResourceID *string `json:"resourceID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayPrefixListReference struct {
	Blackhole *bool `json:"blackhole,omitempty"`

	PrefixListOwnerID *string `json:"prefixListOwnerID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayPropagation struct {
	ResourceID *string `json:"resourceID,omitempty"`

	TransitGatewayRouteTableID *string `json:"transitGatewayRouteTableID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayRoute struct {
	DestinationCIDRBlock *string `json:"destinationCIDRBlock,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayRouteAttachment struct {
	ResourceID *string `json:"resourceID,omitempty"`

	TransitGatewayAttachmentID *string `json:"transitGatewayAttachmentID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayRouteTable struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	DefaultAssociationRouteTable *bool `json:"defaultAssociationRouteTable,omitempty"`

	DefaultPropagationRouteTable *bool `json:"defaultPropagationRouteTable,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty"`

	TransitGatewayRouteTableID *string `json:"transitGatewayRouteTableID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayRouteTableAssociation struct {
	ResourceID *string `json:"resourceID,omitempty"`

	TransitGatewayAttachmentID *string `json:"transitGatewayAttachmentID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayRouteTablePropagation struct {
	ResourceID *string `json:"resourceID,omitempty"`

	TransitGatewayAttachmentID *string `json:"transitGatewayAttachmentID,omitempty"`
}

// +kubebuilder:skipversion
type TransitGatewayVPCAttachment struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	SubnetIDs []*string `json:"subnetIDs,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TransitGatewayAttachmentID *string `json:"transitGatewayAttachmentID,omitempty"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`

	VPCOwnerID *string `json:"vpcOwnerID,omitempty"`
}

// +kubebuilder:skipversion
type TunnelOption struct {
	DPDTimeoutAction *string `json:"dpdTimeoutAction,omitempty"`

	OutsideIPAddress *string `json:"outsideIPAddress,omitempty"`

	PreSharedKey *string `json:"preSharedKey,omitempty"`

	StartupAction *string `json:"startupAction,omitempty"`

	TunnelInsideCIDR *string `json:"tunnelInsideCIDR,omitempty"`

	TunnelInsideIPv6CIDR *string `json:"tunnelInsideIPv6CIDR,omitempty"`
}

// +kubebuilder:skipversion
type UnsuccessfulInstanceCreditSpecificationItem struct {
	InstanceID *string `json:"instanceID,omitempty"`
}

// +kubebuilder:skipversion
type UnsuccessfulInstanceCreditSpecificationItemError struct {
	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type UnsuccessfulItem struct {
	ResourceID *string `json:"resourceID,omitempty"`
}

// +kubebuilder:skipversion
type UnsuccessfulItemError struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type UserBucket struct {
	S3Bucket *string `json:"s3Bucket,omitempty"`

	S3Key *string `json:"s3Key,omitempty"`
}

// +kubebuilder:skipversion
type UserBucketDetails struct {
	S3Bucket *string `json:"s3Bucket,omitempty"`

	S3Key *string `json:"s3Key,omitempty"`
}

// +kubebuilder:skipversion
type UserData struct {
	Data *string `json:"data,omitempty"`
}

// +kubebuilder:skipversion
type UserIDGroupPair struct {
	Description *string `json:"description,omitempty"`

	GroupID *string `json:"groupID,omitempty"`

	GroupName *string `json:"groupName,omitempty"`

	PeeringStatus *string `json:"peeringStatus,omitempty"`

	UserID *string `json:"userID,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`

	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionID,omitempty"`
}

// +kubebuilder:skipversion
type VGWTelemetry struct {
	CertificateARN *string `json:"certificateARN,omitempty"`

	LastStatusChange *metav1.Time `json:"lastStatusChange,omitempty"`

	OutsideIPAddress *string `json:"outsideIPAddress,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`
}

// +kubebuilder:skipversion
type VPC struct {
	CIDRBlock *string `json:"cidrBlock,omitempty"`

	DHCPOptionsID *string `json:"dhcpOptionsID,omitempty"`

	IsDefault *bool `json:"isDefault,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type VPCAttachment struct {
	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type VPCCIDRBlockAssociation struct {
	AssociationID *string `json:"associationID,omitempty"`

	CIDRBlock *string `json:"cidrBlock,omitempty"`
}

// +kubebuilder:skipversion
type VPCCIDRBlockState struct {
	StatusMessage *string `json:"statusMessage,omitempty"`
}

// +kubebuilder:skipversion
type VPCClassicLink struct {
	ClassicLinkEnabled *bool `json:"classicLinkEnabled,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type VPCEndpoint struct {
	NetworkInterfaceIDs []*string `json:"networkInterfaceIDs,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`

	PolicyDocument *string `json:"policyDocument,omitempty"`

	PrivateDNSEnabled *bool `json:"privateDNSEnabled,omitempty"`

	RequesterManaged *bool `json:"requesterManaged,omitempty"`

	RouteTableIDs []*string `json:"routeTableIDs,omitempty"`

	ServiceName *string `json:"serviceName,omitempty"`

	SubnetIDs []*string `json:"subnetIDs,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCEndpointID *string `json:"vpcEndpointID,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type VPCEndpointConnection struct {
	GatewayLoadBalancerARNs []*string `json:"gatewayLoadBalancerARNs,omitempty"`

	NetworkLoadBalancerARNs []*string `json:"networkLoadBalancerARNs,omitempty"`

	ServiceID *string `json:"serviceID,omitempty"`

	VPCEndpointID *string `json:"vpcEndpointID,omitempty"`

	VPCEndpointOwner *string `json:"vpcEndpointOwner,omitempty"`
}

// +kubebuilder:skipversion
type VPCIPv6CIDRBlockAssociation struct {
	AssociationID *string `json:"associationID,omitempty"`

	IPv6CIDRBlock *string `json:"ipv6CIDRBlock,omitempty"`

	IPv6Pool *string `json:"ipv6Pool,omitempty"`

	NetworkBorderGroup *string `json:"networkBorderGroup,omitempty"`
}

// +kubebuilder:skipversion
type VPCPeeringConnectionOptionsDescription struct {
	AllowDNSResolutionFromRemoteVPC *bool `json:"allowDNSResolutionFromRemoteVPC,omitempty"`

	AllowEgressFromLocalClassicLinkToRemoteVPC *bool `json:"allowEgressFromLocalClassicLinkToRemoteVPC,omitempty"`

	AllowEgressFromLocalVPCToRemoteClassicLink *bool `json:"allowEgressFromLocalVPCToRemoteClassicLink,omitempty"`
}

// +kubebuilder:skipversion
type VPCPeeringConnectionStateReason struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type VPCPeeringConnectionVPCInfo struct {
	CIDRBlock *string `json:"cidrBlock,omitempty"`

	CIDRBlockSet []*CIDRBlock `json:"cidrBlockSet,omitempty"`

	IPv6CIDRBlockSet []*IPv6CIDRBlock `json:"ipv6CIDRBlockSet,omitempty"`

	OwnerID *string `json:"ownerID,omitempty"`
	// Describes the VPC peering connection options.
	PeeringOptions *VPCPeeringConnectionOptionsDescription `json:"peeringOptions,omitempty"`

	Region *string `json:"region,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type VPCPeeringConnection_SDK struct {
	// Describes a VPC in a VPC peering connection.
	AccepterVPCInfo *VPCPeeringConnectionVPCInfo `json:"accepterVPCInfo,omitempty"`

	ExpirationTime *metav1.Time `json:"expirationTime,omitempty"`
	// Describes a VPC in a VPC peering connection.
	RequesterVPCInfo *VPCPeeringConnectionVPCInfo `json:"requesterVPCInfo,omitempty"`
	// Describes the status of a VPC peering connection.
	Status *VPCPeeringConnectionStateReason `json:"status,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPCPeeringConnectionID *string `json:"vpcPeeringConnectionID,omitempty"`
}

// +kubebuilder:skipversion
type VPNConnection struct {
	Category *string `json:"category,omitempty"`

	CustomerGatewayConfiguration *string `json:"customerGatewayConfiguration,omitempty"`

	CustomerGatewayID *string `json:"customerGatewayID,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	TransitGatewayID *string `json:"transitGatewayID,omitempty"`

	VPNConnectionID *string `json:"vpnConnectionID,omitempty"`

	VPNGatewayID *string `json:"vpnGatewayID,omitempty"`
}

// +kubebuilder:skipversion
type VPNConnectionOptions struct {
	EnableAcceleration *bool `json:"enableAcceleration,omitempty"`

	LocalIPv4NetworkCIDR *string `json:"localIPv4NetworkCIDR,omitempty"`

	LocalIPv6NetworkCIDR *string `json:"localIPv6NetworkCIDR,omitempty"`

	RemoteIPv4NetworkCIDR *string `json:"remoteIPv4NetworkCIDR,omitempty"`

	RemoteIPv6NetworkCIDR *string `json:"remoteIPv6NetworkCIDR,omitempty"`

	StaticRoutesOnly *bool `json:"staticRoutesOnly,omitempty"`
}

// +kubebuilder:skipversion
type VPNConnectionOptionsSpecification struct {
	EnableAcceleration *bool `json:"enableAcceleration,omitempty"`

	LocalIPv4NetworkCIDR *string `json:"localIPv4NetworkCIDR,omitempty"`

	LocalIPv6NetworkCIDR *string `json:"localIPv6NetworkCIDR,omitempty"`

	RemoteIPv4NetworkCIDR *string `json:"remoteIPv4NetworkCIDR,omitempty"`

	RemoteIPv6NetworkCIDR *string `json:"remoteIPv6NetworkCIDR,omitempty"`

	StaticRoutesOnly *bool `json:"staticRoutesOnly,omitempty"`
}

// +kubebuilder:skipversion
type VPNGateway struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	VPNGatewayID *string `json:"vpnGatewayID,omitempty"`
}

// +kubebuilder:skipversion
type VPNStaticRoute struct {
	DestinationCIDRBlock *string `json:"destinationCIDRBlock,omitempty"`
}

// +kubebuilder:skipversion
type VPNTunnelOptionsSpecification struct {
	DPDTimeoutAction *string `json:"dpdTimeoutAction,omitempty"`

	PreSharedKey *string `json:"preSharedKey,omitempty"`

	StartupAction *string `json:"startupAction,omitempty"`

	TunnelInsideCIDR *string `json:"tunnelInsideCIDR,omitempty"`

	TunnelInsideIPv6CIDR *string `json:"tunnelInsideIPv6CIDR,omitempty"`
}

// +kubebuilder:skipversion
type ValidationError struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type VolumeModification struct {
	EndTime *metav1.Time `json:"endTime,omitempty"`

	OriginalMultiAttachEnabled *bool `json:"originalMultiAttachEnabled,omitempty"`

	StartTime *metav1.Time `json:"startTime,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	TargetMultiAttachEnabled *bool `json:"targetMultiAttachEnabled,omitempty"`

	VolumeID *string `json:"volumeID,omitempty"`
}

// +kubebuilder:skipversion
type VolumeStatusAction struct {
	Code *string `json:"code,omitempty"`

	Description *string `json:"description,omitempty"`

	EventID *string `json:"eventID,omitempty"`

	EventType *string `json:"eventType,omitempty"`
}

// +kubebuilder:skipversion
type VolumeStatusAttachmentStatus struct {
	InstanceID *string `json:"instanceID,omitempty"`

	IOPerformance *string `json:"ioPerformance,omitempty"`
}

// +kubebuilder:skipversion
type VolumeStatusDetails struct {
	Status *string `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type VolumeStatusEvent struct {
	Description *string `json:"description,omitempty"`

	EventID *string `json:"eventID,omitempty"`

	EventType *string `json:"eventType,omitempty"`

	InstanceID *string `json:"instanceID,omitempty"`
}

// +kubebuilder:skipversion
type VolumeStatusItem struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	OutpostARN *string `json:"outpostARN,omitempty"`

	VolumeID *string `json:"volumeID,omitempty"`
}
