/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// VolumeParameters defines the desired state of Volume
type VolumeParameters struct {
	// Region is which region the Volume will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The Availability Zone in which to create the volume.
	// +kubebuilder:validation:Required
	AvailabilityZone *string `json:"availabilityZone"`
	// Indicates whether the volume should be encrypted. The effect of setting the
	// encryption state to true depends on the volume origin (new or from a snapshot),
	// starting encryption state, ownership, and whether encryption by default is
	// enabled. For more information, see Encryption by default (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#encryption-by-default)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// Encrypted Amazon EBS volumes must be attached to instances that support Amazon
	// EBS encryption. For more information, see Supported instance types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSEncryption.html#EBSEncryption_supported_instances).
	Encrypted *bool `json:"encrypted,omitempty"`
	// The number of I/O operations per second (IOPS). For gp3, io1, and io2 volumes,
	// this represents the number of IOPS that are provisioned for the volume. For
	// gp2 volumes, this represents the baseline performance of the volume and the
	// rate at which the volume accumulates I/O credits for bursting.
	//
	// The following are the supported values for each volume type:
	//
	//    * gp3: 3,000-16,000 IOPS
	//
	//    * io1: 100-64,000 IOPS
	//
	//    * io2: 100-64,000 IOPS
	//
	// io1 and io2 volumes support up to 64,000 IOPS only on Instances built on
	// the Nitro System (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances).
	// Other instance families support performance up to 32,000 IOPS.
	//
	// This parameter is required for io1 and io2 volumes. The default for gp3 volumes
	// is 3,000 IOPS. This parameter is not supported for gp2, st1, sc1, or standard
	// volumes.
	IOPS *int64 `json:"iops,omitempty"`
	// Indicates whether to enable Amazon EBS Multi-Attach. If you enable Multi-Attach,
	// you can attach the volume to up to 16 Instances built on the Nitro System
	// (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances)
	// in the same Availability Zone. This parameter is supported with io1 and io2
	// volumes only. For more information, see Amazon EBS Multi-Attach (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volumes-multi.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	MultiAttachEnabled *bool `json:"multiAttachEnabled,omitempty"`
	// The Amazon Resource Name (ARN) of the Outpost.
	OutpostARN *string `json:"outpostARN,omitempty"`
	// The size of the volume, in GiBs. You must specify either a snapshot ID or
	// a volume size. If you specify a snapshot, the default is the snapshot size.
	// You can specify a volume size that is equal to or larger than the snapshot
	// size.
	//
	// The following are the supported volumes sizes for each volume type:
	//
	//    * gp2 and gp3: 1-16,384
	//
	//    * io1 and io2: 4-16,384
	//
	//    * st1 and sc1: 125-16,384
	//
	//    * standard: 1-1,024
	Size *int64 `json:"size,omitempty"`
	// The snapshot from which to create the volume. You must specify either a snapshot
	// ID or a volume size.
	SnapshotID *string `json:"snapshotID,omitempty"`
	// The tags to apply to the volume during creation.
	TagSpecifications []*TagSpecification `json:"tagSpecifications,omitempty"`
	// The throughput to provision for a volume, with a maximum of 1,000 MiB/s.
	//
	// This parameter is valid only for gp3 volumes.
	//
	// Valid Range: Minimum value of 125. Maximum value of 1000.
	Throughput *int64 `json:"throughput,omitempty"`
	// The volume type. This parameter can be one of the following values:
	//
	//    * General Purpose SSD: gp2 | gp3
	//
	//    * Provisioned IOPS SSD: io1 | io2
	//
	//    * Throughput Optimized HDD: st1
	//
	//    * Cold HDD: sc1
	//
	//    * Magnetic: standard
	//
	// For more information, see Amazon EBS volume types (https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/EBSVolumeTypes.html)
	// in the Amazon Elastic Compute Cloud User Guide.
	//
	// Default: gp2
	VolumeType             *string `json:"volumeType,omitempty"`
	CustomVolumeParameters `json:",inline"`
}

// VolumeSpec defines the desired state of Volume
type VolumeSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VolumeParameters `json:"forProvider"`
}

// VolumeObservation defines the observed state of Volume
type VolumeObservation struct {
	// Information about the volume attachments.
	Attachments []*VolumeAttachment `json:"attachments,omitempty"`
	// The time stamp when volume creation was initiated.
	CreateTime *metav1.Time `json:"createTime,omitempty"`
	// Indicates whether the volume was created using fast snapshot restore.
	FastRestored *bool `json:"fastRestored,omitempty"`
	// The Amazon Resource Name (ARN) of the Key Management Service (KMS) KMS key
	// that was used to protect the volume encryption key for the volume.
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// The volume state.
	State *string `json:"state,omitempty"`
	// Any tags assigned to the volume.
	Tags []*Tag `json:"tags,omitempty"`
	// The ID of the volume.
	VolumeID *string `json:"volumeID,omitempty"`
}

// VolumeStatus defines the observed state of Volume.
type VolumeStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VolumeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Volume is the Schema for the Volumes API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Volume struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VolumeSpec   `json:"spec"`
	Status            VolumeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VolumeList contains a list of Volumes
type VolumeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Volume `json:"items"`
}

// Repository type metadata.
var (
	VolumeKind             = "Volume"
	VolumeGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VolumeKind}.String()
	VolumeKindAPIVersion   = VolumeKind + "." + GroupVersion.String()
	VolumeGroupVersionKind = GroupVersion.WithKind(VolumeKind)
)

func init() {
	SchemeBuilder.Register(&Volume{}, &VolumeList{})
}
