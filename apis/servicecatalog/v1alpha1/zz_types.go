/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type CloudWatchDashboard struct {
	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type ConstraintDetail struct {
	ConstraintID *string `json:"constraintID,omitempty"`

	Owner *string `json:"owner,omitempty"`

	PortfolioID *string `json:"portfolioID,omitempty"`

	ProductID *string `json:"productID,omitempty"`
}

// +kubebuilder:skipversion
type FailedServiceActionAssociation struct {
	ProductID *string `json:"productID,omitempty"`

	ProvisioningArtifactID *string `json:"provisioningArtifactID,omitempty"`

	ServiceActionID *string `json:"serviceActionID,omitempty"`
}

// +kubebuilder:skipversion
type LastSync struct {
	LastSuccessfulSyncProvisioningArtifactID *string `json:"lastSuccessfulSyncProvisioningArtifactID,omitempty"`
}

// +kubebuilder:skipversion
type LaunchPath struct {
	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type LaunchPathSummary struct {
	ID *string `json:"id,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`
}

// +kubebuilder:skipversion
type PortfolioDetail struct {
	DisplayName *string `json:"displayName,omitempty"`

	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type PortfolioShareDetail struct {
	PrincipalID *string `json:"principalID,omitempty"`
}

// +kubebuilder:skipversion
type ProductViewDetail struct {
	CreatedTime *metav1.Time `json:"createdTime,omitempty"`
}

// +kubebuilder:skipversion
type ProductViewSummary struct {
	ID *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`

	ProductID *string `json:"productID,omitempty"`
}

// +kubebuilder:skipversion
type ProvisionedProductAttribute struct {
	ARN *string `json:"arn,omitempty"`

	CreatedTime *metav1.Time `json:"createdTime,omitempty"`

	ID *string `json:"id,omitempty"`

	IdempotencyToken *string `json:"idempotencyToken,omitempty"`

	LastProvisioningRecordID *string `json:"lastProvisioningRecordID,omitempty"`

	LastRecordID *string `json:"lastRecordID,omitempty"`

	LastSuccessfulProvisioningRecordID *string `json:"lastSuccessfulProvisioningRecordID,omitempty"`

	Name *string `json:"name,omitempty"`

	ProductID *string `json:"productID,omitempty"`

	ProductName *string `json:"productName,omitempty"`

	ProvisioningArtifactID *string `json:"provisioningArtifactID,omitempty"`

	ProvisioningArtifactName *string `json:"provisioningArtifactName,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	Tags []*Tag `json:"tags,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type ProvisionedProductDetail struct {
	ARN *string `json:"arn,omitempty"`

	CreatedTime *metav1.Time `json:"createdTime,omitempty"`

	ID *string `json:"id,omitempty"`

	IdempotencyToken *string `json:"idempotencyToken,omitempty"`

	LastProvisioningRecordID *string `json:"lastProvisioningRecordID,omitempty"`

	LastRecordID *string `json:"lastRecordID,omitempty"`

	LastSuccessfulProvisioningRecordID *string `json:"lastSuccessfulProvisioningRecordID,omitempty"`

	LaunchRoleARN *string `json:"launchRoleARN,omitempty"`

	Name *string `json:"name,omitempty"`

	ProductID *string `json:"productID,omitempty"`

	ProvisioningArtifactID *string `json:"provisioningArtifactID,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusMessage *string `json:"statusMessage,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningArtifact struct {
	ID *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningArtifactDetail struct {
	Description *string `json:"description,omitempty"`

	ID *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningArtifactParameter struct {
	Description *string `json:"description,omitempty"`

	ParameterKey *string `json:"parameterKey,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningArtifactPreferences struct {
	StackSetAccounts []*string `json:"stackSetAccounts,omitempty"`

	StackSetRegions []*string `json:"stackSetRegions,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningArtifactProperties struct {
	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningArtifactSummary struct {
	ID *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningParameter struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningPreferences struct {
	StackSetAccounts []*string `json:"stackSetAccounts,omitempty"`

	StackSetFailureToleranceCount *int64 `json:"stackSetFailureToleranceCount,omitempty"`

	StackSetFailureTolerancePercentage *int64 `json:"stackSetFailureTolerancePercentage,omitempty"`

	StackSetMaxConcurrencyCount *int64 `json:"stackSetMaxConcurrencyCount,omitempty"`

	StackSetMaxConcurrencyPercentage *int64 `json:"stackSetMaxConcurrencyPercentage,omitempty"`

	StackSetRegions []*string `json:"stackSetRegions,omitempty"`
}

// +kubebuilder:skipversion
type RecordDetail struct {
	CreatedTime *metav1.Time `json:"createdTime,omitempty"`

	LaunchRoleARN *string `json:"launchRoleARN,omitempty"`

	PathID *string `json:"pathID,omitempty"`

	ProductID *string `json:"productID,omitempty"`

	ProvisionedProductID *string `json:"provisionedProductID,omitempty"`

	ProvisionedProductName *string `json:"provisionedProductName,omitempty"`

	ProvisionedProductType *string `json:"provisionedProductType,omitempty"`

	ProvisioningArtifactID *string `json:"provisioningArtifactID,omitempty"`

	RecordErrors []*RecordError `json:"recordErrors,omitempty"`

	RecordID *string `json:"recordID,omitempty"`

	RecordTags []*RecordTag `json:"recordTags,omitempty"`

	RecordType *string `json:"recordType,omitempty"`

	Status *string `json:"status,omitempty"`

	UpdatedTime *metav1.Time `json:"updatedTime,omitempty"`
}

// +kubebuilder:skipversion
type RecordError struct {
	Code *string `json:"code,omitempty"`

	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type RecordOutput struct {
	Description *string `json:"description,omitempty"`

	OutputKey *string `json:"outputKey,omitempty"`

	OutputValue *string `json:"outputValue,omitempty"`
}

// +kubebuilder:skipversion
type RecordTag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type ServiceActionAssociation struct {
	ProductID *string `json:"productID,omitempty"`

	ProvisioningArtifactID *string `json:"provisioningArtifactID,omitempty"`

	ServiceActionID *string `json:"serviceActionID,omitempty"`
}

// +kubebuilder:skipversion
type ServiceActionSummary struct {
	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type StackInstance struct {
	Account *string `json:"account,omitempty"`

	Region *string `json:"region,omitempty"`
}

// +kubebuilder:skipversion
type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type UpdateProvisioningParameter struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type UpdateProvisioningPreferences struct {
	StackSetAccounts []*string `json:"stackSetAccounts,omitempty"`

	StackSetFailureToleranceCount *int64 `json:"stackSetFailureToleranceCount,omitempty"`

	StackSetFailureTolerancePercentage *int64 `json:"stackSetFailureTolerancePercentage,omitempty"`

	StackSetMaxConcurrencyCount *int64 `json:"stackSetMaxConcurrencyCount,omitempty"`

	StackSetMaxConcurrencyPercentage *int64 `json:"stackSetMaxConcurrencyPercentage,omitempty"`

	StackSetRegions []*string `json:"stackSetRegions,omitempty"`
}
