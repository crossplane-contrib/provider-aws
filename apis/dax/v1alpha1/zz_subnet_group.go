/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// SubnetGroupParameters defines the desired state of SubnetGroup
type SubnetGroupParameters struct {
	// Region is which region the SubnetGroup will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A description for the subnet group
	Description                 *string `json:"description,omitempty"`
	CustomSubnetGroupParameters `json:",inline"`
}

// SubnetGroupSpec defines the desired state of SubnetGroup
type SubnetGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       SubnetGroupParameters `json:"forProvider"`
}

// SubnetGroupObservation defines the observed state of SubnetGroup
type SubnetGroupObservation struct {
	// The name of the subnet group.
	SubnetGroupName *string `json:"subnetGroupName,omitempty"`
	// A list of subnets associated with the subnet group.
	Subnets []*Subnet `json:"subnets,omitempty"`
	// The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group.
	VPCID *string `json:"vpcID,omitempty"`
}

// SubnetGroupStatus defines the observed state of SubnetGroup.
type SubnetGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          SubnetGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetGroup is the Schema for the SubnetGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type SubnetGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SubnetGroupSpec   `json:"spec"`
	Status            SubnetGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SubnetGroupList contains a list of SubnetGroups
type SubnetGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SubnetGroup `json:"items"`
}

// Repository type metadata.
var (
	SubnetGroupKind             = "SubnetGroup"
	SubnetGroupGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SubnetGroupKind}.String()
	SubnetGroupKindAPIVersion   = SubnetGroupKind + "." + GroupVersion.String()
	SubnetGroupGroupVersionKind = GroupVersion.WithKind(SubnetGroupKind)
)

func init() {
	SchemeBuilder.Register(&SubnetGroup{}, &SubnetGroupList{})
}
