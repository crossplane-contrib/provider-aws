/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ClusterParameters defines the desired state of Cluster
type ClusterParameters struct {
	// Region is which region the Cluster will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The Availability Zones (AZs) in which the cluster nodes will reside after
	// the cluster has been created or updated. If provided, the length of this
	// list must equal the ReplicationFactor parameter. If you omit this parameter,
	// DAX will spread the nodes across Availability Zones for the highest availability.
	AvailabilityZones []*string `json:"availabilityZones,omitempty"`
	// The type of encryption the cluster's endpoint should support. Values are:
	//
	//    * NONE for no encryption
	//
	//    * TLS for Transport Layer Security
	ClusterEndpointEncryptionType *string `json:"clusterEndpointEncryptionType,omitempty"`
	// A description of the cluster.
	Description *string `json:"description,omitempty"`
	// The compute and memory capacity of the nodes in the cluster.
	// +kubebuilder:validation:Required
	NodeType *string `json:"nodeType"`
	// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications
	// will be sent.
	//
	// The Amazon SNS topic owner must be same as the DAX cluster owner.
	NotificationTopicARN *string `json:"notificationTopicARN,omitempty"`
	// Specifies the weekly time range during which maintenance on the DAX cluster
	// is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi
	// (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid
	// values for ddd are:
	//
	//    * sun
	//
	//    * mon
	//
	//    * tue
	//
	//    * wed
	//
	//    * thu
	//
	//    * fri
	//
	//    * sat
	//
	// Example: sun:05:00-sun:09:00
	//
	// If you don't specify a preferred maintenance window when you create or modify
	// a cache cluster, DAX assigns a 60-minute maintenance window on a randomly
	// selected day of the week.
	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`
	// The number of nodes in the DAX cluster. A replication factor of 1 will create
	// a single-node cluster, without any read replicas. For additional fault tolerance,
	// you can create a multiple node cluster with one or more read replicas. To
	// do this, set ReplicationFactor to a number between 3 (one primary and two
	// read replicas) and 10 (one primary and nine read replicas). If the AvailabilityZones
	// parameter is provided, its length must equal the ReplicationFactor.
	//
	// AWS recommends that you have at least two read replicas per cluster.
	// +kubebuilder:validation:Required
	ReplicationFactor *int64 `json:"replicationFactor"`
	// Represents the settings used to enable server-side encryption on the cluster.
	SSESpecification *SSESpecification `json:"sseSpecification,omitempty"`
	// A set of tags to associate with the DAX cluster.
	Tags                    []*Tag `json:"tags,omitempty"`
	CustomClusterParameters `json:",inline"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ClusterParameters `json:"forProvider"`
}

// ClusterObservation defines the observed state of Cluster
type ClusterObservation struct {
	// The number of nodes in the cluster that are active (i.e., capable of serving
	// requests).
	ActiveNodes *int64 `json:"activeNodes,omitempty"`
	// The Amazon Resource Name (ARN) that uniquely identifies the cluster.
	ClusterARN *string `json:"clusterARN,omitempty"`
	// The endpoint for this DAX cluster, consisting of a DNS name, a port number,
	// and a URL. Applications should use the URL to configure the DAX client to
	// find their cluster.
	ClusterDiscoveryEndpoint *Endpoint `json:"clusterDiscoveryEndpoint,omitempty"`
	// The name of the DAX cluster.
	ClusterName *string `json:"clusterName,omitempty"`
	// A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime,
	// DAX will assume this role and use the role's permissions to access DynamoDB
	// on your behalf.
	IAMRoleARN *string `json:"iamRoleARN,omitempty"`
	// A list of nodes to be removed from the cluster.
	NodeIDsToRemove []*string `json:"nodeIDsToRemove,omitempty"`
	// A list of nodes that are currently in the cluster.
	Nodes []*Node `json:"nodes,omitempty"`
	// Describes a notification topic and its status. Notification topics are used
	// for publishing DAX events to subscribers using Amazon Simple Notification
	// Service (SNS).
	NotificationConfiguration *NotificationConfiguration `json:"notificationConfiguration,omitempty"`
	// The parameter group being used by nodes in the cluster.
	ParameterGroup *ParameterGroupStatus_SDK `json:"parameterGroup,omitempty"`
	// The description of the server-side encryption status on the specified DAX
	// cluster.
	SSEDescription *SSEDescription `json:"sseDescription,omitempty"`
	// A list of security groups, and the status of each, for the nodes in the cluster.
	SecurityGroups []*SecurityGroupMembership `json:"securityGroups,omitempty"`
	// The current status of the cluster.
	Status *string `json:"status,omitempty"`
	// The subnet group where the DAX cluster is running.
	SubnetGroup *string `json:"subnetGroup,omitempty"`
	// The total number of nodes in the cluster.
	TotalNodes *int64 `json:"totalNodes,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec"`
	Status            ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	ClusterKind             = "Cluster"
	ClusterGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterKind}.String()
	ClusterKindAPIVersion   = ClusterKind + "." + GroupVersion.String()
	ClusterGroupVersionKind = GroupVersion.WithKind(ClusterKind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
