/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// LogAnomalyDetectorParameters defines the desired state of LogAnomalyDetector
type LogAnomalyDetectorParameters struct {
	// Region is which region the LogAnomalyDetector will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The number of days to have visibility on an anomaly. After this time period
	// has elapsed for an anomaly, it will be automatically baselined and the anomaly
	// detector will treat new occurrences of a similar anomaly as normal. Therefore,
	// if you do not correct the cause of an anomaly during the time period specified
	// in anomalyVisibilityTime, it will be considered normal going forward and
	// will not be detected as an anomaly.
	AnomalyVisibilityTime *int64 `json:"anomalyVisibilityTime,omitempty"`
	// A name for this anomaly detector.
	DetectorName *string `json:"detectorName,omitempty"`
	// Specifies how often the anomaly detector is to run and look for anomalies.
	// Set this value according to the frequency that the log group receives new
	// logs. For example, if the log group receives new log events every 10 minutes,
	// then 15 minutes might be a good setting for evaluationFrequency .
	EvaluationFrequency *string `json:"evaluationFrequency,omitempty"`
	// You can use this parameter to limit the anomaly detection model to examine
	// only log events that match the pattern you specify here. For more information,
	// see Filter and Pattern Syntax (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/FilterAndPatternSyntax.html).
	FilterPattern *string `json:"filterPattern,omitempty"`
	// Optionally assigns a KMS key to secure this anomaly detector and its findings.
	// If a key is assigned, the anomalies found and the model used by this detector
	// are encrypted at rest with the key. If a key is assigned to an anomaly detector,
	// a user must have permissions for both this key and for the anomaly detector
	// to retrieve information about the anomalies that it finds.
	//
	// For more information about using a KMS key and to see the required IAM policy,
	// see Use a KMS key with an anomaly detector (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/LogsAnomalyDetection-KMS.html).
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// An array containing the ARN of the log group that this anomaly detector will
	// watch. You can specify only one log group ARN.
	// +kubebuilder:validation:Required
	LogGroupARNList []*string `json:"logGroupARNList"`
	// An optional list of key-value pairs to associate with the resource.
	//
	// For more information about tagging, see Tagging Amazon Web Services resources
	// (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html)
	Tags                               map[string]*string `json:"tags,omitempty"`
	CustomLogAnomalyDetectorParameters `json:",inline"`
}

// LogAnomalyDetectorSpec defines the desired state of LogAnomalyDetector
type LogAnomalyDetectorSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogAnomalyDetectorParameters `json:"forProvider"`
}

// LogAnomalyDetectorObservation defines the observed state of LogAnomalyDetector
type LogAnomalyDetectorObservation struct {
	// The ARN of the log anomaly detector that you just created.
	AnomalyDetectorARN *string `json:"anomalyDetectorARN,omitempty"`

	CustomLogAnomalyDetectorObservation `json:",inline"`
}

// LogAnomalyDetectorStatus defines the observed state of LogAnomalyDetector.
type LogAnomalyDetectorStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogAnomalyDetectorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnomalyDetector is the Schema for the LogAnomalyDetectors API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LogAnomalyDetector struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogAnomalyDetectorSpec   `json:"spec"`
	Status            LogAnomalyDetectorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogAnomalyDetectorList contains a list of LogAnomalyDetectors
type LogAnomalyDetectorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogAnomalyDetector `json:"items"`
}

// Repository type metadata.
var (
	LogAnomalyDetectorKind             = "LogAnomalyDetector"
	LogAnomalyDetectorGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogAnomalyDetectorKind}.String()
	LogAnomalyDetectorKindAPIVersion   = LogAnomalyDetectorKind + "." + GroupVersion.String()
	LogAnomalyDetectorGroupVersionKind = GroupVersion.WithKind(LogAnomalyDetectorKind)
)

func init() {
	SchemeBuilder.Register(&LogAnomalyDetector{}, &LogAnomalyDetectorList{})
}
