/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// LogGroupParameters defines the desired state of LogGroup
type LogGroupParameters struct {
	// Region is which region the LogGroup will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Use this parameter to specify the log group class for this log group. There
	// are two classes:
	//
	//    * The Standard log class supports all CloudWatch Logs features.
	//
	//    * The Infrequent Access log class supports a subset of CloudWatch Logs
	//    features and incurs lower costs.
	//
	// If you omit this parameter, the default of STANDARD is used.
	//
	// The value of logGroupClass can't be changed after a log group is created.
	//
	// For details about the features supported by each class, see Log classes (https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/CloudWatch_Logs_Log_Classes.html)
	LogGroupClass *string `json:"logGroupClass,omitempty"`
	// A name for the log group.
	// +kubebuilder:validation:Required
	LogGroupName *string `json:"logGroupName"`
	// The key-value pairs to use for the tags.
	//
	// You can grant users access to certain log groups while preventing them from
	// accessing other log groups. To do so, tag your groups and use IAM policies
	// that refer to those tags. To assign tags when you create a log group, you
	// must have either the logs:TagResource or logs:TagLogGroup permission. For
	// more information about tagging, see Tagging Amazon Web Services resources
	// (https://docs.aws.amazon.com/general/latest/gr/aws_tagging.html). For more
	// information about using tags to control access, see Controlling access to
	// Amazon Web Services resources using tags (https://docs.aws.amazon.com/IAM/latest/UserGuide/access_tags.html).
	Tags                     map[string]*string `json:"tags,omitempty"`
	CustomLogGroupParameters `json:",inline"`
}

// LogGroupSpec defines the desired state of LogGroup
type LogGroupSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       LogGroupParameters `json:"forProvider"`
}

// LogGroupObservation defines the observed state of LogGroup
type LogGroupObservation struct {
	// The Amazon Resource Name (ARN) of the log group.
	ARN *string `json:"arn,omitempty"`
	// The creation time of the log group, expressed as the number of milliseconds
	// after Jan 1, 1970 00:00:00 UTC.
	CreationTime *int64 `json:"creationTime,omitempty"`
	// The Amazon Resource Name (ARN) of the KMS key to use when encrypting log
	// data.
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// The name of the log group.
	LogGroupName *string `json:"logGroupName,omitempty"`
	// The number of metric filters.
	MetricFilterCount *int64 `json:"metricFilterCount,omitempty"`

	RetentionInDays *int64 `json:"retentionInDays,omitempty"`
	// The number of bytes stored.
	StoredBytes *int64 `json:"storedBytes,omitempty"`

	CustomLogGroupObservation `json:",inline"`
}

// LogGroupStatus defines the observed state of LogGroup.
type LogGroupStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          LogGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogGroup is the Schema for the LogGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type LogGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogGroupSpec   `json:"spec"`
	Status            LogGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogGroupList contains a list of LogGroups
type LogGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogGroup `json:"items"`
}

// Repository type metadata.
var (
	LogGroupKind             = "LogGroup"
	LogGroupGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogGroupKind}.String()
	LogGroupKindAPIVersion   = LogGroupKind + "." + GroupVersion.String()
	LogGroupGroupVersionKind = GroupVersion.WithKind(LogGroupKind)
)

func init() {
	SchemeBuilder.Register(&LogGroup{}, &LogGroupList{})
}
