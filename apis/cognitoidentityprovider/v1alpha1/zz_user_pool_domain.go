/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// UserPoolDomainParameters defines the desired state of UserPoolDomain
type UserPoolDomainParameters struct {
	// Region is which region the UserPoolDomain will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The configuration for a custom domain that hosts the sign-up and sign-in
	// webpages for your application.
	//
	// Provide this parameter only if you want to use a custom domain for your user
	// pool. Otherwise, you can exclude this parameter and use the Amazon Cognito
	// hosted domain instead.
	//
	// For more information about the hosted domain and custom domains, see Configuring
	// a User Pool Domain (https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-assign-domain.html).
	CustomDomainConfig             *CustomDomainConfigType `json:"customDomainConfig,omitempty"`
	CustomUserPoolDomainParameters `json:",inline"`
}

// UserPoolDomainSpec defines the desired state of UserPoolDomain
type UserPoolDomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       UserPoolDomainParameters `json:"forProvider"`
}

// UserPoolDomainObservation defines the observed state of UserPoolDomain
type UserPoolDomainObservation struct {
	// The Amazon CloudFront endpoint that you use as the target of the alias that
	// you set up with your Domain Name Service (DNS) provider.
	CloudFrontDomain *string `json:"cloudFrontDomain,omitempty"`
}

// UserPoolDomainStatus defines the observed state of UserPoolDomain.
type UserPoolDomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          UserPoolDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserPoolDomain is the Schema for the UserPoolDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type UserPoolDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserPoolDomainSpec   `json:"spec"`
	Status            UserPoolDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserPoolDomainList contains a list of UserPoolDomains
type UserPoolDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserPoolDomain `json:"items"`
}

// Repository type metadata.
var (
	UserPoolDomainKind             = "UserPoolDomain"
	UserPoolDomainGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserPoolDomainKind}.String()
	UserPoolDomainKindAPIVersion   = UserPoolDomainKind + "." + GroupVersion.String()
	UserPoolDomainGroupVersionKind = GroupVersion.WithKind(UserPoolDomainKind)
)

func init() {
	SchemeBuilder.Register(&UserPoolDomain{}, &UserPoolDomainList{})
}
