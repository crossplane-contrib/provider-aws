/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// UserPoolParameters defines the desired state of UserPool
type UserPoolParameters struct {
	// Region is which region the UserPool will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Use this setting to define which verified available method a user can use
	// to recover their password when they call ForgotPassword. It allows you to
	// define a preferred method when a user has more than one method available.
	// With this setting, SMS does not qualify for a valid password recovery mechanism
	// if the user also has SMS MFA enabled. In the absence of this setting, Cognito
	// uses the legacy behavior to determine the recovery method where SMS is preferred
	// over email.
	AccountRecoverySetting *AccountRecoverySettingType `json:"accountRecoverySetting,omitempty"`
	// The configuration for AdminCreateUser requests.
	AdminCreateUserConfig *AdminCreateUserConfigType `json:"adminCreateUserConfig,omitempty"`
	// Attributes supported as an alias for this user pool. Possible values: phone_number,
	// email, or preferred_username.
	AliasAttributes []*string `json:"aliasAttributes,omitempty"`
	// The attributes to be auto-verified. Possible values: email, phone_number.
	AutoVerifiedAttributes []*string `json:"autoVerifiedAttributes,omitempty"`
	// The device configuration.
	DeviceConfiguration *DeviceConfigurationType `json:"deviceConfiguration,omitempty"`
	// The email configuration.
	EmailConfiguration *EmailConfigurationType `json:"emailConfiguration,omitempty"`
	// A string representing the email verification message. EmailVerificationMessage
	// is allowed only if EmailSendingAccount (https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount)
	// is DEVELOPER.
	EmailVerificationMessage *string `json:"emailVerificationMessage,omitempty"`
	// A string representing the email verification subject. EmailVerificationSubject
	// is allowed only if EmailSendingAccount (https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_EmailConfigurationType.html#CognitoUserPools-Type-EmailConfigurationType-EmailSendingAccount)
	// is DEVELOPER.
	EmailVerificationSubject *string `json:"emailVerificationSubject,omitempty"`
	// The Lambda trigger configuration information for the new user pool.
	//
	// In a push model, event sources (such as Amazon S3 and custom applications)
	// need permission to invoke a function. So you will need to make an extra call
	// to add permission for these event sources to invoke your Lambda function.
	//
	// For more information on using the Lambda API to add permission, see AddPermission
	// (https://docs.aws.amazon.com/lambda/latest/dg/API_AddPermission.html).
	//
	// For adding permission using the CLI, see add-permission (https://docs.aws.amazon.com/cli/latest/reference/lambda/add-permission.html).
	LambdaConfig *LambdaConfigType `json:"lambdaConfig,omitempty"`
	// Specifies MFA configuration details.
	MFAConfiguration *string `json:"mfaConfiguration,omitempty"`
	// The policies associated with the new user pool.
	Policies *UserPoolPolicyType `json:"policies,omitempty"`
	// A string used to name the user pool.
	// +kubebuilder:validation:Required
	PoolName *string `json:"poolName"`
	// An array of schema attributes for the new user pool. These attributes can
	// be standard or custom attributes.
	Schema []*SchemaAttributeType `json:"schema,omitempty"`
	// A string representing the SMS authentication message.
	SmsAuthenticationMessage *string `json:"smsAuthenticationMessage,omitempty"`
	// The SMS configuration.
	SmsConfiguration *SmsConfigurationType `json:"smsConfiguration,omitempty"`
	// A string representing the SMS verification message.
	SmsVerificationMessage *string `json:"smsVerificationMessage,omitempty"`
	// Used to enable advanced security risk detection. Set the key AdvancedSecurityMode
	// to the value "AUDIT".
	UserPoolAddOns *UserPoolAddOnsType `json:"userPoolAddOns,omitempty"`
	// The tag keys and values to assign to the user pool. A tag is a label that
	// you can use to categorize and manage user pools in different ways, such as
	// by purpose, owner, environment, or other criteria.
	UserPoolTags map[string]*string `json:"userPoolTags,omitempty"`
	// Specifies whether email addresses or phone numbers can be specified as usernames
	// when a user signs up.
	UsernameAttributes []*string `json:"usernameAttributes,omitempty"`
	// You can choose to set case sensitivity on the username input for the selected
	// sign-in option. For example, when this is set to False, users will be able
	// to sign in using either "username" or "Username". This configuration is immutable
	// once it has been set. For more information, see UsernameConfigurationType
	// (https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_UsernameConfigurationType.html).
	UsernameConfiguration *UsernameConfigurationType `json:"usernameConfiguration,omitempty"`
	// The template for the verification message that the user sees when the app
	// requests permission to access the user's information.
	VerificationMessageTemplate *VerificationMessageTemplateType `json:"verificationMessageTemplate,omitempty"`
	CustomUserPoolParameters    `json:",inline"`
}

// UserPoolSpec defines the desired state of UserPool
type UserPoolSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       UserPoolParameters `json:"forProvider"`
}

// UserPoolObservation defines the observed state of UserPool
type UserPoolObservation struct {
	// The Amazon Resource Name (ARN) for the user pool.
	ARN *string `json:"arn,omitempty"`
	// The date the user pool was created.
	CreationDate *metav1.Time `json:"creationDate,omitempty"`
	// A custom domain name that you provide to Amazon Cognito. This parameter applies
	// only if you use a custom domain to host the sign-up and sign-in pages for
	// your application. For example: auth.example.com.
	//
	// For more information about adding a custom domain to your user pool, see
	// Using Your Own Domain for the Hosted UI (https://docs.aws.amazon.com/cognito/latest/developerguide/cognito-user-pools-add-custom-domain.html).
	CustomDomain *string `json:"customDomain,omitempty"`
	// Holds the domain prefix if the user pool has a domain associated with it.
	Domain *string `json:"domain,omitempty"`
	// The reason why the email configuration cannot send the messages to your users.
	EmailConfigurationFailure *string `json:"emailConfigurationFailure,omitempty"`
	// A number estimating the size of the user pool.
	EstimatedNumberOfUsers *int64 `json:"estimatedNumberOfUsers,omitempty"`
	// The ID of the user pool.
	ID *string `json:"id,omitempty"`
	// The date the user pool was last modified.
	LastModifiedDate *metav1.Time `json:"lastModifiedDate,omitempty"`
	// The name of the user pool.
	Name *string `json:"name,omitempty"`
	// A container with the schema attributes of a user pool.
	SchemaAttributes []*SchemaAttributeType `json:"schemaAttributes,omitempty"`
	// The reason why the SMS configuration cannot send the messages to your users.
	//
	// This message might include comma-separated values to describe why your SMS
	// configuration can't send messages to user pool end users.
	//
	//    * InvalidSmsRoleAccessPolicyException - The IAM role which Cognito uses
	//    to send SMS messages is not properly configured. For more information,
	//    see SmsConfigurationType (https://docs.aws.amazon.com/cognito-user-identity-pools/latest/APIReference/API_SmsConfigurationType.html).
	//
	//    * SNSSandbox - The account is in SNS Sandbox and messages won’t reach
	//    unverified end users. This parameter won’t get populated with SNSSandbox
	//    if the IAM user creating the user pool doesn’t have SNS permissions.
	//    To learn how to move your account out of the sandbox, see Moving out of
	//    the SMS sandbox (https://docs.aws.amazon.com/sns/latest/dg/sns-sms-sandbox-moving-to-production.html).
	SmsConfigurationFailure *string `json:"smsConfigurationFailure,omitempty"`
	// The status of a user pool.
	Status *string `json:"status,omitempty"`
}

// UserPoolStatus defines the observed state of UserPool.
type UserPoolStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          UserPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserPool is the Schema for the UserPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type UserPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserPoolSpec   `json:"spec"`
	Status            UserPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserPoolList contains a list of UserPools
type UserPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserPool `json:"items"`
}

// Repository type metadata.
var (
	UserPoolKind             = "UserPool"
	UserPoolGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserPoolKind}.String()
	UserPoolKindAPIVersion   = UserPoolKind + "." + GroupVersion.String()
	UserPoolGroupVersionKind = GroupVersion.WithKind(UserPoolKind)
)

func init() {
	SchemeBuilder.Register(&UserPool{}, &UserPoolList{})
}
