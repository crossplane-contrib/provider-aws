/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type BrokerEBSVolumeInfo struct {
	KafkaBrokerNodeID *string `json:"kafkaBrokerNodeID,omitempty"`

	VolumeSizeGB *int64 `json:"volumeSizeGB,omitempty"`
}

// +kubebuilder:skipversion
type BrokerLogs struct {
	// Details of the CloudWatch Logs destination for broker logs.
	CloudWatchLogs *CloudWatchLogs `json:"cloudWatchLogs,omitempty"`
	// Firehose details for BrokerLogs.
	Firehose *Firehose `json:"firehose,omitempty"`
	// The details of the Amazon S3 destination for broker logs.
	S3 *S3 `json:"s3,omitempty"`
}

// +kubebuilder:skipversion
type BrokerNodeGroupInfo struct {
	// The distribution of broker nodes across Availability Zones. By default, broker
	// nodes are distributed among the Availability Zones of your Region. Currently,
	// the only supported value is DEFAULT. You can either specify this value explicitly
	// or leave it out.
	BrokerAZDistribution *string `json:"brokerAZDistribution,omitempty"`

	ClientSubnets []*string `json:"clientSubnets,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	SecurityGroups []*string `json:"securityGroups,omitempty"`
	// Contains information about storage volumes attached to MSK broker nodes.
	StorageInfo *StorageInfo `json:"storageInfo,omitempty"`
}

// +kubebuilder:skipversion
type BrokerNodeInfo struct {
	AttachedENIID *string `json:"attachedENIID,omitempty"`

	ClientSubnet *string `json:"clientSubnet,omitempty"`

	ClientVPCIPAddress *string `json:"clientVPCIPAddress,omitempty"`
	// Information about the current software installed on the cluster.
	CurrentBrokerSoftwareInfo *BrokerSoftwareInfo `json:"currentBrokerSoftwareInfo,omitempty"`

	Endpoints []*string `json:"endpoints,omitempty"`
}

// +kubebuilder:skipversion
type BrokerSoftwareInfo struct {
	ConfigurationARN *string `json:"configurationARN,omitempty"`

	ConfigurationRevision *int64 `json:"configurationRevision,omitempty"`

	KafkaVersion *string `json:"kafkaVersion,omitempty"`
}

// +kubebuilder:skipversion
type ClientAuthentication struct {
	Sasl *Sasl `json:"sasl,omitempty"`
	// Details for client authentication using TLS.
	TLS *TLS `json:"tls,omitempty"`
	// Contains information about unauthenticated traffic to the cluster.
	Unauthenticated *Unauthenticated `json:"unauthenticated,omitempty"`
}

// +kubebuilder:skipversion
type CloudWatchLogs struct {
	Enabled *bool `json:"enabled,omitempty"`

	LogGroup *string `json:"logGroup,omitempty"`
}

// +kubebuilder:skipversion
type ClusterInfo struct {
	ActiveOperationARN *string `json:"activeOperationARN,omitempty"`
	// Describes the setup to be used for Kafka broker nodes in the cluster.
	BrokerNodeGroupInfo *BrokerNodeGroupInfo `json:"brokerNodeGroupInfo,omitempty"`
	// Includes all client authentication information.
	ClientAuthentication *ClientAuthentication `json:"clientAuthentication,omitempty"`

	ClusterARN *string `json:"clusterARN,omitempty"`

	ClusterName *string `json:"clusterName,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// Information about the current software installed on the cluster.
	CurrentBrokerSoftwareInfo *BrokerSoftwareInfo `json:"currentBrokerSoftwareInfo,omitempty"`

	CurrentVersion *string `json:"currentVersion,omitempty"`
	// Includes encryption-related information, such as the AWS KMS key used for
	// encrypting data at rest and whether you want MSK to encrypt your data in
	// transit.
	EncryptionInfo *EncryptionInfo `json:"encryptionInfo,omitempty"`
	// Specifies which metrics are gathered for the MSK cluster. This property has
	// the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER,
	// and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each
	// of these levels of monitoring, see Monitoring (https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html).
	EnhancedMonitoring *string `json:"enhancedMonitoring,omitempty"`
	// You can configure your MSK cluster to send broker logs to different destination
	// types. This is a container for the configuration details related to broker
	// logs.
	LoggingInfo *LoggingInfo `json:"loggingInfo,omitempty"`

	NumberOfBrokerNodes *int64 `json:"numberOfBrokerNodes,omitempty"`
	// JMX and Node monitoring for the MSK cluster.
	OpenMonitoring *OpenMonitoring `json:"openMonitoring,omitempty"`
	// The state of a Kafka cluster.
	State *string `json:"state,omitempty"`
	// Contains information about the state of the Amazon MSK cluster.
	StateInfo *StateInfo `json:"stateInfo,omitempty"`

	Tags map[string]*string `json:"tags,omitempty"`

	ZookeeperConnectString *string `json:"zookeeperConnectString,omitempty"`

	ZookeeperConnectStringTLS *string `json:"zookeeperConnectStringTLS,omitempty"`
}

// +kubebuilder:skipversion
type ClusterOperationInfo struct {
	ClientRequestID *string `json:"clientRequestID,omitempty"`

	ClusterARN *string `json:"clusterARN,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	EndTime *metav1.Time `json:"endTime,omitempty"`

	OperationARN *string `json:"operationARN,omitempty"`

	OperationState *string `json:"operationState,omitempty"`

	OperationType *string `json:"operationType,omitempty"`
}

// +kubebuilder:skipversion
type ClusterOperationStep struct {
	StepName *string `json:"stepName,omitempty"`
}

// +kubebuilder:skipversion
type ClusterOperationStepInfo struct {
	StepStatus *string `json:"stepStatus,omitempty"`
}

// +kubebuilder:skipversion
type CompatibleKafkaVersion struct {
	SourceVersion *string `json:"sourceVersion,omitempty"`

	TargetVersions []*string `json:"targetVersions,omitempty"`
}

// +kubebuilder:skipversion
type ConfigurationInfo struct {
	ARN *string `json:"arn,omitempty"`

	Revision *int64 `json:"revision,omitempty"`
}

// +kubebuilder:skipversion
type ConfigurationRevision struct {
	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	Description *string `json:"description,omitempty"`

	Revision *int64 `json:"revision,omitempty"`
}

// +kubebuilder:skipversion
type Configuration_SDK struct {
	ARN *string `json:"arn,omitempty"`

	CreationTime *metav1.Time `json:"creationTime,omitempty"`

	Description *string `json:"description,omitempty"`

	KafkaVersions []*string `json:"kafkaVersions,omitempty"`
	// Describes a configuration revision.
	LatestRevision *ConfigurationRevision `json:"latestRevision,omitempty"`

	Name *string `json:"name,omitempty"`
	// The state of a configuration.
	State *string `json:"state,omitempty"`
}

// +kubebuilder:skipversion
type EBSStorageInfo struct {
	VolumeSize *int64 `json:"volumeSize,omitempty"`
}

// +kubebuilder:skipversion
type EncryptionAtRest struct {
	DataVolumeKMSKeyID *string `json:"dataVolumeKMSKeyID,omitempty"`
}

// +kubebuilder:skipversion
type EncryptionInTransit struct {
	// Client-broker encryption in transit setting.
	ClientBroker *string `json:"clientBroker,omitempty"`

	InCluster *bool `json:"inCluster,omitempty"`
}

// +kubebuilder:skipversion
type EncryptionInfo struct {
	// The data-volume encryption details.
	EncryptionAtRest *EncryptionAtRest `json:"encryptionAtRest,omitempty"`
	// The settings for encrypting data in transit.
	EncryptionInTransit *EncryptionInTransit `json:"encryptionInTransit,omitempty"`
}

// +kubebuilder:skipversion
type ErrorInfo struct {
	ErrorCode *string `json:"errorCode,omitempty"`

	ErrorString *string `json:"errorString,omitempty"`
}

// +kubebuilder:skipversion
type Firehose struct {
	DeliveryStream *string `json:"deliveryStream,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type IAM struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type JmxExporter struct {
	EnabledInBroker *bool `json:"enabledInBroker,omitempty"`
}

// +kubebuilder:skipversion
type JmxExporterInfo struct {
	EnabledInBroker *bool `json:"enabledInBroker,omitempty"`
}

// +kubebuilder:skipversion
type KafkaVersion struct {
	Version *string `json:"version,omitempty"`
}

// +kubebuilder:skipversion
type LoggingInfo struct {
	// The broker logs configuration for this MSK cluster.
	BrokerLogs *BrokerLogs `json:"brokerLogs,omitempty"`
}

// +kubebuilder:skipversion
type MutableClusterInfo struct {
	// Includes all client authentication information.
	ClientAuthentication *ClientAuthentication `json:"clientAuthentication,omitempty"`
	// Includes encryption-related information, such as the AWS KMS key used for
	// encrypting data at rest and whether you want MSK to encrypt your data in
	// transit.
	EncryptionInfo *EncryptionInfo `json:"encryptionInfo,omitempty"`
	// Specifies which metrics are gathered for the MSK cluster. This property has
	// the following possible values: DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER,
	// and PER_TOPIC_PER_PARTITION. For a list of the metrics associated with each
	// of these levels of monitoring, see Monitoring (https://docs.aws.amazon.com/msk/latest/developerguide/monitoring.html).
	EnhancedMonitoring *string `json:"enhancedMonitoring,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	KafkaVersion *string `json:"kafkaVersion,omitempty"`
	// You can configure your MSK cluster to send broker logs to different destination
	// types. This is a container for the configuration details related to broker
	// logs.
	LoggingInfo *LoggingInfo `json:"loggingInfo,omitempty"`

	NumberOfBrokerNodes *int64 `json:"numberOfBrokerNodes,omitempty"`
	// JMX and Node monitoring for the MSK cluster.
	OpenMonitoring *OpenMonitoring `json:"openMonitoring,omitempty"`
}

// +kubebuilder:skipversion
type NodeExporter struct {
	EnabledInBroker *bool `json:"enabledInBroker,omitempty"`
}

// +kubebuilder:skipversion
type NodeExporterInfo struct {
	EnabledInBroker *bool `json:"enabledInBroker,omitempty"`
}

// +kubebuilder:skipversion
type NodeInfo struct {
	AddedToClusterTime *string `json:"addedToClusterTime,omitempty"`

	InstanceType *string `json:"instanceType,omitempty"`

	NodeARN *string `json:"nodeARN,omitempty"`
}

// +kubebuilder:skipversion
type OpenMonitoring struct {
	// Prometheus settings for open monitoring.
	Prometheus *Prometheus `json:"prometheus,omitempty"`
}

// +kubebuilder:skipversion
type OpenMonitoringInfo struct {
	// Prometheus settings.
	Prometheus *PrometheusInfo `json:"prometheus,omitempty"`
}

// +kubebuilder:skipversion
type Prometheus struct {
	// Indicates whether you want to enable or disable the JMX Exporter.
	JmxExporter *JmxExporter `json:"jmxExporter,omitempty"`
	// Indicates whether you want to enable or disable the Node Exporter.
	NodeExporter *NodeExporter `json:"nodeExporter,omitempty"`
}

// +kubebuilder:skipversion
type PrometheusInfo struct {
	// Indicates whether you want to enable or disable the JMX Exporter.
	JmxExporter *JmxExporterInfo `json:"jmxExporter,omitempty"`
	// Indicates whether you want to enable or disable the Node Exporter.
	NodeExporter *NodeExporterInfo `json:"nodeExporter,omitempty"`
}

// +kubebuilder:skipversion
type S3 struct {
	Bucket *string `json:"bucket,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	Prefix *string `json:"prefix,omitempty"`
}

// +kubebuilder:skipversion
type Sasl struct {
	IAM *IAM `json:"iam,omitempty"`

	Scram *Scram `json:"scram,omitempty"`
}

// +kubebuilder:skipversion
type Scram struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type StateInfo struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`
}

// +kubebuilder:skipversion
type StorageInfo struct {
	// Contains information about the EBS storage volumes attached to Kafka broker
	// nodes.
	EBSStorageInfo *EBSStorageInfo `json:"ebsStorageInfo,omitempty"`
}

// +kubebuilder:skipversion
type TLS struct {
	CertificateAuthorityARNList []*string `json:"certificateAuthorityARNList,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type Unauthenticated struct {
	Enabled *bool `json:"enabled,omitempty"`
}

// +kubebuilder:skipversion
type UnprocessedScramSecret struct {
	ErrorCode *string `json:"errorCode,omitempty"`

	ErrorMessage *string `json:"errorMessage,omitempty"`

	SecretARN *string `json:"secretARN,omitempty"`
}

// +kubebuilder:skipversion
type ZookeeperNodeInfo struct {
	AttachedENIID *string `json:"attachedENIID,omitempty"`

	ClientVPCIPAddress *string `json:"clientVPCIPAddress,omitempty"`

	Endpoints []*string `json:"endpoints,omitempty"`

	ZookeeperVersion *string `json:"zookeeperVersion,omitempty"`
}
