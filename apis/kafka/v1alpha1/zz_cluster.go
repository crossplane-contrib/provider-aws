/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// ClusterParameters defines the desired state of Cluster
type ClusterParameters struct {
	// Region is which region the Cluster will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// Includes all client authentication related information.
	ClientAuthentication *ClientAuthentication `json:"clientAuthentication,omitempty"`
	// Includes all encryption-related information.
	EncryptionInfo *EncryptionInfo `json:"encryptionInfo,omitempty"`
	// Specifies the level of monitoring for the MSK cluster. The possible values
	// are DEFAULT, PER_BROKER, PER_TOPIC_PER_BROKER, and PER_TOPIC_PER_PARTITION.
	EnhancedMonitoring *string `json:"enhancedMonitoring,omitempty"`
	// The version of Apache Kafka.
	// +kubebuilder:validation:Required
	KafkaVersion *string `json:"kafkaVersion"`
	// LoggingInfo details.
	LoggingInfo *LoggingInfo `json:"loggingInfo,omitempty"`
	// The number of Kafka broker nodes in the Amazon MSK cluster.
	// +kubebuilder:validation:Required
	NumberOfBrokerNodes *int64 `json:"numberOfBrokerNodes"`
	// The settings for open monitoring.
	OpenMonitoring *OpenMonitoringInfo `json:"openMonitoring,omitempty"`
	// Create tags when creating the cluster.
	Tags                    map[string]*string `json:"tags,omitempty"`
	CustomClusterParameters `json:",inline"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       ClusterParameters `json:"forProvider"`
}

// ClusterObservation defines the observed state of Cluster
type ClusterObservation struct {
	// The Amazon Resource Name (ARN) of the cluster.
	ClusterARN *string `json:"clusterARN,omitempty"`
	// The name of the MSK cluster.
	ClusterName *string `json:"clusterName,omitempty"`
	// The state of the cluster. The possible states are ACTIVE, CREATING, DELETING,
	// FAILED, HEALING, MAINTENANCE, REBOOTING_BROKER, and UPDATING.
	State *string `json:"state,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterSpec   `json:"spec"`
	Status            ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	ClusterKind             = "Cluster"
	ClusterGroupKind        = schema.GroupKind{Group: Group, Kind: ClusterKind}.String()
	ClusterKindAPIVersion   = ClusterKind + "." + GroupVersion.String()
	ClusterGroupVersionKind = GroupVersion.WithKind(ClusterKind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
