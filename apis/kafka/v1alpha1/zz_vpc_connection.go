/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// VPCConnectionParameters defines the desired state of VPCConnection
type VPCConnectionParameters struct {
	// Region is which region the VPCConnection will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	// +kubebuilder:validation:Required
	Authentication *string `json:"authentication"`
	// The list of subnets in the client VPC.
	// +kubebuilder:validation:Required
	ClientSubnets []*string `json:"clientSubnets"`
	// The list of security groups to attach to the VPC connection.
	// +kubebuilder:validation:Required
	SecurityGroups []*string `json:"securityGroups"`
	// Create tags when creating the VPC connection.
	Tags map[string]*string `json:"tags,omitempty"`
	// The Amazon Resource Name (ARN) of the cluster.
	// +kubebuilder:validation:Required
	TargetClusterARN *string `json:"targetClusterARN"`
	// The VPC ID of the VPC connection.
	// +kubebuilder:validation:Required
	VPCID                         *string `json:"vpcID"`
	CustomVPCConnectionParameters `json:",inline"`
}

// VPCConnectionSpec defines the desired state of VPCConnection
type VPCConnectionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VPCConnectionParameters `json:"forProvider"`
}

// VPCConnectionObservation defines the observed state of VPCConnection
type VPCConnectionObservation struct {
	// The time when the VPC connection was created.
	CreationTime *metav1.Time `json:"creationTime,omitempty"`
	// The state of the VPC connection. The only possible state is CREATING.
	State *string `json:"state,omitempty"`
	// The Amazon Resource Name (ARN) of the VPC connection.
	VPCConnectionARN *string `json:"vpcConnectionARN,omitempty"`
}

// VPCConnectionStatus defines the observed state of VPCConnection.
type VPCConnectionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VPCConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPCConnection is the Schema for the VPCConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VPCConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPCConnectionSpec   `json:"spec"`
	Status            VPCConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPCConnectionList contains a list of VPCConnections
type VPCConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPCConnection `json:"items"`
}

// Repository type metadata.
var (
	VPCConnectionKind             = "VPCConnection"
	VPCConnectionGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPCConnectionKind}.String()
	VPCConnectionKindAPIVersion   = VPCConnectionKind + "." + GroupVersion.String()
	VPCConnectionGroupVersionKind = GroupVersion.WithKind(VPCConnectionKind)
)

func init() {
	SchemeBuilder.Register(&VPCConnection{}, &VPCConnectionList{})
}
