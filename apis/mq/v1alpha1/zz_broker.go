/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// BrokerParameters defines the desired state of Broker
type BrokerParameters struct {
	// Region is which region the Broker will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`

	AuthenticationStrategy *string `json:"authenticationStrategy,omitempty"`

	AutoMinorVersionUpgrade *bool `json:"autoMinorVersionUpgrade,omitempty"`

	BrokerName *string `json:"brokerName,omitempty"`

	Configuration *ConfigurationID `json:"configuration,omitempty"`

	CreatorRequestID *string `json:"creatorRequestID,omitempty"`

	DeploymentMode *string `json:"deploymentMode,omitempty"`

	EncryptionOptions *EncryptionOptions `json:"encryptionOptions,omitempty"`

	EngineType *string `json:"engineType,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	HostInstanceType *string `json:"hostInstanceType,omitempty"`

	LDAPServerMetadata *LDAPServerMetadataInput `json:"ldapServerMetadata,omitempty"`

	Logs *Logs `json:"logs,omitempty"`

	MaintenanceWindowStartTime *WeeklyStartTime `json:"maintenanceWindowStartTime,omitempty"`

	PubliclyAccessible *bool `json:"publiclyAccessible,omitempty"`

	SecurityGroups []*string `json:"securityGroups,omitempty"`

	StorageType *string `json:"storageType,omitempty"`

	SubnetIDs []*string `json:"subnetIDs,omitempty"`

	Tags map[string]*string `json:"tags,omitempty"`

	Users                  []*User `json:"users,omitempty"`
	CustomBrokerParameters `json:",inline"`
}

// BrokerSpec defines the desired state of Broker
type BrokerSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       BrokerParameters `json:"forProvider"`
}

// BrokerObservation defines the observed state of Broker
type BrokerObservation struct {
	BrokerARN *string `json:"brokerARN,omitempty"`

	BrokerID *string `json:"brokerID,omitempty"`
}

// BrokerStatus defines the observed state of Broker.
type BrokerStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          BrokerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Broker is the Schema for the Brokers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="Broker engine",type="string",JSONPath=".spec.forProvider.engineType"
// +kubebuilder:printcolumn:name="Deployment mode",type="string",JSONPath=".spec.forProvider.deploymentMode"
// +kubebuilder:printcolumn:name="Instance type",type="string",JSONPath=".spec.forProvider.hostInstanceType"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Broker struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BrokerSpec   `json:"spec"`
	Status            BrokerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BrokerList contains a list of Brokers
type BrokerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Broker `json:"items"`
}

// Repository type metadata.
var (
	BrokerKind             = "Broker"
	BrokerGroupKind        = schema.GroupKind{Group: Group, Kind: BrokerKind}.String()
	BrokerKindAPIVersion   = BrokerKind + "." + GroupVersion.String()
	BrokerGroupVersionKind = GroupVersion.WithKind(BrokerKind)
)

func init() {
	SchemeBuilder.Register(&Broker{}, &BrokerList{})
}
