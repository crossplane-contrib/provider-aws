/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// FunctionParameters defines the desired state of Function
type FunctionParameters struct {
	// Region is which region the Function will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The function code. For more information about writing a CloudFront function,
	// see Writing function code for CloudFront Functions (https://docs.aws.amazon.com/AmazonCloudFront/latest/DeveloperGuide/writing-function-code.html)
	// in the Amazon CloudFront Developer Guide.
	// +kubebuilder:validation:Required
	FunctionCode []byte `json:"functionCode"`
	// Configuration information about the function, including an optional comment
	// and the functionâ€™s runtime.
	// +kubebuilder:validation:Required
	FunctionConfig *FunctionConfig `json:"functionConfig"`
	// A name to identify the function.
	// +kubebuilder:validation:Required
	Name                     *string `json:"name"`
	CustomFunctionParameters `json:",inline"`
}

// FunctionSpec defines the desired state of Function
type FunctionSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       FunctionParameters `json:"forProvider"`
}

// FunctionObservation defines the observed state of Function
type FunctionObservation struct {
	// The version identifier for the current version of the CloudFront function.
	ETag *string `json:"eTag,omitempty"`
	// Contains configuration information and metadata about a CloudFront function.
	FunctionSummary *FunctionSummary `json:"functionSummary,omitempty"`
	// The URL of the CloudFront function. Use the URL to manage the function with
	// the CloudFront API.
	Location *string `json:"location,omitempty"`
}

// FunctionStatus defines the observed state of Function.
type FunctionStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          FunctionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Function is the Schema for the Functions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Function struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FunctionSpec   `json:"spec"`
	Status            FunctionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FunctionList contains a list of Functions
type FunctionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Function `json:"items"`
}

// Repository type metadata.
var (
	FunctionKind             = "Function"
	FunctionGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FunctionKind}.String()
	FunctionKindAPIVersion   = FunctionKind + "." + GroupVersion.String()
	FunctionGroupVersionKind = GroupVersion.WithKind(FunctionKind)
)

func init() {
	SchemeBuilder.Register(&Function{}, &FunctionList{})
}
