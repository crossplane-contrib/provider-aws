/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// CachePolicyParameters defines the desired state of CachePolicy
type CachePolicyParameters struct {
	// Region is which region the CachePolicy will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A cache policy configuration.
	// +kubebuilder:validation:Required
	CachePolicyConfig           *CachePolicyConfig `json:"cachePolicyConfig"`
	CustomCachePolicyParameters `json:",inline"`
}

// CachePolicySpec defines the desired state of CachePolicy
type CachePolicySpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CachePolicyParameters `json:"forProvider"`
}

// CachePolicyObservation defines the observed state of CachePolicy
type CachePolicyObservation struct {
	// A cache policy.
	CachePolicy *CachePolicy_SDK `json:"cachePolicy,omitempty"`
	// The current version of the cache policy.
	ETag *string `json:"eTag,omitempty"`
	// The fully qualified URI of the cache policy just created.
	Location *string `json:"location,omitempty"`
}

// CachePolicyStatus defines the observed state of CachePolicy.
type CachePolicyStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CachePolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CachePolicy is the Schema for the CachePolicies API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CachePolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CachePolicySpec   `json:"spec"`
	Status            CachePolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CachePolicyList contains a list of CachePolicies
type CachePolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CachePolicy `json:"items"`
}

// Repository type metadata.
var (
	CachePolicyKind             = "CachePolicy"
	CachePolicyGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CachePolicyKind}.String()
	CachePolicyKindAPIVersion   = CachePolicyKind + "." + GroupVersion.String()
	CachePolicyGroupVersionKind = GroupVersion.WithKind(CachePolicyKind)
)

func init() {
	SchemeBuilder.Register(&CachePolicy{}, &CachePolicyList{})
}
