/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// KeyValueStoreParameters defines the desired state of KeyValueStore
type KeyValueStoreParameters struct {
	// Region is which region the KeyValueStore will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The comment of the Key Value Store.
	Comment *string `json:"comment,omitempty"`
	// The S3 bucket that provides the source for the import. The source must be
	// in a valid JSON format.
	ImportSource *ImportSource `json:"importSource,omitempty"`
	// The name of the Key Value Store. The maximum length of the name is 32 characters.
	// +kubebuilder:validation:Required
	Name                          *string `json:"name"`
	CustomKeyValueStoreParameters `json:",inline"`
}

// KeyValueStoreSpec defines the desired state of KeyValueStore
type KeyValueStoreSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       KeyValueStoreParameters `json:"forProvider"`
}

// KeyValueStoreObservation defines the observed state of KeyValueStore
type KeyValueStoreObservation struct {
	// The ETag in the resulting Key Value Store.
	ETag *string `json:"eTag,omitempty"`
	// The resulting Key Value Store.
	KeyValueStore *KeyValueStore_SDK `json:"keyValueStore,omitempty"`
	// The location of the resulting Key Value Store.
	Location *string `json:"location,omitempty"`

	CustomKeyValueStoreObservation `json:",inline"`
}

// KeyValueStoreStatus defines the observed state of KeyValueStore.
type KeyValueStoreStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          KeyValueStoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// KeyValueStore is the Schema for the KeyValueStores API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type KeyValueStore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              KeyValueStoreSpec   `json:"spec"`
	Status            KeyValueStoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// KeyValueStoreList contains a list of KeyValueStores
type KeyValueStoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []KeyValueStore `json:"items"`
}

// Repository type metadata.
var (
	KeyValueStoreKind             = "KeyValueStore"
	KeyValueStoreGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: KeyValueStoreKind}.String()
	KeyValueStoreKindAPIVersion   = KeyValueStoreKind + "." + GroupVersion.String()
	KeyValueStoreGroupVersionKind = GroupVersion.WithKind(KeyValueStoreKind)
)

func init() {
	SchemeBuilder.Register(&KeyValueStore{}, &KeyValueStoreList{})
}
