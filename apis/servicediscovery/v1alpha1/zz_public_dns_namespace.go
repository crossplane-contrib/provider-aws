/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// PublicDNSNamespaceParameters defines the desired state of PublicDNSNamespace
type PublicDNSNamespaceParameters struct {
	// Region is which region the PublicDNSNamespace will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A description for the namespace.
	Description *string `json:"description,omitempty"`
	// The name that you want to assign to this namespace.
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// Properties for the public DNS namespace.
	Properties *PublicDNSNamespaceProperties `json:"properties,omitempty"`
	// The tags to add to the namespace. Each tag consists of a key and an optional
	// value that you define. Tags keys can be up to 128 characters in length, and
	// tag values can be up to 256 characters in length.
	Tags                               []*Tag `json:"tags,omitempty"`
	CustomPublicDNSNamespaceParameters `json:",inline"`
}

// PublicDNSNamespaceSpec defines the desired state of PublicDNSNamespace
type PublicDNSNamespaceSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PublicDNSNamespaceParameters `json:"forProvider"`
}

// PublicDNSNamespaceObservation defines the observed state of PublicDNSNamespace
type PublicDNSNamespaceObservation struct {
	// A value that you can use to determine whether the request completed successfully.
	// To get the status of the operation, see GetOperation (https://docs.aws.amazon.com/cloud-map/latest/api/API_GetOperation.html).
	OperationID *string `json:"operationID,omitempty"`
}

// PublicDNSNamespaceStatus defines the observed state of PublicDNSNamespace.
type PublicDNSNamespaceStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PublicDNSNamespaceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PublicDNSNamespace is the Schema for the PublicDNSNamespaces API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type PublicDNSNamespace struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PublicDNSNamespaceSpec   `json:"spec"`
	Status            PublicDNSNamespaceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PublicDNSNamespaceList contains a list of PublicDNSNamespaces
type PublicDNSNamespaceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PublicDNSNamespace `json:"items"`
}

// Repository type metadata.
var (
	PublicDNSNamespaceKind             = "PublicDNSNamespace"
	PublicDNSNamespaceGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PublicDNSNamespaceKind}.String()
	PublicDNSNamespaceKindAPIVersion   = PublicDNSNamespaceKind + "." + GroupVersion.String()
	PublicDNSNamespaceGroupVersionKind = GroupVersion.WithKind(PublicDNSNamespaceKind)
)

func init() {
	SchemeBuilder.Register(&PublicDNSNamespace{}, &PublicDNSNamespaceList{})
}
