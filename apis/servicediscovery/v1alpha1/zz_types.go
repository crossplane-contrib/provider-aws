/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type DNSConfig struct {
	DNSRecords []*DNSRecord `json:"dnsRecords,omitempty"`

	NamespaceID *string `json:"namespaceID,omitempty"`

	RoutingPolicy *string `json:"routingPolicy,omitempty"`
}

// +kubebuilder:skipversion
type DNSConfigChange struct {
	DNSRecords []*DNSRecord `json:"dnsRecords,omitempty"`
}

// +kubebuilder:skipversion
type DNSProperties struct {
	HostedZoneID *string `json:"hostedZoneID,omitempty"`
	// Start of Authority (SOA) properties for a public or private DNS namespace.
	SOA *SOA `json:"sOA,omitempty"`
}

// +kubebuilder:skipversion
type DNSRecord struct {
	TTL *int64 `json:"tTL,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type HTTPInstanceSummary struct {
	InstanceID *string `json:"instanceID,omitempty"`

	NamespaceName *string `json:"namespaceName,omitempty"`

	ServiceName *string `json:"serviceName,omitempty"`
}

// +kubebuilder:skipversion
type HTTPNamespaceChange struct {
	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type HealthCheckConfig struct {
	FailureThreshold *int64 `json:"failureThreshold,omitempty"`

	ResourcePath *string `json:"resourcePath,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type HealthCheckCustomConfig struct {
	FailureThreshold *int64 `json:"failureThreshold,omitempty"`
}

// +kubebuilder:skipversion
type Instance struct {
	CreatorRequestID *string `json:"creatorRequestID,omitempty"`

	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type InstanceSummary struct {
	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type Namespace struct {
	ARN *string `json:"arn,omitempty"`

	CreateDate *metav1.Time `json:"createDate,omitempty"`

	CreatorRequestID *string `json:"creatorRequestID,omitempty"`

	Description *string `json:"description,omitempty"`

	ID *string `json:"id,omitempty"`

	ServiceCount *int64 `json:"serviceCount,omitempty"`
}

// +kubebuilder:skipversion
type NamespaceFilter struct {
	Condition *string `json:"condition,omitempty"`

	Values []*string `json:"values,omitempty"`
}

// +kubebuilder:skipversion
type NamespaceSummary struct {
	ARN *string `json:"arn,omitempty"`

	CreateDate *metav1.Time `json:"createDate,omitempty"`

	Description *string `json:"description,omitempty"`

	ID *string `json:"id,omitempty"`

	ServiceCount *int64 `json:"serviceCount,omitempty"`
}

// +kubebuilder:skipversion
type Operation struct {
	CreateDate *metav1.Time `json:"createDate,omitempty"`

	ID *string `json:"id,omitempty"`

	UpdateDate *metav1.Time `json:"updateDate,omitempty"`
}

// +kubebuilder:skipversion
type OperationFilter struct {
	Condition *string `json:"condition,omitempty"`

	Values []*string `json:"values,omitempty"`
}

// +kubebuilder:skipversion
type OperationSummary struct {
	ID *string `json:"id,omitempty"`
}

// +kubebuilder:skipversion
type PrivateDNSNamespaceChange struct {
	Description *string `json:"description,omitempty"`
	// Updated properties for the private DNS namespace.
	Properties *PrivateDNSNamespacePropertiesChange `json:"properties,omitempty"`
}

// +kubebuilder:skipversion
type PrivateDNSNamespaceProperties struct {
	// DNS properties for the private DNS namespace.
	DNSProperties *PrivateDNSPropertiesMutable `json:"dnsProperties,omitempty"`
}

// +kubebuilder:skipversion
type PrivateDNSNamespacePropertiesChange struct {
	// Updated DNS properties for the private DNS namespace.
	DNSProperties *PrivateDNSPropertiesMutableChange `json:"dnsProperties,omitempty"`
}

// +kubebuilder:skipversion
type PrivateDNSPropertiesMutable struct {
	// Start of Authority (SOA) properties for a public or private DNS namespace.
	SOA *SOA `json:"sOA,omitempty"`
}

// +kubebuilder:skipversion
type PrivateDNSPropertiesMutableChange struct {
	// Updated Start of Authority (SOA) properties for a public or private DNS namespace.
	SOA *SOAChange `json:"sOA,omitempty"`
}

// +kubebuilder:skipversion
type PublicDNSNamespaceChange struct {
	Description *string `json:"description,omitempty"`
	// Updated properties for the public DNS namespace.
	Properties *PublicDNSNamespacePropertiesChange `json:"properties,omitempty"`
}

// +kubebuilder:skipversion
type PublicDNSNamespaceProperties struct {
	// DNS properties for the public DNS namespace.
	DNSProperties *PublicDNSPropertiesMutable `json:"dnsProperties,omitempty"`
}

// +kubebuilder:skipversion
type PublicDNSNamespacePropertiesChange struct {
	// Updated DNS properties for the public DNS namespace.
	DNSProperties *PublicDNSPropertiesMutableChange `json:"dnsProperties,omitempty"`
}

// +kubebuilder:skipversion
type PublicDNSPropertiesMutable struct {
	// Start of Authority (SOA) properties for a public or private DNS namespace.
	SOA *SOA `json:"sOA,omitempty"`
}

// +kubebuilder:skipversion
type PublicDNSPropertiesMutableChange struct {
	// Updated Start of Authority (SOA) properties for a public or private DNS namespace.
	SOA *SOAChange `json:"sOA,omitempty"`
}

// +kubebuilder:skipversion
type SOA struct {
	TTL *int64 `json:"tTL,omitempty"`
}

// +kubebuilder:skipversion
type SOAChange struct {
	TTL *int64 `json:"tTL,omitempty"`
}

// +kubebuilder:skipversion
type ServiceChange struct {
	Description *string `json:"description,omitempty"`
	// A complex type that contains information about changes to the Route 53 DNS
	// records that Cloud Map creates when you register an instance.
	DNSConfig *DNSConfigChange `json:"dnsConfig,omitempty"`
	// Public DNS and HTTP namespaces only. A complex type that contains settings
	// for an optional health check. If you specify settings for a health check,
	// Cloud Map associates the health check with the records that you specify in
	// DnsConfig.
	//
	// If you specify a health check configuration, you can specify either HealthCheckCustomConfig
	// or HealthCheckConfig but not both.
	//
	// Health checks are basic Route 53 health checks that monitor an Amazon Web
	// Services endpoint. For information about pricing for health checks, see Amazon
	// Route 53 Pricing (http://aws.amazon.com/route53/pricing/).
	//
	// Note the following about configuring health checks.
	//
	// A and AAAA records
	//
	// If DnsConfig includes configurations for both A and AAAA records, Cloud Map
	// creates a health check that uses the IPv4 address to check the health of
	// the resource. If the endpoint tthat's specified by the IPv4 address is unhealthy,
	// Route 53 considers both the A and AAAA records to be unhealthy.
	//
	// CNAME records
	//
	// You can't specify settings for HealthCheckConfig when the DNSConfig includes
	// CNAME for the value of Type. If you do, the CreateService request will fail
	// with an InvalidInput error.
	//
	// Request interval
	//
	// A Route 53 health checker in each health-checking Amazon Web Services Region
	// sends a health check request to an endpoint every 30 seconds. On average,
	// your endpoint receives a health check request about every two seconds. However,
	// health checkers don't coordinate with one another. Therefore, you might sometimes
	// see several requests in one second that's followed by a few seconds with
	// no health checks at all.
	//
	// Health checking regions
	//
	// Health checkers perform checks from all Route 53 health-checking Regions.
	// For a list of the current Regions, see Regions (https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-Regions).
	//
	// Alias records
	//
	// When you register an instance, if you include the AWS_ALIAS_DNS_NAME attribute,
	// Cloud Map creates a Route 53 alias record. Note the following:
	//
	//    * Route 53 automatically sets EvaluateTargetHealth to true for alias records.
	//    When EvaluateTargetHealth is true, the alias record inherits the health
	//    of the referenced Amazon Web Services resource. such as an ELB load balancer.
	//    For more information, see EvaluateTargetHealth (https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-EvaluateTargetHealth).
	//
	//    * If you include HealthCheckConfig and then use the service to register
	//    an instance that creates an alias record, Route 53 doesn't create the
	//    health check.
	//
	// Charges for health checks
	//
	// Health checks are basic Route 53 health checks that monitor an Amazon Web
	// Services endpoint. For information about pricing for health checks, see Amazon
	// Route 53 Pricing (http://aws.amazon.com/route53/pricing/).
	HealthCheckConfig *HealthCheckConfig `json:"healthCheckConfig,omitempty"`
}

// +kubebuilder:skipversion
type ServiceFilter struct {
	Condition *string `json:"condition,omitempty"`

	Name *string `json:"name,omitempty"`

	Values []*string `json:"values,omitempty"`
}

// +kubebuilder:skipversion
type ServiceSummary struct {
	ARN *string `json:"arn,omitempty"`

	CreateDate *metav1.Time `json:"createDate,omitempty"`

	Description *string `json:"description,omitempty"`
	// A complex type that contains information about the Amazon Route 53 DNS records
	// that you want Cloud Map to create when you register an instance.
	//
	// The record types of a service can only be changed by deleting the service
	// and recreating it with a new Dnsconfig.
	DNSConfig *DNSConfig `json:"dnsConfig,omitempty"`
	// Public DNS and HTTP namespaces only. A complex type that contains settings
	// for an optional health check. If you specify settings for a health check,
	// Cloud Map associates the health check with the records that you specify in
	// DnsConfig.
	//
	// If you specify a health check configuration, you can specify either HealthCheckCustomConfig
	// or HealthCheckConfig but not both.
	//
	// Health checks are basic Route 53 health checks that monitor an Amazon Web
	// Services endpoint. For information about pricing for health checks, see Amazon
	// Route 53 Pricing (http://aws.amazon.com/route53/pricing/).
	//
	// Note the following about configuring health checks.
	//
	// A and AAAA records
	//
	// If DnsConfig includes configurations for both A and AAAA records, Cloud Map
	// creates a health check that uses the IPv4 address to check the health of
	// the resource. If the endpoint tthat's specified by the IPv4 address is unhealthy,
	// Route 53 considers both the A and AAAA records to be unhealthy.
	//
	// CNAME records
	//
	// You can't specify settings for HealthCheckConfig when the DNSConfig includes
	// CNAME for the value of Type. If you do, the CreateService request will fail
	// with an InvalidInput error.
	//
	// Request interval
	//
	// A Route 53 health checker in each health-checking Amazon Web Services Region
	// sends a health check request to an endpoint every 30 seconds. On average,
	// your endpoint receives a health check request about every two seconds. However,
	// health checkers don't coordinate with one another. Therefore, you might sometimes
	// see several requests in one second that's followed by a few seconds with
	// no health checks at all.
	//
	// Health checking regions
	//
	// Health checkers perform checks from all Route 53 health-checking Regions.
	// For a list of the current Regions, see Regions (https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-Regions).
	//
	// Alias records
	//
	// When you register an instance, if you include the AWS_ALIAS_DNS_NAME attribute,
	// Cloud Map creates a Route 53 alias record. Note the following:
	//
	//    * Route 53 automatically sets EvaluateTargetHealth to true for alias records.
	//    When EvaluateTargetHealth is true, the alias record inherits the health
	//    of the referenced Amazon Web Services resource. such as an ELB load balancer.
	//    For more information, see EvaluateTargetHealth (https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-EvaluateTargetHealth).
	//
	//    * If you include HealthCheckConfig and then use the service to register
	//    an instance that creates an alias record, Route 53 doesn't create the
	//    health check.
	//
	// Charges for health checks
	//
	// Health checks are basic Route 53 health checks that monitor an Amazon Web
	// Services endpoint. For information about pricing for health checks, see Amazon
	// Route 53 Pricing (http://aws.amazon.com/route53/pricing/).
	HealthCheckConfig *HealthCheckConfig `json:"healthCheckConfig,omitempty"`
	// A complex type that contains information about an optional custom health
	// check. A custom health check, which requires that you use a third-party health
	// checker to evaluate the health of your resources, is useful in the following
	// circumstances:
	//
	//    * You can't use a health check that's defined by HealthCheckConfig because
	//    the resource isn't available over the internet. For example, you can use
	//    a custom health check when the instance is in an Amazon VPC. (To check
	//    the health of resources in a VPC, the health checker must also be in the
	//    VPC.)
	//
	//    * You want to use a third-party health checker regardless of where your
	//    resources are located.
	//
	// If you specify a health check configuration, you can specify either HealthCheckCustomConfig
	// or HealthCheckConfig but not both.
	//
	// To change the status of a custom health check, submit an UpdateInstanceCustomHealthStatus
	// request. Cloud Map doesn't monitor the status of the resource, it just keeps
	// a record of the status specified in the most recent UpdateInstanceCustomHealthStatus
	// request.
	//
	// Here's how custom health checks work:
	//
	// You create a service.
	//
	// You register an instance.
	//
	// You configure a third-party health checker to monitor the resource that's
	// associated with the new instance.
	//
	// Cloud Map doesn't check the health of the resource directly.
	//
	// The third-party health-checker determines that the resource is unhealthy
	// and notifies your application.
	//
	// Your application submits an UpdateInstanceCustomHealthStatus request.
	//
	// Cloud Map waits for 30 seconds.
	//
	// If another UpdateInstanceCustomHealthStatus request doesn't arrive during
	// that time to change the status back to healthy, Cloud Map stops routing traffic
	// to the resource.
	HealthCheckCustomConfig *HealthCheckCustomConfig `json:"healthCheckCustomConfig,omitempty"`

	ID *string `json:"id,omitempty"`

	InstanceCount *int64 `json:"instanceCount,omitempty"`

	Name *string `json:"name,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type Service_SDK struct {
	ARN *string `json:"arn,omitempty"`

	CreateDate *metav1.Time `json:"createDate,omitempty"`

	CreatorRequestID *string `json:"creatorRequestID,omitempty"`

	Description *string `json:"description,omitempty"`
	// A complex type that contains information about the Amazon Route 53 DNS records
	// that you want Cloud Map to create when you register an instance.
	//
	// The record types of a service can only be changed by deleting the service
	// and recreating it with a new Dnsconfig.
	DNSConfig *DNSConfig `json:"dnsConfig,omitempty"`
	// Public DNS and HTTP namespaces only. A complex type that contains settings
	// for an optional health check. If you specify settings for a health check,
	// Cloud Map associates the health check with the records that you specify in
	// DnsConfig.
	//
	// If you specify a health check configuration, you can specify either HealthCheckCustomConfig
	// or HealthCheckConfig but not both.
	//
	// Health checks are basic Route 53 health checks that monitor an Amazon Web
	// Services endpoint. For information about pricing for health checks, see Amazon
	// Route 53 Pricing (http://aws.amazon.com/route53/pricing/).
	//
	// Note the following about configuring health checks.
	//
	// A and AAAA records
	//
	// If DnsConfig includes configurations for both A and AAAA records, Cloud Map
	// creates a health check that uses the IPv4 address to check the health of
	// the resource. If the endpoint tthat's specified by the IPv4 address is unhealthy,
	// Route 53 considers both the A and AAAA records to be unhealthy.
	//
	// CNAME records
	//
	// You can't specify settings for HealthCheckConfig when the DNSConfig includes
	// CNAME for the value of Type. If you do, the CreateService request will fail
	// with an InvalidInput error.
	//
	// Request interval
	//
	// A Route 53 health checker in each health-checking Amazon Web Services Region
	// sends a health check request to an endpoint every 30 seconds. On average,
	// your endpoint receives a health check request about every two seconds. However,
	// health checkers don't coordinate with one another. Therefore, you might sometimes
	// see several requests in one second that's followed by a few seconds with
	// no health checks at all.
	//
	// Health checking regions
	//
	// Health checkers perform checks from all Route 53 health-checking Regions.
	// For a list of the current Regions, see Regions (https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html#Route53-Type-HealthCheckConfig-Regions).
	//
	// Alias records
	//
	// When you register an instance, if you include the AWS_ALIAS_DNS_NAME attribute,
	// Cloud Map creates a Route 53 alias record. Note the following:
	//
	//    * Route 53 automatically sets EvaluateTargetHealth to true for alias records.
	//    When EvaluateTargetHealth is true, the alias record inherits the health
	//    of the referenced Amazon Web Services resource. such as an ELB load balancer.
	//    For more information, see EvaluateTargetHealth (https://docs.aws.amazon.com/Route53/latest/APIReference/API_AliasTarget.html#Route53-Type-AliasTarget-EvaluateTargetHealth).
	//
	//    * If you include HealthCheckConfig and then use the service to register
	//    an instance that creates an alias record, Route 53 doesn't create the
	//    health check.
	//
	// Charges for health checks
	//
	// Health checks are basic Route 53 health checks that monitor an Amazon Web
	// Services endpoint. For information about pricing for health checks, see Amazon
	// Route 53 Pricing (http://aws.amazon.com/route53/pricing/).
	HealthCheckConfig *HealthCheckConfig `json:"healthCheckConfig,omitempty"`
	// A complex type that contains information about an optional custom health
	// check. A custom health check, which requires that you use a third-party health
	// checker to evaluate the health of your resources, is useful in the following
	// circumstances:
	//
	//    * You can't use a health check that's defined by HealthCheckConfig because
	//    the resource isn't available over the internet. For example, you can use
	//    a custom health check when the instance is in an Amazon VPC. (To check
	//    the health of resources in a VPC, the health checker must also be in the
	//    VPC.)
	//
	//    * You want to use a third-party health checker regardless of where your
	//    resources are located.
	//
	// If you specify a health check configuration, you can specify either HealthCheckCustomConfig
	// or HealthCheckConfig but not both.
	//
	// To change the status of a custom health check, submit an UpdateInstanceCustomHealthStatus
	// request. Cloud Map doesn't monitor the status of the resource, it just keeps
	// a record of the status specified in the most recent UpdateInstanceCustomHealthStatus
	// request.
	//
	// Here's how custom health checks work:
	//
	// You create a service.
	//
	// You register an instance.
	//
	// You configure a third-party health checker to monitor the resource that's
	// associated with the new instance.
	//
	// Cloud Map doesn't check the health of the resource directly.
	//
	// The third-party health-checker determines that the resource is unhealthy
	// and notifies your application.
	//
	// Your application submits an UpdateInstanceCustomHealthStatus request.
	//
	// Cloud Map waits for 30 seconds.
	//
	// If another UpdateInstanceCustomHealthStatus request doesn't arrive during
	// that time to change the status back to healthy, Cloud Map stops routing traffic
	// to the resource.
	HealthCheckCustomConfig *HealthCheckCustomConfig `json:"healthCheckCustomConfig,omitempty"`

	ID *string `json:"id,omitempty"`

	InstanceCount *int64 `json:"instanceCount,omitempty"`

	Name *string `json:"name,omitempty"`

	NamespaceID *string `json:"namespaceID,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}
