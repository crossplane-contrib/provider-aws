/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// DBClusterParameters defines the desired state of DBCluster
type DBClusterParameters struct {
	// Region is which region the DBCluster will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A list of Amazon EC2 Availability Zones that instances in the cluster can
	// be created in.
	AvailabilityZones []*string `json:"availabilityZones,omitempty"`
	// The number of days for which automated backups are retained. You must specify
	// a minimum value of 1.
	//
	// Default: 1
	//
	// Constraints:
	//
	//    * Must be a value from 1 to 35.
	BackupRetentionPeriod *int64 `json:"backupRetentionPeriod,omitempty"`
	// The name of the cluster parameter group to associate with this cluster.
	DBClusterParameterGroupName *string `json:"dbClusterParameterGroupName,omitempty"`
	// A subnet group to associate with this cluster.
	//
	// Constraints: Must match the name of an existing DBSubnetGroup. Must not be
	// default.
	//
	// Example: mySubnetgroup
	DBSubnetGroupName *string `json:"dbSubnetGroupName,omitempty"`
	// Specifies whether this cluster can be deleted. If DeletionProtection is enabled,
	// the cluster cannot be deleted unless it is modified and DeletionProtection
	// is disabled. DeletionProtection protects clusters from being accidentally
	// deleted.
	DeletionProtection *bool `json:"deletionProtection,omitempty"`
	// DestinationRegion is used for presigning the request to a given region.
	DestinationRegion *string `json:"destinationRegion,omitempty"`
	// A list of log types that need to be enabled for exporting to Amazon CloudWatch
	// Logs. You can enable audit logs or profiler logs. For more information, see
	// Auditing Amazon DocumentDB Events (https://docs.aws.amazon.com/documentdb/latest/developerguide/event-auditing.html)
	// and Profiling Amazon DocumentDB Operations (https://docs.aws.amazon.com/documentdb/latest/developerguide/profiling.html).
	EnableCloudwatchLogsExports []*string `json:"enableCloudwatchLogsExports,omitempty"`
	// The name of the database engine to be used for this cluster.
	//
	// Valid values: docdb
	// +kubebuilder:validation:Required
	Engine *string `json:"engine"`
	// The version number of the database engine to use. The --engine-version will
	// default to the latest major engine version. For production workloads, we
	// recommend explicitly declaring this parameter with the intended major engine
	// version.
	EngineVersion *string `json:"engineVersion,omitempty"`
	// The cluster identifier of the new global cluster.
	GlobalClusterIdentifier *string `json:"globalClusterIdentifier,omitempty"`
	// The KMS key identifier for an encrypted cluster.
	//
	// The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption
	// key. If you are creating a cluster using the same account that owns the KMS
	// encryption key that is used to encrypt the new cluster, you can use the KMS
	// key alias instead of the ARN for the KMS encryption key.
	//
	// If an encryption key is not specified in KmsKeyId:
	//
	//    * If the StorageEncrypted parameter is true, Amazon DocumentDB uses your
	//    default encryption key.
	//
	// KMS creates the default encryption key for your account. Your account has
	// a different default encryption key for each Regions.
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// The name of the master user for the cluster.
	//
	// Constraints:
	//
	//    * Must be from 1 to 63 letters or numbers.
	//
	//    * The first character must be a letter.
	//
	//    * Cannot be a reserved word for the chosen database engine.
	MasterUsername *string `json:"masterUsername,omitempty"`
	// The port number on which the instances in the cluster accept connections.
	Port *int64 `json:"port,omitempty"`
	// Not currently supported.
	PreSignedURL *string `json:"preSignedURL,omitempty"`
	// The daily time range during which automated backups are created if automated
	// backups are enabled using the BackupRetentionPeriod parameter.
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Region.
	//
	// Constraints:
	//
	//    * Must be in the format hh24:mi-hh24:mi.
	//
	//    * Must be in Universal Coordinated Time (UTC).
	//
	//    * Must not conflict with the preferred maintenance window.
	//
	//    * Must be at least 30 minutes.
	PreferredBackupWindow *string `json:"preferredBackupWindow,omitempty"`
	// The weekly time range during which system maintenance can occur, in Universal
	// Coordinated Time (UTC).
	//
	// Format: ddd:hh24:mi-ddd:hh24:mi
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Region, occurring on a random day of the week.
	//
	// Valid days: Mon, Tue, Wed, Thu, Fri, Sat, Sun
	//
	// Constraints: Minimum 30-minute window.
	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`
	// SourceRegion is the source region where the resource exists. This is not
	// sent over the wire and is only used for presigning. This value should always
	// have the same region as the source ARN.
	SourceRegion *string `json:"sourceRegion,omitempty"`
	// Specifies whether the cluster is encrypted.
	StorageEncrypted *bool `json:"storageEncrypted,omitempty"`
	// The tags to be assigned to the cluster.
	Tags []*Tag `json:"tags,omitempty"`
	// A list of EC2 VPC security groups to associate with this cluster.
	VPCSecurityGroupIDs       []*string `json:"vpcSecurityGroupIDs,omitempty"`
	CustomDBClusterParameters `json:",inline"`
}

// DBClusterSpec defines the desired state of DBCluster
type DBClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DBClusterParameters `json:"forProvider"`
}

// DBClusterObservation defines the observed state of DBCluster
type DBClusterObservation struct {
	// Provides a list of the Identity and Access Management (IAM) roles that are
	// associated with the cluster. (IAM) roles that are associated with a cluster
	// grant permission for the cluster to access other Amazon Web Services services
	// on your behalf.
	AssociatedRoles []*DBClusterRole `json:"associatedRoles,omitempty"`
	// Specifies the time when the cluster was created, in Universal Coordinated
	// Time (UTC).
	ClusterCreateTime *metav1.Time `json:"clusterCreateTime,omitempty"`
	// The Amazon Resource Name (ARN) for the cluster.
	DBClusterARN *string `json:"dbClusterARN,omitempty"`
	// Contains a user-supplied cluster identifier. This identifier is the unique
	// key that identifies a cluster.
	DBClusterIdentifier *string `json:"dbClusterIdentifier,omitempty"`
	// Provides the list of instances that make up the cluster.
	DBClusterMembers []*DBClusterMember `json:"dbClusterMembers,omitempty"`
	// Specifies the name of the cluster parameter group for the cluster.
	DBClusterParameterGroup *string `json:"dbClusterParameterGroup,omitempty"`
	// Specifies information on the subnet group that is associated with the cluster,
	// including the name, description, and subnets in the subnet group.
	DBSubnetGroup *string `json:"dbSubnetGroup,omitempty"`
	// The Region-unique, immutable identifier for the cluster. This identifier
	// is found in CloudTrail log entries whenever the KMS key for the cluster is
	// accessed.
	DBClusterResourceID *string `json:"dbClusterResourceID,omitempty"`
	// The earliest time to which a database can be restored with point-in-time
	// restore.
	EarliestRestorableTime *metav1.Time `json:"earliestRestorableTime,omitempty"`
	// A list of log types that this cluster is configured to export to Amazon CloudWatch
	// Logs.
	EnabledCloudwatchLogsExports []*string `json:"enabledCloudwatchLogsExports,omitempty"`
	// Specifies the connection endpoint for the primary instance of the cluster.
	Endpoint *string `json:"endpoint,omitempty"`
	// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
	HostedZoneID *string `json:"hostedZoneID,omitempty"`
	// Specifies the latest time to which a database can be restored with point-in-time
	// restore.
	LatestRestorableTime *metav1.Time `json:"latestRestorableTime,omitempty"`
	// Specifies whether the cluster has instances in multiple Availability Zones.
	MultiAZ *bool `json:"multiAZ,omitempty"`
	// Specifies the progress of the operation as a percentage.
	PercentProgress *string `json:"percentProgress,omitempty"`
	// Contains one or more identifiers of the secondary clusters that are associated
	// with this cluster.
	ReadReplicaIdentifiers []*string `json:"readReplicaIdentifiers,omitempty"`
	// The reader endpoint for the cluster. The reader endpoint for a cluster load
	// balances connections across the Amazon DocumentDB replicas that are available
	// in a cluster. As clients request new connections to the reader endpoint,
	// Amazon DocumentDB distributes the connection requests among the Amazon DocumentDB
	// replicas in the cluster. This functionality can help balance your read workload
	// across multiple Amazon DocumentDB replicas in your cluster.
	//
	// If a failover occurs, and the Amazon DocumentDB replica that you are connected
	// to is promoted to be the primary instance, your connection is dropped. To
	// continue sending your read workload to other Amazon DocumentDB replicas in
	// the cluster, you can then reconnect to the reader endpoint.
	ReaderEndpoint *string `json:"readerEndpoint,omitempty"`
	// Contains the identifier of the source cluster if this cluster is a secondary
	// cluster.
	ReplicationSourceIdentifier *string `json:"replicationSourceIdentifier,omitempty"`
	// Specifies the current state of this cluster.
	Status *string `json:"status,omitempty"`
	// Provides a list of virtual private cloud (VPC) security groups that the cluster
	// belongs to.
	VPCSecurityGroups []*VPCSecurityGroupMembership `json:"vpcSecurityGroups,omitempty"`
}

// DBClusterStatus defines the observed state of DBCluster.
type DBClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DBClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DBCluster is the Schema for the DBClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DBCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DBClusterSpec   `json:"spec"`
	Status            DBClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DBClusterList contains a list of DBClusters
type DBClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DBCluster `json:"items"`
}

// Repository type metadata.
var (
	DBClusterKind             = "DBCluster"
	DBClusterGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DBClusterKind}.String()
	DBClusterKindAPIVersion   = DBClusterKind + "." + GroupVersion.String()
	DBClusterGroupVersionKind = GroupVersion.WithKind(DBClusterKind)
)

func init() {
	SchemeBuilder.Register(&DBCluster{}, &DBClusterList{})
}
