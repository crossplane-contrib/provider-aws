/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type Allowed struct {
	Policies []*Policy_SDK `json:"policies,omitempty"`
}

// +kubebuilder:skipversion
type AttributePayload struct {
	Attributes map[string]*string `json:"attributes,omitempty"`

	Merge *bool `json:"merge,omitempty"`
}

// +kubebuilder:skipversion
type AuthorizerDescription struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`

	LastModifiedDate *metav1.Time `json:"lastModifiedDate,omitempty"`
}

// +kubebuilder:skipversion
type CACertificate struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`
}

// +kubebuilder:skipversion
type CACertificateDescription struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`

	GenerationID *string `json:"generationID,omitempty"`

	LastModifiedDate *metav1.Time `json:"lastModifiedDate,omitempty"`
}

// +kubebuilder:skipversion
type Certificate struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`
}

// +kubebuilder:skipversion
type CertificateDescription struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`

	GenerationID *string `json:"generationID,omitempty"`

	LastModifiedDate *metav1.Time `json:"lastModifiedDate,omitempty"`
}

// +kubebuilder:skipversion
type CertificateValidity struct {
	NotAfter *metav1.Time `json:"notAfter,omitempty"`

	NotBefore *metav1.Time `json:"notBefore,omitempty"`
}

// +kubebuilder:skipversion
type EffectivePolicy struct {
	PolicyARN *string `json:"policyARN,omitempty"`

	PolicyDocument *string `json:"policyDocument,omitempty"`

	PolicyName *string `json:"policyName,omitempty"`
}

// +kubebuilder:skipversion
type ExplicitDeny struct {
	Policies []*Policy_SDK `json:"policies,omitempty"`
}

// +kubebuilder:skipversion
type ImplicitDeny struct {
	Policies []*Policy_SDK `json:"policies,omitempty"`
}

// +kubebuilder:skipversion
type Job struct {
	CompletedAt *metav1.Time `json:"completedAt,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	LastUpdatedAt *metav1.Time `json:"lastUpdatedAt,omitempty"`
}

// +kubebuilder:skipversion
type JobExecution struct {
	LastUpdatedAt *metav1.Time `json:"lastUpdatedAt,omitempty"`

	QueuedAt *metav1.Time `json:"queuedAt,omitempty"`

	StartedAt *metav1.Time `json:"startedAt,omitempty"`

	ThingARN *string `json:"thingARN,omitempty"`
}

// +kubebuilder:skipversion
type JobExecutionSummary struct {
	LastUpdatedAt *metav1.Time `json:"lastUpdatedAt,omitempty"`

	QueuedAt *metav1.Time `json:"queuedAt,omitempty"`

	StartedAt *metav1.Time `json:"startedAt,omitempty"`
}

// +kubebuilder:skipversion
type JobExecutionSummaryForJob struct {
	ThingARN *string `json:"thingARN,omitempty"`
}

// +kubebuilder:skipversion
type JobSummary struct {
	CompletedAt *metav1.Time `json:"completedAt,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	LastUpdatedAt *metav1.Time `json:"lastUpdatedAt,omitempty"`
}

// +kubebuilder:skipversion
type JobTemplateSummary struct {
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
}

// +kubebuilder:skipversion
type OTAUpdateInfo struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`

	LastModifiedDate *metav1.Time `json:"lastModifiedDate,omitempty"`
}

// +kubebuilder:skipversion
type OTAUpdateSummary struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`
}

// +kubebuilder:skipversion
type OutgoingCertificate struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`

	TransferDate *metav1.Time `json:"transferDate,omitempty"`
}

// +kubebuilder:skipversion
type PolicyVersion struct {
	CreateDate *metav1.Time `json:"createDate,omitempty"`

	VersionID *string `json:"versionID,omitempty"`
}

// +kubebuilder:skipversion
type PolicyVersionIdentifier struct {
	PolicyName *string `json:"policyName,omitempty"`

	PolicyVersionID *string `json:"policyVersionID,omitempty"`
}

// +kubebuilder:skipversion
type Policy_SDK struct {
	PolicyARN *string `json:"policyARN,omitempty"`

	PolicyName *string `json:"policyName,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningTemplateSummary struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`

	LastModifiedDate *metav1.Time `json:"lastModifiedDate,omitempty"`
}

// +kubebuilder:skipversion
type ProvisioningTemplateVersionSummary struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`
}

// +kubebuilder:skipversion
type ResourceIdentifier struct {
	ClientID *string `json:"clientID,omitempty"`
}

// +kubebuilder:skipversion
type RoleAliasDescription struct {
	CreationDate *metav1.Time `json:"creationDate,omitempty"`

	LastModifiedDate *metav1.Time `json:"lastModifiedDate,omitempty"`
}

// +kubebuilder:skipversion
type StreamInfo struct {
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	LastUpdatedAt *metav1.Time `json:"lastUpdatedAt,omitempty"`
}

// +kubebuilder:skipversion
type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type ThingAttribute struct {
	Attributes map[string]*string `json:"attributes,omitempty"`

	ThingARN *string `json:"thingARN,omitempty"`

	ThingName *string `json:"thingName,omitempty"`

	ThingTypeName *string `json:"thingTypeName,omitempty"`

	Version *int64 `json:"version,omitempty"`
}

// +kubebuilder:skipversion
type ThingDocument struct {
	Attributes map[string]*string `json:"attributes,omitempty"`

	ThingID *string `json:"thingID,omitempty"`

	ThingName *string `json:"thingName,omitempty"`

	ThingTypeName *string `json:"thingTypeName,omitempty"`
}

// +kubebuilder:skipversion
type ThingGroupDocument struct {
	Attributes map[string]*string `json:"attributes,omitempty"`
}

// +kubebuilder:skipversion
type ThingGroupProperties struct {
	// The attribute payload.
	AttributePayload *AttributePayload `json:"attributePayload,omitempty"`
}

// +kubebuilder:skipversion
type ThingTypeDefinition struct {
	ThingTypeName *string `json:"thingTypeName,omitempty"`
}

// +kubebuilder:skipversion
type TransferData struct {
	AcceptDate *metav1.Time `json:"acceptDate,omitempty"`

	RejectDate *metav1.Time `json:"rejectDate,omitempty"`

	TransferDate *metav1.Time `json:"transferDate,omitempty"`
}
