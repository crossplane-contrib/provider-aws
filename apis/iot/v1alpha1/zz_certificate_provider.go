/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// CertificateProviderParameters defines the desired state of CertificateProvider
type CertificateProviderParameters struct {
	// Region is which region the CertificateProvider will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A list of the operations that the certificate provider will use to generate
	// certificates. Valid value: CreateCertificateFromCsr.
	// +kubebuilder:validation:Required
	AccountDefaultForOperations []*string `json:"accountDefaultForOperations"`
	// The name of the certificate provider.
	// +kubebuilder:validation:Required
	CertificateProviderName *string `json:"certificateProviderName"`
	// A string that you can optionally pass in the CreateCertificateProvider request
	// to make sure the request is idempotent.
	ClientToken *string `json:"clientToken,omitempty"`
	// The ARN of the Lambda function that defines the authentication logic.
	// +kubebuilder:validation:Required
	LambdaFunctionARN *string `json:"lambdaFunctionARN"`
	// Metadata which can be used to manage the certificate provider.
	Tags                                []*Tag `json:"tags,omitempty"`
	CustomCertificateProviderParameters `json:",inline"`
}

// CertificateProviderSpec defines the desired state of CertificateProvider
type CertificateProviderSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       CertificateProviderParameters `json:"forProvider"`
}

// CertificateProviderObservation defines the observed state of CertificateProvider
type CertificateProviderObservation struct {
	// The ARN of the certificate provider.
	CertificateProviderARN *string `json:"certificateProviderARN,omitempty"`

	CustomCertificateProviderObservation `json:",inline"`
}

// CertificateProviderStatus defines the observed state of CertificateProvider.
type CertificateProviderStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          CertificateProviderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateProvider is the Schema for the CertificateProviders API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type CertificateProvider struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CertificateProviderSpec   `json:"spec"`
	Status            CertificateProviderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateProviderList contains a list of CertificateProviders
type CertificateProviderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateProvider `json:"items"`
}

// Repository type metadata.
var (
	CertificateProviderKind             = "CertificateProvider"
	CertificateProviderGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificateProviderKind}.String()
	CertificateProviderKindAPIVersion   = CertificateProviderKind + "." + GroupVersion.String()
	CertificateProviderGroupVersionKind = GroupVersion.WithKind(CertificateProviderKind)
)

func init() {
	SchemeBuilder.Register(&CertificateProvider{}, &CertificateProviderList{})
}
