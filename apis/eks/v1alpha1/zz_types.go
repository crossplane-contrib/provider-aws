/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

type AddonHealth struct {
	Issues []*AddonIssue `json:"issues,omitempty"`
}

type AddonInfo struct {
	AddonName *string `json:"addonName,omitempty"`

	Type *string `json:"type_,omitempty"`
}

type AddonIssue struct {
	Code *string `json:"code,omitempty"`

	Message *string `json:"message,omitempty"`

	ResourceIDs []*string `json:"resourceIDs,omitempty"`
}

type AddonVersionInfo struct {
	AddonVersion *string `json:"addonVersion,omitempty"`

	Architecture []*string `json:"architecture,omitempty"`
}

type Addon_SDK struct {
	AddonARN *string `json:"addonARN,omitempty"`

	AddonName *string `json:"addonName,omitempty"`

	AddonVersion *string `json:"addonVersion,omitempty"`

	ClusterName *string `json:"clusterName,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The health of the add-on.
	Health *AddonHealth `json:"health,omitempty"`

	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`

	ServiceAccountRoleARN *string `json:"serviceAccountRoleARN,omitempty"`

	Status *string `json:"status,omitempty"`

	Tags map[string]*string `json:"tags,omitempty"`
}

type AutoScalingGroup struct {
	Name *string `json:"name,omitempty"`
}

type Certificate struct {
	Data *string `json:"data,omitempty"`
}

// Disable to avoid generating a v1alpha1 version
// type Cluster struct {
// 	ARN *string `json:"arn,omitempty"`

// 	ClientRequestToken *string `json:"clientRequestToken,omitempty"`

// 	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

// 	Endpoint *string `json:"endpoint,omitempty"`

// 	Name *string `json:"name,omitempty"`

// 	PlatformVersion *string `json:"platformVersion,omitempty"`

// 	RoleARN *string `json:"roleARN,omitempty"`

// 	Tags map[string]*string `json:"tags,omitempty"`

// 	Version *string `json:"version,omitempty"`
// }

type Compatibility struct {
	ClusterVersion *string `json:"clusterVersion,omitempty"`

	PlatformVersions []*string `json:"platformVersions,omitempty"`
}

type EncryptionConfig struct {
	Resources []*string `json:"resources,omitempty"`
}

type ErrorDetail struct {
	ErrorCode *string `json:"errorCode,omitempty"`

	ErrorMessage *string `json:"errorMessage,omitempty"`

	ResourceIDs []*string `json:"resourceIDs,omitempty"`
}

// Disable to avoid generating a v1alpha1 version
// type FargateProfile struct {
// 	ClusterName *string `json:"clusterName,omitempty"`

// 	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

// 	FargateProfileARN *string `json:"fargateProfileARN,omitempty"`

// 	FargateProfileName *string `json:"fargateProfileName,omitempty"`

// 	PodExecutionRoleARN *string `json:"podExecutionRoleARN,omitempty"`

// 	Subnets []*string `json:"subnets,omitempty"`

// 	Tags map[string]*string `json:"tags,omitempty"`
// }

type FargateProfileSelector struct {
	Namespace *string `json:"namespace,omitempty"`
}

type Issue struct {
	Message *string `json:"message,omitempty"`

	ResourceIDs []*string `json:"resourceIDs,omitempty"`
}

type KubernetesNetworkConfigRequest struct {
	ServiceIPv4CIDR *string `json:"serviceIPv4CIDR,omitempty"`
}

type KubernetesNetworkConfigResponse struct {
	ServiceIPv4CIDR *string `json:"serviceIPv4CIDR,omitempty"`
}

type LaunchTemplateSpecification struct {
	ID *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`

	Version *string `json:"version,omitempty"`
}

// Disable to avoid generating a v1alpha1 version
// type Nodegroup struct {
// 	ClusterName *string `json:"clusterName,omitempty"`

// 	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

// 	InstanceTypes []*string `json:"instanceTypes,omitempty"`

// 	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`

// 	NodeRole *string `json:"nodeRole,omitempty"`

// 	NodegroupARN *string `json:"nodegroupARN,omitempty"`

// 	NodegroupName *string `json:"nodegroupName,omitempty"`

// 	ReleaseVersion *string `json:"releaseVersion,omitempty"`

// 	Subnets []*string `json:"subnets,omitempty"`

// 	Tags map[string]*string `json:"tags,omitempty"`

// 	Version *string `json:"version,omitempty"`
// }

type NodegroupResources struct {
	RemoteAccessSecurityGroup *string `json:"remoteAccessSecurityGroup,omitempty"`
}

type OIDC struct {
	Issuer *string `json:"issuer,omitempty"`
}

type Provider struct {
	KeyARN *string `json:"keyARN,omitempty"`
}

type RemoteAccessConfig struct {
	EC2SshKey *string `json:"ec2SshKey,omitempty"`

	SourceSecurityGroups []*string `json:"sourceSecurityGroups,omitempty"`
}

type Update struct {
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	Errors []*ErrorDetail `json:"errors,omitempty"`

	ID *string `json:"id,omitempty"`

	Params []*UpdateParam `json:"params,omitempty"`

	Status *string `json:"status,omitempty"`

	Type *string `json:"type_,omitempty"`
}

type UpdateParam struct {
	Type *string `json:"type_,omitempty"`

	Value *string `json:"value,omitempty"`
}

type VPCConfigRequest struct {
	PublicAccessCIDRs []*string `json:"publicAccessCIDRs,omitempty"`

	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`

	SubnetIDs []*string `json:"subnetIDs,omitempty"`
}

type VPCConfigResponse struct {
	ClusterSecurityGroupID *string `json:"clusterSecurityGroupID,omitempty"`

	PublicAccessCIDRs []*string `json:"publicAccessCIDRs,omitempty"`

	SecurityGroupIDs []*string `json:"securityGroupIDs,omitempty"`

	SubnetIDs []*string `json:"subnetIDs,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}
