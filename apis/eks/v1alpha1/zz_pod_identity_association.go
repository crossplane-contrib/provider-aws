/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// PodIdentityAssociationParameters defines the desired state of PodIdentityAssociation
type PodIdentityAssociationParameters struct {
	// Region is which region the PodIdentityAssociation will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A unique, case-sensitive identifier that you provide to ensure the idempotency
	// of the request.
	ClientRequestToken *string `json:"clientRequestToken,omitempty"`
	// The name of the cluster to create the association in.
	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName"`
	// The name of the Kubernetes namespace inside the cluster to create the association
	// in. The service account and the pods that use the service account must be
	// in this namespace.
	// +kubebuilder:validation:Required
	Namespace *string `json:"namespace"`
	// The Amazon Resource Name (ARN) of the IAM role to associate with the service
	// account. The EKS Pod Identity agent manages credentials to assume this role
	// for applications in the containers in the pods that use this service account.
	// +kubebuilder:validation:Required
	RoleARN *string `json:"roleARN"`
	// The name of the Kubernetes service account inside the cluster to associate
	// the IAM credentials with.
	// +kubebuilder:validation:Required
	ServiceAccount *string `json:"serviceAccount"`
	// Metadata that assists with categorization and organization. Each tag consists
	// of a key and an optional value. You define both. Tags don't propagate to
	// any other cluster or Amazon Web Services resources.
	//
	// The following basic restrictions apply to tags:
	//
	//    * Maximum number of tags per resource – 50
	//
	//    * For each resource, each tag key must be unique, and each tag key can
	//    have only one value.
	//
	//    * Maximum key length – 128 Unicode characters in UTF-8
	//
	//    * Maximum value length – 256 Unicode characters in UTF-8
	//
	//    * If your tagging schema is used across multiple services and resources,
	//    remember that other services may have restrictions on allowed characters.
	//    Generally allowed characters are: letters, numbers, and spaces representable
	//    in UTF-8, and the following characters: + - = . _ : / @.
	//
	//    * Tag keys and values are case-sensitive.
	//
	//    * Do not use aws:, AWS:, or any upper or lowercase combination of such
	//    as a prefix for either keys or values as it is reserved for Amazon Web
	//    Services use. You cannot edit or delete tag keys or values with this prefix.
	//    Tags with this prefix do not count against your tags per resource limit.
	Tags                                   map[string]*string `json:"tags,omitempty"`
	CustomPodIdentityAssociationParameters `json:",inline"`
}

// PodIdentityAssociationSpec defines the desired state of PodIdentityAssociation
type PodIdentityAssociationSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       PodIdentityAssociationParameters `json:"forProvider"`
}

// PodIdentityAssociationObservation defines the observed state of PodIdentityAssociation
type PodIdentityAssociationObservation struct {
	// The Amazon Resource Name (ARN) of the association.
	AssociationARN *string `json:"associationARN,omitempty"`
	// The ID of the association.
	AssociationID *string `json:"associationID,omitempty"`
	// The timestamp that the association was created at.
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The most recent timestamp that the association was modified at
	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`

	CustomPodIdentityAssociationObservation `json:",inline"`
}

// PodIdentityAssociationStatus defines the observed state of PodIdentityAssociation.
type PodIdentityAssociationStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          PodIdentityAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PodIdentityAssociation is the Schema for the PodIdentityAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type PodIdentityAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PodIdentityAssociationSpec   `json:"spec"`
	Status            PodIdentityAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PodIdentityAssociationList contains a list of PodIdentityAssociations
type PodIdentityAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PodIdentityAssociation `json:"items"`
}

// Repository type metadata.
var (
	PodIdentityAssociationKind             = "PodIdentityAssociation"
	PodIdentityAssociationGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PodIdentityAssociationKind}.String()
	PodIdentityAssociationKindAPIVersion   = PodIdentityAssociationKind + "." + GroupVersion.String()
	PodIdentityAssociationGroupVersionKind = GroupVersion.WithKind(PodIdentityAssociationKind)
)

func init() {
	SchemeBuilder.Register(&PodIdentityAssociation{}, &PodIdentityAssociationList{})
}
