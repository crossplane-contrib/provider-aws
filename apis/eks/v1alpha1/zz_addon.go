/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// AddonParameters defines the desired state of Addon
type AddonParameters struct {
	// Region is which region the Addon will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The name of the add-on. The name must match one of the names returned by
	// DescribeAddonVersions (https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
	// +kubebuilder:validation:Required
	AddonName *string `json:"addonName"`
	// The version of the add-on. The version must match one of the versions returned
	// by DescribeAddonVersions (https://docs.aws.amazon.com/eks/latest/APIReference/API_DescribeAddonVersions.html).
	AddonVersion *string `json:"addonVersion,omitempty"`
	// How to resolve parameter value conflicts when migrating an existing add-on
	// to an Amazon EKS add-on.
	ResolveConflicts *string `json:"resolveConflicts,omitempty"`
	// The Amazon Resource Name (ARN) of an existing IAM role to bind to the add-on's
	// service account. The role must be assigned the IAM permissions required by
	// the add-on. If you don't specify an existing IAM role, then the add-on uses
	// the permissions assigned to the node IAM role. For more information, see
	// Amazon EKS node IAM role (https://docs.aws.amazon.com/eks/latest/userguide/create-node-role.html)
	// in the Amazon EKS User Guide.
	//
	// To specify an existing IAM role, you must have an IAM OpenID Connect (OIDC)
	// provider created for your cluster. For more information, see Enabling IAM
	// roles for service accounts on your cluster (https://docs.aws.amazon.com/eks/latest/userguide/enable-iam-roles-for-service-accounts.html)
	// in the Amazon EKS User Guide.
	ServiceAccountRoleARN *string `json:"serviceAccountRoleARN,omitempty"`
	// The metadata to apply to the cluster to assist with categorization and organization.
	// Each tag consists of a key and an optional value, both of which you define.
	Tags                  map[string]*string `json:"tags,omitempty"`
	CustomAddonParameters `json:",inline"`
}

// AddonSpec defines the desired state of Addon
type AddonSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       AddonParameters `json:"forProvider"`
}

// AddonObservation defines the observed state of Addon
type AddonObservation struct {
	// The Amazon Resource Name (ARN) of the add-on.
	AddonARN *string `json:"addonARN,omitempty"`
	// The name of the cluster.
	ClusterName *string `json:"clusterName,omitempty"`
	// The date and time that the add-on was created.
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// An object that represents the health of the add-on.
	Health *AddonHealth `json:"health,omitempty"`
	// The date and time that the add-on was last modified.
	ModifiedAt *metav1.Time `json:"modifiedAt,omitempty"`
	// The status of the add-on.
	Status *string `json:"status,omitempty"`
}

// AddonStatus defines the observed state of Addon.
type AddonStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          AddonObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Addon is the Schema for the Addons API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Addon struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AddonSpec   `json:"spec"`
	Status            AddonStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AddonList contains a list of Addons
type AddonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Addon `json:"items"`
}

// Repository type metadata.
var (
	AddonKind             = "Addon"
	AddonGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AddonKind}.String()
	AddonKindAPIVersion   = AddonKind + "." + GroupVersion.String()
	AddonGroupVersionKind = GroupVersion.WithKind(AddonKind)
)

func init() {
	SchemeBuilder.Register(&Addon{}, &AddonList{})
}
