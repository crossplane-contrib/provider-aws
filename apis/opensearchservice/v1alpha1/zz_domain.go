/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// DomainParameters defines the desired state of Domain
type DomainParameters struct {
	// Region is which region the Domain will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// IAM access policy as a JSON-formatted string.
	AccessPolicies *string `json:"accessPolicies,omitempty"`
	// Option to allow references to indices in an HTTP request body. Must be false
	// when configuring access to individual sub-resources. By default, the value
	// is true. See Advanced cluster parameters (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomain-configure-advanced-options)
	// for more information.
	AdvancedOptions map[string]*string `json:"advancedOptions,omitempty"`
	// Specifies advanced security options.
	AdvancedSecurityOptions *AdvancedSecurityOptionsInput `json:"advancedSecurityOptions,omitempty"`
	// Specifies Auto-Tune options.
	AutoTuneOptions *AutoTuneOptionsInput `json:"autoTuneOptions,omitempty"`
	// Configuration options for a domain. Specifies the instance type and number
	// of instances in the domain.
	ClusterConfig *ClusterConfig `json:"clusterConfig,omitempty"`
	// Options to specify the Cognito user and identity pools for OpenSearch Dashboards
	// authentication. For more information, see Configuring Amazon Cognito authentication
	// for OpenSearch Dashboards (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/cognito-auth.html).
	CognitoOptions *CognitoOptions `json:"cognitoOptions,omitempty"`
	// Options to specify configurations that will be applied to the domain endpoint.
	DomainEndpointOptions *DomainEndpointOptions `json:"domainEndpointOptions,omitempty"`
	// Options to enable, disable, and specify the type and size of EBS storage
	// volumes.
	EBSOptions *EBSOptions `json:"ebsOptions,omitempty"`
	// Options for encryption of data at rest.
	EncryptionAtRestOptions *EncryptionAtRestOptions `json:"encryptionAtRestOptions,omitempty"`
	// String of format Elasticsearch_X.Y or OpenSearch_X.Y to specify the engine
	// version for the Amazon OpenSearch Service domain. For example, "OpenSearch_1.0"
	// or "Elasticsearch_7.9". For more information, see Creating and managing Amazon
	// OpenSearch Service domains (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/createupdatedomains.html#createdomains).
	EngineVersion *string `json:"engineVersion,omitempty"`
	// Map of LogType and LogPublishingOption, each containing options to publish
	// a given type of OpenSearch log.
	LogPublishingOptions map[string]*LogPublishingOption `json:"logPublishingOptions,omitempty"`
	// The name of the Amazon OpenSearch Service domain you're creating. Domain
	// names are unique across the domains owned by an account within an AWS region.
	// Domain names must start with a lowercase letter and can contain the following
	// characters: a-z (lowercase), 0-9, and - (hyphen).
	// +kubebuilder:validation:Required
	Name *string `json:"name"`
	// Node-to-node encryption options.
	NodeToNodeEncryptionOptions *NodeToNodeEncryptionOptions `json:"nodeToNodeEncryptionOptions,omitempty"`
	// A list of Tag added during domain creation.
	Tags []*Tag `json:"tags,omitempty"`
	// Options to specify the subnets and security groups for a VPC endpoint. For
	// more information, see Launching your Amazon OpenSearch Service domains using
	// a VPC (http://docs.aws.amazon.com/opensearch-service/latest/developerguide/vpc.html).
	VPCOptions             *VPCOptions `json:"vpcOptions,omitempty"`
	CustomDomainParameters `json:",inline"`
}

// DomainSpec defines the desired state of Domain
type DomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DomainParameters `json:"forProvider"`
}

// DomainObservation defines the observed state of Domain
type DomainObservation struct {
	// The Amazon Resource Name (ARN) of a domain. See IAM identifiers (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_identifiers.html)
	// in the AWS Identity and Access Management User Guide for more information.
	ARN *string `json:"arn,omitempty"`
	// Specifies change details of the domain configuration change.
	ChangeProgressDetails *ChangeProgressDetails `json:"changeProgressDetails,omitempty"`
	// The domain creation status. True if the creation of a domain is complete.
	// False if domain creation is still in progress.
	Created *bool `json:"created,omitempty"`
	// The domain deletion status. True if a delete request has been received for
	// the domain but resource cleanup is still in progress. False if the domain
	// has not been deleted. Once domain deletion is complete, the status of the
	// domain is no longer returned.
	Deleted *bool `json:"deleted,omitempty"`
	// The unique identifier for the specified domain.
	DomainID *string `json:"domainID,omitempty"`
	// The domain endpoint that you use to submit index and search requests.
	Endpoint *string `json:"endpoint,omitempty"`
	// Map containing the domain endpoints used to submit index and search requests.
	// Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
	Endpoints map[string]*string `json:"endpoints,omitempty"`
	// The status of the domain configuration. True if Amazon OpenSearch Service
	// is processing configuration changes. False if the configuration is active.
	Processing *bool `json:"processing,omitempty"`
	// The current status of the domain's service software.
	ServiceSoftwareOptions *ServiceSoftwareOptions `json:"serviceSoftwareOptions,omitempty"`
	// The status of the SnapshotOptions.
	SnapshotOptions *SnapshotOptions `json:"snapshotOptions,omitempty"`
	// The status of a domain version upgrade. True if Amazon OpenSearch Service
	// is undergoing a version upgrade. False if the configuration is active.
	UpgradeProcessing *bool `json:"upgradeProcessing,omitempty"`
}

// DomainStatus defines the observed state of Domain.
type DomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Domain is the Schema for the Domains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSpec   `json:"spec"`
	Status            DomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainList contains a list of Domains
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Repository type metadata.
var (
	DomainKind             = "Domain"
	DomainGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainKind}.String()
	DomainKindAPIVersion   = DomainKind + "." + GroupVersion.String()
	DomainGroupVersionKind = GroupVersion.WithKind(DomainKind)
)

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
