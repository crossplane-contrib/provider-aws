/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// DomainParameters defines the desired state of Domain
type DomainParameters struct {
	// Region is which region the Domain will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A name for the domain you are creating. Allowed characters are a-z (lower-case
	// letters), 0-9, and hyphen (-). Domain names must start with a letter or number
	// and be at least 3 and no more than 28 characters long.
	// +kubebuilder:validation:Required
	DomainName             *string `json:"domainName"`
	CustomDomainParameters `json:",inline"`
}

// DomainSpec defines the desired state of Domain
type DomainSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DomainParameters `json:"forProvider"`
}

// DomainObservation defines the observed state of Domain
type DomainObservation struct {
	ARN *string `json:"arn,omitempty"`
	// True if the search domain is created. It can take several minutes to initialize
	// a domain when CreateDomain is called. Newly created search domains are returned
	// from DescribeDomains with a false value for Created until domain creation
	// is complete.
	Created *bool `json:"created,omitempty"`
	// True if the search domain has been deleted. The system must clean up resources
	// dedicated to the search domain when DeleteDomain is called. Newly deleted
	// search domains are returned from DescribeDomains with a true value for IsDeleted
	// for several minutes until resource cleanup is complete.
	Deleted *bool `json:"deleted,omitempty"`
	// The service endpoint for updating documents in a search domain.
	DocService *ServiceEndpoint `json:"docService,omitempty"`

	DomainID *string `json:"domainID,omitempty"`

	Limits *Limits `json:"limits,omitempty"`
	// True if processing is being done to activate the current domain configuration.
	Processing *bool `json:"processing,omitempty"`
	// True if IndexDocuments needs to be called to activate the current domain
	// configuration.
	RequiresIndexDocuments *bool `json:"requiresIndexDocuments,omitempty"`
	// The number of search instances that are available to process search requests.
	SearchInstanceCount *int64 `json:"searchInstanceCount,omitempty"`
	// The instance type that is being used to process search requests.
	SearchInstanceType *string `json:"searchInstanceType,omitempty"`
	// The number of partitions across which the search index is spread.
	SearchPartitionCount *int64 `json:"searchPartitionCount,omitempty"`
	// The service endpoint for requesting search results from a search domain.
	SearchService *ServiceEndpoint `json:"searchService,omitempty"`
}

// DomainStatus defines the observed state of Domain.
type DomainStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Domain is the Schema for the Domains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type Domain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DomainSpec   `json:"spec"`
	Status            DomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DomainList contains a list of Domains
type DomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Domain `json:"items"`
}

// Repository type metadata.
var (
	DomainKind             = "Domain"
	DomainGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DomainKind}.String()
	DomainKindAPIVersion   = DomainKind + "." + GroupVersion.String()
	DomainGroupVersionKind = GroupVersion.WithKind(DomainKind)
)

func init() {
	SchemeBuilder.Register(&Domain{}, &DomainList{})
}
