/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type CloudWatchMonitoringConfiguration struct {
	LogStreamNamePrefix *string `json:"logStreamNamePrefix,omitempty"`
}

// +kubebuilder:skipversion
type Configuration struct {
	Classification *string `json:"classification,omitempty"`
}

// +kubebuilder:skipversion
type ContainerInfo struct {
	// The information about the EKS cluster.
	EKSInfo *EKSInfo `json:"eksInfo,omitempty"`
}

// +kubebuilder:skipversion
type ContainerProvider struct {
	ID *string `json:"id,omitempty"`
	// The information about the container used for a job run or a managed endpoint.
	Info *ContainerInfo `json:"info,omitempty"`

	Type *string `json:"type_,omitempty"`
}

// +kubebuilder:skipversion
type EKSInfo struct {
	Namespace *string `json:"namespace,omitempty"`
}

// +kubebuilder:skipversion
type Endpoint struct {
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	ExecutionRoleARN *string `json:"executionRoleARN,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`

	ID *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`

	ReleaseLabel *string `json:"releaseLabel,omitempty"`

	SecurityGroup *string `json:"securityGroup,omitempty"`

	StateDetails *string `json:"stateDetails,omitempty"`

	Tags map[string]*string `json:"tags,omitempty"`

	VirtualClusterID *string `json:"virtualClusterID,omitempty"`
}

// +kubebuilder:skipversion
type JobDriver struct {
	// The information about job driver for Spark submit.
	SparkSubmitJobDriver *SparkSubmitJobDriver `json:"sparkSubmitJobDriver,omitempty"`
}

// +kubebuilder:skipversion
type JobRun_SDK struct {
	ARN *string `json:"arn,omitempty"`

	ClientToken *string `json:"clientToken,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty"`

	ExecutionRoleARN *string `json:"executionRoleARN,omitempty"`

	FailureReason *string `json:"failureReason,omitempty"`

	FinishedAt *metav1.Time `json:"finishedAt,omitempty"`

	ID *string `json:"id,omitempty"`
	// Specify the driver that the job runs on.
	JobDriver *JobDriver `json:"jobDriver,omitempty"`

	Name *string `json:"name,omitempty"`

	ReleaseLabel *string `json:"releaseLabel,omitempty"`

	State *string `json:"state,omitempty"`

	StateDetails *string `json:"stateDetails,omitempty"`

	Tags map[string]*string `json:"tags,omitempty"`

	VirtualClusterID *string `json:"virtualClusterID,omitempty"`
}

// +kubebuilder:skipversion
type SparkSubmitJobDriver struct {
	EntryPoint *string `json:"entryPoint,omitempty"`

	EntryPointArguments []*string `json:"entryPointArguments,omitempty"`

	SparkSubmitParameters *string `json:"sparkSubmitParameters,omitempty"`
}

// +kubebuilder:skipversion
type VirtualCluster_SDK struct {
	ARN *string `json:"arn,omitempty"`
	// The information about the container provider.
	ContainerProvider *ContainerProvider `json:"containerProvider,omitempty"`

	CreatedAt *metav1.Time `json:"createdAt,omitempty"`

	ID *string `json:"id,omitempty"`

	Name *string `json:"name,omitempty"`

	State *string `json:"state,omitempty"`

	Tags map[string]*string `json:"tags,omitempty"`
}
