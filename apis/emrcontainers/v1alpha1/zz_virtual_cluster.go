/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// VirtualClusterParameters defines the desired state of VirtualCluster
type VirtualClusterParameters struct {
	// Region is which region the VirtualCluster will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// The container provider of the virtual cluster.
	// +kubebuilder:validation:Required
	ContainerProvider *ContainerProvider `json:"containerProvider"`
	// The tags assigned to the virtual cluster.
	Tags                           map[string]*string `json:"tags,omitempty"`
	CustomVirtualClusterParameters `json:",inline"`
}

// VirtualClusterSpec defines the desired state of VirtualCluster
type VirtualClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       VirtualClusterParameters `json:"forProvider"`
}

// VirtualClusterObservation defines the observed state of VirtualCluster
type VirtualClusterObservation struct {
	// This output contains the ARN of virtual cluster.
	ARN *string `json:"arn,omitempty"`
	// This output contains the virtual cluster ID.
	ID *string `json:"id,omitempty"`
	// This output contains the name of the virtual cluster.
	Name *string `json:"name,omitempty"`
}

// VirtualClusterStatus defines the observed state of VirtualCluster.
type VirtualClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          VirtualClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualCluster is the Schema for the VirtualClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type VirtualCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VirtualClusterSpec   `json:"spec"`
	Status            VirtualClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VirtualClusterList contains a list of VirtualClusters
type VirtualClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VirtualCluster `json:"items"`
}

// Repository type metadata.
var (
	VirtualClusterKind             = "VirtualCluster"
	VirtualClusterGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VirtualClusterKind}.String()
	VirtualClusterKindAPIVersion   = VirtualClusterKind + "." + GroupVersion.String()
	VirtualClusterGroupVersionKind = GroupVersion.WithKind(VirtualClusterKind)
)

func init() {
	SchemeBuilder.Register(&VirtualCluster{}, &VirtualClusterList{})
}
