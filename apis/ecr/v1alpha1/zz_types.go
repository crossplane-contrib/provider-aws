// Copyright Amazon.com Inc. or its affiliates. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License"). You may
// not use this file except in compliance with the License. A copy of the
// License is located at
//
//     http://aws.amazon.com/apache2.0/
//
// or in the "license" file accompanying this file. This file is distributed
// on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
// express or implied. See the License for the specific language governing
// permissions and limitations under the License.

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

type EncryptionConfiguration struct {
	// The encryption type to use.
	//
	// If you use the KMS encryption type, the contents of the repository will be
	// encrypted using server-side encryption with customer master keys (CMKs) stored
	// in AWS KMS. When you use AWS KMS to encrypt your data, you can either use
	// the default AWS managed CMK for Amazon ECR, or specify your own CMK, which
	// you already created. For more information, see Protecting Data Using Server-Side
	// Encryption with CMKs Stored in AWS Key Management Service (SSE-KMS) (https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingKMSEncryption.html)
	// in the Amazon Simple Storage Service Console Developer Guide..
	//
	// If you use the AES256 encryption type, Amazon ECR uses server-side encryption
	// with Amazon S3-managed encryption keys which encrypts the images in the repository
	// using an AES-256 encryption algorithm. For more information, see Protecting
	// Data Using Server-Side Encryption with Amazon S3-Managed Encryption Keys
	// (SSE-S3) (https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingServerSideEncryption.html)
	// in the Amazon Simple Storage Service Console Developer Guide..
	EncryptionType *string `json:"encryptionType,omitempty"`
	// If you use the KMS encryption type, specify the CMK to use for encryption.
	// The alias, key ID, or full ARN of the CMK can be specified. The key must
	// exist in the same Region as the repository. If no key is specified, the default
	// AWS managed CMK for Amazon ECR will be used.
	KMSKey *string `json:"kmsKey,omitempty"`
}

type Image struct {
	// The AWS account ID associated with the registry to which this image belongs.
	RegistryID *string `json:"registryID,omitempty"`
}

type ImageDetail struct {
	// The AWS account ID associated with the registry to which this image belongs.
	RegistryID *string `json:"registryID,omitempty"`
}

type ImageScanFinding struct {
	// The URI for the repository. You can use this URI for container image push
	// and pull operations.
	URI *string `json:"uri,omitempty"`
}

type ImageScanningConfiguration struct {
	// The setting that determines whether images are scanned after being pushed
	// to a repository. If set to true, images will be scanned after being pushed.
	// If this parameter is not specified, it will default to false and images will
	// not be scanned unless a scan is manually started with the StartImageScan
	// API.
	ScanOnPush *bool `json:"scanOnPush,omitempty"`
}

type Repository_SDK struct {
	// The date and time, in JavaScript date format, when the repository was created.
	CreatedAt *metav1.Time `json:"createdAt,omitempty"`
	// The encryption configuration for the repository. This determines how the
	// contents of your repository are encrypted at rest.
	EncryptionConfiguration *EncryptionConfiguration `json:"encryptionConfiguration,omitempty"`

	ImageScanningConfiguration *ImageScanningConfiguration `json:"imageScanningConfiguration,omitempty"`
	// The tag mutability setting for the repository.
	ImageTagMutability *string `json:"imageTagMutability,omitempty"`
	// The AWS account ID associated with the registry to which this image belongs.
	RegistryID *string `json:"registryID,omitempty"`
	// The Amazon Resource Name (ARN) that identifies the repository. The ARN contains
	// the arn:aws:ecr namespace, followed by the region of the repository, AWS
	// account ID of the repository owner, repository namespace, and repository
	// name. For example, arn:aws:ecr:region:012345678910:repository/test.
	RepositoryARN *string `json:"repositoryARN,omitempty"`
	// The URI for the repository. You can use this URI for container image push
	// and pull operations.
	RepositoryURI *string `json:"repositoryURI,omitempty"`
}

type Tag struct {
	// One part of a key-value pair that make up a tag. A key is a general label
	// that acts like a category for more specific tag values.
	Key *string `json:"key,omitempty"`
	// The optional part of a key-value pair that make up a tag. A value acts as
	// a descriptor within a tag category (key).
	Value *string `json:"value,omitempty"`
}
