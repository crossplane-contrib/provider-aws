/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
)

// Hack to avoid import errors during build...
var (
	_ = &metav1.Time{}
)

// +kubebuilder:skipversion
type AvailabilityZone struct {
	Name *string `json:"name,omitempty"`
}

// +kubebuilder:skipversion
type CharacterSet struct {
	CharacterSetDescription *string `json:"characterSetDescription,omitempty"`

	CharacterSetName *string `json:"characterSetName,omitempty"`
}

// +kubebuilder:skipversion
type CloudwatchLogsExportConfiguration struct {
	DisableLogTypes []*string `json:"disableLogTypes,omitempty"`

	EnableLogTypes []*string `json:"enableLogTypes,omitempty"`
}

// +kubebuilder:skipversion
type DBClusterEndpoint struct {
	CustomEndpointType *string `json:"customEndpointType,omitempty"`

	DBClusterEndpointARN *string `json:"dbClusterEndpointARN,omitempty"`

	DBClusterEndpointIdentifier *string `json:"dbClusterEndpointIdentifier,omitempty"`

	DBClusterEndpointResourceIdentifier *string `json:"dbClusterEndpointResourceIdentifier,omitempty"`

	DBClusterIdentifier *string `json:"dbClusterIdentifier,omitempty"`

	Endpoint *string `json:"endpoint,omitempty"`

	EndpointType *string `json:"endpointType,omitempty"`

	Status *string `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type DBClusterMember struct {
	DBClusterParameterGroupStatus *string `json:"dbClusterParameterGroupStatus,omitempty"`

	DBInstanceIdentifier *string `json:"dbInstanceIdentifier,omitempty"`

	IsClusterWriter *bool `json:"isClusterWriter,omitempty"`

	PromotionTier *int64 `json:"promotionTier,omitempty"`
}

// +kubebuilder:skipversion
type DBClusterOptionGroupStatus struct {
	DBClusterOptionGroupName *string `json:"dbClusterOptionGroupName,omitempty"`

	Status *string `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type DBClusterParameterGroup struct {
	DBClusterParameterGroupARN *string `json:"dbClusterParameterGroupARN,omitempty"`

	DBClusterParameterGroupName *string `json:"dbClusterParameterGroupName,omitempty"`

	DBParameterGroupFamily *string `json:"dbParameterGroupFamily,omitempty"`

	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type DBClusterRole struct {
	FeatureName *string `json:"featureName,omitempty"`

	RoleARN *string `json:"roleARN,omitempty"`

	Status *string `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type DBClusterSnapshot struct {
	AvailabilityZones []*string `json:"availabilityZones,omitempty"`

	ClusterCreateTime *metav1.Time `json:"clusterCreateTime,omitempty"`

	DBClusterIdentifier *string `json:"dbClusterIdentifier,omitempty"`

	DBClusterSnapshotARN *string `json:"dbClusterSnapshotARN,omitempty"`

	DBClusterSnapshotIdentifier *string `json:"dbClusterSnapshotIdentifier,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	IAMDatabaseAuthenticationEnabled *bool `json:"iamDatabaseAuthenticationEnabled,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	LicenseModel *string `json:"licenseModel,omitempty"`

	MasterUsername *string `json:"masterUsername,omitempty"`

	SnapshotCreateTime *metav1.Time `json:"snapshotCreateTime,omitempty"`

	SnapshotType *string `json:"snapshotType,omitempty"`

	SourceDBClusterSnapshotARN *string `json:"sourceDBClusterSnapshotARN,omitempty"`

	Status *string `json:"status,omitempty"`

	StorageEncrypted *bool `json:"storageEncrypted,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type DBClusterSnapshotAttribute struct {
	AttributeName *string `json:"attributeName,omitempty"`
}

// +kubebuilder:skipversion
type DBClusterSnapshotAttributesResult struct {
	DBClusterSnapshotIdentifier *string `json:"dbClusterSnapshotIdentifier,omitempty"`
}

// +kubebuilder:skipversion
type DBCluster_SDK struct {
	AllocatedStorage *int64 `json:"allocatedStorage,omitempty"`

	AssociatedRoles []*DBClusterRole `json:"associatedRoles,omitempty"`

	AutomaticRestartTime *metav1.Time `json:"automaticRestartTime,omitempty"`

	AvailabilityZones []*string `json:"availabilityZones,omitempty"`

	BackupRetentionPeriod *int64 `json:"backupRetentionPeriod,omitempty"`

	CharacterSetName *string `json:"characterSetName,omitempty"`

	CloneGroupID *string `json:"cloneGroupID,omitempty"`

	ClusterCreateTime *metav1.Time `json:"clusterCreateTime,omitempty"`

	CopyTagsToSnapshot *bool `json:"copyTagsToSnapshot,omitempty"`

	CrossAccountClone *bool `json:"crossAccountClone,omitempty"`

	DBClusterARN *string `json:"dbClusterARN,omitempty"`

	DBClusterIdentifier *string `json:"dbClusterIdentifier,omitempty"`

	DBClusterMembers []*DBClusterMember `json:"dbClusterMembers,omitempty"`

	DBClusterOptionGroupMemberships []*DBClusterOptionGroupStatus `json:"dbClusterOptionGroupMemberships,omitempty"`

	DBClusterParameterGroup *string `json:"dbClusterParameterGroup,omitempty"`

	DBSubnetGroup *string `json:"dbSubnetGroup,omitempty"`

	DatabaseName *string `json:"databaseName,omitempty"`

	DBClusterResourceID *string `json:"dbClusterResourceID,omitempty"`

	DeletionProtection *bool `json:"deletionProtection,omitempty"`

	EarliestRestorableTime *metav1.Time `json:"earliestRestorableTime,omitempty"`

	EnabledCloudwatchLogsExports []*string `json:"enabledCloudwatchLogsExports,omitempty"`

	Endpoint *string `json:"endpoint,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	HostedZoneID *string `json:"hostedZoneID,omitempty"`

	IAMDatabaseAuthenticationEnabled *bool `json:"iamDatabaseAuthenticationEnabled,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	LatestRestorableTime *metav1.Time `json:"latestRestorableTime,omitempty"`

	MasterUsername *string `json:"masterUsername,omitempty"`

	MultiAZ *bool `json:"multiAZ,omitempty"`

	PercentProgress *string `json:"percentProgress,omitempty"`

	Port *int64 `json:"port,omitempty"`

	PreferredBackupWindow *string `json:"preferredBackupWindow,omitempty"`

	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`

	ReadReplicaIdentifiers []*string `json:"readReplicaIdentifiers,omitempty"`

	ReaderEndpoint *string `json:"readerEndpoint,omitempty"`

	ReplicationSourceIdentifier *string `json:"replicationSourceIdentifier,omitempty"`

	Status *string `json:"status,omitempty"`

	StorageEncrypted *bool `json:"storageEncrypted,omitempty"`

	VPCSecurityGroups []*VPCSecurityGroupMembership `json:"vpcSecurityGroups,omitempty"`
}

// +kubebuilder:skipversion
type DBEngineVersion struct {
	DBEngineDescription *string `json:"dbEngineDescription,omitempty"`

	DBEngineVersionDescription *string `json:"dbEngineVersionDescription,omitempty"`

	DBParameterGroupFamily *string `json:"dbParameterGroupFamily,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	ExportableLogTypes []*string `json:"exportableLogTypes,omitempty"`

	SupportsLogExportsToCloudwatchLogs *bool `json:"supportsLogExportsToCloudwatchLogs,omitempty"`

	SupportsReadReplica *bool `json:"supportsReadReplica,omitempty"`
}

// +kubebuilder:skipversion
type DBInstance struct {
	AutoMinorVersionUpgrade *bool `json:"autoMinorVersionUpgrade,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty"`

	CACertificateIdentifier *string `json:"caCertificateIdentifier,omitempty"`

	CharacterSetName *string `json:"characterSetName,omitempty"`

	CopyTagsToSnapshot *bool `json:"copyTagsToSnapshot,omitempty"`

	DBClusterIdentifier *string `json:"dbClusterIdentifier,omitempty"`

	DBInstanceARN *string `json:"dbInstanceARN,omitempty"`

	DBInstanceClass *string `json:"dbInstanceClass,omitempty"`

	DBInstanceIdentifier *string `json:"dbInstanceIdentifier,omitempty"`

	DBInstanceStatus *string `json:"dbInstanceStatus,omitempty"`

	DBName *string `json:"dbName,omitempty"`

	DBIResourceID *string `json:"dbiResourceID,omitempty"`

	DeletionProtection *bool `json:"deletionProtection,omitempty"`

	EnabledCloudwatchLogsExports []*string `json:"enabledCloudwatchLogsExports,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	EnhancedMonitoringResourceARN *string `json:"enhancedMonitoringResourceARN,omitempty"`

	IAMDatabaseAuthenticationEnabled *bool `json:"iamDatabaseAuthenticationEnabled,omitempty"`

	InstanceCreateTime *metav1.Time `json:"instanceCreateTime,omitempty"`

	IOPS *int64 `json:"iops,omitempty"`

	KMSKeyID *string `json:"kmsKeyID,omitempty"`

	LatestRestorableTime *metav1.Time `json:"latestRestorableTime,omitempty"`

	LicenseModel *string `json:"licenseModel,omitempty"`

	MasterUsername *string `json:"masterUsername,omitempty"`

	MonitoringInterval *int64 `json:"monitoringInterval,omitempty"`

	MonitoringRoleARN *string `json:"monitoringRoleARN,omitempty"`

	MultiAZ *bool `json:"multiAZ,omitempty"`

	PerformanceInsightsEnabled *bool `json:"performanceInsightsEnabled,omitempty"`

	PerformanceInsightsKMSKeyID *string `json:"performanceInsightsKMSKeyID,omitempty"`

	PreferredBackupWindow *string `json:"preferredBackupWindow,omitempty"`

	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`

	PromotionTier *int64 `json:"promotionTier,omitempty"`

	PubliclyAccessible *bool `json:"publiclyAccessible,omitempty"`

	ReadReplicaSourceDBInstanceIdentifier *string `json:"readReplicaSourceDBInstanceIdentifier,omitempty"`

	SecondaryAvailabilityZone *string `json:"secondaryAvailabilityZone,omitempty"`

	StorageEncrypted *bool `json:"storageEncrypted,omitempty"`

	StorageType *string `json:"storageType,omitempty"`

	TDECredentialARN *string `json:"tdeCredentialARN,omitempty"`

	Timezone *string `json:"timezone,omitempty"`

	VPCSecurityGroups []*VPCSecurityGroupMembership `json:"vpcSecurityGroups,omitempty"`
}

// +kubebuilder:skipversion
type DBInstanceStatusInfo struct {
	Message *string `json:"message,omitempty"`

	Normal *bool `json:"normal,omitempty"`

	Status *string `json:"status,omitempty"`

	StatusType *string `json:"statusType,omitempty"`
}

// +kubebuilder:skipversion
type DBParameterGroup struct {
	DBParameterGroupARN *string `json:"dbParameterGroupARN,omitempty"`

	DBParameterGroupFamily *string `json:"dbParameterGroupFamily,omitempty"`

	DBParameterGroupName *string `json:"dbParameterGroupName,omitempty"`

	Description *string `json:"description,omitempty"`
}

// +kubebuilder:skipversion
type DBParameterGroupStatus struct {
	DBParameterGroupName *string `json:"dbParameterGroupName,omitempty"`

	ParameterApplyStatus *string `json:"parameterApplyStatus,omitempty"`
}

// +kubebuilder:skipversion
type DBSecurityGroupMembership struct {
	DBSecurityGroupName *string `json:"dbSecurityGroupName,omitempty"`

	Status *string `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type DBSubnetGroup struct {
	DBSubnetGroupARN *string `json:"dbSubnetGroupARN,omitempty"`

	DBSubnetGroupDescription *string `json:"dbSubnetGroupDescription,omitempty"`

	DBSubnetGroupName *string `json:"dbSubnetGroupName,omitempty"`

	SubnetGroupStatus *string `json:"subnetGroupStatus,omitempty"`

	VPCID *string `json:"vpcID,omitempty"`
}

// +kubebuilder:skipversion
type DomainMembership struct {
	Domain *string `json:"domain,omitempty"`

	FQDN *string `json:"fQDN,omitempty"`

	IAMRoleName *string `json:"iamRoleName,omitempty"`

	Status *string `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type Endpoint struct {
	Address *string `json:"address,omitempty"`

	HostedZoneID *string `json:"hostedZoneID,omitempty"`
}

// +kubebuilder:skipversion
type EngineDefaults struct {
	DBParameterGroupFamily *string `json:"dbParameterGroupFamily,omitempty"`

	Marker *string `json:"marker,omitempty"`
}

// +kubebuilder:skipversion
type Event struct {
	Date *metav1.Time `json:"date,omitempty"`

	Message *string `json:"message,omitempty"`

	SourceARN *string `json:"sourceARN,omitempty"`

	SourceIdentifier *string `json:"sourceIdentifier,omitempty"`
}

// +kubebuilder:skipversion
type EventCategoriesMap struct {
	SourceType *string `json:"sourceType,omitempty"`
}

// +kubebuilder:skipversion
type EventSubscription struct {
	CustSubscriptionID *string `json:"custSubscriptionID,omitempty"`

	CustomerAWSID *string `json:"customerAWSID,omitempty"`

	Enabled *bool `json:"enabled,omitempty"`

	EventSubscriptionARN *string `json:"eventSubscriptionARN,omitempty"`

	SNSTopicARN *string `json:"snsTopicARN,omitempty"`

	SourceType *string `json:"sourceType,omitempty"`

	Status *string `json:"status,omitempty"`

	SubscriptionCreationTime *string `json:"subscriptionCreationTime,omitempty"`
}

// +kubebuilder:skipversion
type Filter struct {
	Name *string `json:"name,omitempty"`

	Values []*string `json:"values,omitempty"`
}

// +kubebuilder:skipversion
type OptionGroupMembership struct {
	OptionGroupName *string `json:"optionGroupName,omitempty"`

	Status *string `json:"status,omitempty"`
}

// +kubebuilder:skipversion
type OrderableDBInstanceOption struct {
	DBInstanceClass *string `json:"dbInstanceClass,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	LicenseModel *string `json:"licenseModel,omitempty"`

	MaxIOPSPerDBInstance *int64 `json:"maxIOPSPerDBInstance,omitempty"`

	MaxStorageSize *int64 `json:"maxStorageSize,omitempty"`

	MinIOPSPerDBInstance *int64 `json:"minIOPSPerDBInstance,omitempty"`

	MinStorageSize *int64 `json:"minStorageSize,omitempty"`

	MultiAZCapable *bool `json:"multiAZCapable,omitempty"`

	ReadReplicaCapable *bool `json:"readReplicaCapable,omitempty"`

	StorageType *string `json:"storageType,omitempty"`

	SupportsEnhancedMonitoring *bool `json:"supportsEnhancedMonitoring,omitempty"`

	SupportsIAMDatabaseAuthentication *bool `json:"supportsIAMDatabaseAuthentication,omitempty"`

	SupportsIOPS *bool `json:"supportsIOPS,omitempty"`

	SupportsPerformanceInsights *bool `json:"supportsPerformanceInsights,omitempty"`

	SupportsStorageEncryption *bool `json:"supportsStorageEncryption,omitempty"`

	VPC *bool `json:"vpc,omitempty"`
}

// +kubebuilder:skipversion
type Parameter struct {
	AllowedValues *string `json:"allowedValues,omitempty"`

	ApplyType *string `json:"applyType,omitempty"`

	DataType *string `json:"dataType,omitempty"`

	Description *string `json:"description,omitempty"`

	IsModifiable *bool `json:"isModifiable,omitempty"`

	MinimumEngineVersion *string `json:"minimumEngineVersion,omitempty"`

	ParameterName *string `json:"parameterName,omitempty"`

	ParameterValue *string `json:"parameterValue,omitempty"`

	Source *string `json:"source,omitempty"`
}

// +kubebuilder:skipversion
type PendingCloudwatchLogsExports struct {
	LogTypesToDisable []*string `json:"logTypesToDisable,omitempty"`

	LogTypesToEnable []*string `json:"logTypesToEnable,omitempty"`
}

// +kubebuilder:skipversion
type PendingMaintenanceAction struct {
	Action *string `json:"action,omitempty"`

	AutoAppliedAfterDate *metav1.Time `json:"autoAppliedAfterDate,omitempty"`

	CurrentApplyDate *metav1.Time `json:"currentApplyDate,omitempty"`

	Description *string `json:"description,omitempty"`

	ForcedApplyDate *metav1.Time `json:"forcedApplyDate,omitempty"`

	OptInStatus *string `json:"optInStatus,omitempty"`
}

// +kubebuilder:skipversion
type PendingModifiedValues struct {
	AllocatedStorage *int64 `json:"allocatedStorage,omitempty"`

	BackupRetentionPeriod *int64 `json:"backupRetentionPeriod,omitempty"`

	CACertificateIdentifier *string `json:"caCertificateIdentifier,omitempty"`

	DBInstanceClass *string `json:"dbInstanceClass,omitempty"`

	DBInstanceIdentifier *string `json:"dbInstanceIdentifier,omitempty"`

	DBSubnetGroupName *string `json:"dbSubnetGroupName,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	IOPS *int64 `json:"iops,omitempty"`

	LicenseModel *string `json:"licenseModel,omitempty"`

	MasterUserPassword *string `json:"masterUserPassword,omitempty"`

	MultiAZ *bool `json:"multiAZ,omitempty"`

	Port *int64 `json:"port,omitempty"`

	StorageType *string `json:"storageType,omitempty"`
}

// +kubebuilder:skipversion
type Range struct {
	Step *int64 `json:"step,omitempty"`
}

// +kubebuilder:skipversion
type ResourcePendingMaintenanceActions struct {
	ResourceIdentifier *string `json:"resourceIdentifier,omitempty"`
}

// +kubebuilder:skipversion
type Subnet struct {
	SubnetIdentifier *string `json:"subnetIdentifier,omitempty"`

	SubnetStatus *string `json:"subnetStatus,omitempty"`
}

// +kubebuilder:skipversion
type Tag struct {
	Key *string `json:"key,omitempty"`

	Value *string `json:"value,omitempty"`
}

// +kubebuilder:skipversion
type Timezone struct {
	TimezoneName *string `json:"timezoneName,omitempty"`
}

// +kubebuilder:skipversion
type UpgradeTarget struct {
	AutoUpgrade *bool `json:"autoUpgrade,omitempty"`

	Description *string `json:"description,omitempty"`

	Engine *string `json:"engine,omitempty"`

	EngineVersion *string `json:"engineVersion,omitempty"`

	IsMajorVersionUpgrade *bool `json:"isMajorVersionUpgrade,omitempty"`
}

// +kubebuilder:skipversion
type VPCSecurityGroupMembership struct {
	Status *string `json:"status,omitempty"`

	VPCSecurityGroupID *string `json:"vpcSecurityGroupID,omitempty"`
}

// +kubebuilder:skipversion
type ValidStorageOptions struct {
	StorageType *string `json:"storageType,omitempty"`
}
