/*
Copyright 2021 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by ack-generate. DO NOT EDIT.

package v1alpha1

import (
	xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"
)

// DBClusterParameters defines the desired state of DBCluster
type DBClusterParameters struct {
	// Region is which region the DBCluster will be created.
	// +kubebuilder:validation:Required
	Region string `json:"region"`
	// A list of EC2 Availability Zones that instances in the DB cluster can be
	// created in.
	AvailabilityZones []*string `json:"availabilityZones,omitempty"`
	// The number of days for which automated backups are retained. You must specify
	// a minimum value of 1.
	//
	// Default: 1
	//
	// Constraints:
	//
	//    * Must be a value from 1 to 35
	BackupRetentionPeriod *int64 `json:"backupRetentionPeriod,omitempty"`
	// (Not supported by Neptune)
	CharacterSetName *string `json:"characterSetName,omitempty"`
	// If set to true, tags are copied to any snapshot of the DB cluster that is
	// created.
	CopyTagsToSnapshot *bool `json:"copyTagsToSnapshot,omitempty"`
	// The name of the DB cluster parameter group to associate with this DB cluster.
	// If this argument is omitted, the default is used.
	//
	// Constraints:
	//
	//    * If supplied, must match the name of an existing DBClusterParameterGroup.
	DBClusterParameterGroupName *string `json:"dbClusterParameterGroupName,omitempty"`
	// A DB subnet group to associate with this DB cluster.
	//
	// Constraints: Must match the name of an existing DBSubnetGroup. Must not be
	// default.
	//
	// Example: mySubnetgroup
	DBSubnetGroupName *string `json:"dbSubnetGroupName,omitempty"`
	// The name for your database of up to 64 alpha-numeric characters. If you do
	// not provide a name, Amazon Neptune will not create a database in the DB cluster
	// you are creating.
	DatabaseName *string `json:"databaseName,omitempty"`
	// A value that indicates whether the DB cluster has deletion protection enabled.
	// The database can't be deleted when deletion protection is enabled. By default,
	// deletion protection is enabled.
	DeletionProtection *bool `json:"deletionProtection,omitempty"`
	// DestinationRegion is used for presigning the request to a given region.
	DestinationRegion *string `json:"destinationRegion,omitempty"`
	// The list of log types that need to be enabled for exporting to CloudWatch
	// Logs.
	EnableCloudwatchLogsExports []*string `json:"enableCloudwatchLogsExports,omitempty"`
	// If set to true, enables Amazon Identity and Access Management (IAM) authentication
	// for the entire DB cluster (this cannot be set at an instance level).
	//
	// Default: false.
	EnableIAMDatabaseAuthentication *bool `json:"enableIAMDatabaseAuthentication,omitempty"`
	// The name of the database engine to be used for this DB cluster.
	//
	// Valid Values: neptune
	// +kubebuilder:validation:Required
	Engine *string `json:"engine"`
	// The version number of the database engine to use for the new DB cluster.
	//
	// Example: 1.0.2.1
	EngineVersion *string `json:"engineVersion,omitempty"`
	// The Amazon KMS key identifier for an encrypted DB cluster.
	//
	// The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption
	// key. If you are creating a DB cluster with the same Amazon account that owns
	// the KMS encryption key used to encrypt the new DB cluster, then you can use
	// the KMS key alias instead of the ARN for the KMS encryption key.
	//
	// If an encryption key is not specified in KmsKeyId:
	//
	//    * If ReplicationSourceIdentifier identifies an encrypted source, then
	//    Amazon Neptune will use the encryption key used to encrypt the source.
	//    Otherwise, Amazon Neptune will use your default encryption key.
	//
	//    * If the StorageEncrypted parameter is true and ReplicationSourceIdentifier
	//    is not specified, then Amazon Neptune will use your default encryption
	//    key.
	//
	// Amazon KMS creates the default encryption key for your Amazon account. Your
	// Amazon account has a different default encryption key for each Amazon Region.
	//
	// If you create a Read Replica of an encrypted DB cluster in another Amazon
	// Region, you must set KmsKeyId to a KMS key ID that is valid in the destination
	// Amazon Region. This key is used to encrypt the Read Replica in that Amazon
	// Region.
	KMSKeyID *string `json:"kmsKeyID,omitempty"`
	// Not supported by Neptune.
	MasterUserPassword *string `json:"masterUserPassword,omitempty"`
	// Not supported by Neptune.
	MasterUsername *string `json:"masterUsername,omitempty"`
	// (Not supported by Neptune)
	OptionGroupName *string `json:"optionGroupName,omitempty"`
	// The port number on which the instances in the DB cluster accept connections.
	//
	// Default: 8182
	Port *int64 `json:"port,omitempty"`
	// This parameter is not currently supported.
	PreSignedURL *string `json:"preSignedURL,omitempty"`
	// The daily time range during which automated backups are created if automated
	// backups are enabled using the BackupRetentionPeriod parameter.
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Amazon Region. To see the time blocks available, see Adjusting
	// the Preferred Maintenance Window (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html)
	// in the Amazon Neptune User Guide.
	//
	// Constraints:
	//
	//    * Must be in the format hh24:mi-hh24:mi.
	//
	//    * Must be in Universal Coordinated Time (UTC).
	//
	//    * Must not conflict with the preferred maintenance window.
	//
	//    * Must be at least 30 minutes.
	PreferredBackupWindow *string `json:"preferredBackupWindow,omitempty"`
	// The weekly time range during which system maintenance can occur, in Universal
	// Coordinated Time (UTC).
	//
	// Format: ddd:hh24:mi-ddd:hh24:mi
	//
	// The default is a 30-minute window selected at random from an 8-hour block
	// of time for each Amazon Region, occurring on a random day of the week. To
	// see the time blocks available, see Adjusting the Preferred Maintenance Window
	// (https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/AdjustingTheMaintenanceWindow.html)
	// in the Amazon Neptune User Guide.
	//
	// Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.
	//
	// Constraints: Minimum 30-minute window.
	PreferredMaintenanceWindow *string `json:"preferredMaintenanceWindow,omitempty"`
	// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if
	// this DB cluster is created as a Read Replica.
	ReplicationSourceIdentifier *string `json:"replicationSourceIdentifier,omitempty"`
	// SourceRegion is the source region where the resource exists. This is not
	// sent over the wire and is only used for presigning. This value should always
	// have the same region as the source ARN.
	SourceRegion *string `json:"sourceRegion,omitempty"`
	// Specifies whether the DB cluster is encrypted.
	StorageEncrypted *bool `json:"storageEncrypted,omitempty"`
	// The tags to assign to the new DB cluster.
	Tags []*Tag `json:"tags,omitempty"`
	// A list of EC2 VPC security groups to associate with this DB cluster.
	VPCSecurityGroupIDs       []*string `json:"vpcSecurityGroupIDs,omitempty"`
	CustomDBClusterParameters `json:",inline"`
}

// DBClusterSpec defines the desired state of DBCluster
type DBClusterSpec struct {
	xpv1.ResourceSpec `json:",inline"`
	ForProvider       DBClusterParameters `json:"forProvider"`
}

// DBClusterObservation defines the observed state of DBCluster
type DBClusterObservation struct {
	// AllocatedStorage always returns 1, because Neptune DB cluster storage size
	// is not fixed, but instead automatically adjusts as needed.
	AllocatedStorage *int64 `json:"allocatedStorage,omitempty"`
	// Provides a list of the Amazon Identity and Access Management (IAM) roles
	// that are associated with the DB cluster. IAM roles that are associated with
	// a DB cluster grant permission for the DB cluster to access other Amazon services
	// on your behalf.
	AssociatedRoles []*DBClusterRole `json:"associatedRoles,omitempty"`
	// Time at which the DB cluster will be automatically restarted.
	AutomaticRestartTime *metav1.Time `json:"automaticRestartTime,omitempty"`
	// Identifies the clone group to which the DB cluster is associated.
	CloneGroupID *string `json:"cloneGroupID,omitempty"`
	// Specifies the time when the DB cluster was created, in Universal Coordinated
	// Time (UTC).
	ClusterCreateTime *metav1.Time `json:"clusterCreateTime,omitempty"`
	// If set to true, the DB cluster can be cloned across accounts.
	CrossAccountClone *bool `json:"crossAccountClone,omitempty"`
	// The Amazon Resource Name (ARN) for the DB cluster.
	DBClusterARN *string `json:"dbClusterARN,omitempty"`
	// Contains a user-supplied DB cluster identifier. This identifier is the unique
	// key that identifies a DB cluster.
	DBClusterIdentifier *string `json:"dbClusterIdentifier,omitempty"`
	// Provides the list of instances that make up the DB cluster.
	DBClusterMembers []*DBClusterMember `json:"dbClusterMembers,omitempty"`
	// Not supported by Neptune.
	DBClusterOptionGroupMemberships []*DBClusterOptionGroupStatus `json:"dbClusterOptionGroupMemberships,omitempty"`
	// Specifies the name of the DB cluster parameter group for the DB cluster.
	DBClusterParameterGroup *string `json:"dbClusterParameterGroup,omitempty"`
	// Specifies information on the subnet group associated with the DB cluster,
	// including the name, description, and subnets in the subnet group.
	DBSubnetGroup *string `json:"dbSubnetGroup,omitempty"`
	// The Amazon Region-unique, immutable identifier for the DB cluster. This identifier
	// is found in Amazon CloudTrail log entries whenever the Amazon KMS key for
	// the DB cluster is accessed.
	DBClusterResourceID *string `json:"dbClusterResourceID,omitempty"`
	// Specifies the earliest time to which a database can be restored with point-in-time
	// restore.
	EarliestRestorableTime *metav1.Time `json:"earliestRestorableTime,omitempty"`
	// A list of log types that this DB cluster is configured to export to CloudWatch
	// Logs.
	EnabledCloudwatchLogsExports []*string `json:"enabledCloudwatchLogsExports,omitempty"`
	// Specifies the connection endpoint for the primary instance of the DB cluster.
	Endpoint *string `json:"endpoint,omitempty"`
	// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
	HostedZoneID *string `json:"hostedZoneID,omitempty"`
	// True if mapping of Amazon Identity and Access Management (IAM) accounts to
	// database accounts is enabled, and otherwise false.
	IAMDatabaseAuthenticationEnabled *bool `json:"iamDatabaseAuthenticationEnabled,omitempty"`
	// Specifies the latest time to which a database can be restored with point-in-time
	// restore.
	LatestRestorableTime *metav1.Time `json:"latestRestorableTime,omitempty"`
	// Specifies whether the DB cluster has instances in multiple Availability Zones.
	MultiAZ *bool `json:"multiAZ,omitempty"`
	// Specifies the progress of the operation as a percentage.
	PercentProgress *string `json:"percentProgress,omitempty"`
	// Contains one or more identifiers of the Read Replicas associated with this
	// DB cluster.
	ReadReplicaIdentifiers []*string `json:"readReplicaIdentifiers,omitempty"`
	// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster
	// load-balances connections across the Read Replicas that are available in
	// a DB cluster. As clients request new connections to the reader endpoint,
	// Neptune distributes the connection requests among the Read Replicas in the
	// DB cluster. This functionality can help balance your read workload across
	// multiple Read Replicas in your DB cluster.
	//
	// If a failover occurs, and the Read Replica that you are connected to is promoted
	// to be the primary instance, your connection is dropped. To continue sending
	// your read workload to other Read Replicas in the cluster, you can then reconnect
	// to the reader endpoint.
	ReaderEndpoint *string `json:"readerEndpoint,omitempty"`
	// Specifies the current state of this DB cluster.
	Status *string `json:"status,omitempty"`
	// Provides a list of VPC security groups that the DB cluster belongs to.
	VPCSecurityGroups []*VPCSecurityGroupMembership `json:"vpcSecurityGroups,omitempty"`
}

// DBClusterStatus defines the observed state of DBCluster.
type DBClusterStatus struct {
	xpv1.ResourceStatus `json:",inline"`
	AtProvider          DBClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DBCluster is the Schema for the DBClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:subresource:status
// +kubebuilder:storageversion
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,aws}
type DBCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DBClusterSpec   `json:"spec"`
	Status            DBClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DBClusterList contains a list of DBClusters
type DBClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DBCluster `json:"items"`
}

// Repository type metadata.
var (
	DBClusterKind             = "DBCluster"
	DBClusterGroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DBClusterKind}.String()
	DBClusterKindAPIVersion   = DBClusterKind + "." + GroupVersion.String()
	DBClusterGroupVersionKind = GroupVersion.WithKind(DBClusterKind)
)

func init() {
	SchemeBuilder.Register(&DBCluster{}, &DBClusterList{})
}
