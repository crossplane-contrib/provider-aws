---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: targetgroups.elbv2.aws.crossplane.io
spec:
  group: elbv2.aws.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - aws
    kind: TargetGroup
    listKind: TargetGroupList
    plural: targetgroups
    singular: targetgroup
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: TargetGroup is the Schema for the TargetGroups API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: TargetGroupSpec defines the desired state of TargetGroup
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                description: TargetGroupParameters defines the desired state of TargetGroup
                properties:
                  healthCheckEnabled:
                    description: Indicates whether health checks are enabled. If the
                      target type is lambda, health checks are disabled by default
                      but can be enabled. If the target type is instance, ip, or alb,
                      health checks are always enabled and cannot be disabled.
                    type: boolean
                  healthCheckIntervalSeconds:
                    description: The approximate amount of time, in seconds, between
                      health checks of an individual target. If the target group protocol
                      is TCP, TLS, UDP, or TCP_UDP, the supported values are 10 and
                      30 seconds. If the target group protocol is HTTP or HTTPS, the
                      default is 30 seconds. If the target group protocol is GENEVE,
                      the default is 10 seconds. If the target type is lambda, the
                      default is 35 seconds.
                    format: int64
                    type: integer
                  healthCheckPath:
                    description: "[HTTP/HTTPS health checks] The destination for health
                      checks on the targets. \n [HTTP1 or HTTP2 protocol version]
                      The ping path. The default is /. \n [GRPC protocol version]
                      The path of a custom health check method with the format /package.service/method.
                      The default is /Amazon Web Services.ALB/healthcheck."
                    type: string
                  healthCheckPort:
                    description: The port the load balancer uses when performing health
                      checks on targets. If the protocol is HTTP, HTTPS, TCP, TLS,
                      UDP, or TCP_UDP, the default is traffic-port, which is the port
                      on which each target receives traffic from the load balancer.
                      If the protocol is GENEVE, the default is port 80.
                    type: string
                  healthCheckProtocol:
                    description: The protocol the load balancer uses when performing
                      health checks on targets. For Application Load Balancers, the
                      default is HTTP. For Network Load Balancers and Gateway Load
                      Balancers, the default is TCP. The TCP protocol is not supported
                      for health checks if the protocol of the target group is HTTP
                      or HTTPS. The GENEVE, TLS, UDP, and TCP_UDP protocols are not
                      supported for health checks.
                    type: string
                  healthCheckTimeoutSeconds:
                    description: The amount of time, in seconds, during which no response
                      from a target means a failed health check. For target groups
                      with a protocol of HTTP, HTTPS, or GENEVE, the default is 5
                      seconds. For target groups with a protocol of TCP or TLS, this
                      value must be 6 seconds for HTTP health checks and 10 seconds
                      for TCP and HTTPS health checks. If the target type is lambda,
                      the default is 30 seconds.
                    format: int64
                    type: integer
                  healthyThresholdCount:
                    description: The number of consecutive health checks successes
                      required before considering an unhealthy target healthy. For
                      target groups with a protocol of HTTP or HTTPS, the default
                      is 5. For target groups with a protocol of TCP, TLS, or GENEVE,
                      the default is 3. If the target type is lambda, the default
                      is 5.
                    format: int64
                    type: integer
                  ipAddressType:
                    description: The type of IP address used for this target group.
                      The possible values are ipv4 and ipv6. This is an optional parameter.
                      If not specified, the IP address type defaults to ipv4.
                    type: string
                  matcher:
                    description: '[HTTP/HTTPS health checks] The HTTP or gRPC codes
                      to use when checking for a successful response from a target.'
                    properties:
                      grpcCode:
                        type: string
                      httpCode:
                        type: string
                    type: object
                  name:
                    description: "The name of the target group. \n This name must
                      be unique per region per account, can have a maximum of 32 characters,
                      must contain only alphanumeric characters or hyphens, and must
                      not begin or end with a hyphen."
                    type: string
                  port:
                    description: The port on which the targets receive traffic. This
                      port is used unless you specify a port override when registering
                      the target. If the target is a Lambda function, this parameter
                      does not apply. If the protocol is GENEVE, the supported port
                      is 6081.
                    format: int64
                    type: integer
                  protocol:
                    description: The protocol to use for routing traffic to the targets.
                      For Application Load Balancers, the supported protocols are
                      HTTP and HTTPS. For Network Load Balancers, the supported protocols
                      are TCP, TLS, UDP, or TCP_UDP. For Gateway Load Balancers, the
                      supported protocol is GENEVE. A TCP_UDP listener must be associated
                      with a TCP_UDP target group. If the target is a Lambda function,
                      this parameter does not apply.
                    type: string
                  protocolVersion:
                    description: '[HTTP/HTTPS protocol] The protocol version. Specify
                      GRPC to send requests to targets using gRPC. Specify HTTP2 to
                      send requests to targets using HTTP/2. The default is HTTP1,
                      which sends requests to targets using HTTP/1.1.'
                    type: string
                  region:
                    description: Region is which region the TargetGroup will be created.
                    type: string
                  tags:
                    description: The tags to assign to the target group.
                    items:
                      properties:
                        key:
                          type: string
                        value:
                          type: string
                      type: object
                    type: array
                  targetType:
                    description: "The type of target that you must specify when registering
                      targets with this target group. You can't specify targets for
                      a target group using more than one target type. \n * instance
                      - Register targets by instance ID. This is the default value.
                      \n * ip - Register targets by IP address. You can specify IP
                      addresses from the subnets of the virtual private cloud (VPC)
                      for the target group, the RFC 1918 range (10.0.0.0/8, 172.16.0.0/12,
                      and 192.168.0.0/16), and the RFC 6598 range (100.64.0.0/10).
                      You can't specify publicly routable IP addresses. \n * lambda
                      - Register a single Lambda function as a target. \n * alb -
                      Register a single Application Load Balancer as a target."
                    type: string
                  unhealthyThresholdCount:
                    description: The number of consecutive health check failures required
                      before considering a target unhealthy. If the target group protocol
                      is HTTP or HTTPS, the default is 2. If the target group protocol
                      is TCP or TLS, this value must be the same as the healthy threshold
                      count. If the target group protocol is GENEVE, the default is
                      3. If the target type is lambda, the default is 2.
                    format: int64
                    type: integer
                  vpcID:
                    description: The identifier of the virtual private cloud (VPC).
                      If the target is a Lambda function, this parameter does not
                      apply. Otherwise, this parameter is required.
                    type: string
                  vpcIdRef:
                    description: Reference to VPC for VPCID
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  vpcIdSelector:
                    description: Selector for references to VPC for VPCID
                    properties:
                      matchControllerRef:
                        description: MatchControllerRef ensures an object with the
                          same controller reference as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                required:
                - name
                - region
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: TargetGroupStatus defines the observed state of TargetGroup.
            properties:
              atProvider:
                description: TargetGroupObservation defines the observed state of
                  TargetGroup
                properties:
                  targetGroups:
                    description: Information about the target group.
                    items:
                      properties:
                        healthCheckEnabled:
                          type: boolean
                        healthCheckIntervalSeconds:
                          format: int64
                          type: integer
                        healthCheckPath:
                          type: string
                        healthCheckPort:
                          type: string
                        healthCheckProtocol:
                          type: string
                        healthCheckTimeoutSeconds:
                          format: int64
                          type: integer
                        healthyThresholdCount:
                          format: int64
                          type: integer
                        ipAddressType:
                          type: string
                        loadBalancerARNs:
                          items:
                            type: string
                          type: array
                        matcher:
                          description: The codes to use when checking for a successful
                            response from a target. If the protocol version is gRPC,
                            these are gRPC codes. Otherwise, these are HTTP codes.
                          properties:
                            grpcCode:
                              type: string
                            httpCode:
                              type: string
                          type: object
                        port:
                          format: int64
                          type: integer
                        protocol:
                          type: string
                        protocolVersion:
                          type: string
                        targetGroupARN:
                          type: string
                        targetGroupName:
                          type: string
                        targetType:
                          type: string
                        unhealthyThresholdCount:
                          format: int64
                          type: integer
                        vpcID:
                          type: string
                      type: object
                    type: array
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
