---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: keys.kms.aws.crossplane.io
spec:
  group: kms.aws.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - aws
    kind: Key
    listKind: KeyList
    plural: keys
    singular: key
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Key is the Schema for the Keys API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KeySpec defines the desired state of Key
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                description: KeyParameters defines the desired state of Key
                properties:
                  bypassPolicyLockoutSafetyCheck:
                    description: "A flag to indicate whether to bypass the key policy
                      lockout safety check. \n Setting this value to true increases
                      the risk that the KMS key becomes unmanageable. Do not set this
                      value to true indiscriminately. \n For more information, refer
                      to the scenario in the Default Key Policy (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
                      section in the Key Management Service Developer Guide . \n Use
                      this parameter only when you include a policy in the request
                      and you intend to prevent the principal that is making the request
                      from making a subsequent PutKeyPolicy request on the KMS key.
                      \n The default value is false."
                    type: boolean
                  customKeyStoreID:
                    description: "Creates the KMS key in the specified custom key
                      store (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html)
                      and the key material in its associated CloudHSM cluster. To
                      create a KMS key in a custom key store, you must also specify
                      the Origin parameter with a value of AWS_CLOUDHSM. The CloudHSM
                      cluster that is associated with the custom key store must have
                      at least two active HSMs, each in a different Availability Zone
                      in the Region. \n This parameter is valid only for symmetric
                      encryption KMS keys in a single Region. You cannot create any
                      other type of KMS key in a custom key store. \n To find the
                      ID of a custom key store, use the DescribeCustomKeyStores operation.
                      \n The response includes the custom key store ID and the ID
                      of the CloudHSM cluster. \n This operation is part of the Custom
                      Key Store feature (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html)
                      feature in KMS, which combines the convenience and extensive
                      integration of KMS with the isolation and control of a single-tenant
                      key store."
                    type: string
                  customerMasterKeySpec:
                    description: "Instead, use the KeySpec parameter. \n The KeySpec
                      and CustomerMasterKeySpec parameters work the same way. Only
                      the names differ. We recommend that you use KeySpec parameter
                      in your code. However, to avoid breaking changes, KMS will support
                      both parameters."
                    type: string
                  description:
                    description: "A description of the KMS key. \n Use a description
                      that helps you decide whether the KMS key is appropriate for
                      a task. The default value is an empty string (no description).
                      \n To set or change the description after the key is created,
                      use UpdateKeyDescription."
                    type: string
                  enableKeyRotation:
                    description: Specifies if key rotation is enabled for the corresponding
                      key
                    type: boolean
                  enabled:
                    description: Specifies whether the CMK is enabled.
                    type: boolean
                  keySpec:
                    description: "Specifies the type of KMS key to create. The default
                      value, SYMMETRIC_DEFAULT, creates a KMS key with a 256-bit symmetric
                      key for encryption and decryption. For help choosing a key spec
                      for your KMS key, see Choosing a KMS key type (https://docs.aws.amazon.com/kms/latest/developerguide/key-types.html#symm-asymm-choose)
                      in the Key Management Service Developer Guide . \n The KeySpec
                      determines whether the KMS key contains a symmetric key or an
                      asymmetric key pair. It also determines the algorithms that
                      the KMS key supports. You can't change the KeySpec after the
                      KMS key is created. To further restrict the algorithms that
                      can be used with the KMS key, use a condition key in its key
                      policy or IAM policy. For more information, see kms:EncryptionAlgorithm
                      (https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-algorithm),
                      kms:MacAlgorithm (https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-mac-algorithm)
                      or kms:Signing Algorithm (https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-signing-algorithm)
                      in the Key Management Service Developer Guide . \n Amazon Web
                      Services services that are integrated with KMS (http://aws.amazon.com/kms/features/#AWS_Service_Integration)
                      use symmetric encryption KMS keys to protect your data. These
                      services do not support asymmetric KMS keys or HMAC KMS keys.
                      \n KMS supports the following key specs for KMS keys: \n * Symmetric
                      encryption key (default) SYMMETRIC_DEFAULT (AES-256-GCM) \n
                      * HMAC keys (symmetric) HMAC_224 HMAC_256 HMAC_384 HMAC_512
                      \n * Asymmetric RSA key pairs RSA_2048 RSA_3072 RSA_4096 \n
                      * Asymmetric NIST-recommended elliptic curve key pairs ECC_NIST_P256
                      (secp256r1) ECC_NIST_P384 (secp384r1) ECC_NIST_P521 (secp521r1)
                      \n * Other asymmetric elliptic curve key pairs ECC_SECG_P256K1
                      (secp256k1), commonly used for cryptocurrencies."
                    type: string
                  keyUsage:
                    description: "Determines the cryptographic operations (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations)
                      for which you can use the KMS key. The default value is ENCRYPT_DECRYPT.
                      This parameter is optional when you are creating a symmetric
                      encryption KMS key; otherwise, it is required. You can't change
                      the KeyUsage value after the KMS key is created. \n Select only
                      one valid value. \n * For symmetric encryption KMS keys, omit
                      the parameter or specify ENCRYPT_DECRYPT. \n * For HMAC KMS
                      keys (symmetric), specify GENERATE_VERIFY_MAC. \n * For asymmetric
                      KMS keys with RSA key material, specify ENCRYPT_DECRYPT or SIGN_VERIFY.
                      \n * For asymmetric KMS keys with ECC key material, specify
                      SIGN_VERIFY."
                    type: string
                  multiRegion:
                    description: "Creates a multi-Region primary key that you can
                      replicate into other Amazon Web Services Regions. You cannot
                      change this value after you create the KMS key. \n For a multi-Region
                      key, set this parameter to True. For a single-Region KMS key,
                      omit this parameter or set it to False. The default value is
                      False. \n This operation supports multi-Region keys, an KMS
                      feature that lets you create multiple interoperable KMS keys
                      in different Amazon Web Services Regions. Because these KMS
                      keys have the same key ID, key material, and other metadata,
                      you can use them interchangeably to encrypt data in one Amazon
                      Web Services Region and decrypt it in a different Amazon Web
                      Services Region without re-encrypting the data or making a cross-Region
                      call. For more information about multi-Region keys, see Multi-Region
                      keys in KMS (https://docs.aws.amazon.com/kms/latest/developerguide/multi-region-keys-overview.html)
                      in the Key Management Service Developer Guide. \n This value
                      creates a primary key, not a replica. To create a replica key,
                      use the ReplicateKey operation. \n You can create a symmetric
                      or asymmetric multi-Region key, and you can create a multi-Region
                      key with imported key material. However, you cannot create a
                      multi-Region key in a custom key store."
                    type: boolean
                  origin:
                    description: "The source of the key material for the KMS key.
                      You cannot change the origin after you create the KMS key. The
                      default is AWS_KMS, which means that KMS creates the key material.
                      \n To create a KMS key with no key material (for imported key
                      material), set the value to EXTERNAL. For more information about
                      importing key material into KMS, see Importing Key Material
                      (https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html)
                      in the Key Management Service Developer Guide. This value is
                      valid only for symmetric encryption KMS keys. \n To create a
                      KMS key in an KMS custom key store (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html)
                      and create its key material in the associated CloudHSM cluster,
                      set this value to AWS_CLOUDHSM. You must also use the CustomKeyStoreId
                      parameter to identify the custom key store. This value is valid
                      only for symmetric encryption KMS keys."
                    type: string
                  pendingWindowInDays:
                    description: Specifies how many days the Key is retained when
                      scheduled for deletion. Defaults to 30 days.
                    format: int64
                    type: integer
                  policy:
                    description: "The key policy to attach to the KMS key. \n If you
                      provide a key policy, it must meet the following criteria: \n
                      * If you don't set BypassPolicyLockoutSafetyCheck to true, the
                      key policy must allow the principal that is making the CreateKey
                      request to make a subsequent PutKeyPolicy request on the KMS
                      key. This reduces the risk that the KMS key becomes unmanageable.
                      For more information, refer to the scenario in the Default Key
                      Policy (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
                      section of the Key Management Service Developer Guide . \n *
                      Each statement in the key policy must contain one or more principals.
                      The principals in the key policy must exist and be visible to
                      KMS. When you create a new Amazon Web Services principal (for
                      example, an IAM user or role), you might need to enforce a delay
                      before including the new principal in a key policy because the
                      new principal might not be immediately visible to KMS. For more
                      information, see Changes that I make are not always immediately
                      visible (https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency)
                      in the Amazon Web Services Identity and Access Management User
                      Guide. \n If you do not provide a key policy, KMS attaches a
                      default key policy to the KMS key. For more information, see
                      Default Key Policy (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default)
                      in the Key Management Service Developer Guide. \n The key policy
                      size quota is 32 kilobytes (32768 bytes). \n For help writing
                      and formatting a JSON policy document, see the IAM JSON Policy
                      Reference (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html)
                      in the Identity and Access Management User Guide ."
                    type: string
                  region:
                    description: Region is which region the Key will be created.
                    type: string
                  tags:
                    description: "Assigns one or more tags to the KMS key. Use this
                      parameter to tag the KMS key when it is created. To tag an existing
                      KMS key, use the TagResource operation. \n Tagging or untagging
                      a KMS key can allow or deny permission to the KMS key. For details,
                      see ABAC in KMS (https://docs.aws.amazon.com/kms/latest/developerguide/abac.html)
                      in the Key Management Service Developer Guide. \n To use this
                      parameter, you must have kms:TagResource (https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html)
                      permission in an IAM policy. \n Each tag consists of a tag key
                      and a tag value. Both the tag key and the tag value are required,
                      but the tag value can be an empty (null) string. You cannot
                      have more than one tag on a KMS key with the same tag key. If
                      you specify an existing tag key with a different tag value,
                      KMS replaces the current tag value with the specified one. \n
                      When you add tags to an Amazon Web Services resource, Amazon
                      Web Services generates a cost allocation report with usage and
                      costs aggregated by tags. Tags can also be used to control access
                      to a KMS key. For details, see Tagging Keys (https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html)."
                    items:
                      properties:
                        tagKey:
                          type: string
                        tagValue:
                          type: string
                      type: object
                    type: array
                required:
                - region
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: KeyStatus defines the observed state of Key.
            properties:
              atProvider:
                description: KeyObservation defines the observed state of Key
                properties:
                  arn:
                    description: The Amazon Resource Name (ARN) of the KMS key. For
                      examples, see Key Management Service (KMS) (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms)
                      in the Example ARNs section of the Amazon Web Services General
                      Reference.
                    type: string
                  awsAccountID:
                    description: The twelve-digit account ID of the Amazon Web Services
                      account that owns the KMS key.
                    type: string
                  cloudHsmClusterID:
                    description: The cluster ID of the CloudHSM cluster that contains
                      the key material for the KMS key. When you create a KMS key
                      in a custom key store (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html),
                      KMS creates the key material for the KMS key in the associated
                      CloudHSM cluster. This value is present only when the KMS key
                      is created in a custom key store.
                    type: string
                  creationDate:
                    description: The date and time when the KMS key was created.
                    format: date-time
                    type: string
                  deletionDate:
                    description: "The date and time after which KMS deletes this KMS
                      key. This value is present only when the KMS key is scheduled
                      for deletion, that is, when its KeyState is PendingDeletion.
                      \n When the primary key in a multi-Region key is scheduled for
                      deletion but still has replica keys, its key state is PendingReplicaDeletion
                      and the length of its waiting period is displayed in the PendingDeletionWindowInDays
                      field."
                    format: date-time
                    type: string
                  enabled:
                    description: Specifies whether the KMS key is enabled. When KeyState
                      is Enabled this value is true, otherwise it is false.
                    type: boolean
                  encryptionAlgorithms:
                    description: "The encryption algorithms that the KMS key supports.
                      You cannot use the KMS key with other encryption algorithms
                      within KMS. \n This value is present only when the KeyUsage
                      of the KMS key is ENCRYPT_DECRYPT."
                    items:
                      type: string
                    type: array
                  expirationModel:
                    description: Specifies whether the KMS key's key material expires.
                      This value is present only when Origin is EXTERNAL, otherwise
                      this value is omitted.
                    type: string
                  keyID:
                    description: The globally unique identifier for the KMS key.
                    type: string
                  keyManager:
                    description: The manager of the KMS key. KMS keys in your Amazon
                      Web Services account are either customer managed or Amazon Web
                      Services managed. For more information about the difference,
                      see KMS keys (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#kms_keys)
                      in the Key Management Service Developer Guide.
                    type: string
                  keyState:
                    description: "The current status of the KMS key. \n For more information
                      about how key state affects the use of a KMS key, see Key states
                      of KMS keys (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html)
                      in the Key Management Service Developer Guide."
                    type: string
                  macAlgorithms:
                    description: "The message authentication code (MAC) algorithm
                      that the HMAC KMS key supports. \n This value is present only
                      when the KeyUsage of the KMS key is GENERATE_VERIFY_MAC."
                    items:
                      type: string
                    type: array
                  multiRegionConfiguration:
                    description: "Lists the primary and replica keys in same multi-Region
                      key. This field is present only when the value of the MultiRegion
                      field is True. \n For more information about any listed KMS
                      key, use the DescribeKey operation. \n * MultiRegionKeyType
                      indicates whether the KMS key is a PRIMARY or REPLICA key. \n
                      * PrimaryKey displays the key ARN and Region of the primary
                      key. This field displays the current KMS key if it is the primary
                      key. \n * ReplicaKeys displays the key ARNs and Regions of all
                      replica keys. This field includes the current KMS key if it
                      is a replica key."
                    properties:
                      multiRegionKeyType:
                        type: string
                      primaryKey:
                        description: Describes the primary or replica key in a multi-Region
                          key.
                        properties:
                          arn:
                            type: string
                          region:
                            type: string
                        type: object
                      replicaKeys:
                        items:
                          properties:
                            arn:
                              type: string
                            region:
                              type: string
                          type: object
                        type: array
                    type: object
                  pendingDeletionWindowInDays:
                    description: "The waiting period before the primary key in a multi-Region
                      key is deleted. This waiting period begins when the last of
                      its replica keys is deleted. This value is present only when
                      the KeyState of the KMS key is PendingReplicaDeletion. That
                      indicates that the KMS key is the primary key in a multi-Region
                      key, it is scheduled for deletion, and it still has existing
                      replica keys. \n When a single-Region KMS key or a multi-Region
                      replica key is scheduled for deletion, its deletion date is
                      displayed in the DeletionDate field. However, when the primary
                      key in a multi-Region key is scheduled for deletion, its waiting
                      period doesn't begin until all of its replica keys are deleted.
                      This value displays that waiting period. When the last replica
                      key in the multi-Region key is deleted, the KeyState of the
                      scheduled primary key changes from PendingReplicaDeletion to
                      PendingDeletion and the deletion date appears in the DeletionDate
                      field."
                    format: int64
                    type: integer
                  signingAlgorithms:
                    description: "The signing algorithms that the KMS key supports.
                      You cannot use the KMS key with other signing algorithms within
                      KMS. \n This field appears only when the KeyUsage of the KMS
                      key is SIGN_VERIFY."
                    items:
                      type: string
                    type: array
                  validTo:
                    description: The time at which the imported key material expires.
                      When the key material expires, KMS deletes the key material
                      and the KMS key becomes unusable. This value is present only
                      for KMS keys whose Origin is EXTERNAL and whose ExpirationModel
                      is KEY_MATERIAL_EXPIRES, otherwise this value is omitted.
                    format: date-time
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
