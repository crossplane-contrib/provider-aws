apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.2
  creationTimestamp: null
  name: keys.kms.aws.crossplane.io
spec:
  group: kms.aws.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - aws
    kind: Key
    listKind: KeyList
    plural: keys
    singular: key
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Key is the Schema for the Keys API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: KeySpec defines the desired state of Key
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                description: KeyParameters defines the desired state of Key
                properties:
                  bypassPolicyLockoutSafetyCheck:
                    description: "A flag to indicate whether to bypass the key policy
                      lockout safety check. \n Setting this value to true increases
                      the risk that the CMK becomes unmanageable. Do not set this
                      value to true indiscriminately. \n For more information, refer
                      to the scenario in the Default Key Policy (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
                      section in the AWS Key Management Service Developer Guide .
                      \n Use this parameter only when you include a policy in the
                      request and you intend to prevent the principal that is making
                      the request from making a subsequent PutKeyPolicy request on
                      the CMK. \n The default value is false."
                    type: boolean
                  customKeyStoreID:
                    description: "Creates the CMK in the specified custom key store
                      (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html)
                      and the key material in its associated AWS CloudHSM cluster.
                      To create a CMK in a custom key store, you must also specify
                      the Origin parameter with a value of AWS_CLOUDHSM. The AWS CloudHSM
                      cluster that is associated with the custom key store must have
                      at least two active HSMs, each in a different Availability Zone
                      in the Region. \n This parameter is valid only for symmetric
                      CMKs. You cannot create an asymmetric CMK in a custom key store.
                      \n To find the ID of a custom key store, use the DescribeCustomKeyStores
                      operation. \n The response includes the custom key store ID
                      and the ID of the AWS CloudHSM cluster. \n This operation is
                      part of the Custom Key Store feature (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html)
                      feature in AWS KMS, which combines the convenience and extensive
                      integration of AWS KMS with the isolation and control of a single-tenant
                      key store."
                    type: string
                  customerMasterKeySpec:
                    description: "Specifies the type of CMK to create. The default
                      value, SYMMETRIC_DEFAULT, creates a CMK with a 256-bit symmetric
                      key for encryption and decryption. For help choosing a key spec
                      for your CMK, see How to Choose Your CMK Configuration (https://docs.aws.amazon.com/kms/latest/developerguide/symm-asymm-choose.html)
                      in the AWS Key Management Service Developer Guide. \n The CustomerMasterKeySpec
                      determines whether the CMK contains a symmetric key or an asymmetric
                      key pair. It also determines the encryption algorithms or signing
                      algorithms that the CMK supports. You can't change the CustomerMasterKeySpec
                      after the CMK is created. To further restrict the algorithms
                      that can be used with the CMK, use a condition key in its key
                      policy or IAM policy. For more information, see kms:EncryptionAlgorithm
                      (https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-encryption-algorithm)
                      or kms:Signing Algorithm (https://docs.aws.amazon.com/kms/latest/developerguide/policy-conditions.html#conditions-kms-signing-algorithm)
                      in the AWS Key Management Service Developer Guide. \n AWS services
                      that are integrated with AWS KMS (http://aws.amazon.com/kms/features/#AWS_Service_Integration)
                      use symmetric CMKs to protect your data. These services do not
                      support asymmetric CMKs. For help determining whether a CMK
                      is symmetric or asymmetric, see Identifying Symmetric and Asymmetric
                      CMKs (https://docs.aws.amazon.com/kms/latest/developerguide/find-symm-asymm.html)
                      in the AWS Key Management Service Developer Guide. \n AWS KMS
                      supports the following key specs for CMKs: \n    * Symmetric
                      key (default) SYMMETRIC_DEFAULT (AES-256-GCM) \n    * Asymmetric
                      RSA key pairs RSA_2048 RSA_3072 RSA_4096 \n    * Asymmetric
                      NIST-recommended elliptic curve key pairs ECC_NIST_P256 (secp256r1)
                      \   ECC_NIST_P384 (secp384r1) ECC_NIST_P521 (secp521r1) \n    *
                      Other asymmetric elliptic curve key pairs ECC_SECG_P256K1 (secp256k1),
                      \   commonly used for cryptocurrencies."
                    type: string
                  description:
                    description: "A description of the CMK. \n Use a description that
                      helps you decide whether the CMK is appropriate for a task."
                    type: string
                  enabled:
                    description: Specifies whether the CMK is enabled.
                    type: boolean
                  keyUsage:
                    description: "Determines the cryptographic operations (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#cryptographic-operations)
                      for which you can use the CMK. The default value is ENCRYPT_DECRYPT.
                      This parameter is required only for asymmetric CMKs. You can't
                      change the KeyUsage value after the CMK is created. \n Select
                      only one valid value. \n    * For symmetric CMKs, omit the parameter
                      or specify ENCRYPT_DECRYPT. \n    * For asymmetric CMKs with
                      RSA key material, specify ENCRYPT_DECRYPT or    SIGN_VERIFY.
                      \n    * For asymmetric CMKs with ECC key material, specify SIGN_VERIFY."
                    type: string
                  origin:
                    description: "The source of the key material for the CMK. You
                      cannot change the origin after you create the CMK. The default
                      is AWS_KMS, which means AWS KMS creates the key material. \n
                      When the parameter value is EXTERNAL, AWS KMS creates a CMK
                      without key material so that you can import key material from
                      your existing key management infrastructure. For more information
                      about importing key material into AWS KMS, see Importing Key
                      Material (https://docs.aws.amazon.com/kms/latest/developerguide/importing-keys.html)
                      in the AWS Key Management Service Developer Guide. This value
                      is valid only for symmetric CMKs. \n When the parameter value
                      is AWS_CLOUDHSM, AWS KMS creates the CMK in an AWS KMS custom
                      key store (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html)
                      and creates its key material in the associated AWS CloudHSM
                      cluster. You must also use the CustomKeyStoreId parameter to
                      identify the custom key store. This value is valid only for
                      symmetric CMKs."
                    type: string
                  pendingWindowInDays:
                    description: Specifies how many days the Key is retained when
                      scheduled for deletion. Defaults to 30 days.
                    format: int64
                    type: integer
                  policy:
                    description: "The key policy to attach to the CMK. \n If you provide
                      a key policy, it must meet the following criteria: \n    * If
                      you don't set BypassPolicyLockoutSafetyCheck to true, the key
                      policy    must allow the principal that is making the CreateKey
                      request to make    a subsequent PutKeyPolicy request on the
                      CMK. This reduces the risk that    the CMK becomes unmanageable.
                      For more information, refer to the scenario    in the Default
                      Key Policy (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default-allow-root-enable-iam)
                      \   section of the AWS Key Management Service Developer Guide
                      . \n    * Each statement in the key policy must contain one
                      or more principals.    The principals in the key policy must
                      exist and be visible to AWS KMS.    When you create a new AWS
                      principal (for example, an IAM user or role),    you might need
                      to enforce a delay before including the new principal in    a
                      key policy because the new principal might not be immediately
                      visible    to AWS KMS. For more information, see Changes that
                      I make are not always    immediately visible (https://docs.aws.amazon.com/IAM/latest/UserGuide/troubleshoot_general.html#troubleshoot_general_eventual-consistency)
                      \   in the AWS Identity and Access Management User Guide. \n
                      If you do not provide a key policy, AWS KMS attaches a default
                      key policy to the CMK. For more information, see Default Key
                      Policy (https://docs.aws.amazon.com/kms/latest/developerguide/key-policies.html#key-policy-default)
                      in the AWS Key Management Service Developer Guide. \n The key
                      policy size quota is 32 kilobytes (32768 bytes). \n For help
                      writing and formatting a JSON policy document, see the IAM JSON
                      Policy Reference (https://docs.aws.amazon.com/IAM/latest/UserGuide/reference_policies.html)
                      in the IAM User Guide ."
                    type: string
                  region:
                    description: Region is which region the Key will be created.
                    type: string
                  tags:
                    description: "One or more tags. Each tag consists of a tag key
                      and a tag value. Both the tag key and the tag value are required,
                      but the tag value can be an empty (null) string. \n When you
                      add tags to an AWS resource, AWS generates a cost allocation
                      report with usage and costs aggregated by tags. For information
                      about adding, changing, deleting and listing tags for CMKs,
                      see Tagging Keys (https://docs.aws.amazon.com/kms/latest/developerguide/tagging-keys.html).
                      \n Use this parameter to tag the CMK when it is created. To
                      add tags to an existing CMK, use the TagResource operation.
                      \n To use this parameter, you must have kms:TagResource (https://docs.aws.amazon.com/kms/latest/developerguide/kms-api-permissions-reference.html)
                      permission in an IAM policy."
                    items:
                      properties:
                        tagKey:
                          type: string
                        tagValue:
                          type: string
                      type: object
                    type: array
                required:
                - region
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: KeyStatus defines the observed state of Key.
            properties:
              atProvider:
                description: KeyObservation defines the observed state of Key
                properties:
                  arn:
                    description: The Amazon Resource Name (ARN) of the CMK. For examples,
                      see AWS Key Management Service (AWS KMS) (https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html#arn-syntax-kms)
                      in the Example ARNs section of the AWS General Reference.
                    type: string
                  awsAccountID:
                    description: The twelve-digit account ID of the AWS account that
                      owns the CMK.
                    type: string
                  cloudHsmClusterID:
                    description: The cluster ID of the AWS CloudHSM cluster that contains
                      the key material for the CMK. When you create a CMK in a custom
                      key store (https://docs.aws.amazon.com/kms/latest/developerguide/custom-key-store-overview.html),
                      AWS KMS creates the key material for the CMK in the associated
                      AWS CloudHSM cluster. This value is present only when the CMK
                      is created in a custom key store.
                    type: string
                  creationDate:
                    description: The date and time when the CMK was created.
                    format: date-time
                    type: string
                  deletionDate:
                    description: The date and time after which AWS KMS deletes the
                      CMK. This value is present only when KeyState is PendingDeletion.
                    format: date-time
                    type: string
                  enabled:
                    description: Specifies whether the CMK is enabled. When KeyState
                      is Enabled this value is true, otherwise it is false.
                    type: boolean
                  encryptionAlgorithms:
                    description: "The encryption algorithms that the CMK supports.
                      You cannot use the CMK with other encryption algorithms within
                      AWS KMS. \n This field appears only when the KeyUsage of the
                      CMK is ENCRYPT_DECRYPT."
                    items:
                      type: string
                    type: array
                  expirationModel:
                    description: Specifies whether the CMK's key material expires.
                      This value is present only when Origin is EXTERNAL, otherwise
                      this value is omitted.
                    type: string
                  keyID:
                    description: The globally unique identifier for the CMK.
                    type: string
                  keyManager:
                    description: The manager of the CMK. CMKs in your AWS account
                      are either customer managed or AWS managed. For more information
                      about the difference, see Customer Master Keys (https://docs.aws.amazon.com/kms/latest/developerguide/concepts.html#master_keys)
                      in the AWS Key Management Service Developer Guide.
                    type: string
                  keyState:
                    description: "The current status of the CMK. \n For more information
                      about how key state affects the use of a CMK, see Key state:
                      Effect on your CMK (https://docs.aws.amazon.com/kms/latest/developerguide/key-state.html)
                      in the AWS Key Management Service Developer Guide."
                    type: string
                  signingAlgorithms:
                    description: "The signing algorithms that the CMK supports. You
                      cannot use the CMK with other signing algorithms within AWS
                      KMS. \n This field appears only when the KeyUsage of the CMK
                      is SIGN_VERIFY."
                    items:
                      type: string
                    type: array
                  validTo:
                    description: The time at which the imported key material expires.
                      When the key material expires, AWS KMS deletes the key material
                      and the CMK becomes unusable. This value is present only for
                      CMKs whose Origin is EXTERNAL and whose ExpirationModel is KEY_MATERIAL_EXPIRES,
                      otherwise this value is omitted.
                    format: date-time
                    type: string
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
