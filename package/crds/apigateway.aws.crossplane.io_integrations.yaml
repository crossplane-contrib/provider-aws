---
apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.8.0
  creationTimestamp: null
  name: integrations.apigateway.aws.crossplane.io
spec:
  group: apigateway.aws.crossplane.io
  names:
    categories:
    - crossplane
    - managed
    - aws
    kind: Integration
    listKind: IntegrationList
    plural: integrations
    singular: integration
  scope: Cluster
  versions:
  - additionalPrinterColumns:
    - jsonPath: .status.conditions[?(@.type=='Ready')].status
      name: READY
      type: string
    - jsonPath: .status.conditions[?(@.type=='Synced')].status
      name: SYNCED
      type: string
    - jsonPath: .metadata.annotations.crossplane\.io/external-name
      name: EXTERNAL-NAME
      type: string
    name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Integration is the Schema for the Integrations API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: IntegrationSpec defines the desired state of Integration
            properties:
              deletionPolicy:
                default: Delete
                description: DeletionPolicy specifies what will happen to the underlying
                  external when this managed resource is deleted - either "Delete"
                  or "Orphan" the external resource.
                enum:
                - Orphan
                - Delete
                type: string
              forProvider:
                description: IntegrationParameters defines the desired state of Integration
                properties:
                  cacheKeyParameters:
                    description: A list of request parameters whose values API Gateway
                      caches. To be valid values for cacheKeyParameters, these parameters
                      must also be specified for Method requestParameters.
                    items:
                      type: string
                    type: array
                  cacheNamespace:
                    description: Specifies a group of related cached parameters. By
                      default, API Gateway uses the resource ID as the cacheNamespace.
                      You can specify the same cacheNamespace across resources to
                      return the same cached data for requests to different resources.
                    type: string
                  connectionID:
                    description: The (id (https://docs.aws.amazon.com/apigateway/api-reference/resource/vpc-link/#id))
                      of the VpcLink used for the integration when connectionType=VPC_LINK
                      and undefined, otherwise.
                    type: string
                  connectionType:
                    description: The type of the network connection to the integration
                      endpoint. The valid value is INTERNET for connections through
                      the public routable internet or VPC_LINK for private connections
                      between API Gateway and a network load balancer in a VPC. The
                      default value is INTERNET.
                    type: string
                  contentHandling:
                    description: "Specifies how to handle request payload content
                      type conversions. Supported values are CONVERT_TO_BINARY and
                      CONVERT_TO_TEXT, with the following behaviors: \n * CONVERT_TO_BINARY:
                      Converts a request payload from a Base64-encoded string to the
                      corresponding binary blob. \n * CONVERT_TO_TEXT: Converts a
                      request payload from a binary blob to a Base64-encoded string.
                      \n If this property is not defined, the request payload will
                      be passed through from the method request to integration request
                      without modification, provided that the passthroughBehavior
                      is configured to support payload pass-through."
                    type: string
                  credentials:
                    description: Specifies whether credentials are required for a
                      put integration.
                    type: string
                  httpMethod:
                    description: '[Required] Specifies a put integration request''s
                      HTTP method.'
                    type: string
                  integrationHTTPMethod:
                    description: Specifies a put integration HTTP method. When the
                      integration type is HTTP or AWS, this field is required.
                    type: string
                  passthroughBehavior:
                    description: "Specifies the pass-through behavior for incoming
                      requests based on the Content-Type header in the request, and
                      the available mapping templates specified as the requestTemplates
                      property on the Integration resource. There are three valid
                      values: WHEN_NO_MATCH, WHEN_NO_TEMPLATES, and NEVER. \n * WHEN_NO_MATCH
                      passes the request body for unmapped content types through to
                      the integration back end without transformation. \n * NEVER
                      rejects unmapped content types with an HTTP 415 'Unsupported
                      Media Type' response. \n * WHEN_NO_TEMPLATES allows pass-through
                      when the integration has NO content types mapped to templates.
                      However if there is at least one content type defined, unmapped
                      content types will be rejected with the same 415 response."
                    type: string
                  region:
                    description: Region is which region the Integration will be created.
                    type: string
                  requestParameters:
                    additionalProperties:
                      type: string
                    description: A key-value map specifying request parameters that
                      are passed from the method request to the back end. The key
                      is an integration request parameter name and the associated
                      value is a method request parameter value or static value that
                      must be enclosed within single quotes and pre-encoded as required
                      by the back end. The method request parameter value must match
                      the pattern of method.request.{location}.{name}, where location
                      is querystring, path, or header and name must be a valid and
                      unique method request parameter name.
                    type: object
                  requestTemplates:
                    additionalProperties:
                      type: string
                    description: Represents a map of Velocity templates that are applied
                      on the request payload based on the value of the Content-Type
                      header sent by the client. The content type value is the key
                      in this map, and the template (as a String) is the value.
                    type: object
                  resourceId:
                    description: ResourceID is the ID for the Resource.
                    type: string
                  resourceIdRef:
                    description: ResourceIDRef is a reference to an Parent used to
                      set the ResourceID.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  resourceIdSelector:
                    description: ResourceIDSelector selects references to Parent used
                      to set the ResourceID.
                    properties:
                      matchControllerRef:
                        description: MatchControllerRef ensures an object with the
                          same controller reference as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                  restApiId:
                    description: RestAPIID is the ID for the RestAPI.
                    type: string
                  restApiIdRef:
                    description: RestAPIIDRef is a reference to an RestAPI used to
                      set the RestAPIID.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  restApiIdSelector:
                    description: RestApiIdSelector selects references to RestAPI used
                      to set the RestAPIID.
                    properties:
                      matchControllerRef:
                        description: MatchControllerRef ensures an object with the
                          same controller reference as the selecting object is selected.
                        type: boolean
                      matchLabels:
                        additionalProperties:
                          type: string
                        description: MatchLabels ensures an object with matching labels
                          is selected.
                        type: object
                      policy:
                        description: Policies for selection.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    type: object
                  timeoutInMillis:
                    description: Custom timeout between 50 and 29,000 milliseconds.
                      The default value is 29,000 milliseconds or 29 seconds.
                    format: int64
                    type: integer
                  tlsConfig:
                    properties:
                      insecureSkipVerification:
                        type: boolean
                    type: object
                  type_:
                    description: '[Required] Specifies a put integration input''s
                      type.'
                    type: string
                  uri:
                    description: "Specifies Uniform Resource Identifier (URI) of the
                      integration endpoint. \n * For HTTP or HTTP_PROXY integrations,
                      the URI must be a fully formed, encoded HTTP(S) URL according
                      to the RFC-3986 specification (https://en.wikipedia.org/wiki/Uniform_Resource_Identifier),
                      for either standard integration, where connectionType is not
                      VPC_LINK, or private integration, where connectionType is VPC_LINK.
                      For a private HTTP integration, the URI is not used for routing.
                      \n * For AWS or AWS_PROXY integrations, the URI is of the form
                      arn:aws:apigateway:{region}:{subdomain.service|service}:path|action/{service_api}.
                      Here, {Region} is the API Gateway region (e.g., us-east-1);
                      {service} is the name of the integrated AWS service (e.g., s3);
                      and {subdomain} is a designated subdomain supported by certain
                      AWS service for fast host-name lookup. action can be used for
                      an AWS service action-based API, using an Action={name}&{p1}={v1}&p2={v2}...
                      query string. The ensuing {service_api} refers to a supported
                      action {name} plus any required input parameters. Alternatively,
                      path can be used for an AWS service path-based API. The ensuing
                      service_api refers to the path to an AWS service resource, including
                      the region of the integrated AWS service, if applicable. For
                      example, for integration with the S3 API of GetObject (https://docs.aws.amazon.com/AmazonS3/latest/API/RESTObjectGET.html),
                      the uri can be either arn:aws:apigateway:us-west-2:s3:action/GetObject&Bucket={bucket}&Key={key}
                      or arn:aws:apigateway:us-west-2:s3:path/{bucket}/{key}"
                    type: string
                required:
                - httpMethod
                - region
                - type_
                type: object
              providerConfigRef:
                default:
                  name: default
                description: ProviderConfigReference specifies how the provider that
                  will be used to create, observe, update, and delete this managed
                  resource should be configured.
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              providerRef:
                description: 'ProviderReference specifies the provider that will be
                  used to create, observe, update, and delete this managed resource.
                  Deprecated: Please use ProviderConfigReference, i.e. `providerConfigRef`'
                properties:
                  name:
                    description: Name of the referenced object.
                    type: string
                  policy:
                    description: Policies for referencing.
                    properties:
                      resolution:
                        default: Required
                        description: Resolution specifies whether resolution of this
                          reference is required. The default is 'Required', which
                          means the reconcile will fail if the reference cannot be
                          resolved. 'Optional' means this reference will be a no-op
                          if it cannot be resolved.
                        enum:
                        - Required
                        - Optional
                        type: string
                      resolve:
                        description: Resolve specifies when this reference should
                          be resolved. The default is 'IfNotPresent', which will attempt
                          to resolve the reference only when the corresponding field
                          is not present. Use 'Always' to resolve the reference on
                          every reconcile.
                        enum:
                        - Always
                        - IfNotPresent
                        type: string
                    type: object
                required:
                - name
                type: object
              publishConnectionDetailsTo:
                description: PublishConnectionDetailsTo specifies the connection secret
                  config which contains a name, metadata and a reference to secret
                  store config to which any connection details for this managed resource
                  should be written. Connection details frequently include the endpoint,
                  username, and password required to connect to the managed resource.
                properties:
                  configRef:
                    default:
                      name: default
                    description: SecretStoreConfigRef specifies which secret store
                      config should be used for this ConnectionSecret.
                    properties:
                      name:
                        description: Name of the referenced object.
                        type: string
                      policy:
                        description: Policies for referencing.
                        properties:
                          resolution:
                            default: Required
                            description: Resolution specifies whether resolution of
                              this reference is required. The default is 'Required',
                              which means the reconcile will fail if the reference
                              cannot be resolved. 'Optional' means this reference
                              will be a no-op if it cannot be resolved.
                            enum:
                            - Required
                            - Optional
                            type: string
                          resolve:
                            description: Resolve specifies when this reference should
                              be resolved. The default is 'IfNotPresent', which will
                              attempt to resolve the reference only when the corresponding
                              field is not present. Use 'Always' to resolve the reference
                              on every reconcile.
                            enum:
                            - Always
                            - IfNotPresent
                            type: string
                        type: object
                    required:
                    - name
                    type: object
                  metadata:
                    description: Metadata is the metadata for connection secret.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        description: Annotations are the annotations to be added to
                          connection secret. - For Kubernetes secrets, this will be
                          used as "metadata.annotations". - It is up to Secret Store
                          implementation for others store types.
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        description: Labels are the labels/tags to be added to connection
                          secret. - For Kubernetes secrets, this will be used as "metadata.labels".
                          - It is up to Secret Store implementation for others store
                          types.
                        type: object
                      type:
                        description: Type is the SecretType for the connection secret.
                          - Only valid for Kubernetes Secret Stores.
                        type: string
                    type: object
                  name:
                    description: Name is the name of the connection secret.
                    type: string
                required:
                - name
                type: object
              writeConnectionSecretToRef:
                description: WriteConnectionSecretToReference specifies the namespace
                  and name of a Secret to which any connection details for this managed
                  resource should be written. Connection details frequently include
                  the endpoint, username, and password required to connect to the
                  managed resource. This field is planned to be replaced in a future
                  release in favor of PublishConnectionDetailsTo. Currently, both
                  could be set independently and connection details would be published
                  to both without affecting each other.
                properties:
                  name:
                    description: Name of the secret.
                    type: string
                  namespace:
                    description: Namespace of the secret.
                    type: string
                required:
                - name
                - namespace
                type: object
            required:
            - forProvider
            type: object
          status:
            description: IntegrationStatus defines the observed state of Integration.
            properties:
              atProvider:
                description: IntegrationObservation defines the observed state of
                  Integration
                type: object
              conditions:
                description: Conditions of the resource.
                items:
                  description: A Condition that may apply to a resource.
                  properties:
                    lastTransitionTime:
                      description: LastTransitionTime is the last time this condition
                        transitioned from one status to another.
                      format: date-time
                      type: string
                    message:
                      description: A Message containing details about this condition's
                        last transition from one status to another, if any.
                      type: string
                    reason:
                      description: A Reason for this condition's last transition from
                        one status to another.
                      type: string
                    status:
                      description: Status of this condition; is it currently True,
                        False, or Unknown?
                      type: string
                    type:
                      description: Type of this condition. At most one of each condition
                        type may apply to a resource at any point in time.
                      type: string
                  required:
                  - lastTransitionTime
                  - reason
                  - status
                  - type
                  type: object
                type: array
            type: object
        required:
        - spec
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
