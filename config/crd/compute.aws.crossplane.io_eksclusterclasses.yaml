
---
apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.2.4
  creationTimestamp: null
  name: eksclusterclasses.compute.aws.crossplane.io
spec:
  additionalPrinterColumns:
  - JSONPath: .specTemplate.providerRef.name
    name: PROVIDER-REF
    type: string
  - JSONPath: .specTemplate.reclaimPolicy
    name: RECLAIM-POLICY
    type: string
  - JSONPath: .metadata.creationTimestamp
    name: AGE
    type: date
  group: compute.aws.crossplane.io
  names:
    kind: EKSClusterClass
    listKind: EKSClusterClassList
    plural: eksclusterclasses
    singular: eksclusterclass
  scope: Cluster
  subresources: {}
  validation:
    openAPIV3Schema:
      description: An EKSClusterClass is a resource class. It defines the desired
        spec of resource claims that use it to dynamically provision a managed resource.
      properties:
        apiVersion:
          description: 'APIVersion defines the versioned schema of this representation
            of an object. Servers should convert recognized schemas to the latest
            internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
          type: string
        kind:
          description: 'Kind is a string value representing the REST resource this
            object represents. Servers may infer this from the endpoint the client
            submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
          type: string
        metadata:
          type: object
        specTemplate:
          description: SpecTemplate is a template for the spec of a dynamically provisioned
            EKSCluster.
          properties:
            clusterVersion:
              description: 'ClusterVersion: The desired Kubernetes version of this
                EKS Cluster. If you do not specify a value here, the latest version
                available is used.'
              type: string
            customSubnetIdRefs:
              description: CustomSubnetIDRefs is a set of referencers that each retrieve
                the subnetID from the referenced Subnet
              items:
                description: CustomSubnetIDReferencerForEKSCluster is an attribute
                  referencer that resolves SubnetID from a referenced Subnet
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              type: array
            customSubnetIds:
              description: SubnetIDs for custom network of this EKS cluster.
              items:
                type: string
              type: array
            mapRoles:
              description: MapRoles map AWS roles to one or more Kubernetes groups.
                A Default role that allows nodes access to communicate with master
                is autogenerated when a node pool comes online.
              items:
                description: MapRole maps an AWS IAM role to one or more Kubernetes
                  groups. See https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html
                  and https://github.com/kubernetes-sigs/aws-iam-authenticator/blob/master/README.md
                properties:
                  groups:
                    description: Groups (in Kubernetes) the RoleARN should map to.
                    items:
                      type: string
                    type: array
                  rolearn:
                    description: RoleARN to match, e.g. 'arn:aws:iam::000000000000:role/KubernetesNode'.
                    type: string
                  username:
                    description: Username (in Kubernetes) the RoleARN should map to.
                    type: string
                required:
                - groups
                - rolearn
                - username
                type: object
              type: array
            mapUsers:
              description: MapUsers map AWS users to one or more Kubernetes groups.
              items:
                description: MapUser maps an AWS IAM user to one or more Kubernetes
                  groups. See https://docs.aws.amazon.com/eks/latest/userguide/add-user-role.html
                  and https://github.com/kubernetes-sigs/aws-iam-authenticator/blob/master/README.md
                properties:
                  groups:
                    description: Groups (in Kubernetes) the UserARN should map to.
                    items:
                      type: string
                    type: array
                  userarn:
                    description: UserARN to match, e.g. 'arn:aws:iam::000000000000:user/Alice'
                    type: string
                  username:
                    description: Username (in Kubernetes) the UserARN should map to.
                    type: string
                required:
                - groups
                - userarn
                - username
                type: object
              type: array
            providerRef:
              description: ProviderReference specifies the provider that will be used
                to create, observe, update, and delete managed resources that are
                dynamically provisioned using this resource class.
              properties:
                apiVersion:
                  description: API version of the referent.
                  type: string
                fieldPath:
                  description: 'If referring to a piece of an object instead of an
                    entire object, this string should contain a valid JSON/Go field
                    access statement, such as desiredState.manifest.containers[2].
                    For example, if the object reference is to a container within
                    a pod, this would take on a value like: "spec.containers{name}"
                    (where "name" refers to the name of the container that triggered
                    the event) or if no container name is specified "spec.containers[2]"
                    (container with index 2 in this pod). This syntax is chosen only
                    to have some well-defined way of referencing a part of an object.
                    TODO: this design is not final and this field is subject to change
                    in the future.'
                  type: string
                kind:
                  description: 'Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
                  type: string
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                  type: string
                namespace:
                  description: 'Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/'
                  type: string
                resourceVersion:
                  description: 'Specific resourceVersion to which this reference is
                    made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency'
                  type: string
                uid:
                  description: 'UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids'
                  type: string
              type: object
            reclaimPolicy:
              description: ReclaimPolicy specifies what will happen to managed resources
                dynamically provisioned using this class when their resource claims
                are deleted, and what will happen to their underlying external resource
                when they are deleted. The "Delete" policy causes the managed resource
                to be deleted when its bound resource claim is deleted, and in turn
                causes the external resource to be deleted when its managed resource
                is deleted. The "Retain" policy causes the managed resource to be
                retained, in binding phase "Released", when its resource claim is
                deleted, and in turn causes the external resource to be retained when
                its managed resource is deleted. The "Retain" policy is used when
                no policy is specified, however the "Delete" policy is set at dynamic
                provisioning time if no policy is set.
              enum:
              - Retain
              - Delete
              type: string
            region:
              description: Region for this EKS Cluster.
              type: string
            roleARN:
              description: 'RoleARN: The Amazon Resource Name (ARN) of the IAM role
                that provides permis sions for Amazon EKS to make calls to other AWS  API  operations
                on your behalf. For more information, see ''Amazon EKS Service IAM
                Role'' in the Amazon EKS User Guide.'
              type: string
            roleARNRef:
              description: RoleARNRef references to an IAMRole to retrieve its ARN
              properties:
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?'
                  type: string
              type: object
            securityGroupIdRefs:
              description: SecurityGroupIDRefs is a set of referencers that each retrieve
                the ID from the referenced SecurityGroup
              items:
                description: SecurityGroupIDReferencerForEKSCluster is an attribute
                  referencer that resolves ID from a referenced SecurityGroup
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              type: array
            securityGroupIds:
              description: SecurityGroupIDs of this EKS cluster.
              items:
                type: string
              type: array
            subnetIdRefs:
              description: SubnetIDRefs is a set of referencers that each retrieve
                the subnetID from the referenced Subnet
              items:
                description: SubnetIDReferencerForEKSCluster is an attribute referencer
                  that resolves SubnetID from a referenced Subnet
                properties:
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                type: object
              type: array
            subnetIds:
              description: SubnetIDs of this EKS cluster.
              items:
                type: string
              type: array
            vpcId:
              description: VPCID is the ID of the VPC.
              type: string
            vpcIdRef:
              description: VPCIDRef references to a VPC to and retrieves its vpcId
              properties:
                name:
                  description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                    TODO: Add other useful fields. apiVersion, kind, uid?'
                  type: string
              type: object
            workerNodes:
              description: WorkerNodes configuration for cloudformation
              properties:
                bootstrapArguments:
                  description: BootstrapArguments to pass to the bootstrap script.
                    See files/bootstrap.sh in https://github.com/awslabs/amazon-eks-ami
                  type: string
                clusterControlPlaneSecurityGroup:
                  description: ClusterControlPlaneSecurityGroup configures the security
                    group of the cluster control plane in order to allow communication
                    to this node group.
                  type: string
                clusterControlPlaneSecurityGroupRef:
                  description: ClusterControlPlaneSecurityGroupRef references to a
                    SecurityGroup to retrieve its ID
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                keyName:
                  description: KeyName of the EC2 Key Pair to allow SSH access to
                    the EC2 instances.
                  type: string
                nodeAutoScalingGroupMaxSize:
                  description: NodeAutoScalingGroupMaxSize configures the maximum
                    size of this node group's Autoscaling Group. Defaults to 3.
                  type: integer
                nodeAutoScalingGroupMinSize:
                  description: NodeAutoScalingGroupMinSize configures the minimum
                    size of this node group's Autoscaling Group. Defaults to 1.
                  type: integer
                nodeGroupName:
                  description: NodeGroupName is a unique identifier for the Node Group.
                  type: string
                nodeImageId:
                  description: NodeImageId that the EC2 instances should run. Defaults
                    to the region's standard AMI.
                  type: string
                nodeInstanceType:
                  description: NodeInstanceType of the EC2 instances.
                  enum:
                  - t2.small
                  - t2.medium
                  - t2.large
                  - t2.xlarge
                  - t2.2xlarge
                  - t3.nano
                  - t3.micro
                  - t3.small
                  - t3.medium
                  - t3.large
                  - t3.xlarge
                  - t3.2xlarge
                  - m3.medium
                  - m3.large
                  - m3.xlarge
                  - m3.2xlarge
                  - m4.large
                  - m4.xlarge
                  - m4.2xlarge
                  - m4.4xlarge
                  - m4.10xlarge
                  - m5.large
                  - m5.xlarge
                  - m5.2xlarge
                  - m5.4xlarge
                  - m5.12xlarge
                  - m5.24xlarge
                  - c4.large
                  - c4.xlarge
                  - c4.2xlarge
                  - c4.4xlarge
                  - c4.8xlarge
                  - c5.large
                  - c5.xlarge
                  - c5.2xlarge
                  - c5.4xlarge
                  - c5.9xlarge
                  - c5.18xlarge
                  - i3.large
                  - i3.xlarge
                  - i3.2xlarge
                  - i3.4xlarge
                  - i3.8xlarge
                  - i3.16xlarge
                  - r3.xlarge
                  - r3.2xlarge
                  - r3.4xlarge
                  - r3.8xlarge
                  - r4.large
                  - r4.xlarge
                  - r4.2xlarge
                  - r4.4xlarge
                  - r4.8xlarge
                  - r4.16xlarge
                  - x1.16xlarge
                  - x1.32xlarge
                  - p2.xlarge
                  - p2.8xlarge
                  - p2.16xlarge
                  - p3.2xlarge
                  - p3.8xlarge
                  - p3.16xlarge
                  - r5.large
                  - r5.xlarge
                  - r5.2xlarge
                  - r5.4xlarge
                  - r5.12xlarge
                  - r5.24xlarge
                  - r5d.large
                  - r5d.xlarge
                  - r5d.2xlarge
                  - r5d.4xlarge
                  - r5d.12xlarge
                  - r5d.24xlarge
                  - z1d.large
                  - z1d.xlarge
                  - z1d.2xlarge
                  - z1d.3xlarge
                  - z1d.6xlarge
                  - z1d.12xlarge
                  type: string
                nodeVolumeSize:
                  description: NodeVolumeSize configures the volume size in GB. Defaults
                    to 20.
                  type: integer
              required:
              - nodeInstanceType
              type: object
            writeConnectionSecretsToNamespace:
              description: WriteConnectionSecretsToNamespace specifies the namespace
                in which the connection secrets of managed resources dynamically provisioned
                using this claim will be created.
              type: string
          required:
          - providerRef
          - region
          - workerNodes
          - writeConnectionSecretsToNamespace
          type: object
      required:
      - specTemplate
      type: object
  version: v1alpha3
  versions:
  - name: v1alpha3
    served: true
    storage: true
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []
